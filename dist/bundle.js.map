{"version":3,"file":"bundle.js","sources":["../../../box2d/src/common/b2Settings.ts","../../../box2d/src/common/b2Math.ts","../../../box2d/src/collision/b2Distance.ts","../../../box2d/src/collision/b2Collision.ts","../../../box2d/src/collision/b2DynamicTree.ts","../../../box2d/src/collision/b2BroadPhase.ts","../../../box2d/src/collision/b2TimeOfImpact.ts","../../../box2d/src/collision/b2CollideCircle.ts","../../../box2d/src/collision/b2CollidePolygon.ts","../../../box2d/src/collision/b2CollideEdge.ts","../../../box2d/src/collision/shapes/b2PolygonShape.ts","../../../box2d/src/dynamics/contacts/b2Contact.ts","../../../box2d/src/particle/b2Particle.ts","../../../box2d/src/particle/b2ParticleSystem.ts","../../../box2d/src/dynamics/drawDebugData.ts","../../../testbed/src/Test.ts","../../src/test.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/regexp-sticky-helpers.js","../../src/tests/Segway.ts","../../../box2d/src/common/b2Draw.ts","../../../box2d/src/common/b2Timer.ts","../../../box2d/src/common/b2GrowableStack.ts","../../../box2d/src/collision/shapes/b2Shape.ts","../../../box2d/src/collision/shapes/b2CircleShape.ts","../../../box2d/src/collision/shapes/b2EdgeShape.ts","../../../box2d/src/collision/shapes/b2ChainShape.ts","../../../box2d/src/dynamics/b2Fixture.ts","../../../box2d/src/dynamics/b2Body.ts","../../../box2d/src/dynamics/joints/b2Joint.ts","../../../box2d/src/dynamics/joints/b2DistanceJoint.ts","../../../box2d/src/dynamics/joints/b2AreaJoint.ts","../../../box2d/src/dynamics/joints/b2FrictionJoint.ts","../../../box2d/src/dynamics/joints/b2GearJoint.ts","../../../box2d/src/dynamics/joints/b2MotorJoint.ts","../../../box2d/src/dynamics/joints/b2MouseJoint.ts","../../../box2d/src/dynamics/joints/b2PrismaticJoint.ts","../../../box2d/src/dynamics/joints/b2PulleyJoint.ts","../../../box2d/src/dynamics/joints/b2RevoluteJoint.ts","../../../box2d/src/dynamics/joints/b2RopeJoint.ts","../../../box2d/src/dynamics/joints/b2WeldJoint.ts","../../../box2d/src/dynamics/joints/b2WheelJoint.ts","../../../box2d/src/dynamics/contacts/b2ContactFactory.ts","../../../box2d/src/dynamics/b2WorldCallbacks.ts","../../../box2d/src/dynamics/b2ContactManager.ts","../../../box2d/src/dynamics/b2TimeStep.ts","../../../box2d/src/dynamics/contacts/b2ContactSolver.ts","../../../box2d/src/dynamics/b2Island.ts","../../../box2d/src/common/b2SettingsParticleSystem.ts","../../../box2d/src/particle/b2ParticleGroup.ts","../../../box2d/src/particle/b2StackQueue.ts","../../../box2d/src/particle/b2VoronoiDiagram.ts","../../../box2d/src/dynamics/b2World.ts","../../../box2d/src/controllers/b2Controller.ts","../../../box2d/src/controllers/b2BuoyancyController.ts","../../../box2d/src/rope/b2Rope.ts","../../../testbed/src/DebugDraw.ts","../../../testbed/src/ParticleParameter.ts","../../../testbed/src/FullscreenUI.ts","../../../testbed/src/ParticleEmitter.ts","../../../testbed/src/Main.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/global.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/fails.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/descriptors.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-property-is-enumerable.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/create-property-descriptor.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/classof-raw.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/indexed-object.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/require-object-coercible.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-indexed-object.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/is-object.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-primitive.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/has.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/document-create-element.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/ie8-dom-define.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-get-own-property-descriptor.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/an-object.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-define-property.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/create-non-enumerable-property.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/set-global.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/shared-store.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/inspect-source.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/internal-state.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/native-weak-map.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/shared.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/uid.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/shared-key.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/hidden-keys.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/engine-v8-version.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/redefine.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/path.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/get-built-in.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-integer.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-length.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-absolute-index.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-includes.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-keys-internal.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-get-own-property-names.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/enum-bug-keys.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/object-get-own-property-symbols.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/own-keys.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/copy-constructor-properties.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/is-forced.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/export.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/a-function.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/function-bind-context.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/to-object.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/is-array.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/native-symbol.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/use-symbol-as-uid.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/well-known-symbol.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-species-create.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-iteration.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/engine-user-agent.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-method-has-species-support.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-method-uses-to-length.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.filter.js","../../src/liquidfun/Sandbox.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/regexp-flags.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.regexp.flags.js","../../src/liquidfun/Sparky.ts","../../src/liquidfun/DamBreak.ts","../../src/liquidfun/LiquidTimer.ts","../../src/liquidfun/WaveMachine.ts","../../src/liquidfun/Particles.ts","../../src/liquidfun/Faucet.ts","../../src/liquidfun/DrawingParticles.ts","../../src/liquidfun/Soup.ts","../../src/liquidfun/ParticlesSurfaceTension.ts","../../src/liquidfun/ElasticParticles.ts","../../src/liquidfun/RigidParticles.ts","../../src/liquidfun/MultipleParticleSystems.ts","../../src/liquidfun/Impulse.ts","../../src/liquidfun/SoupStirrer.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/create-property.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.concat.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-method-is-strict.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.index-of.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.splice.js","../../src/liquidfun/Fracker.ts","../../src/liquidfun/Maxwell.ts","../../src/liquidfun/Ramp.ts","../../src/liquidfun/Pointy.ts","../../src/liquidfun/AntiPointy.ts","../../src/liquidfun/CornerCase.ts","../../src/liquidfun/ParticleCollisionFilter.ts","../../src/liquidfun/EyeCandy.ts","../../src/liquidfun/index.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/this-number-value.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/string-repeat.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.number.to-fixed.js","../../src/tests/ShapeCast.ts","../../src/tests/TimeOfImpact.ts","../../src/tests/CharacterCollision.ts","../../src/tests/Tiles.ts","../../src/tests/HeavyOnLight.ts","../../src/tests/HeavyOnLightTwo.ts","../../src/tests/VerticalStack.ts","../../src/tests/BasicSliderCrank.ts","../../src/tests/SliderCrank.ts","../../src/tests/SphereStack.ts","../../src/tests/ConvexHull.ts","../../src/tests/Tumbler.ts","../../src/tests/RayCast.ts","../../src/tests/OneSidedPlatform.ts","../../src/tests/DumpShell.ts","../../src/tests/ApplyForce.ts","../../src/tests/ContinuousTest.ts","../../src/tests/MotorJoint.ts","../../src/tests/Mobile.ts","../../src/tests/MobileBalanced.ts","../../src/tests/ConveyorBelt.ts","../../src/tests/Gears.ts","../../src/tests/VaryingRestitution.ts","../../src/tests/Cantilever.ts","../../src/tests/EdgeTest.ts","../../src/tests/BodyTypes.ts","../../src/tests/ShapeEditing.ts","../../src/tests/Car.ts","../../src/tests/Prismatic.ts","../../src/tests/Revolute.ts","../../src/tests/Pulleys.ts","../../src/tests/PolyShapes.ts","../../src/tests/Web.ts","../../src/tests/RopeJoint.ts","../../src/tests/Pinball.ts","../../src/tests/BulletTest.ts","../../src/tests/Confined.ts","../../src/tests/Pyramid.ts","../../src/tests/TheoJansen.ts","../../src/tests/EdgeShapes.ts","../../src/tests/PolyCollision.ts","../../src/tests/Bridge.ts","../../src/tests/Breakable.ts","../../src/tests/Chain.ts","../../src/tests/CollisionFiltering.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.sort.js","../../src/tests/CollisionProcessing.ts","../../src/tests/CompoundShapes.ts","../../src/tests/DistanceTest.ts","../../src/tests/Dominos.ts","../../src/tests/DynamicTreeTest.ts","../../src/tests/SensorTest.ts","../../src/tests/VaryingFriction.ts","../../src/tests/AddPair.ts","../../src/tests/Skier.ts","../../src/tests/Rope.ts","../../src/tests/MotorJoint2.ts","../../src/tests/BlobTest.ts","../../src/tests/TestCCD.ts","../../src/tests/TestRagdoll.ts","../../src/tests/TestStack.ts","../../src/tests/PyramidTopple.ts","../../src/tests/DominoTower.ts","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/array-for-each.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/es.array.for-each.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/internals/dom-iterables.js","../../../../node_modules/.pnpm/core-js@3.6.5/node_modules/core-js/modules/web.dom-collections.for-each.js","../../src/tests/TopdownCar.ts","../../src/index.ts","../../src/tests/index.ts","../../src/controller/index.ts","../../src/controller/BuoyancyTest.ts"],"sourcesContent":["/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nexport function b2Assert(condition: boolean, message?: string): void {\n  if (!condition) {\n    // debugger;\n    throw new Error(message);\n  }\n}\n\nexport function b2Maybe<T>(value: T | undefined, def: T): T {\n  return value !== undefined ? value : def;\n}\n\nexport const b2_maxFloat = 1e37; // FLT_MAX instead of Number.MAX_VALUE;\nexport const b2_epsilon = 1e-5; // FLT_EPSILON instead of Number.MIN_VALUE;\nexport const b2_epsilon_sq: number = b2_epsilon * b2_epsilon;\nexport const b2_pi: number = Math.PI;\n// export const b2_pi: number = 3.14159265359;\n\n/// @file\n/// Global tuning constants based on meters-kilograms-seconds (MKS) units.\n///\n\n// Collision\n\n/// The maximum number of contact points between two convex shapes. Do\n/// not change this value.\nexport const b2_maxManifoldPoints = 2;\n\n/// The maximum number of vertices on a convex polygon. You cannot increase\n/// this too much because b2BlockAllocator has a maximum object size.\nexport const b2_maxPolygonVertices = 8;\n\n/// This is used to fatten AABBs in the dynamic tree. This allows proxies\n/// to move by a small amount without triggering a tree adjustment.\n/// This is in meters.\nexport const b2_aabbExtension = 0.1;\n\n/// This is used to fatten AABBs in the dynamic tree. This is used to predict\n/// the future position based on the current displacement.\n/// This is a dimensionless multiplier.\nexport const b2_aabbMultiplier = 2;\n\n/// A small length used as a collision and constraint tolerance. Usually it is\n/// chosen to be numerically significant, but visually insignificant.\nexport const b2_linearSlop = 0.008; // 0.005;\n\n/// A small angle used as a collision and constraint tolerance. Usually it is\n/// chosen to be numerically significant, but visually insignificant.\nexport const b2_angularSlop: number = (2 / 180) * b2_pi;\n\n/// The radius of the polygon/edge shape skin. This should not be modified. Making\n/// this smaller means polygons will have an insufficient buffer for continuous collision.\n/// Making it larger may create artifacts for vertex collision.\nexport const b2_polygonRadius: number = 2 * b2_linearSlop;\n\n/// Maximum number of sub-steps per contact in continuous physics simulation.\nexport const b2_maxSubSteps = 8;\n\n// Dynamics\n\n/// Maximum number of contacts to be handled to solve a TOI impact.\nexport const b2_maxTOIContacts = 32;\n\n/// A velocity threshold for elastic collisions. Any collision with a relative linear\n/// velocity below this threshold will be treated as inelastic.\nexport const b2_velocityThreshold = 1;\n\n/// The maximum linear position correction used when solving constraints. This helps to\n/// prevent overshoot.\nexport const b2_maxLinearCorrection = 0.2;\n\n/// The maximum angular position correction used when solving constraints. This helps to\n/// prevent overshoot.\nexport const b2_maxAngularCorrection: number = (8 / 180) * b2_pi;\n\n/// The maximum linear velocity of a body. This limit is very large and is used\n/// to prevent numerical problems. You shouldn't need to adjust this.\nexport const b2_maxTranslation = 2;\nexport const b2_maxTranslationSquared: number = b2_maxTranslation * b2_maxTranslation;\n\n/// The maximum angular velocity of a body. This limit is very large and is used\n/// to prevent numerical problems. You shouldn't need to adjust this.\nexport const b2_maxRotation: number = 0.5 * b2_pi;\nexport const b2_maxRotationSquared: number = b2_maxRotation * b2_maxRotation;\n\n/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so\n/// that overlap is removed in one time step. However using values close to 1 often lead\n/// to overshoot.\nexport const b2_baumgarte = 0.2;\nexport const b2_toiBaumgarte = 0.75;\n\n// Sleep\n\n/// The time that a body must be still before it will go to sleep.\nexport const b2_timeToSleep = 0.5;\n\n/// A body cannot sleep if its linear velocity is above this tolerance.\nexport const b2_linearSleepTolerance = 0.01;\n\n/// A body cannot sleep if its angular velocity is above this tolerance.\nexport const b2_angularSleepTolerance: number = (2 / 180) * b2_pi;\n\n// Memory Allocation\n\n/// Implement this function to use your own memory allocator.\nexport function b2Alloc(size: number): any {\n  return null;\n}\n\n/// If you implement b2Alloc, you should also implement this function.\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function b2Free(mem: any): void {}\n\n/// Logging function.\nexport function b2Log(message: string, ...args: any[]): void {\n  // console.log(message, ...args);\n}\n\n/// Version numbering scheme.\n/// See http://en.wikipedia.org/wiki/Software_versioning\nexport class b2Version {\n  major = 0; ///< significant changes\n  minor = 0; ///< incremental changes\n  revision = 0; ///< bug fixes\n\n  constructor(major = 0, minor = 0, revision = 0) {\n    this.major = major;\n    this.minor = minor;\n    this.revision = revision;\n  }\n\n  toString(): string {\n    return this.major + '.' + this.minor + '.' + this.revision;\n  }\n}\n\n/// Current version.\nexport const b2_version: b2Version = new b2Version(2, 3, 2);\n\nexport const b2_branch = 'master';\nexport const b2_commit = 'fbf51801d80fc389d43dc46524520e89043b6faf';\n\nexport function b2ParseInt(v: string): number {\n  return parseInt(v, 10);\n}\n\nexport function b2ParseUInt(v: string): number {\n  return Math.abs(parseInt(v, 10));\n}\n\nexport function b2MakeArray<T>(length: number, init: (i: number) => T): T[] {\n  const a: T[] = [];\n  for (let i = 0; i < length; ++i) {\n    a[i] = init(i);\n  }\n  return a;\n}\n\nexport function b2MakeNullArray<T>(length: number): Array<T | null> {\n  const a: Array<T | null> = [null];\n  for (let i = 0; i < length; ++i) {\n    a[i] = null;\n  }\n  return a;\n}\n\nexport function b2MakeIntArray(length: number): number[] {\n  const a: number[] = [0];\n  for (let i = 0; i < length; ++i) {\n    a[i] = 0;\n  }\n  return a;\n}\n\nexport function b2MakeNumberArray(length: number): number[] {\n  const a = [NaN];\n  for (let i = 0; i < length; ++i) {\n    a[i] = 0.0;\n  }\n  return a;\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_epsilon, b2_pi, b2Assert } from './b2Settings';\n\nexport const b2_pi_over_180: number = b2_pi / 180;\nexport const b2_180_over_pi: number = 180 / b2_pi;\nexport const b2_two_pi: number = 2 * b2_pi;\n\nexport function b2Abs(x: number) {\n  return x < 0 ? -x : x;\n}\n\nexport function b2AbsInt(x: number) {\n  return x >= 0 ? x : -x;\n}\n\nexport function b2Min(a: number, b: number): number {\n  return a < b ? a : b;\n}\n\nexport function b2Max(a: number, b: number): number {\n  return a > b ? a : b;\n}\n\n// separate for Smi type\nexport function b2MinInt(a: number, b: number): number {\n  return a < b ? a : b;\n}\n\nexport function b2MaxInt(a: number, b: number): number {\n  return a > b ? a : b;\n}\n\nexport function b2Clamp(a: number, lo: number, hi: number): number {\n  return a < lo ? lo : a > hi ? hi : a;\n}\n\nexport function b2ClampInt(a: number, lo: number, hi: number): number {\n  return a < lo ? lo : a > hi ? hi : a;\n}\n\nexport function b2Swap<T>(a: T[], b: T[]): void {\n  !!B2_DEBUG && b2Assert(false);\n  const tmp: T = a[0];\n  a[0] = b[0];\n  b[0] = tmp;\n}\n\n/// This function is used to ensure that a floating point number is\n/// not a NaN or infinity.\nexport const b2IsValid = isFinite;\n\nexport function b2Sq(n: number): number {\n  return n * n;\n}\n\n/// This is a approximate yet fast inverse square-root.\nexport function b2InvSqrt(n: number): number {\n  return 1.0 / Math.sqrt(n);\n}\n\nexport const b2Sqrt = Math.sqrt;\n\nexport const b2Pow = Math.pow;\n\nexport function b2DegToRad(degrees: number): number {\n  return degrees * b2_pi_over_180;\n}\n\nexport function b2RadToDeg(radians: number): number {\n  return radians * b2_180_over_pi;\n}\n\nexport const b2Sin = Math.sin;\nexport const b2Cos = Math.cos;\nexport const b2Acos = Math.acos;\nexport const b2Asin = Math.asin;\nexport const b2Atan2 = Math.atan2;\n\nexport function b2NextPowerOfTwo(x: number): number {\n  x |= (x >> 1) & 0x7fffffff;\n  x |= (x >> 2) & 0x3fffffff;\n  x |= (x >> 4) & 0x0fffffff;\n  x |= (x >> 8) & 0x00ffffff;\n  x |= (x >> 16) & 0x0000ffff;\n  return x + 1;\n}\n\nexport function b2IsPowerOfTwo(x: number): boolean {\n  return x > 0 && (x & (x - 1)) === 0;\n}\n\nexport function b2Random(): number {\n  return Math.random() * 2.0 - 1.0;\n}\n\nexport function b2RandomRange(lo: number, hi: number): number {\n  return (hi - lo) * Math.random() + lo;\n}\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/// A 2D column vector.\nexport class b2Vec2 implements XY {\n  static readonly ZERO: Readonly<b2Vec2> = new b2Vec2(0, 0);\n  static readonly UNITX: Readonly<b2Vec2> = new b2Vec2(1, 0);\n  static readonly UNITY: Readonly<b2Vec2> = new b2Vec2(0, 1);\n\n  static readonly s_t0: b2Vec2 = new b2Vec2();\n  static readonly s_t1: b2Vec2 = new b2Vec2();\n  static readonly s_t2: b2Vec2 = new b2Vec2();\n  static readonly s_t3: b2Vec2 = new b2Vec2();\n\n  x = NaN;\n  y = NaN;\n\n  constructor(x = 0.0, y = 0.0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Clone(): b2Vec2 {\n    return new b2Vec2(this.x, this.y);\n  }\n\n  SetZero(): this {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  Set(x: number, y: number): this {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  Copy(other: XY): this {\n    this.x = other.x;\n    this.y = other.y;\n    return this;\n  }\n\n  SelfAdd(v: XY): this {\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  SelfAddXY(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  SelfSub(v: XY): this {\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  SelfSubXY(x: number, y: number): this {\n    this.x -= x;\n    this.y -= y;\n    return this;\n  }\n\n  SelfMul(s: number): this {\n    this.x *= s;\n    this.y *= s;\n    return this;\n  }\n\n  SelfMulAdd(s: number, v: XY): this {\n    this.x += s * v.x;\n    this.y += s * v.y;\n    return this;\n  }\n\n  SelfMulSub(s: number, v: XY): this {\n    this.x -= s * v.x;\n    this.y -= s * v.y;\n    return this;\n  }\n\n  Dot(v: XY): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  Cross(v: XY): number {\n    return this.x * v.y - this.y * v.x;\n  }\n\n  Length(): number {\n    const x: number = this.x,\n      y: number = this.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  LengthSquared(): number {\n    const x: number = this.x,\n      y: number = this.y;\n    return x * x + y * y;\n  }\n\n  Normalize(): number {\n    const length: number = this.Length();\n    if (length >= b2_epsilon) {\n      const inv_length: number = 1 / length;\n      this.x *= inv_length;\n      this.y *= inv_length;\n    }\n    return length;\n  }\n\n  SelfNormalize(): this {\n    const length: number = this.Length();\n    if (length >= b2_epsilon) {\n      const inv_length: number = 1 / length;\n      this.x *= inv_length;\n      this.y *= inv_length;\n    }\n    return this;\n  }\n\n  SelfRotate(radians: number): this {\n    const c: number = Math.cos(radians);\n    const s: number = Math.sin(radians);\n    const x: number = this.x;\n    this.x = c * x - s * this.y;\n    this.y = s * x + c * this.y;\n    return this;\n  }\n\n  SelfRotateCosSin(c: number, s: number): this {\n    const x: number = this.x;\n    this.x = c * x - s * this.y;\n    this.y = s * x + c * this.y;\n    return this;\n  }\n\n  IsValid(): boolean {\n    return isFinite(this.x) && isFinite(this.y);\n  }\n\n  SelfCrossVS(s: number): this {\n    const x: number = this.x;\n    this.x = s * this.y;\n    this.y = -s * x;\n    return this;\n  }\n\n  SelfCrossSV(s: number): this {\n    const x: number = this.x;\n    this.x = -s * this.y;\n    this.y = s * x;\n    return this;\n  }\n\n  SelfMinV(v: XY): this {\n    this.x = b2Min(this.x, v.x);\n    this.y = b2Min(this.y, v.y);\n    return this;\n  }\n\n  SelfMaxV(v: XY): this {\n    this.x = b2Max(this.x, v.x);\n    this.y = b2Max(this.y, v.y);\n    return this;\n  }\n\n  SelfAbs(): this {\n    this.x = b2Abs(this.x);\n    this.y = b2Abs(this.y);\n    return this;\n  }\n\n  SelfNeg(): this {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  SelfSkew(): this {\n    const x: number = this.x;\n    this.x = -this.y;\n    this.y = x;\n    return this;\n  }\n\n  static MakeArray(length: number): b2Vec2[] {\n    const arr = new Array<b2Vec2>(length);\n    for (let i = 0; i < length; ++i) {\n      arr[i] = new b2Vec2();\n    }\n    return arr;\n  }\n\n  static AbsV<T extends XY>(v: XY, out: T): T {\n    out.x = b2Abs(v.x);\n    out.y = b2Abs(v.y);\n    return out;\n  }\n\n  static MinV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = b2Min(a.x, b.x);\n    out.y = b2Min(a.y, b.y);\n    return out;\n  }\n\n  static MaxV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = b2Max(a.x, b.x);\n    out.y = b2Max(a.y, b.y);\n    return out;\n  }\n\n  static ClampV<T extends XY>(v: XY, lo: XY, hi: XY, out: T): T {\n    out.x = b2Clamp(v.x, lo.x, hi.x);\n    out.y = b2Clamp(v.y, lo.y, hi.y);\n    return out;\n  }\n\n  static RotateV<T extends XY>(v: XY, radians: number, out: T): T {\n    const v_x = v.x;\n    const v_y = v.y;\n    const c = Math.cos(radians);\n    const s = Math.sin(radians);\n    out.x = c * v_x - s * v_y;\n    out.y = s * v_x + c * v_y;\n    return out;\n  }\n\n  static DotVV(a: XY, b: XY): number {\n    return a.x * b.x + a.y * b.y;\n  }\n\n  static CrossVV(a: XY, b: XY): number {\n    return a.x * b.y - a.y * b.x;\n  }\n\n  static CrossVS<T extends XY>(v: XY, s: number, out: T): T {\n    const v_x = v.x;\n    out.x = s * v.y;\n    out.y = -s * v_x;\n    return out;\n  }\n\n  static CrossVOne<T extends XY>(v: XY, out: T): T {\n    const v_x = v.x;\n    out.x = v.y;\n    out.y = -v_x;\n    return out;\n  }\n\n  static CrossSV<T extends XY>(s: number, v: XY, out: T): T {\n    const v_x = v.x;\n    out.x = -s * v.y;\n    out.y = s * v_x;\n    return out;\n  }\n\n  static CrossOneV<T extends XY>(v: XY, out: T): T {\n    const v_x = v.x;\n    out.x = -v.y;\n    out.y = v_x;\n    return out;\n  }\n\n  static AddVV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = a.x + b.x;\n    out.y = a.y + b.y;\n    return out;\n  }\n\n  static SubVV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = a.x - b.x;\n    out.y = a.y - b.y;\n    return out;\n  }\n\n  static MulSV<T extends XY>(s: number, v: XY, out: T): T {\n    out.x = v.x * s;\n    out.y = v.y * s;\n    return out;\n  }\n\n  static MulVS<T extends XY>(v: XY, s: number, out: T): T {\n    out.x = v.x * s;\n    out.y = v.y * s;\n    return out;\n  }\n\n  static AddVMulSV<T extends XY>(a: XY, s: number, b: XY, out: T): T {\n    out.x = a.x + s * b.x;\n    out.y = a.y + s * b.y;\n    return out;\n  }\n\n  static SubVMulSV<T extends XY>(a: XY, s: number, b: XY, out: T): T {\n    out.x = a.x - s * b.x;\n    out.y = a.y - s * b.y;\n    return out;\n  }\n\n  static AddVCrossSV<T extends XY>(a: XY, s: number, v: XY, out: T): T {\n    const v_x: number = v.x;\n    out.x = a.x - s * v.y;\n    out.y = a.y + s * v_x;\n    return out;\n  }\n\n  static MidVV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = (a.x + b.x) * 0.5;\n    out.y = (a.y + b.y) * 0.5;\n    return out;\n  }\n\n  static ExtVV<T extends XY>(a: XY, b: XY, out: T): T {\n    out.x = (b.x - a.x) * 0.5;\n    out.y = (b.y - a.y) * 0.5;\n    return out;\n  }\n\n  static IsEqualToV(a: XY, b: XY): boolean {\n    return a.x === b.x && a.y === b.y;\n  }\n\n  static DistanceVV(a: XY, b: XY): number {\n    const c_x: number = a.x - b.x;\n    const c_y: number = a.y - b.y;\n    return Math.sqrt(c_x * c_x + c_y * c_y);\n  }\n\n  static DistanceSquaredVV(a: XY, b: XY): number {\n    const c_x: number = a.x - b.x;\n    const c_y: number = a.y - b.y;\n    return c_x * c_x + c_y * c_y;\n  }\n\n  static NegV<T extends XY>(v: XY, out: T): T {\n    out.x = -v.x;\n    out.y = -v.y;\n    return out;\n  }\n}\n\nexport const b2Vec2_zero: Readonly<b2Vec2> = new b2Vec2(0, 0);\n\nexport interface XYZ extends XY {\n  z: number;\n}\n\n/// A 2D column vector with 3 elements.\nexport class b2Vec3 implements XYZ {\n  static readonly ZERO: Readonly<b2Vec3> = new b2Vec3(0, 0, 0);\n\n  static readonly s_t0: b2Vec3 = new b2Vec3();\n\n  x = NaN;\n  y = NaN;\n  z = NaN;\n\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Clone(): b2Vec3 {\n    return new b2Vec3(this.x, this.y, this.z);\n  }\n\n  SetZero(): this {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    return this;\n  }\n\n  SetXYZ(x: number, y: number, z: number): this {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  Copy(other: XYZ): this {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    return this;\n  }\n\n  SelfNeg(): this {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  SelfAdd(v: XYZ): this {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  }\n\n  SelfAddXYZ(x: number, y: number, z: number): this {\n    this.x += x;\n    this.y += y;\n    this.z += z;\n    return this;\n  }\n\n  SelfSub(v: XYZ): this {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  }\n\n  SelfSubXYZ(x: number, y: number, z: number): this {\n    this.x -= x;\n    this.y -= y;\n    this.z -= z;\n    return this;\n  }\n\n  SelfMul(s: number): this {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    return this;\n  }\n\n  static DotV3V3(a: XYZ, b: XYZ): number {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  }\n\n  static CrossV3V3<T extends XYZ>(a: XYZ, b: XYZ, out: T): T {\n    const a_x: number = a.x,\n      a_y = a.y,\n      a_z = a.z;\n    const b_x: number = b.x,\n      b_y = b.y,\n      b_z = b.z;\n    out.x = a_y * b_z - a_z * b_y;\n    out.y = a_z * b_x - a_x * b_z;\n    out.z = a_x * b_y - a_y * b_x;\n    return out;\n  }\n}\n\n/// A 2-by-2 matrix. Stored in column-major order.\nexport class b2Mat22 {\n  static readonly IDENTITY: Readonly<b2Mat22> = new b2Mat22();\n\n  readonly ex: b2Vec2 = new b2Vec2(1, 0);\n  readonly ey: b2Vec2 = new b2Vec2(0, 1);\n\n  Clone(): b2Mat22 {\n    return new b2Mat22().Copy(this);\n  }\n\n  static FromVV(c1: XY, c2: XY): b2Mat22 {\n    return new b2Mat22().SetVV(c1, c2);\n  }\n\n  static FromSSSS(r1c1: number, r1c2: number, r2c1: number, r2c2: number): b2Mat22 {\n    return new b2Mat22().SetSSSS(r1c1, r1c2, r2c1, r2c2);\n  }\n\n  static FromAngle(radians: number): b2Mat22 {\n    return new b2Mat22().SetAngle(radians);\n  }\n\n  SetSSSS(r1c1: number, r1c2: number, r2c1: number, r2c2: number): this {\n    this.ex.Set(r1c1, r2c1);\n    this.ey.Set(r1c2, r2c2);\n    return this;\n  }\n\n  SetVV(c1: XY, c2: XY): this {\n    this.ex.Copy(c1);\n    this.ey.Copy(c2);\n    return this;\n  }\n\n  SetAngle(radians: number): this {\n    const c: number = Math.cos(radians);\n    const s: number = Math.sin(radians);\n    this.ex.Set(c, s);\n    this.ey.Set(-s, c);\n    return this;\n  }\n\n  Copy(other: b2Mat22): this {\n    this.ex.Copy(other.ex);\n    this.ey.Copy(other.ey);\n    return this;\n  }\n\n  SetIdentity(): this {\n    this.ex.Set(1, 0);\n    this.ey.Set(0, 1);\n    return this;\n  }\n\n  SetZero(): this {\n    this.ex.SetZero();\n    this.ey.SetZero();\n    return this;\n  }\n\n  GetAngle(): number {\n    return Math.atan2(this.ex.y, this.ex.x);\n  }\n\n  GetInverse(out: b2Mat22): b2Mat22 {\n    const a: number = this.ex.x;\n    const b: number = this.ey.x;\n    const c: number = this.ex.y;\n    const d: number = this.ey.y;\n    let det: number = a * d - b * c;\n    if (det !== 0) {\n      det = 1 / det;\n    }\n    out.ex.x = det * d;\n    out.ey.x = -det * b;\n    out.ex.y = -det * c;\n    out.ey.y = det * a;\n    return out;\n  }\n\n  Solve<T extends XY>(b_x: number, b_y: number, out: T): T {\n    const a11 = this.ex.x,\n      a12 = this.ey.x;\n    const a21 = this.ex.y,\n      a22 = this.ey.y;\n    let det = a11 * a22 - a12 * a21;\n    if (det !== 0) {\n      det = 1.0 / det;\n    }\n    out.x = det * (a22 * b_x - a12 * b_y);\n    out.y = det * (a11 * b_y - a21 * b_x);\n    return out;\n  }\n\n  SelfAbs(): this {\n    this.ex.SelfAbs();\n    this.ey.SelfAbs();\n    return this;\n  }\n\n  SelfInv(): this {\n    this.GetInverse(this);\n    return this;\n  }\n\n  SelfAddM(M: b2Mat22): this {\n    this.ex.SelfAdd(M.ex);\n    this.ey.SelfAdd(M.ey);\n    return this;\n  }\n\n  SelfSubM(M: b2Mat22): this {\n    this.ex.SelfSub(M.ex);\n    this.ey.SelfSub(M.ey);\n    return this;\n  }\n\n  static AbsM(M: b2Mat22, out: b2Mat22): b2Mat22 {\n    const M_ex: b2Vec2 = M.ex,\n      M_ey: b2Vec2 = M.ey;\n    out.ex.x = b2Abs(M_ex.x);\n    out.ex.y = b2Abs(M_ex.y);\n    out.ey.x = b2Abs(M_ey.x);\n    out.ey.y = b2Abs(M_ey.y);\n    return out;\n  }\n\n  static MulMV<T extends XY>(M: b2Mat22, v: XY, out: T): T {\n    const M_ex = M.ex;\n    const M_ey = M.ey;\n    const v_x = v.x;\n    const v_y = v.y;\n    out.x = M_ex.x * v_x + M_ey.x * v_y;\n    out.y = M_ex.y * v_x + M_ey.y * v_y;\n    return out;\n  }\n\n  static MulTMV<T extends XY>(M: b2Mat22, v: XY, out: T): T {\n    const M_ex = M.ex;\n    const M_ey = M.ey;\n    const v_x = v.x;\n    const v_y = v.y;\n    out.x = M_ex.x * v_x + M_ex.y * v_y;\n    out.y = M_ey.x * v_x + M_ey.y * v_y;\n    return out;\n  }\n\n  static AddMM(A: b2Mat22, B: b2Mat22, out: b2Mat22): b2Mat22 {\n    const A_ex = A.ex;\n    const A_ey = A.ey;\n    const B_ex = B.ex;\n    const B_ey = B.ey;\n    out.ex.x = A_ex.x + B_ex.x;\n    out.ex.y = A_ex.y + B_ex.y;\n    out.ey.x = A_ey.x + B_ey.x;\n    out.ey.y = A_ey.y + B_ey.y;\n    return out;\n  }\n\n  static MulMM(A: b2Mat22, B: b2Mat22, out: b2Mat22): b2Mat22 {\n    const A_ex_x = A.ex.x;\n    const A_ex_y = A.ex.y;\n    const A_ey_x = A.ey.x;\n    const A_ey_y = A.ey.y;\n    const B_ex_x = B.ex.x;\n    const B_ex_y = B.ex.y;\n    const B_ey_x = B.ey.x;\n    const B_ey_y = B.ey.y;\n    out.ex.x = A_ex_x * B_ex_x + A_ey_x * B_ex_y;\n    out.ex.y = A_ex_y * B_ex_x + A_ey_y * B_ex_y;\n    out.ey.x = A_ex_x * B_ey_x + A_ey_x * B_ey_y;\n    out.ey.y = A_ex_y * B_ey_x + A_ey_y * B_ey_y;\n    return out;\n  }\n\n  static MulTMM(A: b2Mat22, B: b2Mat22, out: b2Mat22): b2Mat22 {\n    const A_ex_x = A.ex.x;\n    const A_ex_y = A.ex.y;\n    const A_ey_x = A.ey.x;\n    const A_ey_y = A.ey.y;\n    const B_ex_x = B.ex.x;\n    const B_ex_y = B.ex.y;\n    const B_ey_x = B.ey.x;\n    const B_ey_y = B.ey.y;\n    out.ex.x = A_ex_x * B_ex_x + A_ex_y * B_ex_y;\n    out.ex.y = A_ey_x * B_ex_x + A_ey_y * B_ex_y;\n    out.ey.x = A_ex_x * B_ey_x + A_ex_y * B_ey_y;\n    out.ey.y = A_ey_x * B_ey_x + A_ey_y * B_ey_y;\n    return out;\n  }\n}\n\n/// A 3-by-3 matrix. Stored in column-major order.\nexport class b2Mat33 {\n  static readonly IDENTITY: Readonly<b2Mat33> = new b2Mat33();\n\n  readonly ex = new b2Vec3(1, 0, 0);\n  readonly ey = new b2Vec3(0, 1, 0);\n  readonly ez = new b2Vec3(0, 0, 1);\n\n  Clone(): b2Mat33 {\n    return new b2Mat33().Copy(this);\n  }\n\n  SetVVV(c1: XYZ, c2: XYZ, c3: XYZ): this {\n    this.ex.Copy(c1);\n    this.ey.Copy(c2);\n    this.ez.Copy(c3);\n    return this;\n  }\n\n  Copy(other: b2Mat33): this {\n    this.ex.Copy(other.ex);\n    this.ey.Copy(other.ey);\n    this.ez.Copy(other.ez);\n    return this;\n  }\n\n  SetIdentity(): this {\n    this.ex.SetXYZ(1, 0, 0);\n    this.ey.SetXYZ(0, 1, 0);\n    this.ez.SetXYZ(0, 0, 1);\n    return this;\n  }\n\n  SetZero(): this {\n    this.ex.SetZero();\n    this.ey.SetZero();\n    this.ez.SetZero();\n    return this;\n  }\n\n  SelfAddM(M: b2Mat33): this {\n    this.ex.SelfAdd(M.ex);\n    this.ey.SelfAdd(M.ey);\n    this.ez.SelfAdd(M.ez);\n    return this;\n  }\n\n  Solve33<T extends XYZ>(b_x: number, b_y: number, b_z: number, out: T): T {\n    const a11 = this.ex.x;\n    const a21 = this.ex.y;\n    const a31 = this.ex.z;\n    const a12 = this.ey.x;\n    const a22 = this.ey.y;\n    const a32 = this.ey.z;\n    const a13 = this.ez.x;\n    const a23 = this.ez.y;\n    const a33 = this.ez.z;\n    let det =\n      a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\n    if (det !== 0) {\n      det = 1.0 / det;\n    }\n    out.x =\n      det *\n      (b_x * (a22 * a33 - a32 * a23) +\n        b_y * (a32 * a13 - a12 * a33) +\n        b_z * (a12 * a23 - a22 * a13));\n    out.y =\n      det *\n      (a11 * (b_y * a33 - b_z * a23) +\n        a21 * (b_z * a13 - b_x * a33) +\n        a31 * (b_x * a23 - b_y * a13));\n    out.z =\n      det *\n      (a11 * (a22 * b_z - a32 * b_y) +\n        a21 * (a32 * b_x - a12 * b_z) +\n        a31 * (a12 * b_y - a22 * b_x));\n    return out;\n  }\n\n  Solve22<T extends XY>(b_x: number, b_y: number, out: T): T {\n    const a11 = this.ex.x;\n    const a12 = this.ey.x;\n    const a21 = this.ex.y;\n    const a22 = this.ey.y;\n    let det: number = a11 * a22 - a12 * a21;\n    if (det !== 0) {\n      det = 1.0 / det;\n    }\n    out.x = det * (a22 * b_x - a12 * b_y);\n    out.y = det * (a11 * b_y - a21 * b_x);\n    return out;\n  }\n\n  GetInverse22(M: b2Mat33): void {\n    const a = this.ex.x;\n    const b = this.ey.x;\n    const c = this.ex.y;\n    const d = this.ey.y;\n\n    let det = a * d - b * c;\n    if (det !== 0) {\n      det = 1.0 / det;\n    }\n\n    M.ex.x = det * d;\n    M.ey.x = -det * b;\n    M.ex.z = 0;\n    M.ex.y = -det * c;\n    M.ey.y = det * a;\n    M.ey.z = 0;\n    M.ez.x = 0;\n    M.ez.y = 0;\n    M.ez.z = 0;\n  }\n\n  GetSymInverse33(M: b2Mat33): void {\n    let det: number = b2Vec3.DotV3V3(this.ex, b2Vec3.CrossV3V3(this.ey, this.ez, b2Vec3.s_t0));\n    if (det !== 0) {\n      det = 1 / det;\n    }\n\n    const a11: number = this.ex.x,\n      a12: number = this.ey.x,\n      a13: number = this.ez.x;\n    const a22: number = this.ey.y,\n      a23: number = this.ez.y;\n    const a33: number = this.ez.z;\n\n    M.ex.x = det * (a22 * a33 - a23 * a23);\n    M.ex.y = det * (a13 * a23 - a12 * a33);\n    M.ex.z = det * (a12 * a23 - a13 * a22);\n\n    M.ey.x = M.ex.y;\n    M.ey.y = det * (a11 * a33 - a13 * a13);\n    M.ey.z = det * (a13 * a12 - a11 * a23);\n\n    M.ez.x = M.ex.z;\n    M.ez.y = M.ey.z;\n    M.ez.z = det * (a11 * a22 - a12 * a12);\n  }\n\n  static MulM33V3<T extends XYZ>(A: b2Mat33, v: XYZ, out: T): T {\n    const v_x: number = v.x,\n      v_y: number = v.y,\n      v_z: number = v.z;\n    out.x = A.ex.x * v_x + A.ey.x * v_y + A.ez.x * v_z;\n    out.y = A.ex.y * v_x + A.ey.y * v_y + A.ez.y * v_z;\n    out.z = A.ex.z * v_x + A.ey.z * v_y + A.ez.z * v_z;\n    return out;\n  }\n\n  static MulM33XYZ<T extends XYZ>(A: b2Mat33, x: number, y: number, z: number, out: T): T {\n    out.x = A.ex.x * x + A.ey.x * y + A.ez.x * z;\n    out.y = A.ex.y * x + A.ey.y * y + A.ez.y * z;\n    out.z = A.ex.z * x + A.ey.z * y + A.ez.z * z;\n    return out;\n  }\n\n  static MulM33V2<T extends XY>(A: b2Mat33, v: XY, out: T): T {\n    const v_x: number = v.x,\n      v_y: number = v.y;\n    out.x = A.ex.x * v_x + A.ey.x * v_y;\n    out.y = A.ex.y * v_x + A.ey.y * v_y;\n    return out;\n  }\n\n  static MulM33XY<T extends XY>(A: b2Mat33, x: number, y: number, out: T): T {\n    out.x = A.ex.x * x + A.ey.x * y;\n    out.y = A.ex.y * x + A.ey.y * y;\n    return out;\n  }\n}\n\n/// Rotation\nexport class b2Rot {\n  static readonly IDENTITY: Readonly<b2Rot> = new b2Rot();\n\n  s = NaN;\n  c = NaN;\n\n  constructor(angle = 0.0) {\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n\n  Clone(): b2Rot {\n    return new b2Rot().Copy(this);\n  }\n\n  Copy(other: b2Rot): this {\n    this.s = other.s;\n    this.c = other.c;\n    return this;\n  }\n\n  SetAngle(angle: number): this {\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n    return this;\n  }\n\n  SetIdentity(): this {\n    this.s = 0;\n    this.c = 1;\n    return this;\n  }\n\n  GetAngle(): number {\n    return Math.atan2(this.s, this.c);\n  }\n\n  GetXAxis<T extends XY>(out: T): T {\n    out.x = this.c;\n    out.y = this.s;\n    return out;\n  }\n\n  GetYAxis<T extends XY>(out: T): T {\n    out.x = -this.s;\n    out.y = this.c;\n    return out;\n  }\n\n  static MulRR(q: b2Rot, r: b2Rot, out: b2Rot): b2Rot {\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs  qc]   [rs  rc]   [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    const q_c: number = q.c,\n      q_s: number = q.s;\n    const r_c: number = r.c,\n      r_s: number = r.s;\n    out.s = q_s * r_c + q_c * r_s;\n    out.c = q_c * r_c - q_s * r_s;\n    return out;\n  }\n\n  static MulTRR(q: b2Rot, r: b2Rot, out: b2Rot): b2Rot {\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc]   [rs  rc]   [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    const q_c: number = q.c,\n      q_s: number = q.s;\n    const r_c: number = r.c,\n      r_s: number = r.s;\n    out.s = q_c * r_s - q_s * r_c;\n    out.c = q_c * r_c + q_s * r_s;\n    return out;\n  }\n\n  static MulRV<T extends XY>(q: b2Rot, v: XY, out: T): T {\n    const q_c: number = q.c,\n      q_s: number = q.s;\n    const v_x: number = v.x,\n      v_y: number = v.y;\n    out.x = q_c * v_x - q_s * v_y;\n    out.y = q_s * v_x + q_c * v_y;\n    return out;\n  }\n\n  static MulTRV<T extends XY>(q: b2Rot, v: XY, out: T): T {\n    const q_c: number = q.c,\n      q_s: number = q.s;\n    const v_x: number = v.x,\n      v_y: number = v.y;\n    out.x = q_c * v_x + q_s * v_y;\n    out.y = -q_s * v_x + q_c * v_y;\n    return out;\n  }\n}\n\n/// A transform contains translation and rotation. It is used to represent\n/// the position and orientation of rigid frames.\nexport class b2Transform {\n  static readonly IDENTITY: Readonly<b2Transform> = new b2Transform();\n\n  readonly p: b2Vec2 = new b2Vec2();\n  readonly q: b2Rot = new b2Rot();\n\n  Clone(): b2Transform {\n    return new b2Transform().Copy(this);\n  }\n\n  Copy(other: b2Transform): this {\n    this.p.Copy(other.p);\n    this.q.Copy(other.q);\n    return this;\n  }\n\n  SetIdentity(): this {\n    this.p.SetZero();\n    this.q.SetIdentity();\n    return this;\n  }\n\n  SetPositionRotation(position: XY, q: Readonly<b2Rot>): this {\n    this.p.Copy(position);\n    this.q.Copy(q);\n    return this;\n  }\n\n  SetPositionAngle(pos: XY, a: number): this {\n    this.p.Copy(pos);\n    this.q.SetAngle(a);\n    return this;\n  }\n\n  SetPosition(position: XY): this {\n    this.p.Copy(position);\n    return this;\n  }\n\n  SetPositionXY(x: number, y: number): this {\n    this.p.Set(x, y);\n    return this;\n  }\n\n  SetRotation(rotation: Readonly<b2Rot>): this {\n    this.q.Copy(rotation);\n    return this;\n  }\n\n  SetRotationAngle(radians: number): this {\n    this.q.SetAngle(radians);\n    return this;\n  }\n\n  GetPosition(): Readonly<b2Vec2> {\n    return this.p;\n  }\n\n  GetRotation(): Readonly<b2Rot> {\n    return this.q;\n  }\n\n  GetRotationAngle(): number {\n    return this.q.GetAngle();\n  }\n\n  GetAngle(): number {\n    return this.q.GetAngle();\n  }\n\n  static MulXV<TOut extends XY>(T: b2Transform, v: XY, out: TOut): TOut {\n    // float32 x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;\n    // float32 y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;\n    // return b2Vec2(x, y);\n    const T_q_c: number = T.q.c,\n      T_q_s: number = T.q.s;\n    const v_x: number = v.x,\n      v_y: number = v.y;\n    out.x = T_q_c * v_x - T_q_s * v_y + T.p.x;\n    out.y = T_q_s * v_x + T_q_c * v_y + T.p.y;\n    return out;\n  }\n\n  static MulTXV<TOut extends XY>(T: b2Transform, v: XY, out: TOut): TOut {\n    // float32 px = v.x - T.p.x;\n    // float32 py = v.y - T.p.y;\n    // float32 x = (T.q.c * px + T.q.s * py);\n    // float32 y = (-T.q.s * px + T.q.c * py);\n    // return b2Vec2(x, y);\n    const T_q_c: number = T.q.c,\n      T_q_s: number = T.q.s;\n    const p_x: number = v.x - T.p.x;\n    const p_y: number = v.y - T.p.y;\n    out.x = T_q_c * p_x + T_q_s * p_y;\n    out.y = -T_q_s * p_x + T_q_c * p_y;\n    return out;\n  }\n\n  static MulXX(A: b2Transform, B: b2Transform, out: b2Transform): b2Transform {\n    b2Rot.MulRR(A.q, B.q, out.q);\n    b2Vec2.AddVV(b2Rot.MulRV(A.q, B.p, out.p), A.p, out.p);\n    return out;\n  }\n\n  static MulTXX(A: b2Transform, B: b2Transform, out: b2Transform): b2Transform {\n    b2Rot.MulTRR(A.q, B.q, out.q);\n    b2Rot.MulTRV(A.q, b2Vec2.SubVV(B.p, A.p, out.p), out.p);\n    return out;\n  }\n}\n\n/// This describes the motion of a body/shape for TOI computation.\n/// Shapes are defined with respect to the body origin, which may\n/// no coincide with the center of mass. However, to support dynamics\n/// we must interpolate the center of mass position.\nexport class b2Sweep {\n  readonly localCenter = new b2Vec2();\n  readonly c0 = new b2Vec2();\n  readonly c = new b2Vec2();\n  a0 = NaN;\n  a = NaN;\n  alpha0 = NaN;\n\n  constructor() {\n    this.a0 = 0.0;\n    this.a = 0.0;\n    this.alpha0 = 0.0;\n  }\n\n  Clone(): b2Sweep {\n    return new b2Sweep().Copy(this);\n  }\n\n  Copy(other: b2Sweep): this {\n    this.localCenter.Copy(other.localCenter);\n    this.c0.Copy(other.c0);\n    this.c.Copy(other.c);\n    this.a0 = other.a0;\n    this.a = other.a;\n    this.alpha0 = other.alpha0;\n    return this;\n  }\n\n  GetTransform(xf: b2Transform, beta: number): b2Transform {\n    const one_minus_beta = 1.0 - beta;\n    xf.p.x = one_minus_beta * this.c0.x + beta * this.c.x;\n    xf.p.y = one_minus_beta * this.c0.y + beta * this.c.y;\n    const angle = one_minus_beta * this.a0 + beta * this.a;\n    xf.q.SetAngle(angle);\n\n    xf.p.SelfSub(b2Rot.MulRV(xf.q, this.localCenter, b2Vec2.s_t0));\n    return xf;\n  }\n\n  Advance(alpha: number): void {\n    !!B2_DEBUG && b2Assert(this.alpha0 < 1.0);\n    const beta: number = (alpha - this.alpha0) / (1.0 - this.alpha0);\n    const one_minus_beta: number = 1 - beta;\n    this.c0.x = one_minus_beta * this.c0.x + beta * this.c.x;\n    this.c0.y = one_minus_beta * this.c0.y + beta * this.c.y;\n    this.a0 = one_minus_beta * this.a0 + beta * this.a;\n    this.alpha0 = alpha;\n  }\n\n  Normalize(): void {\n    const d = b2_two_pi * Math.floor(this.a0 / b2_two_pi);\n    this.a0 -= d;\n    this.a -= d;\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_epsilon,\n  b2_epsilon_sq,\n  b2_linearSlop,\n  b2_polygonRadius,\n  b2Assert,\n} from '../common/b2Settings';\nimport { b2Abs, b2Max, b2MaxInt, b2Rot, b2Transform, b2Vec2 } from '../common/b2Math';\nimport { b2Shape } from './shapes/b2Shape';\n\n/// A distance proxy is used by the GJK algorithm.\n/// It encapsulates any shape.\nexport class b2DistanceProxy {\n  readonly m_buffer: b2Vec2[] = b2Vec2.MakeArray(2);\n  m_vertices: b2Vec2[] = this.m_buffer;\n  m_count = 0;\n  m_radius = NaN;\n\n  constructor() {\n    this.m_radius = 0.0;\n  }\n\n  Copy(other: Readonly<b2DistanceProxy>): this {\n    if (other.m_vertices === other.m_buffer) {\n      this.m_vertices = this.m_buffer;\n      this.m_buffer[0].Copy(other.m_buffer[0]);\n      this.m_buffer[1].Copy(other.m_buffer[1]);\n    } else {\n      this.m_vertices = other.m_vertices;\n    }\n    this.m_count = other.m_count;\n    this.m_radius = other.m_radius;\n    return this;\n  }\n\n  Reset(): b2DistanceProxy {\n    this.m_vertices = this.m_buffer;\n    this.m_count = 0;\n    this.m_radius = 0;\n    return this;\n  }\n\n  SetShape(shape: b2Shape, index: number): void {\n    shape.SetupDistanceProxy(this, index);\n  }\n\n  SetVerticesRadius(vertices: b2Vec2[], count: number, radius: number): void {\n    this.m_vertices = vertices;\n    this.m_count = count;\n    this.m_radius = radius;\n  }\n\n  GetSupport(d: b2Vec2): number {\n    let bestIndex = 0;\n    let bestValue: number = b2Vec2.DotVV(this.m_vertices[0], d);\n    for (let i = 1; i < this.m_count; ++i) {\n      const value: number = b2Vec2.DotVV(this.m_vertices[i], d);\n      if (value > bestValue) {\n        bestIndex = i;\n        bestValue = value;\n      }\n    }\n\n    return bestIndex;\n  }\n\n  GetSupportVertex(d: b2Vec2): b2Vec2 {\n    let bestIndex = 0;\n    let bestValue: number = b2Vec2.DotVV(this.m_vertices[0], d);\n    for (let i = 1; i < this.m_count; ++i) {\n      const value: number = b2Vec2.DotVV(this.m_vertices[i], d);\n      if (value > bestValue) {\n        bestIndex = i;\n        bestValue = value;\n      }\n    }\n\n    return this.m_vertices[bestIndex];\n  }\n\n  GetVertexCount(): number {\n    return this.m_count;\n  }\n\n  GetVertex(index: number): b2Vec2 {\n    !!B2_DEBUG && b2Assert(0 <= index && index < this.m_count);\n    return this.m_vertices[index];\n  }\n}\n\nexport class b2SimplexCache {\n  metric = NaN;\n  count = 0;\n  readonly indexA: [number, number, number] = [0, 0, 0];\n  readonly indexB: [number, number, number] = [0, 0, 0];\n\n  constructor() {\n    this.metric = 0.0;\n  }\n\n  Reset(): b2SimplexCache {\n    this.metric = 0;\n    this.count = 0;\n    return this;\n  }\n}\n\nexport class b2DistanceInput {\n  readonly proxyA: b2DistanceProxy = new b2DistanceProxy();\n  readonly proxyB: b2DistanceProxy = new b2DistanceProxy();\n  readonly transformA: b2Transform = new b2Transform();\n  readonly transformB: b2Transform = new b2Transform();\n  useRadii = false;\n\n  Reset(): b2DistanceInput {\n    this.proxyA.Reset();\n    this.proxyB.Reset();\n    this.transformA.SetIdentity();\n    this.transformB.SetIdentity();\n    this.useRadii = false;\n    return this;\n  }\n}\n\nexport class b2DistanceOutput {\n  readonly pointA: b2Vec2 = new b2Vec2();\n  readonly pointB: b2Vec2 = new b2Vec2();\n  distance = NaN;\n  iterations = 0; ///< number of GJK iterations used\n\n  constructor() {\n    this.distance = 0.0;\n  }\n\n  Reset(): b2DistanceOutput {\n    this.pointA.SetZero();\n    this.pointB.SetZero();\n    this.distance = 0;\n    this.iterations = 0;\n    return this;\n  }\n}\n\n/// Input parameters for b2ShapeCast\nexport class b2ShapeCastInput {\n  readonly proxyA: b2DistanceProxy = new b2DistanceProxy();\n  readonly proxyB: b2DistanceProxy = new b2DistanceProxy();\n  readonly transformA: b2Transform = new b2Transform();\n  readonly transformB: b2Transform = new b2Transform();\n  readonly translationB: b2Vec2 = new b2Vec2();\n}\n\n/// Output results for b2ShapeCast\nexport class b2ShapeCastOutput {\n  readonly point: b2Vec2 = new b2Vec2();\n  readonly normal: b2Vec2 = new b2Vec2();\n  lambda = NaN;\n  iterations = 0;\n\n  constructor() {\n    this.lambda = 0.0;\n  }\n}\n\nclass GJKStats {\n  calls = 0;\n  iters = 0;\n  maxIters = 0;\n\n  Reset() {\n    this.calls = 0;\n    this.iters = 0;\n    this.maxIters = 0;\n  }\n}\n\nexport const b2_gjkStats = new GJKStats();\n\nexport class b2SimplexVertex {\n  readonly wA: b2Vec2 = new b2Vec2(); // support point in proxyA\n  readonly wB: b2Vec2 = new b2Vec2(); // support point in proxyB\n  readonly w: b2Vec2 = new b2Vec2(); // wB - wA\n  a = NaN; // barycentric coordinate for closest point\n  indexA = 0; // wA index\n  indexB = 0; // wB index\n\n  constructor() {\n    this.a = 0.0;\n  }\n\n  Copy(other: b2SimplexVertex): b2SimplexVertex {\n    this.wA.Copy(other.wA); // support point in proxyA\n    this.wB.Copy(other.wB); // support point in proxyB\n    this.w.Copy(other.w); // wB - wA\n    this.a = other.a; // barycentric coordinate for closest point\n    this.indexA = other.indexA; // wA index\n    this.indexB = other.indexB; // wB index\n    return this;\n  }\n}\n\nexport class b2Simplex {\n  m_count = 0;\n  readonly m_v1: b2SimplexVertex = new b2SimplexVertex();\n  readonly m_v2: b2SimplexVertex = new b2SimplexVertex();\n  readonly m_v3: b2SimplexVertex = new b2SimplexVertex();\n  readonly m_vertices: b2SimplexVertex[];\n\n  constructor() {\n    this.m_vertices = [this.m_v1, this.m_v2, this.m_v3];\n  }\n\n  ReadCache(\n    cache: b2SimplexCache,\n    proxyA: b2DistanceProxy,\n    transformA: b2Transform,\n    proxyB: b2DistanceProxy,\n    transformB: b2Transform,\n  ): void {\n    !!B2_DEBUG && b2Assert(0 <= cache.count && cache.count <= 3);\n\n    // Copy data from cache.\n    this.m_count = cache.count;\n    const vertices: b2SimplexVertex[] = this.m_vertices;\n    for (let i = 0; i < this.m_count; ++i) {\n      const v: b2SimplexVertex = vertices[i];\n      v.indexA = cache.indexA[i];\n      v.indexB = cache.indexB[i];\n      const wALocal: b2Vec2 = proxyA.GetVertex(v.indexA);\n      const wBLocal: b2Vec2 = proxyB.GetVertex(v.indexB);\n      b2Transform.MulXV(transformA, wALocal, v.wA);\n      b2Transform.MulXV(transformB, wBLocal, v.wB);\n      b2Vec2.SubVV(v.wB, v.wA, v.w);\n      v.a = 0.0;\n    }\n\n    // Compute the new simplex metric, if it is substantially different than\n    // old metric then flush the simplex.\n    if (this.m_count > 1) {\n      const metric1: number = cache.metric;\n      const metric2: number = this.GetMetric();\n      if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < b2_epsilon) {\n        // Reset the simplex.\n        this.m_count = 0;\n      }\n    }\n\n    // If the cache is empty or invalid ...\n    if (this.m_count === 0) {\n      const v: b2SimplexVertex = vertices[0];\n      v.indexA = 0;\n      v.indexB = 0;\n      const wALocal: b2Vec2 = proxyA.GetVertex(0);\n      const wBLocal: b2Vec2 = proxyB.GetVertex(0);\n      b2Transform.MulXV(transformA, wALocal, v.wA);\n      b2Transform.MulXV(transformB, wBLocal, v.wB);\n      b2Vec2.SubVV(v.wB, v.wA, v.w);\n      v.a = 1.0;\n      this.m_count = 1;\n    }\n  }\n\n  WriteCache(cache: b2SimplexCache): void {\n    cache.metric = this.GetMetric();\n    cache.count = this.m_count;\n    const vertices: b2SimplexVertex[] = this.m_vertices;\n    for (let i = 0; i < this.m_count; ++i) {\n      cache.indexA[i] = vertices[i].indexA;\n      cache.indexB[i] = vertices[i].indexB;\n    }\n  }\n\n  GetSearchDirection(out: b2Vec2): b2Vec2 {\n    const count = this.m_count;\n    if (count === 1) {\n      b2Vec2.NegV(this.m_v1.w, out);\n    } else if (count === 2) {\n      const e12: b2Vec2 = b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);\n      const sgn: number = b2Vec2.CrossVV(e12, b2Vec2.NegV(this.m_v1.w, b2Vec2.s_t0));\n      if (sgn > 0) {\n        // Origin is left of e12.\n        b2Vec2.CrossOneV(e12, out);\n      } else {\n        // Origin is right of e12.\n        b2Vec2.CrossVOne(e12, out);\n      }\n    } else {\n      out.SetZero();\n    }\n    return out;\n    // switch (this.m_count) {\n    // case 1:\n    //   return b2Vec2.NegV(this.m_v1.w, out);\n    //\n    // case 2: {\n    //     const e12: b2Vec2 = b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);\n    //     const sgn: number = b2Vec2.CrossVV(e12, b2Vec2.NegV(this.m_v1.w, b2Vec2.s_t0));\n    //     if (sgn > 0) {\n    //       // Origin is left of e12.\n    //       return b2Vec2.CrossOneV(e12, out);\n    //     } else {\n    //       // Origin is right of e12.\n    //       return b2Vec2.CrossVOne(e12, out);\n    //     }\n    //   }\n    //\n    // default:\n    //   !!B2_DEBUG && b2Assert(false);\n    //   return out.SetZero();\n    // }\n  }\n\n  GetClosestPoint(out: b2Vec2): b2Vec2 {\n    const count = this.m_count;\n    // if(count === 0) {\n    //     !!B2_DEBUG && b2Assert(false);\n    //     out.SetZero();\n    // }\n    // else\n    if (count === 1) {\n      out.Copy(this.m_v1.w);\n    } else if (count === 2) {\n      out.Set(\n        this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x,\n        this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y,\n      );\n    } else {\n      // 3 and others\n      out.SetZero();\n    }\n    return out;\n  }\n\n  GetWitnessPoints(pA: b2Vec2, pB: b2Vec2): void {\n    switch (this.m_count) {\n      case 0:\n        !!B2_DEBUG && b2Assert(false);\n        break;\n\n      case 1:\n        pA.Copy(this.m_v1.wA);\n        pB.Copy(this.m_v1.wB);\n        break;\n\n      case 2:\n        pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\n        pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\n        pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\n        pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\n        break;\n\n      case 3:\n        pB.x = pA.x =\n          this.m_v1.a * this.m_v1.wA.x +\n          this.m_v2.a * this.m_v2.wA.x +\n          this.m_v3.a * this.m_v3.wA.x;\n        pB.y = pA.y =\n          this.m_v1.a * this.m_v1.wA.y +\n          this.m_v2.a * this.m_v2.wA.y +\n          this.m_v3.a * this.m_v3.wA.y;\n        break;\n\n      default:\n        !!B2_DEBUG && b2Assert(false);\n        break;\n    }\n  }\n\n  GetMetric(): number {\n    if (this.m_count === 2) {\n      return b2Vec2.DistanceVV(this.m_v1.w, this.m_v2.w);\n    } else if (this.m_count === 3) {\n      return b2Vec2.CrossVV(\n        b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, b2Vec2.s_t0),\n        b2Vec2.SubVV(this.m_v3.w, this.m_v1.w, b2Vec2.s_t1),\n      );\n    }\n    return 0.0;\n  }\n\n  Solve2(): void {\n    const w1: b2Vec2 = this.m_v1.w;\n    const w2: b2Vec2 = this.m_v2.w;\n    const e12: b2Vec2 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\n\n    // w1 region\n    const d12_2: number = -b2Vec2.DotVV(w1, e12);\n    if (d12_2 <= 0) {\n      // a2 <= 0, so we clamp it to 0\n      this.m_v1.a = 1;\n      this.m_count = 1;\n      return;\n    }\n\n    // w2 region\n    const d12_1: number = b2Vec2.DotVV(w2, e12);\n    if (d12_1 <= 0) {\n      // a1 <= 0, so we clamp it to 0\n      this.m_v2.a = 1;\n      this.m_count = 1;\n      this.m_v1.Copy(this.m_v2);\n      return;\n    }\n\n    // Must be in e12 region.\n    const inv_d12: number = 1 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n  }\n\n  Solve3(): void {\n    const w1: b2Vec2 = this.m_v1.w;\n    const w2: b2Vec2 = this.m_v2.w;\n    const w3: b2Vec2 = this.m_v3.w;\n\n    // Edge12\n    // [1      1     ][a1] = [1]\n    // [w1.e12 w2.e12][a2] = [0]\n    // a3 = 0\n    const e12: b2Vec2 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\n    const w1e12: number = b2Vec2.DotVV(w1, e12);\n    const w2e12: number = b2Vec2.DotVV(w2, e12);\n    const d12_1: number = w2e12;\n    const d12_2: number = -w1e12;\n\n    // Edge13\n    // [1      1     ][a1] = [1]\n    // [w1.e13 w3.e13][a3] = [0]\n    // a2 = 0\n    const e13: b2Vec2 = b2Vec2.SubVV(w3, w1, b2Simplex.s_e13);\n    const w1e13: number = b2Vec2.DotVV(w1, e13);\n    const w3e13: number = b2Vec2.DotVV(w3, e13);\n    const d13_1: number = w3e13;\n    const d13_2: number = -w1e13;\n\n    // Edge23\n    // [1      1     ][a2] = [1]\n    // [w2.e23 w3.e23][a3] = [0]\n    // a1 = 0\n    const e23: b2Vec2 = b2Vec2.SubVV(w3, w2, b2Simplex.s_e23);\n    const w2e23: number = b2Vec2.DotVV(w2, e23);\n    const w3e23: number = b2Vec2.DotVV(w3, e23);\n    const d23_1: number = w3e23;\n    const d23_2: number = -w2e23;\n\n    // Triangle123\n    const n123: number = b2Vec2.CrossVV(e12, e13);\n\n    const d123_1: number = n123 * b2Vec2.CrossVV(w2, w3);\n    const d123_2: number = n123 * b2Vec2.CrossVV(w3, w1);\n    const d123_3: number = n123 * b2Vec2.CrossVV(w1, w2);\n\n    // w1 region\n    if (d12_2 <= 0 && d13_2 <= 0) {\n      this.m_v1.a = 1.0;\n      this.m_count = 1;\n    }\n\n    // e12\n    else if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\n      const inv_d12: number = 1.0 / (d12_1 + d12_2);\n      this.m_v1.a = d12_1 * inv_d12;\n      this.m_v2.a = d12_2 * inv_d12;\n      this.m_count = 2;\n    }\n\n    // e13\n    else if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\n      const inv_d13: number = 1.0 / (d13_1 + d13_2);\n      this.m_v1.a = d13_1 * inv_d13;\n      this.m_v3.a = d13_2 * inv_d13;\n      this.m_count = 2;\n      this.m_v2.Copy(this.m_v3);\n    }\n\n    // w2 region\n    else if (d12_1 <= 0 && d23_2 <= 0) {\n      this.m_v2.a = 1.0;\n      this.m_count = 1;\n      this.m_v1.Copy(this.m_v2);\n    }\n\n    // w3 region\n    else if (d13_1 <= 0 && d23_1 <= 0) {\n      this.m_v3.a = 1.0;\n      this.m_count = 1;\n      this.m_v1.Copy(this.m_v3);\n    }\n\n    // e23\n    else if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\n      const inv_d23: number = 1.0 / (d23_1 + d23_2);\n      this.m_v2.a = d23_1 * inv_d23;\n      this.m_v3.a = d23_2 * inv_d23;\n      this.m_count = 2;\n      this.m_v1.Copy(this.m_v3);\n    } else {\n      // Must be in triangle123\n      const inv_d123: number = 1.0 / (d123_1 + d123_2 + d123_3);\n      this.m_v1.a = d123_1 * inv_d123;\n      this.m_v2.a = d123_2 * inv_d123;\n      this.m_v3.a = d123_3 * inv_d123;\n      this.m_count = 3;\n    }\n  }\n\n  private static s_e12: b2Vec2 = new b2Vec2();\n  private static s_e13: b2Vec2 = new b2Vec2();\n  private static s_e23: b2Vec2 = new b2Vec2();\n}\n\nconst b2Distance_s_simplex: b2Simplex = new b2Simplex();\nconst b2Distance_s_saveA: [number, number, number] = [0, 0, 0];\nconst b2Distance_s_saveB: [number, number, number] = [0, 0, 0];\nconst b2Distance_s_p: b2Vec2 = new b2Vec2();\nconst b2Distance_s_d: b2Vec2 = new b2Vec2();\nconst b2Distance_s_normal: b2Vec2 = new b2Vec2();\nconst b2Distance_s_supportA: b2Vec2 = new b2Vec2();\nconst b2Distance_s_supportB: b2Vec2 = new b2Vec2();\n\nexport function b2Distance(\n  output: b2DistanceOutput,\n  cache: b2SimplexCache,\n  input: b2DistanceInput,\n): void {\n  ++b2_gjkStats.calls;\n\n  const proxyA: b2DistanceProxy = input.proxyA;\n  const proxyB: b2DistanceProxy = input.proxyB;\n\n  const transformA: b2Transform = input.transformA;\n  const transformB: b2Transform = input.transformB;\n\n  // Initialize the simplex.\n  const simplex: b2Simplex = b2Distance_s_simplex;\n  simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\n\n  // Get simplex vertices as an array.\n  const vertices: b2SimplexVertex[] = simplex.m_vertices;\n  const k_maxIters = 20;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  const saveA: [number, number, number] = b2Distance_s_saveA;\n  const saveB: [number, number, number] = b2Distance_s_saveB;\n  let saveCount = 0;\n\n  // Main iteration loop.\n  let iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (let i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    switch (simplex.m_count) {\n      case 1:\n        break;\n\n      case 2:\n        simplex.Solve2();\n        break;\n\n      case 3:\n        simplex.Solve3();\n        break;\n\n      default:\n        !!B2_DEBUG && b2Assert(false);\n        break;\n    }\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count === 3) {\n      break;\n    }\n\n    // Get search direction.\n    const d: b2Vec2 = simplex.GetSearchDirection(b2Distance_s_d);\n\n    // Ensure the search direction is numerically fit.\n    if (d.LengthSquared() < b2_epsilon_sq) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    const vertex: b2SimplexVertex = vertices[simplex.m_count];\n    vertex.indexA = proxyA.GetSupport(\n      b2Rot.MulTRV(transformA.q, b2Vec2.NegV(d, b2Vec2.s_t0), b2Distance_s_supportA),\n    );\n    b2Transform.MulXV(transformA, proxyA.GetVertex(vertex.indexA), vertex.wA);\n    vertex.indexB = proxyB.GetSupport(b2Rot.MulTRV(transformB.q, d, b2Distance_s_supportB));\n    b2Transform.MulXV(transformB, proxyB.GetVertex(vertex.indexB), vertex.wB);\n    b2Vec2.SubVV(vertex.wB, vertex.wA, vertex.w);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++b2_gjkStats.iters;\n\n    // Check for duplicate support points. This is the main termination criteria.\n    let duplicate = false;\n    for (let i = 0; i < saveCount; ++i) {\n      if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  b2_gjkStats.maxIters = b2MaxInt(b2_gjkStats.maxIters, iter);\n\n  // Prepare output.\n  simplex.GetWitnessPoints(output.pointA, output.pointB);\n  output.distance = b2Vec2.DistanceVV(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.WriteCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    const rA: number = proxyA.m_radius;\n    const rB: number = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > b2_epsilon) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      const normal: b2Vec2 = b2Vec2.SubVV(output.pointB, output.pointA, b2Distance_s_normal);\n      normal.Normalize();\n      output.pointA.SelfMulAdd(rA, normal);\n      output.pointB.SelfMulSub(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      const p: b2Vec2 = b2Vec2.MidVV(output.pointA, output.pointB, b2Distance_s_p);\n      output.pointA.Copy(p);\n      output.pointB.Copy(p);\n      output.distance = 0;\n    }\n  }\n}\n\n/// Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and translation fraction.\n\n// GJK-raycast\n// Algorithm by Gino van den Bergen.\n// \"Smooth Mesh Contacts with GJK\" in Game Physics Pearls. 2010\n// bool b2ShapeCast(b2ShapeCastOutput* output, const b2ShapeCastInput* input);\nconst b2ShapeCast_s_n = new b2Vec2();\nconst b2ShapeCast_s_simplex = new b2Simplex();\nconst b2ShapeCast_s_wA = new b2Vec2();\nconst b2ShapeCast_s_wB = new b2Vec2();\nconst b2ShapeCast_s_v = new b2Vec2();\nconst b2ShapeCast_s_p = new b2Vec2();\nconst b2ShapeCast_s_pointA = new b2Vec2();\nconst b2ShapeCast_s_pointB = new b2Vec2();\n\nexport function b2ShapeCast(output: b2ShapeCastOutput, input: b2ShapeCastInput): boolean {\n  output.iterations = 0;\n  output.lambda = 1.0;\n  output.normal.SetZero();\n  output.point.SetZero();\n\n  // const b2DistanceProxy* proxyA = &input.proxyA;\n  const proxyA = input.proxyA;\n  // const b2DistanceProxy* proxyB = &input.proxyB;\n  const proxyB = input.proxyB;\n\n  // float32 radiusA = b2Max(proxyA.m_radius, b2_polygonRadius);\n  const radiusA = b2Max(proxyA.m_radius, b2_polygonRadius);\n  // float32 radiusB = b2Max(proxyB.m_radius, b2_polygonRadius);\n  const radiusB = b2Max(proxyB.m_radius, b2_polygonRadius);\n  // float32 radius = radiusA + radiusB;\n  const radius = radiusA + radiusB;\n\n  // b2Transform xfA = input.transformA;\n  const xfA = input.transformA;\n  // b2Transform xfB = input.transformB;\n  const xfB = input.transformB;\n\n  // b2Vec2 r = input.translationB;\n  const r = input.translationB;\n  // b2Vec2 n(0.0f, 0.0f);\n  const n = b2ShapeCast_s_n.Set(0.0, 0.0);\n  // float32 lambda = 0.0f;\n  let lambda = 0.0;\n\n  // Initial simplex\n  const simplex = b2ShapeCast_s_simplex;\n  simplex.m_count = 0;\n\n  // Get simplex vertices as an array.\n  // b2SimplexVertex* vertices = &simplex.m_v1;\n  const vertices = simplex.m_vertices;\n\n  // Get support point in -r direction\n  // int32 indexA = proxyA.GetSupport(b2MulT(xfA.q, -r));\n  let indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(r, b2Vec2.s_t1), b2Vec2.s_t0));\n  // b2Vec2 wA = b2Mul(xfA, proxyA.GetVertex(indexA));\n  let wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\n  // int32 indexB = proxyB.GetSupport(b2MulT(xfB.q, r));\n  let indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, r, b2Vec2.s_t0));\n  // b2Vec2 wB = b2Mul(xfB, proxyB.GetVertex(indexB));\n  let wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\n  // b2Vec2 v = wA - wB;\n  const v = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_v);\n\n  // Sigma is the target distance between polygons\n  // float32 sigma = b2Max(b2_polygonRadius, radius - b2_polygonRadius);\n  const sigma = b2Max(b2_polygonRadius, radius - b2_polygonRadius);\n  // const float32 tolerance = 0.5f * b2_linearSlop;\n  const tolerance = 0.5 * b2_linearSlop;\n\n  // Main iteration loop.\n  // const int32 k_maxIters = 20;\n  const k_maxIters = 20;\n  // int32 iter = 0;\n  let iter = 0;\n  // while (iter < k_maxIters && b2Abs(v.Length() - sigma) > tolerance)\n  while (iter < k_maxIters && b2Abs(v.Length() - sigma) > tolerance) {\n    !!B2_DEBUG && b2Assert(simplex.m_count < 3);\n\n    ++output.iterations;\n\n    // Support in direction -v (A - B)\n    // indexA = proxyA.GetSupport(b2MulT(xfA.q, -v));\n    indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(v, b2Vec2.s_t1), b2Vec2.s_t0));\n    // wA = b2Mul(xfA, proxyA.GetVertex(indexA));\n    wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\n    // indexB = proxyB.GetSupport(b2MulT(xfB.q, v));\n    indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, v, b2Vec2.s_t0));\n    // wB = b2Mul(xfB, proxyB.GetVertex(indexB));\n    wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\n    // b2Vec2 p = wA - wB;\n    const p = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_p);\n\n    // -v is a normal at p\n    v.Normalize();\n\n    // Intersect ray with plane\n    const vp = b2Vec2.DotVV(v, p);\n    const vr = b2Vec2.DotVV(v, r);\n    if (vp - sigma > lambda * vr) {\n      if (vr <= 0.0) {\n        return false;\n      }\n\n      lambda = (vp - sigma) / vr;\n      if (lambda > 1.0) {\n        return false;\n      }\n\n      // n = -v;\n      n.Copy(v).SelfNeg();\n      simplex.m_count = 0;\n    }\n\n    // Reverse simplex since it works with B - A.\n    // Shift by lambda * r because we want the closest point to the current clip point.\n    // Note that the support point p is not shifted because we want the plane equation\n    // to be formed in unshifted space.\n    // b2SimplexVertex* vertex = vertices + simplex.m_count;\n    const vertex: b2SimplexVertex = vertices[simplex.m_count];\n    vertex.indexA = indexB;\n    // vertex.wA = wB + lambda * r;\n    vertex.wA.Copy(wB).SelfMulAdd(lambda, r);\n    vertex.indexB = indexA;\n    // vertex.wB = wA;\n    vertex.wB.Copy(wA);\n    // vertex.w = vertex.wB - vertex.wA;\n    vertex.w.Copy(vertex.wB).SelfSub(vertex.wA);\n    vertex.a = 1.0;\n    ++simplex.m_count;\n\n    switch (simplex.m_count) {\n      case 1:\n        break;\n\n      case 2:\n        simplex.Solve2();\n        break;\n\n      case 3:\n        simplex.Solve3();\n        break;\n\n      default:\n        !!B2_DEBUG && b2Assert(false);\n    }\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count === 3) {\n      // Overlap\n      return false;\n    }\n\n    // Get search direction.\n    // v = simplex.GetClosestPoint();\n    simplex.GetClosestPoint(v);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n  }\n\n  // Prepare output.\n  const pointA = b2ShapeCast_s_pointA;\n  const pointB = b2ShapeCast_s_pointB;\n  simplex.GetWitnessPoints(pointA, pointB);\n\n  if (v.LengthSquared() > 0.0) {\n    // n = -v;\n    n.Copy(v).SelfNeg();\n    n.Normalize();\n  }\n\n  // output.point = pointA + radiusA * n;\n  output.normal.Copy(n);\n  output.lambda = lambda;\n  output.iterations = iter;\n  return true;\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\nimport {\n  b2_epsilon,\n  b2_epsilon_sq,\n  b2_maxFloat,\n  b2_maxManifoldPoints,\n  b2MakeArray,\n  b2MakeNumberArray,\n} from '../common/b2Settings';\nimport { b2Abs, b2Max, b2Min, b2Rot, b2Transform, b2Vec2, XY } from '../common/b2Math';\nimport { b2Shape } from './shapes/b2Shape';\nimport { b2Distance, b2DistanceInput, b2DistanceOutput, b2SimplexCache } from './b2Distance';\n\n/// @file\n/// Structures and functions used for computing contact points, distance\n/// queries, and TOI queries.\n\nexport const enum b2ContactFeatureType {\n  e_vertex = 0,\n  e_face = 1,\n}\n\n/// The features that intersect to form the contact point\n/// This must be 4 bytes or less.\nexport class b2ContactFeature {\n  private _key = 0;\n  private _key_invalid = 0;\n  private _indexA = 0;\n  private _indexB = 0;\n  private _typeA: b2ContactFeatureType = 0;\n  private _typeB: b2ContactFeatureType = 0;\n\n  get key(): number {\n    if (this._key_invalid) {\n      this._key_invalid = 0;\n      this._key = this._indexA | (this._indexB << 8) | (this._typeA << 16) | (this._typeB << 24);\n    }\n    return this._key;\n  }\n\n  set key(value: number) {\n    this._key = value;\n    this._key_invalid = 0;\n    this._indexA = this._key & 0xff;\n    this._indexB = (this._key >>> 8) & 0xff;\n    this._typeA = (this._key >>> 16) & 0xff;\n    this._typeB = (this._key >>> 24) & 0xff;\n  }\n\n  get indexA(): number {\n    return this._indexA;\n  }\n\n  set indexA(value: number) {\n    this._indexA = value;\n    this._key_invalid = 1;\n  }\n\n  get indexB(): number {\n    return this._indexB;\n  }\n\n  set indexB(value: number) {\n    this._indexB = value;\n    this._key_invalid = 1;\n  }\n\n  get typeA(): number {\n    return this._typeA;\n  }\n\n  set typeA(value: number) {\n    this._typeA = value;\n    this._key_invalid = 1;\n  }\n\n  get typeB(): number {\n    return this._typeB;\n  }\n\n  set typeB(value: number) {\n    this._typeB = value;\n    this._key_invalid = 1;\n  }\n}\n\n/// Contact ids to facilitate warm starting.\nexport class b2ContactID {\n  readonly cf: b2ContactFeature = new b2ContactFeature();\n\n  Copy(o: b2ContactID): b2ContactID {\n    this.key = o.key;\n    return this;\n  }\n\n  Clone(): b2ContactID {\n    return new b2ContactID().Copy(this);\n  }\n\n  get key(): number {\n    return this.cf.key;\n  }\n\n  set key(value: number) {\n    this.cf.key = value;\n  }\n}\n\n/// A manifold point is a contact point belonging to a contact\n/// manifold. It holds details related to the geometry and dynamics\n/// of the contact points.\n/// The local point usage depends on the manifold type:\n/// -e_circles: the local center of circleB\n/// -e_faceA: the local center of cirlceB or the clip point of polygonB\n/// -e_faceB: the clip point of polygonA\n/// This structure is stored across time steps, so we keep it small.\n/// Note: the impulses are used for internal caching and may not\n/// provide reliable contact forces, especially for high speed collisions.\nexport class b2ManifoldPoint {\n  readonly localPoint: b2Vec2 = new b2Vec2(); ///< usage depends on manifold type\n  normalImpulse = NaN; ///< the non-penetration impulse\n  tangentImpulse = NaN; ///< the friction impulse\n  readonly id: b2ContactID = new b2ContactID(); ///< uniquely identifies a contact point between two shapes\n\n  constructor() {\n    this.normalImpulse = 0.0;\n    this.tangentImpulse = 0.0;\n  }\n\n  static MakeArray(length: number): b2ManifoldPoint[] {\n    return b2MakeArray(length, (i: number): b2ManifoldPoint => new b2ManifoldPoint());\n  }\n\n  Reset(): void {\n    this.localPoint.SetZero();\n    this.normalImpulse = 0.0;\n    this.tangentImpulse = 0.0;\n    this.id.key = 0;\n  }\n\n  Copy(o: b2ManifoldPoint): b2ManifoldPoint {\n    this.localPoint.Copy(o.localPoint);\n    this.normalImpulse = o.normalImpulse;\n    this.tangentImpulse = o.tangentImpulse;\n    this.id.Copy(o.id);\n    return this;\n  }\n}\n\nexport const enum b2ManifoldType {\n  e_unknown = -1,\n  e_circles = 0,\n  e_faceA = 1,\n  e_faceB = 2,\n}\n\n/// A manifold for two touching convex shapes.\n/// Box2D supports multiple types of contact:\n/// - clip point versus plane with radius\n/// - point versus point with radius (circles)\n/// The local point usage depends on the manifold type:\n/// -e_circles: the local center of circleA\n/// -e_faceA: the center of faceA\n/// -e_faceB: the center of faceB\n/// Similarly the local normal usage:\n/// -e_circles: not used\n/// -e_faceA: the normal on polygonA\n/// -e_faceB: the normal on polygonB\n/// We store contacts in this way so that position correction can\n/// account for movement, which is critical for continuous physics.\n/// All contact scenarios must be expressed in one of these types.\n/// This structure is stored across time steps, so we keep it small.\nexport class b2Manifold {\n  readonly points: b2ManifoldPoint[] = b2ManifoldPoint.MakeArray(b2_maxManifoldPoints);\n  readonly localNormal: b2Vec2 = new b2Vec2();\n  readonly localPoint: b2Vec2 = new b2Vec2();\n  type: b2ManifoldType = b2ManifoldType.e_unknown;\n  pointCount = 0;\n\n  Reset(): void {\n    for (let i = 0; i < b2_maxManifoldPoints; ++i) {\n      !!B2_DEBUG && b2Assert(this.points[i] instanceof b2ManifoldPoint);\n      this.points[i].Reset();\n    }\n    this.localNormal.SetZero();\n    this.localPoint.SetZero();\n    this.type = b2ManifoldType.e_unknown;\n    this.pointCount = 0;\n  }\n\n  Copy(o: b2Manifold): b2Manifold {\n    this.pointCount = o.pointCount;\n    for (let i = 0; i < b2_maxManifoldPoints; ++i) {\n      !!B2_DEBUG && b2Assert(this.points[i] instanceof b2ManifoldPoint);\n      this.points[i].Copy(o.points[i]);\n    }\n    this.localNormal.Copy(o.localNormal);\n    this.localPoint.Copy(o.localPoint);\n    this.type = o.type;\n    return this;\n  }\n\n  Clone(): b2Manifold {\n    return new b2Manifold().Copy(this);\n  }\n}\n\nexport class b2WorldManifold {\n  readonly normal: b2Vec2 = new b2Vec2();\n  readonly points: b2Vec2[] = b2Vec2.MakeArray(b2_maxManifoldPoints);\n  readonly separations: number[] = b2MakeNumberArray(b2_maxManifoldPoints);\n\n  private static Initialize_s_pointA = new b2Vec2();\n  private static Initialize_s_pointB = new b2Vec2();\n  private static Initialize_s_cA = new b2Vec2();\n  private static Initialize_s_cB = new b2Vec2();\n  private static Initialize_s_planePoint = new b2Vec2();\n  private static Initialize_s_clipPoint = new b2Vec2();\n\n  Initialize(\n    manifold: b2Manifold,\n    xfA: b2Transform,\n    radiusA: number,\n    xfB: b2Transform,\n    radiusB: number,\n  ): void {\n    if (manifold.pointCount === 0) {\n      return;\n    }\n\n    if (manifold.type === b2ManifoldType.e_circles) {\n      this.normal.Set(1, 0);\n      const pointA: b2Vec2 = b2Transform.MulXV(\n        xfA,\n        manifold.localPoint,\n        b2WorldManifold.Initialize_s_pointA,\n      );\n      const pointB: b2Vec2 = b2Transform.MulXV(\n        xfB,\n        manifold.points[0].localPoint,\n        b2WorldManifold.Initialize_s_pointB,\n      );\n      if (b2Vec2.DistanceSquaredVV(pointA, pointB) > b2_epsilon_sq) {\n        b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\n      }\n\n      const cA: b2Vec2 = b2Vec2.AddVMulSV(\n        pointA,\n        radiusA,\n        this.normal,\n        b2WorldManifold.Initialize_s_cA,\n      );\n      const cB: b2Vec2 = b2Vec2.SubVMulSV(\n        pointB,\n        radiusB,\n        this.normal,\n        b2WorldManifold.Initialize_s_cB,\n      );\n      b2Vec2.MidVV(cA, cB, this.points[0]);\n      this.separations[0] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\n    } else if (manifold.type === b2ManifoldType.e_faceA) {\n      b2Rot.MulRV(xfA.q, manifold.localNormal, this.normal);\n      const planePoint: b2Vec2 = b2Transform.MulXV(\n        xfA,\n        manifold.localPoint,\n        b2WorldManifold.Initialize_s_planePoint,\n      );\n\n      for (let i = 0; i < manifold.pointCount; ++i) {\n        const clipPoint: b2Vec2 = b2Transform.MulXV(\n          xfB,\n          manifold.points[i].localPoint,\n          b2WorldManifold.Initialize_s_clipPoint,\n        );\n        const s: number =\n          radiusA - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\n        const cA: b2Vec2 = b2Vec2.AddVMulSV(\n          clipPoint,\n          s,\n          this.normal,\n          b2WorldManifold.Initialize_s_cA,\n        );\n        const cB: b2Vec2 = b2Vec2.SubVMulSV(\n          clipPoint,\n          radiusB,\n          this.normal,\n          b2WorldManifold.Initialize_s_cB,\n        );\n        b2Vec2.MidVV(cA, cB, this.points[i]);\n        this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\n      }\n    } else if (manifold.type === b2ManifoldType.e_faceB) {\n      b2Rot.MulRV(xfB.q, manifold.localNormal, this.normal);\n      const planePoint: b2Vec2 = b2Transform.MulXV(\n        xfB,\n        manifold.localPoint,\n        b2WorldManifold.Initialize_s_planePoint,\n      );\n\n      for (let i = 0; i < manifold.pointCount; ++i) {\n        const clipPoint: b2Vec2 = b2Transform.MulXV(\n          xfA,\n          manifold.points[i].localPoint,\n          b2WorldManifold.Initialize_s_clipPoint,\n        );\n        const s: number =\n          radiusB - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\n        const cB: b2Vec2 = b2Vec2.AddVMulSV(\n          clipPoint,\n          s,\n          this.normal,\n          b2WorldManifold.Initialize_s_cB,\n        );\n        const cA: b2Vec2 = b2Vec2.SubVMulSV(\n          clipPoint,\n          radiusA,\n          this.normal,\n          b2WorldManifold.Initialize_s_cA,\n        );\n        b2Vec2.MidVV(cA, cB, this.points[i]);\n        this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cA, cB, b2Vec2.s_t0), this.normal); // b2Dot(cA - cB, normal);\n      }\n\n      // Ensure normal points from A to B.\n      this.normal.SelfNeg();\n    }\n  }\n}\n\n/// This is used for determining the state of contact points.\nexport const enum b2PointState {\n  b2_nullState = 0, ///< point does not exist\n  b2_addState = 1, ///< point was added in the update\n  b2_persistState = 2, ///< point persisted across the update\n  b2_removeState = 3, ///< point was removed in the update\n}\n\n/// Compute the point states given two manifolds. The states pertain to the transition from manifold1\n/// to manifold2. So state1 is either persist or remove while state2 is either add or persist.\nexport function b2GetPointStates(\n  state1: b2PointState[],\n  state2: b2PointState[],\n  manifold1: b2Manifold,\n  manifold2: b2Manifold,\n): void {\n  // Detect persists and removes.\n  let i: number;\n  for (i = 0; i < manifold1.pointCount; ++i) {\n    const id: b2ContactID = manifold1.points[i].id;\n    const key: number = id.key;\n\n    state1[i] = b2PointState.b2_removeState;\n\n    for (let j = 0, jct = manifold2.pointCount; j < jct; ++j) {\n      if (manifold2.points[j].id.key === key) {\n        state1[i] = b2PointState.b2_persistState;\n        break;\n      }\n    }\n  }\n  for (; i < b2_maxManifoldPoints; ++i) {\n    state1[i] = b2PointState.b2_nullState;\n  }\n\n  // Detect persists and adds.\n  for (i = 0; i < manifold2.pointCount; ++i) {\n    const id: b2ContactID = manifold2.points[i].id;\n    const key: number = id.key;\n\n    state2[i] = b2PointState.b2_addState;\n\n    for (let j = 0, jct = manifold1.pointCount; j < jct; ++j) {\n      if (manifold1.points[j].id.key === key) {\n        state2[i] = b2PointState.b2_persistState;\n        break;\n      }\n    }\n  }\n  for (; i < b2_maxManifoldPoints; ++i) {\n    state2[i] = b2PointState.b2_nullState;\n  }\n}\n\n/// Used for computing contact manifolds.\nexport class b2ClipVertex {\n  readonly v: b2Vec2 = new b2Vec2();\n  readonly id: b2ContactID = new b2ContactID();\n\n  static MakeArray(length: number): b2ClipVertex[] {\n    return b2MakeArray(length, (i: number): b2ClipVertex => new b2ClipVertex());\n  }\n\n  Copy(other: b2ClipVertex): b2ClipVertex {\n    this.v.Copy(other.v);\n    this.id.Copy(other.id);\n    return this;\n  }\n}\n\n/// Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\nexport class b2RayCastInput {\n  readonly p1: b2Vec2 = new b2Vec2();\n  readonly p2: b2Vec2 = new b2Vec2();\n  maxFraction = NaN;\n\n  constructor() {\n    this.maxFraction = 1.0;\n  }\n\n  Copy(o: b2RayCastInput): b2RayCastInput {\n    this.p1.Copy(o.p1);\n    this.p2.Copy(o.p2);\n    this.maxFraction = o.maxFraction;\n    return this;\n  }\n}\n\n/// Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2\n/// come from b2RayCastInput.\nexport class b2RayCastOutput {\n  readonly normal: b2Vec2 = new b2Vec2();\n  fraction = NaN;\n\n  constructor() {\n    this.fraction = 0.0;\n  }\n\n  Copy(o: b2RayCastOutput): b2RayCastOutput {\n    this.normal.Copy(o.normal);\n    this.fraction = o.fraction;\n    return this;\n  }\n}\n\n/// An axis aligned bounding box.\nexport class b2AABB {\n  readonly lowerBound: b2Vec2 = new b2Vec2(); ///< the lower vertex\n  readonly upperBound: b2Vec2 = new b2Vec2(); ///< the upper vertex\n\n  readonly m_cache_center: b2Vec2 = new b2Vec2(); // access using GetCenter()\n  readonly m_cache_extent: b2Vec2 = new b2Vec2(); // access using GetExtents()\n\n  Copy(o: b2AABB): b2AABB {\n    this.lowerBound.Copy(o.lowerBound);\n    this.upperBound.Copy(o.upperBound);\n    return this;\n  }\n\n  /// Verify that the bounds are sorted.\n  IsValid(): boolean {\n    if (!this.lowerBound.IsValid()) {\n      return false;\n    }\n    if (!this.upperBound.IsValid()) {\n      return false;\n    }\n    if (this.upperBound.x < this.lowerBound.x) {\n      return false;\n    }\n    if (this.upperBound.y < this.lowerBound.y) {\n      return false;\n    }\n    return true;\n  }\n\n  /// Get the center of the AABB.\n  GetCenter(): b2Vec2 {\n    return b2Vec2.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);\n  }\n\n  /// Get the extents of the AABB (half-widths).\n  GetExtents(): b2Vec2 {\n    return b2Vec2.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);\n  }\n\n  /// Get the perimeter length\n  GetPerimeter(): number {\n    const wx: number = this.upperBound.x - this.lowerBound.x;\n    const wy: number = this.upperBound.y - this.lowerBound.y;\n    return 2 * (wx + wy);\n  }\n\n  /// Combine an AABB into this one.\n  Combine1(aabb: b2AABB): b2AABB {\n    this.lowerBound.x = b2Min(this.lowerBound.x, aabb.lowerBound.x);\n    this.lowerBound.y = b2Min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.x = b2Max(this.upperBound.x, aabb.upperBound.x);\n    this.upperBound.y = b2Max(this.upperBound.y, aabb.upperBound.y);\n    return this;\n  }\n\n  /// Combine two AABBs into this one.\n  Combine2(aabb1: b2AABB, aabb2: b2AABB): b2AABB {\n    this.lowerBound.x = b2Min(aabb1.lowerBound.x, aabb2.lowerBound.x);\n    this.lowerBound.y = b2Min(aabb1.lowerBound.y, aabb2.lowerBound.y);\n    this.upperBound.x = b2Max(aabb1.upperBound.x, aabb2.upperBound.x);\n    this.upperBound.y = b2Max(aabb1.upperBound.y, aabb2.upperBound.y);\n    return this;\n  }\n\n  static Combine(aabb1: b2AABB, aabb2: b2AABB, out: b2AABB): b2AABB {\n    out.Combine2(aabb1, aabb2);\n    return out;\n  }\n\n  /// Does this aabb contain the provided AABB.\n  Contains(aabb: b2AABB): boolean {\n    if (this.lowerBound.x <= aabb.lowerBound.x) {\n      return false;\n    }\n    if (this.lowerBound.y <= aabb.lowerBound.y) {\n      return false;\n    }\n    if (aabb.upperBound.x <= this.upperBound.x) {\n      return false;\n    }\n    if (aabb.upperBound.y <= this.upperBound.y) {\n      return false;\n    }\n    return true;\n  }\n\n  // From Real-time Collision Detection, p179.\n  RayCast(output: b2RayCastOutput, input: b2RayCastInput): boolean {\n    let tmin: number = -b2_maxFloat;\n    let tmax: number = b2_maxFloat;\n\n    const p_x: number = input.p1.x;\n    const p_y: number = input.p1.y;\n    const d_x: number = input.p2.x - input.p1.x;\n    const d_y: number = input.p2.y - input.p1.y;\n    const absD_x: number = b2Abs(d_x);\n    const absD_y: number = b2Abs(d_y);\n\n    const normal: b2Vec2 = output.normal;\n\n    if (absD_x < b2_epsilon) {\n      // Parallel.\n      if (p_x < this.lowerBound.x || this.upperBound.x < p_x) {\n        return false;\n      }\n    } else {\n      const inv_d: number = 1 / d_x;\n      let t1: number = (this.lowerBound.x - p_x) * inv_d;\n      let t2: number = (this.upperBound.x - p_x) * inv_d;\n\n      // Sign of the normal vector.\n      let s = -1;\n\n      if (t1 > t2) {\n        const t3: number = t1;\n        t1 = t2;\n        t2 = t3;\n        s = 1;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.x = s;\n        normal.y = 0;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = b2Min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n\n    if (absD_y < b2_epsilon) {\n      // Parallel.\n      if (p_y < this.lowerBound.y || this.upperBound.y < p_y) {\n        return false;\n      }\n    } else {\n      const inv_d: number = 1 / d_y;\n      let t1: number = (this.lowerBound.y - p_y) * inv_d;\n      let t2: number = (this.upperBound.y - p_y) * inv_d;\n\n      // Sign of the normal vector.\n      let s = -1;\n\n      if (t1 > t2) {\n        const t3: number = t1;\n        t1 = t2;\n        t2 = t3;\n        s = 1;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.x = 0;\n        normal.y = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = b2Min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n\n    // Does the ray start inside the box?\n    // Does the ray intersect beyond the max fraction?\n    if (tmin < 0 || input.maxFraction < tmin) {\n      return false;\n    }\n\n    // Intersection.\n    output.fraction = tmin;\n\n    return true;\n  }\n\n  TestContain(point: XY): boolean {\n    if (point.x < this.lowerBound.x || this.upperBound.x < point.x) {\n      return false;\n    }\n    if (point.y < this.lowerBound.y || this.upperBound.y < point.y) {\n      return false;\n    }\n    return true;\n  }\n\n  TestOverlap(other: b2AABB): boolean {\n    if (this.upperBound.x < other.lowerBound.x) {\n      return false;\n    }\n    if (this.upperBound.y < other.lowerBound.y) {\n      return false;\n    }\n    if (other.upperBound.x < this.lowerBound.x) {\n      return false;\n    }\n    if (other.upperBound.y < this.lowerBound.y) {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport function b2TestOverlapAABB(a: b2AABB, b: b2AABB): boolean {\n  if (a.upperBound.x < b.lowerBound.x) {\n    return false;\n  }\n  if (a.upperBound.y < b.lowerBound.y) {\n    return false;\n  }\n  if (b.upperBound.x < a.lowerBound.x) {\n    return false;\n  }\n  if (b.upperBound.y < a.lowerBound.y) {\n    return false;\n  }\n  return true;\n}\n\n/// Clipping for contact manifolds.\nexport function b2ClipSegmentToLine(\n  vOut: b2ClipVertex[],\n  vIn: b2ClipVertex[],\n  normal: b2Vec2,\n  offset: number,\n  vertexIndexA: number,\n): number {\n  // Start with no output points\n  let numOut = 0;\n\n  const vIn0: b2ClipVertex = vIn[0];\n  const vIn1: b2ClipVertex = vIn[1];\n\n  // Calculate the distance of end points to the line\n  const distance0: number = b2Vec2.DotVV(normal, vIn0.v) - offset;\n  const distance1: number = b2Vec2.DotVV(normal, vIn1.v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0) {\n    vOut[numOut++].Copy(vIn0);\n  }\n  if (distance1 <= 0) {\n    vOut[numOut++].Copy(vIn1);\n  }\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0) {\n    // Find intersection point of edge and plane\n    const interp: number = distance0 / (distance0 - distance1);\n    const v: b2Vec2 = vOut[numOut].v;\n    v.x = vIn0.v.x + interp * (vIn1.v.x - vIn0.v.x);\n    v.y = vIn0.v.y + interp * (vIn1.v.y - vIn0.v.y);\n\n    // VertexA is hitting edgeB.\n    const id: b2ContactID = vOut[numOut].id;\n    id.cf.indexA = vertexIndexA;\n    id.cf.indexB = vIn0.id.cf.indexB;\n    id.cf.typeA = b2ContactFeatureType.e_vertex;\n    id.cf.typeB = b2ContactFeatureType.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n\n/// Determine if two generic shapes overlap.\nconst b2TestOverlapShape_s_input: b2DistanceInput = new b2DistanceInput();\nconst b2TestOverlapShape_s_simplexCache: b2SimplexCache = new b2SimplexCache();\nconst b2TestOverlapShape_s_output: b2DistanceOutput = new b2DistanceOutput();\n\nexport function b2TestOverlapShape(\n  shapeA: b2Shape,\n  indexA: number,\n  shapeB: b2Shape,\n  indexB: number,\n  xfA: b2Transform,\n  xfB: b2Transform,\n): boolean {\n  const input: b2DistanceInput = b2TestOverlapShape_s_input.Reset();\n  input.proxyA.SetShape(shapeA, indexA);\n  input.proxyB.SetShape(shapeB, indexB);\n  input.transformA.Copy(xfA);\n  input.transformB.Copy(xfB);\n  input.useRadii = true;\n\n  const simplexCache: b2SimplexCache = b2TestOverlapShape_s_simplexCache.Reset();\n  simplexCache.count = 0;\n\n  const output: b2DistanceOutput = b2TestOverlapShape_s_output.Reset();\n\n  b2Distance(output, simplexCache, input);\n\n  return output.distance < 10 * b2_epsilon;\n}\n","/*\n * Copyright (c) 2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_aabbExtension, b2_aabbMultiplier, b2Assert } from '../common/b2Settings';\nimport { b2Abs, b2AbsInt, b2Max, b2MaxInt, b2Min, b2Vec2, XY } from '../common/b2Math';\nimport { b2GrowableStack } from '../common/b2GrowableStack';\nimport { b2AABB, b2RayCastInput, b2TestOverlapAABB } from './b2Collision';\n\nfunction verify<T>(value: T | null): T {\n  if (value === null) {\n    throw new Error();\n  }\n  return value!;\n}\n\n/// A node in the dynamic tree. The client does not interact with this directly.\nexport class b2TreeNode<T> {\n  readonly aabb = new b2AABB();\n  parent: b2TreeNode<T> | null = null; // or next\n  child1: b2TreeNode<T> | null = null;\n  child2: b2TreeNode<T> | null = null;\n  height = 0; // leaf = 0, free node = -1\n\n  private _userData: T | null = null;\n\n  constructor(readonly m_id: number) {}\n\n  Reset(): void {\n    this._userData = null;\n  }\n\n  IsLeaf(): boolean {\n    return this.child1 === null;\n  }\n\n  get userData(): T {\n    if (this._userData === null) {\n      throw new Error();\n    }\n    return this._userData;\n  }\n\n  set userData(value: T) {\n    if (this._userData !== null) {\n      throw new Error();\n    }\n    this._userData = value;\n  }\n}\n\nexport class b2DynamicTree<T> {\n  m_root: b2TreeNode<T> | null = null;\n\n  // b2TreeNode* m_nodes;\n  // int32 m_nodeCount;\n  // int32 m_nodeCapacity;\n\n  m_freeList: b2TreeNode<T> | null = null;\n\n  m_insertionCount = 0;\n\n  readonly m_stack = new b2GrowableStack<b2TreeNode<T> | null>(256);\n  static readonly s_r = new b2Vec2();\n  static readonly s_v = new b2Vec2();\n  static readonly s_abs_v = new b2Vec2();\n  static readonly s_segmentAABB = new b2AABB();\n  static readonly s_subInput = new b2RayCastInput();\n  static readonly s_combinedAABB = new b2AABB();\n  static readonly s_aabb = new b2AABB();\n\n  // GetUserData(node: b2TreeNode<T>): T {\n  //   !!B2_DEBUG && b2Assert(node !== null);\n  //   return node.userData;\n  // }\n\n  // GetFatAABB(node: b2TreeNode<T>): b2AABB {\n  //   !!B2_DEBUG && b2Assert(node !== null);\n  //   return node.aabb;\n  // }\n\n  Query(aabb: b2AABB, callback: (node: b2TreeNode<T>) => boolean): void {\n    const stack: b2GrowableStack<b2TreeNode<T> | null> = this.m_stack.Reset();\n    stack.Push(this.m_root);\n\n    while (stack.GetCount() > 0) {\n      const node: b2TreeNode<T> | null = stack.Pop();\n      if (node === null) {\n        continue;\n      }\n\n      if (node.aabb.TestOverlap(aabb)) {\n        if (node.IsLeaf()) {\n          const proceed = callback(node);\n          if (!proceed) {\n            return;\n          }\n        } else {\n          stack.Push(node.child1);\n          stack.Push(node.child2);\n        }\n      }\n    }\n  }\n\n  public Query_(aabb: b2AABB, out: b2TreeNode<T>[]): void {\n    const stack: b2GrowableStack<b2TreeNode<T> | null> = this.m_stack.Reset();\n    stack.Push(this.m_root);\n\n    while (stack.GetCount() > 0) {\n      const node: b2TreeNode<T> | null = stack.Pop();\n      if (node === null) {\n        continue;\n      }\n\n      if (node.aabb.TestOverlap(aabb)) {\n        if (node.IsLeaf()) {\n          out.push(node);\n        } else {\n          stack.Push(node.child1);\n          stack.Push(node.child2);\n        }\n      }\n    }\n  }\n\n  QueryPoint(point: XY, callback: (node: b2TreeNode<T>) => boolean): void {\n    const stack: b2GrowableStack<b2TreeNode<T> | null> = this.m_stack.Reset();\n    stack.Push(this.m_root);\n\n    while (stack.GetCount() > 0) {\n      const node: b2TreeNode<T> | null = stack.Pop();\n      if (node === null) {\n        continue;\n      }\n\n      if (node.aabb.TestContain(point)) {\n        if (node.IsLeaf()) {\n          const proceed = callback(node);\n          if (!proceed) {\n            return;\n          }\n        } else {\n          stack.Push(node.child1);\n          stack.Push(node.child2);\n        }\n      }\n    }\n  }\n\n  RayCast(\n    input: b2RayCastInput,\n    callback: (input: b2RayCastInput, node: b2TreeNode<T>) => number,\n  ): void {\n    const p1: b2Vec2 = input.p1;\n    const p2: b2Vec2 = input.p2;\n    const r: b2Vec2 = b2Vec2.SubVV(p2, p1, b2DynamicTree.s_r);\n    !!B2_DEBUG && b2Assert(r.LengthSquared() > 0);\n    r.Normalize();\n\n    // v is perpendicular to the segment.\n    const v: b2Vec2 = b2Vec2.CrossOneV(r, b2DynamicTree.s_v);\n    const abs_v: b2Vec2 = b2Vec2.AbsV(v, b2DynamicTree.s_abs_v);\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n\n    let maxFraction: number = input.maxFraction;\n\n    // Build a bounding box for the segment.\n    const segmentAABB: b2AABB = b2DynamicTree.s_segmentAABB;\n    let t_x: number = p1.x + maxFraction * (p2.x - p1.x);\n    let t_y: number = p1.y + maxFraction * (p2.y - p1.y);\n    segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\n    segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\n    segmentAABB.upperBound.x = b2Max(p1.x, t_x);\n    segmentAABB.upperBound.y = b2Max(p1.y, t_y);\n\n    const stack: b2GrowableStack<b2TreeNode<T> | null> = this.m_stack.Reset();\n    stack.Push(this.m_root);\n\n    while (stack.GetCount() > 0) {\n      const node: b2TreeNode<T> | null = stack.Pop();\n      if (node === null) {\n        continue;\n      }\n\n      if (!b2TestOverlapAABB(node.aabb, segmentAABB)) {\n        continue;\n      }\n\n      // Separating axis for segment (Gino, p80).\n      // |dot(v, p1 - c)| > dot(|v|, h)\n      const c: b2Vec2 = node.aabb.GetCenter();\n      const h: b2Vec2 = node.aabb.GetExtents();\n      const separation: number =\n        b2Abs(b2Vec2.DotVV(v, b2Vec2.SubVV(p1, c, b2Vec2.s_t0))) - b2Vec2.DotVV(abs_v, h);\n      if (separation > 0) {\n        continue;\n      }\n\n      if (node.IsLeaf()) {\n        const subInput: b2RayCastInput = b2DynamicTree.s_subInput;\n        subInput.p1.Copy(input.p1);\n        subInput.p2.Copy(input.p2);\n        subInput.maxFraction = maxFraction;\n\n        const value: number = callback(subInput, node);\n\n        if (value === 0) {\n          // The client has terminated the ray cast.\n          return;\n        }\n\n        if (value > 0) {\n          // Update segment bounding box.\n          maxFraction = value;\n          t_x = p1.x + maxFraction * (p2.x - p1.x);\n          t_y = p1.y + maxFraction * (p2.y - p1.y);\n          segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\n          segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\n          segmentAABB.upperBound.x = b2Max(p1.x, t_x);\n          segmentAABB.upperBound.y = b2Max(p1.y, t_y);\n        }\n      } else {\n        stack.Push(node.child1);\n        stack.Push(node.child2);\n      }\n    }\n  }\n\n  static s_node_id = 0;\n\n  AllocateNode(): b2TreeNode<T> {\n    // Expand the node pool as needed.\n    if (this.m_freeList !== null) {\n      const node: b2TreeNode<T> = this.m_freeList;\n      this.m_freeList = node.parent; // this.m_freeList = node.next;\n      node.parent = null;\n      node.child1 = null;\n      node.child2 = null;\n      node.height = 0;\n      return node;\n    }\n\n    return new b2TreeNode<T>(b2DynamicTree.s_node_id++);\n  }\n\n  FreeNode(node: b2TreeNode<T>): void {\n    node.parent = this.m_freeList; // node.next = this.m_freeList;\n    node.child1 = null;\n    node.child2 = null;\n    node.height = -1;\n    node.Reset();\n    this.m_freeList = node;\n  }\n\n  CreateProxy(aabb: b2AABB, userData: T): b2TreeNode<T> {\n    const node: b2TreeNode<T> = this.AllocateNode();\n\n    // Fatten the aabb.\n    const r_x: number = b2_aabbExtension;\n    const r_y: number = b2_aabbExtension;\n    node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\n    node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\n    node.aabb.upperBound.x = aabb.upperBound.x + r_x;\n    node.aabb.upperBound.y = aabb.upperBound.y + r_y;\n    node.userData = userData;\n    node.height = 0;\n\n    this.InsertLeaf(node);\n\n    return node;\n  }\n\n  DestroyProxy(node: b2TreeNode<T>): void {\n    !!B2_DEBUG && b2Assert(node.IsLeaf());\n\n    this.RemoveLeaf(node);\n    this.FreeNode(node);\n  }\n\n  MoveProxy(node: b2TreeNode<T>, aabb: b2AABB, displacement: b2Vec2): boolean {\n    !!B2_DEBUG && b2Assert(node.IsLeaf());\n\n    if (node.aabb.Contains(aabb)) {\n      return false;\n    }\n\n    this.RemoveLeaf(node);\n\n    // Extend AABB.\n    const r_x: number = b2_aabbExtension;\n    const r_y: number = b2_aabbExtension;\n    node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\n    node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\n    node.aabb.upperBound.x = aabb.upperBound.x + r_x;\n    node.aabb.upperBound.y = aabb.upperBound.y + r_y;\n\n    // Predict AABB displacement.\n    const d_x: number = b2_aabbMultiplier * displacement.x;\n    const d_y: number = b2_aabbMultiplier * displacement.y;\n\n    if (d_x < 0.0) {\n      node.aabb.lowerBound.x += d_x;\n    } else {\n      node.aabb.upperBound.x += d_x;\n    }\n\n    if (d_y < 0.0) {\n      node.aabb.lowerBound.y += d_y;\n    } else {\n      node.aabb.upperBound.y += d_y;\n    }\n\n    this.InsertLeaf(node);\n    return true;\n  }\n\n  InsertLeaf(leaf: b2TreeNode<T>): void {\n    ++this.m_insertionCount;\n\n    if (this.m_root === null) {\n      this.m_root = leaf;\n      this.m_root.parent = null;\n      return;\n    }\n\n    // Find the best sibling for this node\n    const leafAABB: b2AABB = leaf.aabb;\n    let sibling: b2TreeNode<T> = this.m_root;\n    while (!sibling.IsLeaf()) {\n      const child1: b2TreeNode<T> = verify(sibling.child1);\n      const child2: b2TreeNode<T> = verify(sibling.child2);\n\n      const area: number = sibling.aabb.GetPerimeter();\n\n      const combinedAABB: b2AABB = b2DynamicTree.s_combinedAABB;\n      combinedAABB.Combine2(sibling.aabb, leafAABB);\n      const combinedArea: number = combinedAABB.GetPerimeter();\n\n      // Cost of creating a new parent for this node and the new leaf\n      const cost: number = 2 * combinedArea;\n\n      // Minimum cost of pushing the leaf further down the tree\n      const inheritanceCost: number = 2 * (combinedArea - area);\n\n      // Cost of descending into child1\n      let cost1: number;\n      const aabb: b2AABB = b2DynamicTree.s_aabb;\n      let oldArea: number;\n      let newArea: number;\n      if (child1.IsLeaf()) {\n        aabb.Combine2(leafAABB, child1.aabb);\n        cost1 = aabb.GetPerimeter() + inheritanceCost;\n      } else {\n        aabb.Combine2(leafAABB, child1.aabb);\n        oldArea = child1.aabb.GetPerimeter();\n        newArea = aabb.GetPerimeter();\n        cost1 = newArea - oldArea + inheritanceCost;\n      }\n\n      // Cost of descending into child2\n      let cost2: number;\n      if (child2.IsLeaf()) {\n        aabb.Combine2(leafAABB, child2.aabb);\n        cost2 = aabb.GetPerimeter() + inheritanceCost;\n      } else {\n        aabb.Combine2(leafAABB, child2.aabb);\n        oldArea = child2.aabb.GetPerimeter();\n        newArea = aabb.GetPerimeter();\n        cost2 = newArea - oldArea + inheritanceCost;\n      }\n\n      // Descend according to the minimum cost.\n      if (cost < cost1 && cost < cost2) {\n        break;\n      }\n\n      // Descend\n      if (cost1 < cost2) {\n        sibling = child1;\n      } else {\n        sibling = child2;\n      }\n    }\n\n    // Create a parent for the siblings.\n    const oldParent: b2TreeNode<T> | null = sibling.parent;\n    const newParent: b2TreeNode<T> = this.AllocateNode();\n    newParent.parent = oldParent;\n    newParent.aabb.Combine2(leafAABB, sibling.aabb);\n    newParent.height = sibling.height + 1;\n\n    if (oldParent !== null) {\n      // The sibling was not the root.\n      if (oldParent.child1 === sibling) {\n        oldParent.child1 = newParent;\n      } else {\n        oldParent.child2 = newParent;\n      }\n\n      newParent.child1 = sibling;\n      newParent.child2 = leaf;\n      sibling.parent = newParent;\n      leaf.parent = newParent;\n    } else {\n      // The sibling was the root.\n      newParent.child1 = sibling;\n      newParent.child2 = leaf;\n      sibling.parent = newParent;\n      leaf.parent = newParent;\n      this.m_root = newParent;\n    }\n\n    // Walk back up the tree fixing heights and AABBs\n    let node: b2TreeNode<T> | null = leaf.parent;\n    while (node !== null) {\n      const n = this.Balance(node);\n\n      const child1: b2TreeNode<T> = verify(n.child1);\n      const child2: b2TreeNode<T> = verify(n.child2);\n\n      n.height = 1 + b2MaxInt(child1.height, child2.height);\n      n.aabb.Combine2(child1.aabb, child2.aabb);\n\n      node = n.parent;\n    }\n\n    // this.Validate();\n  }\n\n  RemoveLeaf(leaf: b2TreeNode<T>): void {\n    if (leaf === this.m_root) {\n      this.m_root = null;\n      return;\n    }\n\n    const parent: b2TreeNode<T> = verify(leaf.parent);\n    const grandParent: b2TreeNode<T> | null = parent && parent.parent;\n    const sibling: b2TreeNode<T> = verify(parent.child1 === leaf ? parent.child2 : parent.child1);\n\n    if (grandParent !== null) {\n      // Destroy parent and connect sibling to grandParent.\n      if (grandParent.child1 === parent) {\n        grandParent.child1 = sibling;\n      } else {\n        grandParent.child2 = sibling;\n      }\n      sibling.parent = grandParent;\n      this.FreeNode(parent);\n\n      // Adjust ancestor bounds.\n      let index: b2TreeNode<T> | null = grandParent;\n      while (index !== null) {\n        index = this.Balance(index);\n\n        const child1: b2TreeNode<T> = verify(index.child1);\n        const child2: b2TreeNode<T> = verify(index.child2);\n\n        index.aabb.Combine2(child1.aabb, child2.aabb);\n        index.height = 1 + b2MaxInt(child1.height, child2.height);\n\n        index = index.parent;\n      }\n    } else {\n      this.m_root = sibling;\n      sibling.parent = null;\n      this.FreeNode(parent);\n    }\n\n    // this.Validate();\n  }\n\n  Balance(A: b2TreeNode<T>): b2TreeNode<T> {\n    !!B2_DEBUG && b2Assert(A !== null);\n\n    if (A.IsLeaf() || A.height < 2) {\n      return A;\n    }\n\n    const B: b2TreeNode<T> = verify(A.child1);\n    const C: b2TreeNode<T> = verify(A.child2);\n\n    const balance: number = C.height - B.height;\n\n    // Rotate C up\n    if (balance > 1) {\n      return this.Rotate_C_Up(A, B, C);\n    }\n\n    // Rotate B up\n    else if (balance < -1) {\n      return this.Rotate_B_Up(A, B, C);\n    }\n\n    return A;\n  }\n\n  Rotate_C_Up(A: b2TreeNode<T>, B: b2TreeNode<T>, C: b2TreeNode<T>): b2TreeNode<T> {\n    const F: b2TreeNode<T> = verify(C.child1);\n    const G: b2TreeNode<T> = verify(C.child2);\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent !== null) {\n      if (C.parent.child1 === A) {\n        C.parent.child1 = C;\n      } else {\n        !!B2_DEBUG && b2Assert(C.parent.child2 === A);\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.Combine2(B.aabb, G.aabb);\n      C.aabb.Combine2(A.aabb, F.aabb);\n\n      A.height = 1 + b2MaxInt(B.height, G.height);\n      C.height = 1 + b2MaxInt(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.Combine2(B.aabb, F.aabb);\n      C.aabb.Combine2(A.aabb, G.aabb);\n\n      A.height = 1 + b2MaxInt(B.height, F.height);\n      C.height = 1 + b2MaxInt(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  Rotate_B_Up(A: b2TreeNode<T>, B: b2TreeNode<T>, C: b2TreeNode<T>): b2TreeNode<T> {\n    const D: b2TreeNode<T> = verify(B.child1);\n    const E: b2TreeNode<T> = verify(B.child2);\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent !== null) {\n      if (B.parent.child1 === A) {\n        B.parent.child1 = B;\n      } else {\n        !!B2_DEBUG && b2Assert(B.parent.child2 === A);\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.Combine2(C.aabb, E.aabb);\n      B.aabb.Combine2(A.aabb, D.aabb);\n\n      A.height = 1 + b2MaxInt(C.height, E.height);\n      B.height = 1 + b2MaxInt(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.Combine2(C.aabb, D.aabb);\n      B.aabb.Combine2(A.aabb, E.aabb);\n\n      A.height = 1 + b2MaxInt(C.height, D.height);\n      B.height = 1 + b2MaxInt(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  GetHeight(): number {\n    if (this.m_root === null) {\n      return 0;\n    }\n\n    return this.m_root.height;\n  }\n\n  private static GetAreaNode<T>(node: b2TreeNode<T> | null): number {\n    if (node === null) {\n      return 0;\n    }\n\n    if (node.IsLeaf()) {\n      return 0;\n    }\n\n    let area: number = node.aabb.GetPerimeter();\n    area += b2DynamicTree.GetAreaNode(node.child1);\n    area += b2DynamicTree.GetAreaNode(node.child2);\n    return area;\n  }\n\n  GetAreaRatio(): number {\n    if (this.m_root === null) {\n      return 0;\n    }\n\n    const root: b2TreeNode<T> = this.m_root;\n    const rootArea: number = root.aabb.GetPerimeter();\n\n    const totalArea: number = b2DynamicTree.GetAreaNode(this.m_root);\n\n    /*\n        float32 totalArea = 0.0;\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\n          const b2TreeNode<T>* node = m_nodes + i;\n          if (node.height < 0) {\n            // Free node in pool\n            continue;\n          }\n\n          totalArea += node.aabb.GetPerimeter();\n        }\n        */\n\n    return totalArea / rootArea;\n  }\n\n  static ComputeHeightNode<T>(node: b2TreeNode<T> | null): number {\n    if (node === null || node.IsLeaf()) {\n      return 0;\n    }\n\n    const height1: number = b2DynamicTree.ComputeHeightNode(node.child1);\n    const height2: number = b2DynamicTree.ComputeHeightNode(node.child2);\n    return 1 + b2MaxInt(height1, height2);\n  }\n\n  ComputeHeight(): number {\n    const height: number = b2DynamicTree.ComputeHeightNode(this.m_root);\n    return height;\n  }\n\n  ValidateStructure(node: b2TreeNode<T> | null): void {\n    if (node === null) {\n      return;\n    }\n\n    if (node === this.m_root) {\n      !!B2_DEBUG && b2Assert(node.parent === null);\n    }\n\n    if (node.IsLeaf()) {\n      if (B2_DEBUG) {\n        b2Assert(node.child1 === null);\n        b2Assert(node.child2 === null);\n        b2Assert(node.height === 0);\n      }\n      return;\n    }\n\n    const child1: b2TreeNode<T> = verify(node.child1);\n    const child2: b2TreeNode<T> = verify(node.child2);\n\n    if (B2_DEBUG) {\n      // TODO: index\n      // b2Assert(child1.parent === index);\n      // b2Assert(child2.parent === index);\n    }\n\n    this.ValidateStructure(child1);\n    this.ValidateStructure(child2);\n  }\n\n  ValidateMetrics(node: b2TreeNode<T> | null): void {\n    if (node === null) {\n      return;\n    }\n\n    if (node.IsLeaf()) {\n      if (B2_DEBUG) {\n        b2Assert(node.child1 === null);\n        b2Assert(node.child2 === null);\n        b2Assert(node.height === 0);\n      }\n      return;\n    }\n\n    const child1: b2TreeNode<T> = verify(node.child1);\n    const child2: b2TreeNode<T> = verify(node.child2);\n\n    if (B2_DEBUG) {\n      const height1 = child1.height;\n      const height2 = child2.height;\n      const height = 1 + b2MaxInt(height1, height2);\n      b2Assert(node.height === height);\n    }\n\n    const aabb: b2AABB = b2DynamicTree.s_aabb;\n    aabb.Combine2(child1.aabb, child2.aabb);\n\n    if (B2_DEBUG) {\n      b2Assert(aabb.lowerBound === node.aabb.lowerBound);\n      b2Assert(aabb.upperBound === node.aabb.upperBound);\n    }\n\n    this.ValidateMetrics(child1);\n    this.ValidateMetrics(child2);\n  }\n\n  Validate(): void {\n    !!B2_DEBUG && this.ValidateStructure(this.m_root);\n    !!B2_DEBUG && this.ValidateMetrics(this.m_root);\n\n    // let freeCount: number = 0;\n    // let freeIndex: b2TreeNode<T> | null = this.m_freeList;\n    // while (freeIndex !== null) {\n    //   freeIndex = freeIndex.parent; // freeIndex = freeIndex.next;\n    //   ++freeCount;\n    // }\n\n    !!B2_DEBUG && b2Assert(this.GetHeight() === this.ComputeHeight());\n\n    // b2Assert(this.m_nodeCount + freeCount === this.m_nodeCapacity);\n  }\n\n  private static GetMaxBalanceNode<T>(node: b2TreeNode<T> | null, maxBalance: number): number {\n    if (node === null) {\n      return maxBalance;\n    }\n\n    if (node.height <= 1) {\n      return maxBalance;\n    }\n\n    !!B2_DEBUG && b2Assert(!node.IsLeaf());\n\n    const child1: b2TreeNode<T> = verify(node.child1);\n    const child2: b2TreeNode<T> = verify(node.child2);\n    const balance: number = b2AbsInt(child2.height - child1.height);\n    return b2MaxInt(maxBalance, balance);\n  }\n\n  GetMaxBalance(): number {\n    const maxBalance: number = b2DynamicTree.GetMaxBalanceNode(this.m_root, 0);\n\n    /*\n        int32 maxBalance = 0;\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\n          const b2TreeNode<T>* node = m_nodes + i;\n          if (node.height <= 1) {\n            continue;\n          }\n\n          b2Assert(!node.IsLeaf());\n\n          int32 child1 = node.child1;\n          int32 child2 = node.child2;\n          int32 balance = b2Abs(m_nodes[child2].height - m_nodes[child1].height);\n          maxBalance = b2Max(maxBalance, balance);\n        }\n        */\n\n    return maxBalance;\n  }\n\n  RebuildBottomUp(): void {\n    /*\n        int32* nodes = (int32*)b2Alloc(m_nodeCount * sizeof(int32));\n        int32 count = 0;\n\n        // Build array of leaves. Free the rest.\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\n          if (m_nodes[i].height < 0) {\n            // free node in pool\n            continue;\n          }\n\n          if (m_nodes[i].IsLeaf()) {\n            m_nodes[i].parent = b2_nullNode;\n            nodes[count] = i;\n            ++count;\n          } else {\n            FreeNode(i);\n          }\n        }\n\n        while (count > 1) {\n          float32 minCost = b2_maxFloat;\n          int32 iMin = -1, jMin = -1;\n          for (int32 i = 0; i < count; ++i) {\n            b2AABB aabbi = m_nodes[nodes[i]].aabb;\n\n            for (int32 j = i + 1; j < count; ++j) {\n              b2AABB aabbj = m_nodes[nodes[j]].aabb;\n              b2AABB b;\n              b.Combine(aabbi, aabbj);\n              float32 cost = b.GetPerimeter();\n              if (cost < minCost) {\n                iMin = i;\n                jMin = j;\n                minCost = cost;\n              }\n            }\n          }\n\n          int32 index1 = nodes[iMin];\n          int32 index2 = nodes[jMin];\n          b2TreeNode<T>* child1 = m_nodes + index1;\n          b2TreeNode<T>* child2 = m_nodes + index2;\n\n          int32 parentIndex = AllocateNode();\n          b2TreeNode<T>* parent = m_nodes + parentIndex;\n          parent.child1 = index1;\n          parent.child2 = index2;\n          parent.height = 1 + b2Max(child1.height, child2.height);\n          parent.aabb.Combine(child1.aabb, child2.aabb);\n          parent.parent = b2_nullNode;\n\n          child1.parent = parentIndex;\n          child2.parent = parentIndex;\n\n          nodes[jMin] = nodes[count-1];\n          nodes[iMin] = parentIndex;\n          --count;\n        }\n\n        m_root = nodes[0];\n        b2Free(nodes);\n        */\n\n    this.Validate();\n  }\n\n  private static ShiftOriginNode<T>(node: b2TreeNode<T> | null, newOrigin: XY): void {\n    if (node === null) {\n      return;\n    }\n\n    if (node.height <= 1) {\n      return;\n    }\n\n    !!B2_DEBUG && b2Assert(!node.IsLeaf());\n\n    const child1: b2TreeNode<T> | null = node.child1;\n    const child2: b2TreeNode<T> | null = node.child2;\n    b2DynamicTree.ShiftOriginNode(child1, newOrigin);\n    b2DynamicTree.ShiftOriginNode(child2, newOrigin);\n\n    node.aabb.lowerBound.SelfSub(newOrigin);\n    node.aabb.upperBound.SelfSub(newOrigin);\n  }\n\n  ShiftOrigin(newOrigin: XY): void {\n    b2DynamicTree.ShiftOriginNode(this.m_root, newOrigin);\n\n    /*\n        // Build array of leaves. Free the rest.\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\n          m_nodes[i].aabb.lowerBound -= newOrigin;\n          m_nodes[i].aabb.upperBound -= newOrigin;\n        }\n        */\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Vec2, XY } from '../common/b2Math';\nimport { b2AABB, b2RayCastInput } from './b2Collision';\nimport { b2DynamicTree, b2TreeNode } from './b2DynamicTree';\n\nfunction std_iter_swap<T>(array: T[], a: number, b: number): void {\n  const tmp: T = array[a];\n  array[a] = array[b];\n  array[b] = tmp;\n}\n\nfunction default_compare<T>(a: T, b: T): boolean {\n  return a < b;\n}\n\nfunction std_sort<T>(\n  array: T[],\n  first = 0,\n  len: number = array.length - first,\n  cmp: (a: T, b: T) => boolean = default_compare,\n): T[] {\n  let left = first;\n  const stack: number[] = [];\n  let pos = 0;\n\n  for (;;) {\n    /* outer loop */\n    for (; left + 1 < len; len++) {\n      /* sort left to len-1 */\n      const pivot = array[left + Math.floor(Math.random() * (len - left))]; /* pick random pivot */\n      stack[pos++] = len; /* sort right part later */\n      for (let right = left - 1; ; ) {\n        /* inner loop: partitioning */\n        // eslint-disable-next-line no-empty\n        while (cmp(array[++right], pivot)) {} /* look for greater element */\n        // eslint-disable-next-line no-empty\n        while (cmp(pivot, array[--len])) {} /* look for smaller element */\n        if (right >= len) {\n          break;\n        } /* partition point found? */\n        std_iter_swap(array, right, len); /* the only swap */\n      } /* partitioned, continue left part */\n    }\n    if (pos === 0) {\n      break;\n    } /* stack empty? */\n    left = len; /* left to right is sorted */\n    len = stack[--pos]; /* get next range to sort */\n  }\n\n  return array;\n}\n\nexport class b2Pair<T> {\n  constructor(public proxyA: b2TreeNode<T>, public proxyB: b2TreeNode<T>) {}\n}\n\n/// The broad-phase is used for computing pairs and performing volume queries and ray casts.\n/// This broad-phase does not persist pairs. Instead, this reports potentially new pairs.\n/// It is up to the client to consume the new pairs and to track subsequent overlap.\nexport class b2BroadPhase<T> {\n  private _queryCache: b2TreeNode<T>[] = [];\n\n  readonly m_tree: b2DynamicTree<T> = new b2DynamicTree<T>();\n  m_proxyCount = 0;\n  // m_moveCapacity: number = 16;\n  m_moveCount = 0;\n  readonly m_moveBuffer: Array<b2TreeNode<T> | null> = [];\n  // m_pairCapacity: number = 16;\n  m_pairCount = 0;\n  readonly m_pairBuffer: Array<b2Pair<T>> = [];\n  // m_queryProxyId: number = 0;\n\n  /// Create a proxy with an initial AABB. Pairs are not reported until\n  /// UpdatePairs is called.\n  CreateProxy(aabb: b2AABB, userData: T): b2TreeNode<T> {\n    const proxy: b2TreeNode<T> = this.m_tree.CreateProxy(aabb, userData);\n    ++this.m_proxyCount;\n    this.BufferMove(proxy);\n    return proxy;\n  }\n\n  /// Destroy a proxy. It is up to the client to remove any pairs.\n  DestroyProxy(proxy: b2TreeNode<T>): void {\n    this.UnBufferMove(proxy);\n    --this.m_proxyCount;\n    this.m_tree.DestroyProxy(proxy);\n  }\n\n  /// Call MoveProxy as many times as you like, then when you are done\n  /// call UpdatePairs to finalized the proxy pairs (for your time step).\n  MoveProxy(proxy: b2TreeNode<T>, aabb: b2AABB, displacement: b2Vec2): void {\n    const buffer: boolean = this.m_tree.MoveProxy(proxy, aabb, displacement);\n    if (buffer) {\n      this.BufferMove(proxy);\n    }\n  }\n\n  /// Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.\n  TouchProxy(proxy: b2TreeNode<T>): void {\n    this.BufferMove(proxy);\n  }\n\n  /// Get the fat AABB for a proxy.\n  // GetFatAABB(proxy: b2TreeNode<T>): b2AABB {\n  //   return this.m_tree.GetFatAABB(proxy);\n  // }\n\n  /// Get user data from a proxy. Returns NULL if the id is invalid.\n  // GetUserData(proxy: b2TreeNode<T>): T {\n  //   return this.m_tree.GetUserData(proxy);\n  // }\n\n  /// Test overlap of fat AABBs.\n  // TestOverlap(proxyA: b2TreeNode<T>, proxyB: b2TreeNode<T>): boolean {\n  //   const aabbA: b2AABB = this.m_tree.GetFatAABB(proxyA);\n  //   const aabbB: b2AABB = this.m_tree.GetFatAABB(proxyB);\n  //   return b2TestOverlapAABB(aabbA, aabbB);\n  // }\n\n  /// Get the number of proxies.\n  GetProxyCount(): number {\n    return this.m_proxyCount;\n  }\n\n  /// Update the pairs. This results in pair callbacks. This can only add pairs.\n  // UpdatePairs(callback: (a: T, b: T) => void): void {\n  //   // Reset pair buffer\n  //   this.m_pairCount = 0;\n  //\n  //   // Perform tree queries for all moving proxies.\n  //   for (let i = 0; i < this.m_moveCount; ++i) {\n  //     const queryProxy: b2TreeNode<T> | null = this.m_moveBuffer[i];\n  //     if (queryProxy === null) {\n  //       continue;\n  //     }\n  //\n  //     // This is called from box2d.b2DynamicTree::Query when we are gathering pairs.\n  //     // boolean b2BroadPhase::QueryCallback(int32 proxyId);\n  //\n  //     // We have to query the tree with the fat AABB so that\n  //     // we don't fail to create a pair that may touch later.\n  //     const fatAABB: b2AABB = queryProxy.aabb; // this.m_tree.GetFatAABB(queryProxy);\n  //\n  //     // Query tree, create pairs and add them pair buffer.\n  //     this.m_tree.Query(fatAABB, (proxy: b2TreeNode<T>): boolean => {\n  //       // A proxy cannot form a pair with itself.\n  //       if (proxy.m_id === queryProxy.m_id) {\n  //         return true;\n  //       }\n  //\n  //       // const proxyA = proxy < queryProxy ? proxy : queryProxy;\n  //       // const proxyB = proxy >= queryProxy ? proxy : queryProxy;\n  //       let proxyA: b2TreeNode<T>;\n  //       let proxyB: b2TreeNode<T>;\n  //       if (proxy.m_id < queryProxy.m_id) {\n  //         proxyA = proxy;\n  //         proxyB = queryProxy;\n  //       } else {\n  //         proxyA = queryProxy;\n  //         proxyB = proxy;\n  //       }\n  //\n  //       // Grow the pair buffer as needed.\n  //       if (this.m_pairCount === this.m_pairBuffer.length) {\n  //         this.m_pairBuffer[this.m_pairCount] = new b2Pair(proxyA, proxyB);\n  //       } else {\n  //         const pair: b2Pair<T> = this.m_pairBuffer[this.m_pairCount];\n  //         pair.proxyA = proxyA;\n  //         pair.proxyB = proxyB;\n  //       }\n  //\n  //       ++this.m_pairCount;\n  //\n  //       return true;\n  //     });\n  //   }\n  //\n  //   // Reset move buffer\n  //   this.m_moveCount = 0;\n  //\n  //   // Sort the pair buffer to expose duplicates.\n  //   std_sort(this.m_pairBuffer, 0, this.m_pairCount, b2PairLessThan);\n  //\n  //   // Send the pairs back to the client.\n  //   let i: number = 0;\n  //   while (i < this.m_pairCount) {\n  //     const primaryPair: b2Pair<T> = this.m_pairBuffer[i];\n  //     const userDataA: T = primaryPair.proxyA.userData; // this.m_tree.GetUserData(primaryPair.proxyA);\n  //     const userDataB: T = primaryPair.proxyB.userData; // this.m_tree.GetUserData(primaryPair.proxyB);\n  //\n  //     callback(userDataA, userDataB);\n  //     ++i;\n  //\n  //     // Skip any duplicate pairs.\n  //     while (i < this.m_pairCount) {\n  //       const pair: b2Pair<T> = this.m_pairBuffer[i];\n  //       if (pair.proxyA.m_id !== primaryPair.proxyA.m_id || pair.proxyB.m_id !== primaryPair.proxyB.m_id) {\n  //         break;\n  //       }\n  //       ++i;\n  //     }\n  //   }\n  //\n  //   // Try to keep the tree balanced.\n  //   // this.m_tree.Rebalance(4);\n  // }\n\n  /// Update the pairs. This results in pair callbacks. This can only add pairs.\n  UpdatePairs_(a: T[], b: T[]): void {\n    // Reset pair buffer\n    this.m_pairCount = 0;\n\n    // Perform tree queries for all moving proxies.\n    this._PerformTreeQueriesForMovingProxies();\n\n    // Reset move buffer\n    this.m_moveCount = 0;\n\n    // Sort the pair buffer to expose duplicates.\n    std_sort(this.m_pairBuffer, 0, this.m_pairCount, b2PairLessThan);\n\n    // Send the pairs back to the client.\n    this._SendPairsBackToClient(a, b);\n\n    // Try to keep the tree balanced.\n    // this.m_tree.Rebalance(4);\n  }\n\n  _PerformTreeQueriesForMovingProxies(): void {\n    // Perform tree queries for all moving proxies.\n    for (let i = 0; i < this.m_moveCount; ++i) {\n      const queryProxy: b2TreeNode<T> | null = this.m_moveBuffer[i];\n      if (queryProxy === null) {\n        continue;\n      }\n\n      // This is called from box2d.b2DynamicTree::Query when we are gathering pairs.\n      // boolean b2BroadPhase::QueryCallback(int32 proxyId);\n\n      // We have to query the tree with the fat AABB so that\n      // we don't fail to create a pair that may touch later.\n      const fatAABB: b2AABB = queryProxy.aabb; // this.m_tree.GetFatAABB(queryProxy);\n\n      this._queryCache.length = 0;\n      // Query tree, create pairs and add them pair buffer.\n      this.m_tree.Query_(fatAABB, this._queryCache);\n      for (let j = 0; j < this._queryCache.length; ++j) {\n        const proxy: b2TreeNode<T> = this._queryCache[j];\n        // A proxy cannot form a pair with itself.\n        if (proxy.m_id === queryProxy.m_id) {\n          continue;\n        }\n\n        // const proxyA = proxy < queryProxy ? proxy : queryProxy;\n        // const proxyB = proxy >= queryProxy ? proxy : queryProxy;\n        let proxyA: b2TreeNode<T>;\n        let proxyB: b2TreeNode<T>;\n        if (proxy.m_id < queryProxy.m_id) {\n          proxyA = proxy;\n          proxyB = queryProxy;\n        } else {\n          proxyA = queryProxy;\n          proxyB = proxy;\n        }\n\n        // Grow the pair buffer as needed.\n        if (this.m_pairCount === this.m_pairBuffer.length) {\n          this.m_pairBuffer[this.m_pairCount] = new b2Pair(proxyA, proxyB);\n        } else {\n          const pair: b2Pair<T> = this.m_pairBuffer[this.m_pairCount];\n          pair.proxyA = proxyA;\n          pair.proxyB = proxyB;\n        }\n\n        ++this.m_pairCount;\n      }\n    }\n  }\n\n  _SendPairsBackToClient(a: T[], b: T[]) {\n    const count = this.m_pairCount;\n    let i = 0;\n    let j = 0;\n    while (i < count) {\n      const primaryPair: b2Pair<T> = this.m_pairBuffer[i];\n      a[j] = primaryPair.proxyA.userData; // this.m_tree.GetUserData(primaryPair.proxyA);\n      b[j] = primaryPair.proxyB.userData; // this.m_tree.GetUserData(primaryPair.proxyB);\n      ++j;\n      ++i;\n\n      // Skip any duplicate pairs.\n      while (i < count) {\n        const pair: b2Pair<T> = this.m_pairBuffer[i];\n        if (\n          pair.proxyA.m_id !== primaryPair.proxyA.m_id ||\n          pair.proxyB.m_id !== primaryPair.proxyB.m_id\n        ) {\n          break;\n        }\n        ++i;\n      }\n    }\n  }\n\n  /// Query an AABB for overlapping proxies. The callback class\n  /// is called for each proxy that overlaps the supplied AABB.\n  Query(aabb: b2AABB, callback: (node: b2TreeNode<T>) => boolean): void {\n    this.m_tree.Query(aabb, callback);\n  }\n\n  QueryPoint(point: XY, callback: (node: b2TreeNode<T>) => boolean): void {\n    this.m_tree.QueryPoint(point, callback);\n  }\n\n  /// Ray-cast against the proxies in the tree. This relies on the callback\n  /// to perform a exact ray-cast in the case were the proxy contains a shape.\n  /// The callback also performs the any collision filtering. This has performance\n  /// roughly equal to k * log(n), where k is the number of collisions and n is the\n  /// number of proxies in the tree.\n  /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n  /// @param callback a callback class that is called for each proxy that is hit by the ray.\n  RayCast(\n    input: b2RayCastInput,\n    callback: (input: b2RayCastInput, node: b2TreeNode<T>) => number,\n  ): void {\n    this.m_tree.RayCast(input, callback);\n  }\n\n  /// Get the height of the embedded tree.\n  GetTreeHeight(): number {\n    return this.m_tree.GetHeight();\n  }\n\n  /// Get the balance of the embedded tree.\n  GetTreeBalance(): number {\n    return this.m_tree.GetMaxBalance();\n  }\n\n  /// Get the quality metric of the embedded tree.\n  GetTreeQuality(): number {\n    return this.m_tree.GetAreaRatio();\n  }\n\n  /// Shift the world origin. Useful for large worlds.\n  /// The shift formula is: position -= newOrigin\n  /// @param newOrigin the new origin with respect to the old origin\n  ShiftOrigin(newOrigin: XY): void {\n    this.m_tree.ShiftOrigin(newOrigin);\n  }\n\n  BufferMove(proxy: b2TreeNode<T>): void {\n    this.m_moveBuffer[this.m_moveCount] = proxy;\n    ++this.m_moveCount;\n  }\n\n  UnBufferMove(proxy: b2TreeNode<T>): void {\n    const i: number = this.m_moveBuffer.indexOf(proxy);\n    if (i >= 0) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/// This is used to sort pairs.\nfunction b2PairLessThan<T>(pair1: b2Pair<T>, pair2: b2Pair<T>): boolean {\n  if (pair1.proxyA.m_id < pair2.proxyA.m_id) {\n    return true;\n  }\n\n  if (pair1.proxyA.m_id === pair2.proxyA.m_id) {\n    return pair1.proxyB.m_id < pair2.proxyB.m_id;\n  }\n\n  return false;\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2_maxPolygonVertices, b2Assert } from '../common/b2Settings';\nimport { b2Abs, b2Max, b2MaxInt, b2Rot, b2Sweep, b2Transform, b2Vec2 } from '../common/b2Math';\nimport { b2Timer } from '../common/b2Timer';\nimport {\n  b2Distance,\n  b2DistanceInput,\n  b2DistanceOutput,\n  b2DistanceProxy,\n  b2SimplexCache,\n} from './b2Distance';\n\nclass TOIStats {\n  time = 0;\n  maxTime = 0;\n  calls = 0;\n  iters = 0;\n  maxIters = 0;\n  rootIters = 0;\n  maxRootIters = 0;\n\n  constructor() {\n    this.time = 0.0;\n    this.maxTime = 0.0;\n  }\n\n  Reset() {\n    this.time = 0.0;\n    this.maxTime = 0.0;\n    this.calls = 0;\n    this.iters = 0;\n    this.maxIters = 0;\n    this.rootIters = 0;\n    this.maxRootIters = 0;\n  }\n}\n\nexport const b2_toiStats = new TOIStats();\n\nconst b2TimeOfImpact_s_xfA = new b2Transform();\nconst b2TimeOfImpact_s_xfB = new b2Transform();\nconst b2TimeOfImpact_s_pointA = new b2Vec2();\nconst b2TimeOfImpact_s_pointB = new b2Vec2();\nconst b2TimeOfImpact_s_normal = new b2Vec2();\nconst b2TimeOfImpact_s_axisA = new b2Vec2();\nconst b2TimeOfImpact_s_axisB = new b2Vec2();\n\n/// Input parameters for b2TimeOfImpact\nexport class b2TOIInput {\n  readonly proxyA = new b2DistanceProxy();\n  readonly proxyB = new b2DistanceProxy();\n  readonly sweepA = new b2Sweep();\n  readonly sweepB = new b2Sweep();\n  tMax = NaN; // defines sweep interval [0, tMax]\n  constructor() {\n    this.tMax = 0.0;\n  }\n}\n\n/// Output parameters for b2TimeOfImpact.\nexport const enum b2TOIOutputState {\n  e_unknown = 0,\n  e_failed = 1,\n  e_overlapped = 2,\n  e_touching = 3,\n  e_separated = 4,\n}\n\nexport class b2TOIOutput {\n  state = b2TOIOutputState.e_unknown;\n  t = NaN;\n\n  constructor() {\n    this.t = 0.0;\n  }\n}\n\nexport const enum b2SeparationFunctionType {\n  e_unknown = -1,\n  e_points = 0,\n  e_faceA = 1,\n  e_faceB = 2,\n}\n\nexport class b2SeparationFunction {\n  m_proxyA!: b2DistanceProxy;\n  m_proxyB!: b2DistanceProxy;\n  readonly m_sweepA: b2Sweep = new b2Sweep();\n  readonly m_sweepB: b2Sweep = new b2Sweep();\n  m_type: b2SeparationFunctionType = b2SeparationFunctionType.e_unknown;\n  readonly m_localPoint: b2Vec2 = new b2Vec2();\n  readonly m_axis: b2Vec2 = new b2Vec2();\n\n  Initialize(\n    cache: b2SimplexCache,\n    proxyA: b2DistanceProxy,\n    sweepA: b2Sweep,\n    proxyB: b2DistanceProxy,\n    sweepB: b2Sweep,\n    t1: number,\n  ): number {\n    this.m_proxyA = proxyA;\n    this.m_proxyB = proxyB;\n    const count: number = cache.count;\n    !!B2_DEBUG && b2Assert(0 < count && count < 3);\n\n    this.m_sweepA.Copy(sweepA);\n    this.m_sweepB.Copy(sweepB);\n\n    const xfA: b2Transform = b2TimeOfImpact_s_xfA;\n    const xfB: b2Transform = b2TimeOfImpact_s_xfB;\n    this.m_sweepA.GetTransform(xfA, t1);\n    this.m_sweepB.GetTransform(xfB, t1);\n\n    if (count === 1) {\n      this.m_type = b2SeparationFunctionType.e_points;\n      const localPointA: b2Vec2 = this.m_proxyA.GetVertex(cache.indexA[0]);\n      const localPointB: b2Vec2 = this.m_proxyB.GetVertex(cache.indexB[0]);\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n      b2Vec2.SubVV(pointB, pointA, this.m_axis);\n      const s: number = this.m_axis.Normalize();\n      if (B2_ENABLE_PARTICLE) {\n        this.m_localPoint.SetZero();\n      }\n      return s;\n    } else if (cache.indexA[0] === cache.indexA[1]) {\n      // Two points on B and one on A.\n      this.m_type = b2SeparationFunctionType.e_faceB;\n      const localPointB1: b2Vec2 = this.m_proxyB.GetVertex(cache.indexB[0]);\n      const localPointB2: b2Vec2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n\n      b2Vec2\n        .CrossVOne(b2Vec2.SubVV(localPointB2, localPointB1, b2Vec2.s_t0), this.m_axis)\n        .SelfNormalize();\n      const normal: b2Vec2 = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n\n      b2Vec2.MidVV(localPointB1, localPointB2, this.m_localPoint);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n\n      const localPointA: b2Vec2 = this.m_proxyA.GetVertex(cache.indexA[0]);\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n\n      let s: number = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\n      if (s < 0) {\n        this.m_axis.SelfNeg();\n        s = -s;\n      }\n      return s;\n    } else {\n      // Two points on A and one or two points on B.\n      this.m_type = b2SeparationFunctionType.e_faceA;\n      const localPointA1: b2Vec2 = this.m_proxyA.GetVertex(cache.indexA[0]);\n      const localPointA2: b2Vec2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n\n      b2Vec2\n        .CrossVOne(b2Vec2.SubVV(localPointA2, localPointA1, b2Vec2.s_t0), this.m_axis)\n        .SelfNormalize();\n      const normal: b2Vec2 = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n\n      b2Vec2.MidVV(localPointA1, localPointA2, this.m_localPoint);\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n\n      const localPointB: b2Vec2 = this.m_proxyB.GetVertex(cache.indexB[0]);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n\n      let s: number = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\n      if (s < 0) {\n        this.m_axis.SelfNeg();\n        s = -s;\n      }\n      return s;\n    }\n  }\n\n  FindMinSeparation(indexA: [number], indexB: [number], t: number): number {\n    const xfA: b2Transform = b2TimeOfImpact_s_xfA;\n    const xfB: b2Transform = b2TimeOfImpact_s_xfB;\n    this.m_sweepA.GetTransform(xfA, t);\n    this.m_sweepB.GetTransform(xfB, t);\n\n    if (this.m_type === b2SeparationFunctionType.e_points) {\n      const axisA: b2Vec2 = b2Rot.MulTRV(xfA.q, this.m_axis, b2TimeOfImpact_s_axisA);\n      const axisB: b2Vec2 = b2Rot.MulTRV(\n        xfB.q,\n        b2Vec2.NegV(this.m_axis, b2Vec2.s_t0),\n        b2TimeOfImpact_s_axisB,\n      );\n\n      indexA[0] = this.m_proxyA.GetSupport(axisA);\n      indexB[0] = this.m_proxyB.GetSupport(axisB);\n\n      const localPointA: b2Vec2 = this.m_proxyA.GetVertex(indexA[0]);\n      const localPointB: b2Vec2 = this.m_proxyB.GetVertex(indexB[0]);\n\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n\n      const separation: number = b2Vec2.DotVV(\n        b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0),\n        this.m_axis,\n      );\n      return separation;\n    } else if (this.m_type === b2SeparationFunctionType.e_faceA) {\n      const normal: b2Vec2 = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n\n      const axisB: b2Vec2 = b2Rot.MulTRV(\n        xfB.q,\n        b2Vec2.NegV(normal, b2Vec2.s_t0),\n        b2TimeOfImpact_s_axisB,\n      );\n\n      indexA[0] = -1;\n      indexB[0] = this.m_proxyB.GetSupport(axisB);\n\n      const localPointB: b2Vec2 = this.m_proxyB.GetVertex(indexB[0]);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n\n      const separation: number = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\n      return separation;\n    } else if (this.m_type === b2SeparationFunctionType.e_faceB) {\n      const normal: b2Vec2 = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n      const pointB: b2Vec2 = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n\n      const axisA: b2Vec2 = b2Rot.MulTRV(\n        xfA.q,\n        b2Vec2.NegV(normal, b2Vec2.s_t0),\n        b2TimeOfImpact_s_axisA,\n      );\n\n      indexB[0] = -1;\n      indexA[0] = this.m_proxyA.GetSupport(axisA);\n\n      const localPointA: b2Vec2 = this.m_proxyA.GetVertex(indexA[0]);\n      const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n\n      const separation: number = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\n      return separation;\n    }\n\n    !!B2_DEBUG && b2Assert(false);\n    indexA[0] = -1;\n    indexB[0] = -1;\n    return 0;\n  }\n\n  Evaluate(indexA: number, indexB: number, t: number): number {\n    const xfA: b2Transform = b2TimeOfImpact_s_xfA;\n    const xfB: b2Transform = b2TimeOfImpact_s_xfB;\n    this.m_sweepA.GetTransform(xfA, t);\n    this.m_sweepB.GetTransform(xfB, t);\n\n    switch (this.m_type) {\n      case b2SeparationFunctionType.e_points: {\n        const localPointA: b2Vec2 = this.m_proxyA.GetVertex(indexA);\n        const localPointB: b2Vec2 = this.m_proxyB.GetVertex(indexB);\n\n        const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n        const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n        const separation: number = b2Vec2.DotVV(\n          b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0),\n          this.m_axis,\n        );\n\n        return separation;\n      }\n\n      case b2SeparationFunctionType.e_faceA: {\n        const normal: b2Vec2 = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\n        const pointA: b2Vec2 = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\n\n        const localPointB: b2Vec2 = this.m_proxyB.GetVertex(indexB);\n        const pointB: b2Vec2 = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\n\n        const separation: number = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\n        return separation;\n      }\n\n      case b2SeparationFunctionType.e_faceB: {\n        const normal: b2Vec2 = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\n        const pointB: b2Vec2 = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\n\n        const localPointA: b2Vec2 = this.m_proxyA.GetVertex(indexA);\n        const pointA: b2Vec2 = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\n\n        const separation: number = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\n        return separation;\n      }\n\n      default:\n        !!B2_DEBUG && b2Assert(false);\n        return 0;\n    }\n  }\n}\n\nconst b2TimeOfImpact_s_timer = new b2Timer();\nconst b2TimeOfImpact_s_cache = new b2SimplexCache();\nconst b2TimeOfImpact_s_distanceInput = new b2DistanceInput();\nconst b2TimeOfImpact_s_distanceOutput = new b2DistanceOutput();\nconst b2TimeOfImpact_s_fcn = new b2SeparationFunction();\nconst b2TimeOfImpact_s_indexA: [number] = [0];\nconst b2TimeOfImpact_s_indexB: [number] = [0];\nconst b2TimeOfImpact_s_sweepA = new b2Sweep();\nconst b2TimeOfImpact_s_sweepB = new b2Sweep();\n\nexport function b2TimeOfImpact(output: b2TOIOutput, input: b2TOIInput): void {\n  const timer = b2TimeOfImpact_s_timer.Reset();\n\n  ++b2_toiStats.calls;\n\n  output.state = b2TOIOutputState.e_unknown;\n  output.t = input.tMax;\n\n  const proxyA: b2DistanceProxy = input.proxyA;\n  const proxyB: b2DistanceProxy = input.proxyB;\n  const maxVertices: number = b2MaxInt(\n    b2_maxPolygonVertices,\n    b2MaxInt(proxyA.m_count, proxyB.m_count),\n  );\n\n  const sweepA: b2Sweep = b2TimeOfImpact_s_sweepA.Copy(input.sweepA);\n  const sweepB: b2Sweep = b2TimeOfImpact_s_sweepB.Copy(input.sweepB);\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.Normalize();\n  sweepB.Normalize();\n\n  const tMax: number = input.tMax;\n\n  const totalRadius: number = proxyA.m_radius + proxyB.m_radius;\n  const target: number = b2Max(b2_linearSlop, totalRadius - 3 * b2_linearSlop);\n  const tolerance: number = 0.25 * b2_linearSlop;\n  !!B2_DEBUG && b2Assert(target > tolerance);\n\n  let t1 = 0;\n  const k_maxIterations = 20; // TODO_ERIN b2Settings\n  let iter = 0;\n\n  // Prepare input for distance query.\n  const cache: b2SimplexCache = b2TimeOfImpact_s_cache;\n  cache.count = 0;\n  const distanceInput: b2DistanceInput = b2TimeOfImpact_s_distanceInput;\n  distanceInput.proxyA.Copy(input.proxyA);\n  distanceInput.proxyB.Copy(input.proxyB);\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    const xfA: b2Transform = b2TimeOfImpact_s_xfA;\n    const xfB: b2Transform = b2TimeOfImpact_s_xfB;\n    sweepA.GetTransform(xfA, t1);\n    sweepB.GetTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA.Copy(xfA);\n    distanceInput.transformB.Copy(xfB);\n    const distanceOutput: b2DistanceOutput = b2TimeOfImpact_s_distanceOutput;\n    b2Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0) {\n      // Failure!\n      output.state = b2TOIOutputState.e_overlapped;\n      output.t = 0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = b2TOIOutputState.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    const fcn: b2SeparationFunction = b2TimeOfImpact_s_fcn;\n    fcn.Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n    /*\n        #if 0\n            // Dump the curve seen by the root finder {\n              const int32 N = 100;\n              float32 dx = 1.0f / N;\n              float32 xs[N+1];\n              float32 fs[N+1];\n\n              float32 x = 0.0f;\n\n              for (int32 i = 0; i <= N; ++i) {\n                sweepA.GetTransform(&xfA, x);\n                sweepB.GetTransform(&xfB, x);\n                float32 f = fcn.Evaluate(xfA, xfB) - target;\n\n                printf(\"%g %g\\n\", x, f);\n\n                xs[i] = x;\n                fs[i] = f;\n\n                x += dx;\n              }\n            }\n        #endif\n        */\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of vertices.\n    let done = false;\n    let t2: number = tMax;\n    let pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      const indexA: [number] = b2TimeOfImpact_s_indexA;\n      const indexB: [number] = b2TimeOfImpact_s_indexB;\n      let s2: number = fcn.FindMinSeparation(indexA, indexB, t2);\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = b2TOIOutputState.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      let s1: number = fcn.Evaluate(indexA[0], indexB[0], t1);\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = b2TOIOutputState.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = b2TOIOutputState.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      let rootIterCount = 0;\n      let a1: number = t1;\n      let a2: number = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        let t = 0;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + ((target - s1) * (a2 - a1)) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++b2_toiStats.rootIters;\n\n        const s: number = fcn.Evaluate(indexA[0], indexB[0], t);\n\n        if (b2Abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount === 50) {\n          break;\n        }\n      }\n\n      b2_toiStats.maxRootIters = b2MaxInt(b2_toiStats.maxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter === maxVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++b2_toiStats.iters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter === k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = b2TOIOutputState.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  b2_toiStats.maxIters = b2MaxInt(b2_toiStats.maxIters, iter);\n  const time = timer.GetMilliseconds();\n  b2_toiStats.maxTime = b2Max(b2_toiStats.maxTime, time);\n  b2_toiStats.time += time;\n}\n","import { b2_epsilon, b2_maxFloat } from '../common/b2Settings';\nimport { b2Transform, b2Vec2 } from '../common/b2Math';\nimport { b2Manifold, b2ManifoldType } from './b2Collision';\nimport { b2CircleShape } from './shapes/b2CircleShape';\nimport { b2PolygonShape } from './shapes/b2PolygonShape';\n\nconst b2CollideCircles_s_pA: b2Vec2 = new b2Vec2();\nconst b2CollideCircles_s_pB: b2Vec2 = new b2Vec2();\n\nexport function b2CollideCircles(\n  manifold: b2Manifold,\n  circleA: b2CircleShape,\n  xfA: b2Transform,\n  circleB: b2CircleShape,\n  xfB: b2Transform,\n): void {\n  manifold.pointCount = 0;\n\n  const pA = b2Transform.MulXV(xfA, circleA.m_p, b2CollideCircles_s_pA);\n  const pB = b2Transform.MulXV(xfB, circleB.m_p, b2CollideCircles_s_pB);\n\n  const distSqr: number = b2Vec2.DistanceSquaredVV(pA, pB);\n  const radius: number = circleA.m_radius + circleB.m_radius;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = b2ManifoldType.e_circles;\n  manifold.localPoint.Copy(circleA.m_p);\n  manifold.localNormal.SetZero();\n  manifold.pointCount = 1;\n\n  manifold.points[0].localPoint.Copy(circleB.m_p);\n  manifold.points[0].id.key = 0;\n}\n\nconst b2CollidePolygonAndCircle_s_c: b2Vec2 = new b2Vec2();\nconst b2CollidePolygonAndCircle_s_cLocal: b2Vec2 = new b2Vec2();\nconst b2CollidePolygonAndCircle_s_faceCenter: b2Vec2 = new b2Vec2();\n\nexport function b2CollidePolygonAndCircle(\n  manifold: b2Manifold,\n  polygonA: b2PolygonShape,\n  xfA: b2Transform,\n  circleB: b2CircleShape,\n  xfB: b2Transform,\n): void {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  const c: b2Vec2 = b2Transform.MulXV(xfB, circleB.m_p, b2CollidePolygonAndCircle_s_c);\n  const cLocal: b2Vec2 = b2Transform.MulTXV(xfA, c, b2CollidePolygonAndCircle_s_cLocal);\n\n  // Find the min separating edge.\n  let normalIndex = 0;\n  let separation: number = -b2_maxFloat;\n  const radius: number = polygonA.m_radius + circleB.m_radius;\n  const vertexCount: number = polygonA.m_count;\n  const vertices: b2Vec2[] = polygonA.m_vertices;\n  const normals: b2Vec2[] = polygonA.m_normals;\n\n  for (let i = 0; i < vertexCount; ++i) {\n    const s: number = b2Vec2.DotVV(normals[i], b2Vec2.SubVV(cLocal, vertices[i], b2Vec2.s_t0));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  const vertIndex1: number = normalIndex;\n  const vertIndex2: number = (vertIndex1 + 1) % vertexCount;\n  const v1: b2Vec2 = vertices[vertIndex1];\n  const v2: b2Vec2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < b2_epsilon) {\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_faceA;\n    manifold.localNormal.Copy(normals[normalIndex]);\n    b2Vec2.MidVV(v1, v2, manifold.localPoint);\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    manifold.points[0].id.key = 0;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  const u1: number = b2Vec2.DotVV(\n    b2Vec2.SubVV(cLocal, v1, b2Vec2.s_t0),\n    b2Vec2.SubVV(v2, v1, b2Vec2.s_t1),\n  );\n  const u2: number = b2Vec2.DotVV(\n    b2Vec2.SubVV(cLocal, v2, b2Vec2.s_t0),\n    b2Vec2.SubVV(v1, v2, b2Vec2.s_t1),\n  );\n  if (u1 <= 0) {\n    if (b2Vec2.DistanceSquaredVV(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_faceA;\n    b2Vec2.SubVV(cLocal, v1, manifold.localNormal).SelfNormalize();\n    manifold.localPoint.Copy(v1);\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    manifold.points[0].id.key = 0;\n  } else if (u2 <= 0) {\n    if (b2Vec2.DistanceSquaredVV(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_faceA;\n    b2Vec2.SubVV(cLocal, v2, manifold.localNormal).SelfNormalize();\n    manifold.localPoint.Copy(v2);\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    manifold.points[0].id.key = 0;\n  } else {\n    const faceCenter: b2Vec2 = b2Vec2.MidVV(v1, v2, b2CollidePolygonAndCircle_s_faceCenter);\n    const separation = b2Vec2.DotVV(\n      b2Vec2.SubVV(cLocal, faceCenter, b2Vec2.s_t1),\n      normals[vertIndex1],\n    );\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_faceA;\n    manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();\n    manifold.localPoint.Copy(faceCenter);\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    manifold.points[0].id.key = 0;\n  }\n}\n","import { b2Assert } from '../common/b2Settings';\nimport { b2_maxFloat, b2_maxManifoldPoints } from '../common/b2Settings';\nimport { b2Rot, b2Transform, b2Vec2 } from '../common/b2Math';\nimport {\n  b2ClipSegmentToLine,\n  b2ClipVertex,\n  b2ContactFeature,\n  b2ContactFeatureType,\n  b2Manifold,\n  b2ManifoldPoint,\n  b2ManifoldType,\n} from './b2Collision';\nimport { b2PolygonShape } from './shapes/b2PolygonShape';\n\nconst b2EdgeSeparation_s_normal1World: b2Vec2 = new b2Vec2();\nconst b2EdgeSeparation_s_normal1: b2Vec2 = new b2Vec2();\nconst b2EdgeSeparation_s_v1: b2Vec2 = new b2Vec2();\nconst b2EdgeSeparation_s_v2: b2Vec2 = new b2Vec2();\n\nfunction b2EdgeSeparation(\n  poly1: b2PolygonShape,\n  xf1: b2Transform,\n  edge1: number,\n  poly2: b2PolygonShape,\n  xf2: b2Transform,\n): number {\n  const vertices1 = poly1.m_vertices;\n  const normals1 = poly1.m_normals;\n  const count2 = poly2.m_count;\n  const vertices2 = poly2.m_vertices;\n\n  !!B2_DEBUG && b2Assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Convert normal from poly1's frame into poly2's frame.\n  const normal1World: b2Vec2 = b2Rot.MulRV(xf1.q, normals1[edge1], b2EdgeSeparation_s_normal1World);\n  const normal1: b2Vec2 = b2Rot.MulTRV(xf2.q, normal1World, b2EdgeSeparation_s_normal1);\n\n  // Find support vertex on poly2 for -normal.\n  let index = 0;\n  let minDot: number = b2_maxFloat;\n\n  for (let i = 0; i < count2; ++i) {\n    const dot: number = b2Vec2.DotVV(vertices2[i], normal1);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  const v1: b2Vec2 = b2Transform.MulXV(xf1, vertices1[edge1], b2EdgeSeparation_s_v1);\n  const v2: b2Vec2 = b2Transform.MulXV(xf2, vertices2[index], b2EdgeSeparation_s_v2);\n  const separation: number = b2Vec2.DotVV(b2Vec2.SubVV(v2, v1, b2Vec2.s_t0), normal1World);\n  return separation;\n}\n\nconst b2FindMaxSeparation_s_d: b2Vec2 = new b2Vec2();\nconst b2FindMaxSeparation_s_dLocal1: b2Vec2 = new b2Vec2();\n\nfunction b2FindMaxSeparation(\n  edgeIndex: [number],\n  poly1: b2PolygonShape,\n  xf1: b2Transform,\n  poly2: b2PolygonShape,\n  xf2: b2Transform,\n): number {\n  const count1: number = poly1.m_count;\n  const normals1: b2Vec2[] = poly1.m_normals;\n\n  // Vector pointing from the centroid of poly1 to the centroid of poly2.\n  const d: b2Vec2 = b2Vec2.SubVV(\n    b2Transform.MulXV(xf2, poly2.m_centroid, b2Vec2.s_t0),\n    b2Transform.MulXV(xf1, poly1.m_centroid, b2Vec2.s_t1),\n    b2FindMaxSeparation_s_d,\n  );\n  const dLocal1: b2Vec2 = b2Rot.MulTRV(xf1.q, d, b2FindMaxSeparation_s_dLocal1);\n\n  // Find edge normal on poly1 that has the largest projection onto d.\n  let edge = 0;\n  let maxDot: number = -b2_maxFloat;\n  for (let i = 0; i < count1; ++i) {\n    const dot: number = b2Vec2.DotVV(normals1[i], dLocal1);\n    if (dot > maxDot) {\n      maxDot = dot;\n      edge = i;\n    }\n  }\n\n  // Get the separation for the edge normal.\n  let s: number = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n\n  // Check the separation for the previous edge normal.\n  const prevEdge = (edge + count1 - 1) % count1;\n  const sPrev = b2EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);\n\n  // Check the separation for the next edge normal.\n  const nextEdge = (edge + 1) % count1;\n  const sNext = b2EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);\n\n  // Find the best edge and the search direction.\n  let bestEdge = 0;\n  let bestSeparation = 0;\n  let increment = 0;\n  if (sPrev > s && sPrev > sNext) {\n    increment = -1;\n    bestEdge = prevEdge;\n    bestSeparation = sPrev;\n  } else if (sNext > s) {\n    increment = 1;\n    bestEdge = nextEdge;\n    bestSeparation = sNext;\n  } else {\n    edgeIndex[0] = edge;\n    return s;\n  }\n\n  // Perform a local search for the best edge normal.\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (increment === -1) {\n      edge = (bestEdge + count1 - 1) % count1;\n    } else {\n      edge = (bestEdge + 1) % count1;\n    }\n\n    s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n\n    if (s > bestSeparation) {\n      bestEdge = edge;\n      bestSeparation = s;\n    } else {\n      break;\n    }\n  }\n\n  edgeIndex[0] = bestEdge;\n  return bestSeparation;\n}\n\nconst b2FindIncidentEdge_s_normal1: b2Vec2 = new b2Vec2();\n\nfunction b2FindIncidentEdge(\n  c: b2ClipVertex[],\n  poly1: b2PolygonShape,\n  xf1: b2Transform,\n  edge1: number,\n  poly2: b2PolygonShape,\n  xf2: b2Transform,\n): void {\n  const normals1 = poly1.m_normals;\n  const count2 = poly2.m_count;\n  const vertices2 = poly2.m_vertices;\n  const normals2 = poly2.m_normals;\n\n  !!B2_DEBUG && b2Assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  const normal1: b2Vec2 = b2Rot.MulTRV(\n    xf2.q,\n    b2Rot.MulRV(xf1.q, normals1[edge1], b2Vec2.s_t0),\n    b2FindIncidentEdge_s_normal1,\n  );\n\n  // Find the incident edge on poly2.\n  let index = 0;\n  let minDot: number = b2_maxFloat;\n  for (let i = 0; i < count2; ++i) {\n    const dot: number = b2Vec2.DotVV(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  const i1: number = index;\n  const i2: number = (i1 + 1) % count2;\n\n  const c0: b2ClipVertex = c[0];\n  b2Transform.MulXV(xf2, vertices2[i1], c0.v);\n  const cf0: b2ContactFeature = c0.id.cf;\n  cf0.indexA = edge1;\n  cf0.indexB = i1;\n  cf0.typeA = b2ContactFeatureType.e_face;\n  cf0.typeB = b2ContactFeatureType.e_vertex;\n\n  const c1: b2ClipVertex = c[1];\n  b2Transform.MulXV(xf2, vertices2[i2], c1.v);\n  const cf1: b2ContactFeature = c1.id.cf;\n  cf1.indexA = edge1;\n  cf1.indexB = i2;\n  cf1.typeA = b2ContactFeatureType.e_face;\n  cf1.typeB = b2ContactFeatureType.e_vertex;\n}\n\nconst b2CollidePolygons_s_incidentEdge = b2ClipVertex.MakeArray(2);\nconst b2CollidePolygons_s_clipPoints1 = b2ClipVertex.MakeArray(2);\nconst b2CollidePolygons_s_clipPoints2 = b2ClipVertex.MakeArray(2);\nconst b2CollidePolygons_s_edgeA: [number] = [0];\nconst b2CollidePolygons_s_edgeB: [number] = [0];\nconst b2CollidePolygons_s_localTangent: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_localNormal: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_planePoint: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_normal: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_tangent: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_ntangent: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_v11: b2Vec2 = new b2Vec2();\nconst b2CollidePolygons_s_v12: b2Vec2 = new b2Vec2();\n\nexport function b2CollidePolygons(\n  manifold: b2Manifold,\n  polyA: b2PolygonShape,\n  xfA: b2Transform,\n  polyB: b2PolygonShape,\n  xfB: b2Transform,\n): void {\n  manifold.pointCount = 0;\n  const totalRadius: number = polyA.m_radius + polyB.m_radius;\n\n  const edgeA: [number] = b2CollidePolygons_s_edgeA;\n  edgeA[0] = 0;\n  const separationA: number = b2FindMaxSeparation(edgeA, polyA, xfA, polyB, xfB);\n  if (separationA > totalRadius) {\n    return;\n  }\n\n  const edgeB: [number] = b2CollidePolygons_s_edgeB;\n  edgeB[0] = 0;\n  const separationB: number = b2FindMaxSeparation(edgeB, polyB, xfB, polyA, xfA);\n  if (separationB > totalRadius) {\n    return;\n  }\n\n  let poly1: b2PolygonShape; // reference polygon\n  let poly2: b2PolygonShape; // incident polygon\n  let xf1: b2Transform, xf2: b2Transform;\n  let edge1 = 0; // reference edge\n  let flip = 0;\n  const k_relativeTol = 0.98;\n  const k_absoluteTol = 0.001;\n\n  if (separationB > k_relativeTol * separationA + k_absoluteTol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB[0];\n    manifold.type = b2ManifoldType.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA[0];\n    manifold.type = b2ManifoldType.e_faceA;\n    flip = 0;\n  }\n\n  const incidentEdge: b2ClipVertex[] = b2CollidePolygons_s_incidentEdge;\n  b2FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  const count1: number = poly1.m_count;\n  const vertices1: b2Vec2[] = poly1.m_vertices;\n\n  const iv1: number = edge1;\n  const iv2: number = (edge1 + 1) % count1;\n\n  const local_v11: b2Vec2 = vertices1[iv1];\n  const local_v12: b2Vec2 = vertices1[iv2];\n\n  const localTangent: b2Vec2 = b2Vec2.SubVV(local_v12, local_v11, b2CollidePolygons_s_localTangent);\n  localTangent.Normalize();\n\n  const localNormal: b2Vec2 = b2Vec2.CrossVOne(localTangent, b2CollidePolygons_s_localNormal);\n  const planePoint: b2Vec2 = b2Vec2.MidVV(local_v11, local_v12, b2CollidePolygons_s_planePoint);\n\n  const tangent: b2Vec2 = b2Rot.MulRV(xf1.q, localTangent, b2CollidePolygons_s_tangent);\n  const normal: b2Vec2 = b2Vec2.CrossVOne(tangent, b2CollidePolygons_s_normal);\n\n  const v11: b2Vec2 = b2Transform.MulXV(xf1, local_v11, b2CollidePolygons_s_v11);\n  const v12: b2Vec2 = b2Transform.MulXV(xf1, local_v12, b2CollidePolygons_s_v12);\n\n  // Face offset.\n  const frontOffset: number = b2Vec2.DotVV(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  const sideOffset1: number = -b2Vec2.DotVV(tangent, v11) + totalRadius;\n  const sideOffset2: number = b2Vec2.DotVV(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  const clipPoints1: b2ClipVertex[] = b2CollidePolygons_s_clipPoints1;\n  const clipPoints2: b2ClipVertex[] = b2CollidePolygons_s_clipPoints2;\n  let np: number;\n\n  // Clip to box side 1\n  const ntangent: b2Vec2 = b2Vec2.NegV(tangent, b2CollidePolygons_s_ntangent);\n  np = b2ClipSegmentToLine(clipPoints1, incidentEdge, ntangent, sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = b2ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal.Copy(localNormal);\n  manifold.localPoint.Copy(planePoint);\n\n  let pointCount = 0;\n  for (let i = 0; i < b2_maxManifoldPoints; ++i) {\n    const cv: b2ClipVertex = clipPoints2[i];\n    const separation: number = b2Vec2.DotVV(normal, cv.v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      const cp: b2ManifoldPoint = manifold.points[pointCount];\n      b2Transform.MulTXV(xf2, cv.v, cp.localPoint);\n      cp.id.Copy(cv.id);\n      if (flip) {\n        // Swap features\n        const cf: b2ContactFeature = cp.id.cf;\n        cp.id.cf.indexA = cf.indexB;\n        cp.id.cf.indexB = cf.indexA;\n        cp.id.cf.typeA = cf.typeB;\n        cp.id.cf.typeB = cf.typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","import { b2Assert } from '../common/b2Settings';\nimport { b2_angularSlop, b2_maxFloat, b2_maxManifoldPoints } from '../common/b2Settings';\nimport { b2Min, b2Rot, b2Transform, b2Vec2 } from '../common/b2Math';\nimport {\n  b2ClipSegmentToLine,\n  b2ClipVertex,\n  b2ContactFeatureType,\n  b2ContactID,\n  b2Manifold,\n  b2ManifoldPoint,\n  b2ManifoldType,\n} from './b2Collision';\nimport { b2CircleShape } from './shapes/b2CircleShape';\nimport { b2PolygonShape } from './shapes/b2PolygonShape';\nimport { b2EdgeShape } from './shapes/b2EdgeShape';\n\nconst b2CollideEdgeAndCircle_s_Q: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_e: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_d: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_e1: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_e2: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_P: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_n: b2Vec2 = new b2Vec2();\nconst b2CollideEdgeAndCircle_s_id: b2ContactID = new b2ContactID();\n\nexport function b2CollideEdgeAndCircle(\n  manifold: b2Manifold,\n  edgeA: b2EdgeShape,\n  xfA: b2Transform,\n  circleB: b2CircleShape,\n  xfB: b2Transform,\n): void {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  const Q: b2Vec2 = b2Transform.MulTXV(\n    xfA,\n    b2Transform.MulXV(xfB, circleB.m_p, b2Vec2.s_t0),\n    b2CollideEdgeAndCircle_s_Q,\n  );\n\n  const A: b2Vec2 = edgeA.m_vertex1;\n  const B: b2Vec2 = edgeA.m_vertex2;\n  const e: b2Vec2 = b2Vec2.SubVV(B, A, b2CollideEdgeAndCircle_s_e);\n\n  // Barycentric coordinates\n  const u: number = b2Vec2.DotVV(e, b2Vec2.SubVV(B, Q, b2Vec2.s_t0));\n  const v: number = b2Vec2.DotVV(e, b2Vec2.SubVV(Q, A, b2Vec2.s_t0));\n\n  const radius: number = edgeA.m_radius + circleB.m_radius;\n\n  // const cf: b2ContactFeature = new b2ContactFeature();\n  const id: b2ContactID = b2CollideEdgeAndCircle_s_id;\n  id.cf.indexB = 0;\n  id.cf.typeB = b2ContactFeatureType.e_vertex;\n\n  // Region A\n  if (v <= 0) {\n    const P: b2Vec2 = A;\n    const d: b2Vec2 = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\n    const dd: number = b2Vec2.DotVV(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      const A1: b2Vec2 = edgeA.m_vertex0;\n      const B1: b2Vec2 = A;\n      const e1: b2Vec2 = b2Vec2.SubVV(B1, A1, b2CollideEdgeAndCircle_s_e1);\n      const u1: number = b2Vec2.DotVV(e1, b2Vec2.SubVV(B1, Q, b2Vec2.s_t0));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0) {\n        return;\n      }\n    }\n\n    id.cf.indexA = 0;\n    id.cf.typeA = b2ContactFeatureType.e_vertex;\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_circles;\n    manifold.localNormal.SetZero();\n    manifold.localPoint.Copy(P);\n    manifold.points[0].id.Copy(id);\n    // manifold.points[0].id.key = 0;\n    // manifold.points[0].id.cf = cf;\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    return;\n  }\n\n  // Region B\n  if (u <= 0) {\n    const P: b2Vec2 = B;\n    const d: b2Vec2 = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\n    const dd: number = b2Vec2.DotVV(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      const B2: b2Vec2 = edgeA.m_vertex3;\n      const A2: b2Vec2 = B;\n      const e2: b2Vec2 = b2Vec2.SubVV(B2, A2, b2CollideEdgeAndCircle_s_e2);\n      const v2: number = b2Vec2.DotVV(e2, b2Vec2.SubVV(Q, A2, b2Vec2.s_t0));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0) {\n        return;\n      }\n    }\n\n    id.cf.indexA = 1;\n    id.cf.typeA = b2ContactFeatureType.e_vertex;\n    manifold.pointCount = 1;\n    manifold.type = b2ManifoldType.e_circles;\n    manifold.localNormal.SetZero();\n    manifold.localPoint.Copy(P);\n    manifold.points[0].id.Copy(id);\n    // manifold.points[0].id.key = 0;\n    // manifold.points[0].id.cf = cf;\n    manifold.points[0].localPoint.Copy(circleB.m_p);\n    return;\n  }\n\n  // Region AB\n  const den: number = b2Vec2.DotVV(e, e);\n  !!B2_DEBUG && b2Assert(den > 0);\n  const P: b2Vec2 = b2CollideEdgeAndCircle_s_P;\n  P.x = (1 / den) * (u * A.x + v * B.x);\n  P.y = (1 / den) * (u * A.y + v * B.y);\n  const d: b2Vec2 = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\n  const dd: number = b2Vec2.DotVV(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  const n: b2Vec2 = b2CollideEdgeAndCircle_s_n.Set(-e.y, e.x);\n  if (b2Vec2.DotVV(n, b2Vec2.SubVV(Q, A, b2Vec2.s_t0)) < 0) {\n    n.Set(-n.x, -n.y);\n  }\n  n.Normalize();\n\n  id.cf.indexA = 0;\n  id.cf.typeA = b2ContactFeatureType.e_face;\n  manifold.pointCount = 1;\n  manifold.type = b2ManifoldType.e_faceA;\n  manifold.localNormal.Copy(n);\n  manifold.localPoint.Copy(A);\n  manifold.points[0].id.Copy(id);\n  // manifold.points[0].id.key = 0;\n  // manifold.points[0].id.cf = cf;\n  manifold.points[0].localPoint.Copy(circleB.m_p);\n}\n\nconst enum b2EPAxisType {\n  e_unknown = 0,\n  e_edgeA = 1,\n  e_edgeB = 2,\n}\n\nclass b2EPAxis {\n  type = b2EPAxisType.e_unknown;\n  index = 0;\n  separation = NaN;\n\n  constructor() {\n    this.separation = 0.0;\n  }\n}\n\nclass b2TempPolygon {\n  vertices: b2Vec2[] = [];\n  normals: b2Vec2[] = [];\n  count = 0;\n}\n\nclass b2ReferenceFace {\n  i1 = 0;\n  i2 = 0;\n  readonly v1 = new b2Vec2();\n  readonly v2 = new b2Vec2();\n  readonly normal = new b2Vec2();\n  readonly sideNormal1 = new b2Vec2();\n  sideOffset1 = NaN;\n  readonly sideNormal2 = new b2Vec2();\n  sideOffset2 = NaN;\n\n  constructor() {\n    this.sideOffset1 = 0.0;\n    this.sideOffset2 = 0.0;\n  }\n}\n\nconst enum b2EPColliderVertexType {\n  e_isolated = 0,\n  e_concave = 1,\n  e_convex = 2,\n}\n\nclass b2EPCollider {\n  readonly m_polygonB: b2TempPolygon = new b2TempPolygon();\n  readonly m_xf: b2Transform = new b2Transform();\n  readonly m_centroidB: b2Vec2 = new b2Vec2();\n  readonly m_v0: b2Vec2 = new b2Vec2();\n  readonly m_v1: b2Vec2 = new b2Vec2();\n  readonly m_v2: b2Vec2 = new b2Vec2();\n  readonly m_v3: b2Vec2 = new b2Vec2();\n  readonly m_normal0: b2Vec2 = new b2Vec2();\n  readonly m_normal1: b2Vec2 = new b2Vec2();\n  readonly m_normal2: b2Vec2 = new b2Vec2();\n  readonly m_normal: b2Vec2 = new b2Vec2();\n  m_type1 = b2EPColliderVertexType.e_isolated;\n  m_type2 = b2EPColliderVertexType.e_isolated;\n  readonly m_lowerLimit: b2Vec2 = new b2Vec2();\n  readonly m_upperLimit: b2Vec2 = new b2Vec2();\n  m_radius = NaN;\n  m_front = false;\n\n  constructor() {\n    this.m_radius = 0.0;\n  }\n\n  private static s_edge1 = new b2Vec2();\n  private static s_edge0 = new b2Vec2();\n  private static s_edge2 = new b2Vec2();\n  private static s_ie = b2ClipVertex.MakeArray(2);\n  private static s_rf = new b2ReferenceFace();\n  private static s_clipPoints1 = b2ClipVertex.MakeArray(2);\n  private static s_clipPoints2 = b2ClipVertex.MakeArray(2);\n  private static s_edgeAxis = new b2EPAxis();\n  private static s_polygonAxis = new b2EPAxis();\n\n  Collide(\n    manifold: b2Manifold,\n    edgeA: b2EdgeShape,\n    xfA: b2Transform,\n    polygonB: b2PolygonShape,\n    xfB: b2Transform,\n  ): void {\n    b2Transform.MulTXX(xfA, xfB, this.m_xf);\n\n    b2Transform.MulXV(this.m_xf, polygonB.m_centroid, this.m_centroidB);\n\n    this.m_v0.Copy(edgeA.m_vertex0);\n    this.m_v1.Copy(edgeA.m_vertex1);\n    this.m_v2.Copy(edgeA.m_vertex2);\n    this.m_v3.Copy(edgeA.m_vertex3);\n\n    const hasVertex0: boolean = edgeA.m_hasVertex0;\n    const hasVertex3: boolean = edgeA.m_hasVertex3;\n\n    const edge1: b2Vec2 = b2Vec2.SubVV(this.m_v2, this.m_v1, b2EPCollider.s_edge1);\n    edge1.Normalize();\n    this.m_normal1.Set(edge1.y, -edge1.x);\n    const offset1: number = b2Vec2.DotVV(\n      this.m_normal1,\n      b2Vec2.SubVV(this.m_centroidB, this.m_v1, b2Vec2.s_t0),\n    );\n    let offset0 = 0;\n    let offset2 = 0;\n    let convex1 = false;\n    let convex2 = false;\n\n    // Is there a preceding edge?\n    if (hasVertex0) {\n      const edge0: b2Vec2 = b2Vec2.SubVV(this.m_v1, this.m_v0, b2EPCollider.s_edge0);\n      edge0.Normalize();\n      this.m_normal0.Set(edge0.y, -edge0.x);\n      convex1 = b2Vec2.CrossVV(edge0, edge1) >= 0;\n      offset0 = b2Vec2.DotVV(\n        this.m_normal0,\n        b2Vec2.SubVV(this.m_centroidB, this.m_v0, b2Vec2.s_t0),\n      );\n    }\n\n    // Is there a following edge?\n    if (hasVertex3) {\n      const edge2: b2Vec2 = b2Vec2.SubVV(this.m_v3, this.m_v2, b2EPCollider.s_edge2);\n      edge2.Normalize();\n      this.m_normal2.Set(edge2.y, -edge2.x);\n      convex2 = b2Vec2.CrossVV(edge1, edge2) > 0;\n      offset2 = b2Vec2.DotVV(\n        this.m_normal2,\n        b2Vec2.SubVV(this.m_centroidB, this.m_v2, b2Vec2.s_t0),\n      );\n    }\n\n    // Determine front or back collision. Determine collision normal limits.\n    if (hasVertex0 && hasVertex3) {\n      if (convex1 && convex2) {\n        this.m_front = offset0 >= 0 || offset1 >= 0 || offset2 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal0);\n          this.m_upperLimit.Copy(this.m_normal2);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n        }\n      } else if (convex1) {\n        this.m_front = offset0 >= 0 || (offset1 >= 0 && offset2 >= 0);\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal0);\n          this.m_upperLimit.Copy(this.m_normal1);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n        }\n      } else if (convex2) {\n        this.m_front = offset2 >= 0 || (offset0 >= 0 && offset1 >= 0);\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal1);\n          this.m_upperLimit.Copy(this.m_normal2);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\n        }\n      } else {\n        this.m_front = offset0 >= 0 && offset1 >= 0 && offset2 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal1);\n          this.m_upperLimit.Copy(this.m_normal1);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\n        }\n      }\n    } else if (hasVertex0) {\n      if (convex1) {\n        this.m_front = offset0 >= 0 || offset1 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal0);\n          this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal1);\n          this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n        }\n      } else {\n        this.m_front = offset0 >= 0 && offset1 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal1);\n          this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal1);\n          this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\n        }\n      }\n    } else if (hasVertex3) {\n      if (convex2) {\n        this.m_front = offset1 >= 0 || offset2 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal2);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal1);\n        }\n      } else {\n        this.m_front = offset1 >= 0 && offset2 >= 0;\n        if (this.m_front) {\n          this.m_normal.Copy(this.m_normal1);\n          this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal1);\n        } else {\n          this.m_normal.Copy(this.m_normal1).SelfNeg();\n          this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\n          this.m_upperLimit.Copy(this.m_normal1);\n        }\n      }\n    } else {\n      this.m_front = offset1 >= 0;\n      if (this.m_front) {\n        this.m_normal.Copy(this.m_normal1);\n        this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\n        this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\n      } else {\n        this.m_normal.Copy(this.m_normal1).SelfNeg();\n        this.m_lowerLimit.Copy(this.m_normal1);\n        this.m_upperLimit.Copy(this.m_normal1);\n      }\n    }\n\n    // Get polygonB in frameA\n    this.m_polygonB.count = polygonB.m_count;\n    for (let i = 0; i < polygonB.m_count; ++i) {\n      if (this.m_polygonB.vertices.length <= i) {\n        this.m_polygonB.vertices.push(new b2Vec2());\n      }\n      if (this.m_polygonB.normals.length <= i) {\n        this.m_polygonB.normals.push(new b2Vec2());\n      }\n      b2Transform.MulXV(this.m_xf, polygonB.m_vertices[i], this.m_polygonB.vertices[i]);\n      b2Rot.MulRV(this.m_xf.q, polygonB.m_normals[i], this.m_polygonB.normals[i]);\n    }\n\n    this.m_radius = polygonB.m_radius + edgeA.m_radius;\n\n    manifold.pointCount = 0;\n\n    const edgeAxis: b2EPAxis = this.ComputeEdgeSeparation(b2EPCollider.s_edgeAxis);\n\n    // If no valid normal can be found than this edge should not collide.\n    if (edgeAxis.type === b2EPAxisType.e_unknown) {\n      return;\n    }\n\n    if (edgeAxis.separation > this.m_radius) {\n      return;\n    }\n\n    const polygonAxis: b2EPAxis = this.ComputePolygonSeparation(b2EPCollider.s_polygonAxis);\n    if (polygonAxis.type !== b2EPAxisType.e_unknown && polygonAxis.separation > this.m_radius) {\n      return;\n    }\n\n    // Use hysteresis for jitter reduction.\n    const k_relativeTol = 0.98;\n    const k_absoluteTol = 0.001;\n\n    let primaryAxis: b2EPAxis;\n    if (polygonAxis.type === b2EPAxisType.e_unknown) {\n      primaryAxis = edgeAxis;\n    } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n      primaryAxis = polygonAxis;\n    } else {\n      primaryAxis = edgeAxis;\n    }\n\n    const ie: b2ClipVertex[] = b2EPCollider.s_ie;\n    const rf: b2ReferenceFace = b2EPCollider.s_rf;\n    if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n      manifold.type = b2ManifoldType.e_faceA;\n\n      // Search for the polygon normal that is most anti-parallel to the edge normal.\n      let bestIndex = 0;\n      let bestValue: number = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[0]);\n      for (let i = 1; i < this.m_polygonB.count; ++i) {\n        const value: number = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[i]);\n        if (value < bestValue) {\n          bestValue = value;\n          bestIndex = i;\n        }\n      }\n\n      const i1: number = bestIndex;\n      const i2: number = (i1 + 1) % this.m_polygonB.count;\n\n      const ie0: b2ClipVertex = ie[0];\n      ie0.v.Copy(this.m_polygonB.vertices[i1]);\n      ie0.id.cf.indexA = 0;\n      ie0.id.cf.indexB = i1;\n      ie0.id.cf.typeA = b2ContactFeatureType.e_face;\n      ie0.id.cf.typeB = b2ContactFeatureType.e_vertex;\n\n      const ie1: b2ClipVertex = ie[1];\n      ie1.v.Copy(this.m_polygonB.vertices[i2]);\n      ie1.id.cf.indexA = 0;\n      ie1.id.cf.indexB = i2;\n      ie1.id.cf.typeA = b2ContactFeatureType.e_face;\n      ie1.id.cf.typeB = b2ContactFeatureType.e_vertex;\n\n      if (this.m_front) {\n        rf.i1 = 0;\n        rf.i2 = 1;\n        rf.v1.Copy(this.m_v1);\n        rf.v2.Copy(this.m_v2);\n        rf.normal.Copy(this.m_normal1);\n      } else {\n        rf.i1 = 1;\n        rf.i2 = 0;\n        rf.v1.Copy(this.m_v2);\n        rf.v2.Copy(this.m_v1);\n        rf.normal.Copy(this.m_normal1).SelfNeg();\n      }\n    } else {\n      manifold.type = b2ManifoldType.e_faceB;\n\n      const ie0: b2ClipVertex = ie[0];\n      ie0.v.Copy(this.m_v1);\n      ie0.id.cf.indexA = 0;\n      ie0.id.cf.indexB = primaryAxis.index;\n      ie0.id.cf.typeA = b2ContactFeatureType.e_vertex;\n      ie0.id.cf.typeB = b2ContactFeatureType.e_face;\n\n      const ie1: b2ClipVertex = ie[1];\n      ie1.v.Copy(this.m_v2);\n      ie1.id.cf.indexA = 0;\n      ie1.id.cf.indexB = primaryAxis.index;\n      ie1.id.cf.typeA = b2ContactFeatureType.e_vertex;\n      ie1.id.cf.typeB = b2ContactFeatureType.e_face;\n\n      rf.i1 = primaryAxis.index;\n      rf.i2 = (rf.i1 + 1) % this.m_polygonB.count;\n      rf.v1.Copy(this.m_polygonB.vertices[rf.i1]);\n      rf.v2.Copy(this.m_polygonB.vertices[rf.i2]);\n      rf.normal.Copy(this.m_polygonB.normals[rf.i1]);\n    }\n\n    rf.sideNormal1.Set(rf.normal.y, -rf.normal.x);\n    rf.sideNormal2.Copy(rf.sideNormal1).SelfNeg();\n    rf.sideOffset1 = b2Vec2.DotVV(rf.sideNormal1, rf.v1);\n    rf.sideOffset2 = b2Vec2.DotVV(rf.sideNormal2, rf.v2);\n\n    // Clip incident edge against extruded edge1 side edges.\n    const clipPoints1: b2ClipVertex[] = b2EPCollider.s_clipPoints1;\n    const clipPoints2: b2ClipVertex[] = b2EPCollider.s_clipPoints2;\n    let np = 0;\n\n    // Clip to box side 1\n    np = b2ClipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n    if (np < b2_maxManifoldPoints) {\n      return;\n    }\n\n    // Clip to negative box side 1\n    np = b2ClipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n    if (np < b2_maxManifoldPoints) {\n      return;\n    }\n\n    // Now clipPoints2 contains the clipped points.\n    if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n      manifold.localNormal.Copy(rf.normal);\n      manifold.localPoint.Copy(rf.v1);\n    } else {\n      manifold.localNormal.Copy(polygonB.m_normals[rf.i1]);\n      manifold.localPoint.Copy(polygonB.m_vertices[rf.i1]);\n    }\n\n    let pointCount = 0;\n    for (let i = 0; i < b2_maxManifoldPoints; ++i) {\n      const separation = b2Vec2.DotVV(\n        rf.normal,\n        b2Vec2.SubVV(clipPoints2[i].v, rf.v1, b2Vec2.s_t0),\n      );\n\n      if (separation <= this.m_radius) {\n        const cp: b2ManifoldPoint = manifold.points[pointCount];\n\n        if (primaryAxis.type === b2EPAxisType.e_edgeA) {\n          b2Transform.MulTXV(this.m_xf, clipPoints2[i].v, cp.localPoint);\n          cp.id.Copy(clipPoints2[i].id);\n        } else {\n          cp.localPoint.Copy(clipPoints2[i].v);\n          cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n          cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n          cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n          cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n        }\n\n        ++pointCount;\n      }\n    }\n\n    manifold.pointCount = pointCount;\n  }\n\n  ComputeEdgeSeparation(out: b2EPAxis): b2EPAxis {\n    const axis: b2EPAxis = out;\n    axis.type = b2EPAxisType.e_edgeA;\n    axis.index = this.m_front ? 0 : 1;\n    axis.separation = b2_maxFloat;\n\n    for (let i = 0; i < this.m_polygonB.count; ++i) {\n      const s: number = b2Vec2.DotVV(\n        this.m_normal,\n        b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0),\n      );\n      if (s < axis.separation) {\n        axis.separation = s;\n      }\n    }\n\n    return axis;\n  }\n\n  private static s_n = new b2Vec2();\n  private static s_perp = new b2Vec2();\n\n  ComputePolygonSeparation(out: b2EPAxis): b2EPAxis {\n    const axis: b2EPAxis = out;\n    axis.type = b2EPAxisType.e_unknown;\n    axis.index = -1;\n    axis.separation = -b2_maxFloat;\n\n    const perp: b2Vec2 = b2EPCollider.s_perp.Set(-this.m_normal.y, this.m_normal.x);\n\n    for (let i = 0; i < this.m_polygonB.count; ++i) {\n      const n: b2Vec2 = b2Vec2.NegV(this.m_polygonB.normals[i], b2EPCollider.s_n);\n\n      const s1: number = b2Vec2.DotVV(\n        n,\n        b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0),\n      );\n      const s2: number = b2Vec2.DotVV(\n        n,\n        b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v2, b2Vec2.s_t0),\n      );\n      const s: number = b2Min(s1, s2);\n\n      if (s > this.m_radius) {\n        // No collision\n        axis.type = b2EPAxisType.e_edgeB;\n        axis.index = i;\n        axis.separation = s;\n        return axis;\n      }\n\n      // Adjacency\n      if (b2Vec2.DotVV(n, perp) >= 0) {\n        if (\n          b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_upperLimit, b2Vec2.s_t0), this.m_normal) <\n          -b2_angularSlop\n        ) {\n          continue;\n        }\n      } else {\n        if (\n          b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_lowerLimit, b2Vec2.s_t0), this.m_normal) <\n          -b2_angularSlop\n        ) {\n          continue;\n        }\n      }\n\n      if (s > axis.separation) {\n        axis.type = b2EPAxisType.e_edgeB;\n        axis.index = i;\n        axis.separation = s;\n      }\n    }\n\n    return axis;\n  }\n}\n\nconst b2CollideEdgeAndPolygon_s_collider: b2EPCollider = new b2EPCollider();\n\nexport function b2CollideEdgeAndPolygon(\n  manifold: b2Manifold,\n  edgeA: b2EdgeShape,\n  xfA: b2Transform,\n  polygonB: b2PolygonShape,\n  xfB: b2Transform,\n): void {\n  const collider: b2EPCollider = b2CollideEdgeAndPolygon_s_collider;\n  collider.Collide(manifold, edgeA, xfA, polygonB, xfB);\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_epsilon,\n  b2_epsilon_sq,\n  b2_linearSlop,\n  b2_maxFloat,\n  b2_polygonRadius,\n  b2Assert,\n} from '../../common/b2Settings';\nimport { b2Rot, b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../b2Collision';\nimport { b2DistanceProxy } from '../b2Distance';\nimport { b2MassData, b2Shape, b2ShapeType } from './b2Shape';\n\n/// @see b2Shape::ComputeDistance\nconst ComputeDistance_s_pLocal = new b2Vec2();\nconst ComputeDistance_s_normalForMaxDistance = new b2Vec2();\nconst ComputeDistance_s_minDistance = new b2Vec2();\nconst ComputeDistance_s_distance = new b2Vec2();\n\n// ComputeCentroid\nconst ComputeCentroid_s_pRef = new b2Vec2();\nconst ComputeCentroid_s_e1 = new b2Vec2();\nconst ComputeCentroid_s_e2 = new b2Vec2();\n\nfunction ComputeCentroid(vs: b2Vec2[], count: number, out: b2Vec2): b2Vec2 {\n  !!B2_DEBUG && b2Assert(count >= 3);\n\n  const c: b2Vec2 = out;\n  c.SetZero();\n  let area = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  const pRef = ComputeCentroid_s_pRef.SetZero();\n  /*\n#if 0\n    // This code would put the reference point inside the polygon.\n    for (let i = 0; i < count; ++i) {\n      pRef.SelfAdd(vs[i]);\n    }\n    pRef.SelfMul(1 / count);\n#endif\n    */\n\n  const inv3 = 1.0 / 3.0;\n\n  for (let i = 0; i < count; ++i) {\n    // Triangle vertices.\n    const p1 = pRef;\n    const p2 = vs[i];\n    const p3 = vs[(i + 1) % count];\n\n    const e1 = b2Vec2.SubVV(p2, p1, ComputeCentroid_s_e1);\n    const e2 = b2Vec2.SubVV(p3, p1, ComputeCentroid_s_e2);\n\n    const D = b2Vec2.CrossVV(e1, e2);\n\n    const triangleArea: number = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.x += triangleArea * inv3 * (p1.x + p2.x + p3.x);\n    c.y += triangleArea * inv3 * (p1.y + p2.y + p3.y);\n  }\n\n  // Centroid\n  !!B2_DEBUG && b2Assert(area > b2_epsilon);\n  c.SelfMul(1.0 / area);\n  return c;\n}\n\n/// A convex polygon. It is assumed that the interior of the polygon is to\n/// the left of each edge.\n/// In most cases you should not need many vertices for a convex polygon.\nexport class b2PolygonShape extends b2Shape {\n  readonly m_centroid: b2Vec2 = new b2Vec2(0, 0);\n  m_vertices: b2Vec2[] = [new b2Vec2()];\n  m_normals: b2Vec2[] = [new b2Vec2()];\n  m_count = 0;\n\n  constructor() {\n    super(b2ShapeType.e_polygonShape, b2_polygonRadius);\n  }\n\n  /// Implement b2Shape.\n  Clone(): b2PolygonShape {\n    return new b2PolygonShape().Copy(this);\n  }\n\n  Copy(other: b2PolygonShape): b2PolygonShape {\n    super.Copy(other);\n\n    !!B2_DEBUG && b2Assert(other instanceof b2PolygonShape);\n\n    this.m_centroid.Copy(other.m_centroid);\n    this.m_count = other.m_count;\n    this.m_vertices = b2Vec2.MakeArray(this.m_count);\n    this.m_normals = b2Vec2.MakeArray(this.m_count);\n    for (let i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i].Copy(other.m_vertices[i]);\n      this.m_normals[i].Copy(other.m_normals[i]);\n    }\n    return this;\n  }\n\n  /// @see b2Shape::GetChildCount\n  GetChildCount(): number {\n    return 1;\n  }\n\n  /// Create a convex hull from the given array of points.\n  /// @warning the points may be re-ordered, even if they form a convex polygon\n  /// @warning collinear points are handled but not removed. Collinear points\n  /// may lead to poor stacking behavior.\n  private static Set_s_r = new b2Vec2();\n  private static Set_s_v = new b2Vec2();\n\n  Set(vertices: XY[]): b2PolygonShape;\n  Set(vertices: XY[], count: number): b2PolygonShape;\n  Set(vertices: number[]): b2PolygonShape;\n  Set(...args: any[]): b2PolygonShape {\n    if (typeof args[0][0] === 'number') {\n      const vertices: number[] = args[0];\n      if (vertices.length % 2 !== 0) {\n        throw new Error();\n      }\n      return this._Set(\n        (index: number): XY => ({\n          x: vertices[index * 2],\n          y: vertices[index * 2 + 1],\n        }),\n        vertices.length / 2,\n      );\n    } else {\n      const vertices: XY[] = args[0];\n      const count: number = args[1] || vertices.length;\n      return this._Set((index: number): XY => vertices[index], count);\n    }\n  }\n\n  _Set(vertices: (index: number) => XY, count: number): b2PolygonShape {\n    !!B2_DEBUG && b2Assert(3 <= count);\n    if (count < 3) {\n      return this.SetAsBox(1, 1);\n    }\n\n    let n: number = count;\n\n    // Perform welding and copy vertices into local buffer.\n    const ps: XY[] = [];\n    for (let i = 0; i < n; ++i) {\n      const /*b2Vec2*/ v = vertices(i);\n\n      let /*bool*/ unique = true;\n      for (let /*int32*/ j = 0; j < ps.length; ++j) {\n        if (b2Vec2.DistanceSquaredVV(v, ps[j]) < 0.5 * b2_linearSlop * (0.5 * b2_linearSlop)) {\n          unique = false;\n          break;\n        }\n      }\n\n      if (unique) {\n        ps.push(v);\n      }\n    }\n\n    n = ps.length;\n    if (n < 3) {\n      // Polygon is degenerate.\n      !!B2_DEBUG && b2Assert(false);\n      return this.SetAsBox(1.0, 1.0);\n    }\n\n    // Create the convex hull using the Gift wrapping algorithm\n    // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n    // Find the right most point on the hull\n    let i0 = 0;\n    let x0: number = ps[0].x;\n    for (let i = 1; i < n; ++i) {\n      const x: number = ps[i].x;\n      if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\n        i0 = i;\n        x0 = x;\n      }\n    }\n\n    const hull: number[] = [];\n    let m = 0;\n    let ih: number = i0;\n\n    for (;;) {\n      hull[m] = ih;\n\n      let ie = 0;\n      for (let j = 1; j < n; ++j) {\n        if (ie === ih) {\n          ie = j;\n          continue;\n        }\n\n        const r: b2Vec2 = b2Vec2.SubVV(ps[ie], ps[hull[m]], b2PolygonShape.Set_s_r);\n        const v: b2Vec2 = b2Vec2.SubVV(ps[j], ps[hull[m]], b2PolygonShape.Set_s_v);\n        const c: number = b2Vec2.CrossVV(r, v);\n        if (c < 0) {\n          ie = j;\n        }\n\n        // Collinearity check\n        if (c === 0 && v.LengthSquared() > r.LengthSquared()) {\n          ie = j;\n        }\n      }\n\n      ++m;\n      ih = ie;\n\n      if (ie === i0) {\n        break;\n      }\n    }\n\n    this.m_count = m;\n    this.m_vertices = b2Vec2.MakeArray(this.m_count);\n    this.m_normals = b2Vec2.MakeArray(this.m_count);\n\n    // Copy vertices.\n    for (let i = 0; i < m; ++i) {\n      this.m_vertices[i].Copy(ps[hull[i]]);\n    }\n\n    // Compute normals. Ensure the edges have non-zero length.\n    for (let i = 0; i < m; ++i) {\n      const vertexi1: b2Vec2 = this.m_vertices[i];\n      const vertexi2: b2Vec2 = this.m_vertices[(i + 1) % m];\n      const edge: b2Vec2 = b2Vec2.SubVV(vertexi2, vertexi1, b2Vec2.s_t0); // edge uses s_t0\n      !!B2_DEBUG && b2Assert(edge.LengthSquared() > b2_epsilon_sq);\n      b2Vec2.CrossVOne(edge, this.m_normals[i]).SelfNormalize();\n    }\n\n    // Compute the polygon centroid.\n    ComputeCentroid(this.m_vertices, m, this.m_centroid);\n\n    return this;\n  }\n\n  /// Build vertices to represent an axis-aligned box or an oriented box.\n  /// @param hx the half-width.\n  /// @param hy the half-height.\n  /// @param center the center of the box in local coordinates.\n  /// @param angle the rotation of the box in local coordinates.\n  SetAsBox(hx: number, hy: number, center?: XY, angle = 0): b2PolygonShape {\n    this.m_count = 4;\n    this.m_vertices = b2Vec2.MakeArray(4);\n    this.m_normals = b2Vec2.MakeArray(4);\n    this.m_vertices[0].Set(-hx, -hy);\n    this.m_vertices[1].Set(hx, -hy);\n    this.m_vertices[2].Set(hx, hy);\n    this.m_vertices[3].Set(-hx, hy);\n    this.m_normals[0].Set(0, -1);\n    this.m_normals[1].Set(1, 0);\n    this.m_normals[2].Set(0, 1);\n    this.m_normals[3].Set(-1, 0);\n    this.m_centroid.SetZero();\n\n    if (center) {\n      this.m_centroid.Copy(center);\n\n      const xf: b2Transform = new b2Transform();\n      xf.SetPosition(center);\n      xf.SetRotationAngle(angle);\n\n      // Transform vertices and normals.\n      for (let i = 0; i < this.m_count; ++i) {\n        b2Transform.MulXV(xf, this.m_vertices[i], this.m_vertices[i]);\n        b2Rot.MulRV(xf.q, this.m_normals[i], this.m_normals[i]);\n      }\n    }\n\n    return this;\n  }\n\n  /// @see b2Shape::TestPoint\n  private static TestPoint_s_pLocal = new b2Vec2();\n\n  TestPoint(xf: b2Transform, p: XY): boolean {\n    const pLocal: b2Vec2 = b2Transform.MulTXV(xf, p, b2PolygonShape.TestPoint_s_pLocal);\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const dot: number = b2Vec2.DotVV(\n        this.m_normals[i],\n        b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0),\n      );\n      if (dot > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    if (B2_ENABLE_PARTICLE) {\n      const pLocal = b2Transform.MulTXV(xf, p, ComputeDistance_s_pLocal);\n      let maxDistance = -b2_maxFloat;\n      const normalForMaxDistance = ComputeDistance_s_normalForMaxDistance.Copy(pLocal);\n\n      for (let i = 0; i < this.m_count; ++i) {\n        const dot = b2Vec2.DotVV(\n          this.m_normals[i],\n          b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0),\n        );\n        if (dot > maxDistance) {\n          maxDistance = dot;\n          normalForMaxDistance.Copy(this.m_normals[i]);\n        }\n      }\n\n      if (maxDistance > 0) {\n        const minDistance = ComputeDistance_s_minDistance.Copy(normalForMaxDistance);\n        let minDistance2 = maxDistance * maxDistance;\n        for (let i = 0; i < this.m_count; ++i) {\n          const distance = b2Vec2.SubVV(pLocal, this.m_vertices[i], ComputeDistance_s_distance);\n          const distance2 = distance.LengthSquared();\n          if (minDistance2 > distance2) {\n            minDistance.Copy(distance);\n            minDistance2 = distance2;\n          }\n        }\n\n        b2Rot.MulRV(xf.q, minDistance, normal);\n        normal.Normalize();\n        return Math.sqrt(minDistance2);\n      } else {\n        b2Rot.MulRV(xf.q, normalForMaxDistance, normal);\n        return maxDistance;\n      }\n    } else {\n      return 0.0;\n    }\n  }\n\n  /// Implement b2Shape.\n  private static RayCast_s_p1 = new b2Vec2();\n  private static RayCast_s_p2 = new b2Vec2();\n  private static RayCast_s_d = new b2Vec2();\n\n  RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    xf: b2Transform,\n    childIndex: number,\n  ): boolean {\n    // Put the ray into the polygon's frame of reference.\n    const p1: b2Vec2 = b2Transform.MulTXV(xf, input.p1, b2PolygonShape.RayCast_s_p1);\n    const p2: b2Vec2 = b2Transform.MulTXV(xf, input.p2, b2PolygonShape.RayCast_s_p2);\n    const d: b2Vec2 = b2Vec2.SubVV(p2, p1, b2PolygonShape.RayCast_s_d);\n\n    let lower = 0,\n      upper = input.maxFraction;\n\n    let index = -1;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      // p = p1 + a * d\n      // dot(normal, p - v) = 0\n      // dot(normal, p1 - v) + a * dot(normal, d) = 0\n      const numerator: number = b2Vec2.DotVV(\n        this.m_normals[i],\n        b2Vec2.SubVV(this.m_vertices[i], p1, b2Vec2.s_t0),\n      );\n      const denominator: number = b2Vec2.DotVV(this.m_normals[i], d);\n\n      if (denominator === 0) {\n        if (numerator < 0) {\n          return false;\n        }\n      } else {\n        // Note: we want this predicate without division:\n        // lower < numerator / denominator, where denominator < 0\n        // Since denominator < 0, we have to flip the inequality:\n        // lower < numerator / denominator <==> denominator * lower > numerator.\n        if (denominator < 0 && numerator < lower * denominator) {\n          // Increase lower.\n          // The segment enters this half-space.\n          lower = numerator / denominator;\n          index = i;\n        } else if (denominator > 0 && numerator < upper * denominator) {\n          // Decrease upper.\n          // The segment exits this half-space.\n          upper = numerator / denominator;\n        }\n      }\n\n      // The use of epsilon here causes the assert on lower to trip\n      // in some cases. Apparently the use of epsilon was to make edge\n      // shapes work, but now those are handled separately.\n      // if (upper < lower - b2_epsilon)\n      if (upper < lower) {\n        return false;\n      }\n    }\n\n    !!B2_DEBUG && b2Assert(0 <= lower && lower <= input.maxFraction);\n\n    if (index >= 0) {\n      output.fraction = lower;\n      b2Rot.MulRV(xf.q, this.m_normals[index], output.normal);\n      return true;\n    }\n\n    return false;\n  }\n\n  /// @see b2Shape::ComputeAABB\n  private static ComputeAABB_s_v = new b2Vec2();\n\n  ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void {\n    const lower: b2Vec2 = b2Transform.MulXV(xf, this.m_vertices[0], aabb.lowerBound);\n    const upper: b2Vec2 = aabb.upperBound.Copy(lower);\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const v: b2Vec2 = b2Transform.MulXV(xf, this.m_vertices[i], b2PolygonShape.ComputeAABB_s_v);\n      b2Vec2.MinV(v, lower, lower);\n      b2Vec2.MaxV(v, upper, upper);\n    }\n\n    const r: number = this.m_radius;\n    lower.SelfSubXY(r, r);\n    upper.SelfAddXY(r, r);\n  }\n\n  /// @see b2Shape::ComputeMass\n  private static ComputeMass_s_center = new b2Vec2();\n  private static ComputeMass_s_s = new b2Vec2();\n  private static ComputeMass_s_e1 = new b2Vec2();\n  private static ComputeMass_s_e2 = new b2Vec2();\n\n  ComputeMass(massData: b2MassData, density: number): void {\n    // Polygon mass, centroid, and inertia.\n    // Let rho be the polygon density in mass per unit area.\n    // Then:\n    // mass = rho * int(dA)\n    // centroid.x = (1/mass) * rho * int(x * dA)\n    // centroid.y = (1/mass) * rho * int(y * dA)\n    // I = rho * int((x*x + y*y) * dA)\n    //\n    // We can compute these integrals by summing all the integrals\n    // for each triangle of the polygon. To evaluate the integral\n    // for a single triangle, we make a change of variables to\n    // the (u,v) coordinates of the triangle:\n    // x = x0 + e1x * u + e2x * v\n    // y = y0 + e1y * u + e2y * v\n    // where 0 <= u && 0 <= v && u + v <= 1.\n    //\n    // We integrate u from [0,1-v] and then v from [0,1].\n    // We also need to use the Jacobian of the transformation:\n    // D = cross(e1, e2)\n    //\n    // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n    //\n    // The rest of the derivation is handled by computer algebra.\n\n    !!B2_DEBUG && b2Assert(this.m_count >= 3);\n\n    const center: b2Vec2 = b2PolygonShape.ComputeMass_s_center.SetZero();\n    let area = 0;\n    let I = 0;\n\n    // s is the reference point for forming triangles.\n    // It's location doesn't change the result (except for rounding error).\n    const s: b2Vec2 = b2PolygonShape.ComputeMass_s_s.SetZero();\n\n    // This code would put the reference point inside the polygon.\n    for (let i = 0; i < this.m_count; ++i) {\n      s.SelfAdd(this.m_vertices[i]);\n    }\n    s.SelfMul(1 / this.m_count);\n\n    const k_inv3: number = 1 / 3;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      // Triangle vertices.\n      const e1: b2Vec2 = b2Vec2.SubVV(this.m_vertices[i], s, b2PolygonShape.ComputeMass_s_e1);\n      const e2: b2Vec2 = b2Vec2.SubVV(\n        this.m_vertices[(i + 1) % this.m_count],\n        s,\n        b2PolygonShape.ComputeMass_s_e2,\n      );\n\n      const D: number = b2Vec2.CrossVV(e1, e2);\n\n      const triangleArea: number = 0.5 * D;\n      area += triangleArea;\n\n      // Area weighted centroid\n      center.SelfAdd(\n        b2Vec2.MulSV(triangleArea * k_inv3, b2Vec2.AddVV(e1, e2, b2Vec2.s_t0), b2Vec2.s_t1),\n      );\n\n      const ex1: number = e1.x;\n      const ey1: number = e1.y;\n      const ex2: number = e2.x;\n      const ey2: number = e2.y;\n\n      const intx2: number = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n      const inty2: number = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n      I += 0.25 * k_inv3 * D * (intx2 + inty2);\n    }\n\n    // Total mass\n    massData.mass = density * area;\n\n    // Center of mass\n    !!B2_DEBUG && b2Assert(area > b2_epsilon);\n    center.SelfMul(1 / area);\n    b2Vec2.AddVV(center, s, massData.center);\n\n    // Inertia tensor relative to the local origin (point s).\n    massData.I = density * I;\n\n    // Shift to center of mass then to original body origin.\n    massData.I +=\n      massData.mass *\n      (b2Vec2.DotVV(massData.center, massData.center) - b2Vec2.DotVV(center, center));\n  }\n\n  private static Validate_s_e = new b2Vec2();\n  private static Validate_s_v = new b2Vec2();\n\n  Validate(): boolean {\n    for (let i = 0; i < this.m_count; ++i) {\n      const i1 = i;\n      const i2 = (i + 1) % this.m_count;\n      const p: b2Vec2 = this.m_vertices[i1];\n      const e: b2Vec2 = b2Vec2.SubVV(this.m_vertices[i2], p, b2PolygonShape.Validate_s_e);\n\n      for (let j = 0; j < this.m_count; ++j) {\n        if (j === i1 || j === i2) {\n          continue;\n        }\n\n        const v: b2Vec2 = b2Vec2.SubVV(this.m_vertices[j], p, b2PolygonShape.Validate_s_v);\n        const c: number = b2Vec2.CrossVV(e, v);\n        if (c < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void {\n    proxy.m_vertices = this.m_vertices;\n    proxy.m_count = this.m_count;\n    proxy.m_radius = this.m_radius;\n  }\n\n  private static ComputeSubmergedArea_s_normalL = new b2Vec2();\n  private static ComputeSubmergedArea_s_md = new b2MassData();\n  private static ComputeSubmergedArea_s_intoVec = new b2Vec2();\n  private static ComputeSubmergedArea_s_outoVec = new b2Vec2();\n  private static ComputeSubmergedArea_s_center = new b2Vec2();\n\n  ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number {\n    // Transform plane into shape co-ordinates\n    const normalL: b2Vec2 = b2Rot.MulTRV(\n      xf.q,\n      normal,\n      b2PolygonShape.ComputeSubmergedArea_s_normalL,\n    );\n    const offsetL: number = offset - b2Vec2.DotVV(normal, xf.p);\n\n    const depths: number[] = [];\n    let diveCount = 0;\n    let intoIndex = -1;\n    let outoIndex = -1;\n\n    let lastSubmerged = false;\n    for (let i = 0; i < this.m_count; ++i) {\n      depths[i] = b2Vec2.DotVV(normalL, this.m_vertices[i]) - offsetL;\n      const isSubmerged: boolean = depths[i] < -b2_epsilon;\n      if (i > 0) {\n        if (isSubmerged) {\n          if (!lastSubmerged) {\n            intoIndex = i - 1;\n            diveCount++;\n          }\n        } else {\n          if (lastSubmerged) {\n            outoIndex = i - 1;\n            diveCount++;\n          }\n        }\n      }\n      lastSubmerged = isSubmerged;\n    }\n    switch (diveCount) {\n      case 0:\n        if (lastSubmerged) {\n          // Completely submerged\n          const md: b2MassData = b2PolygonShape.ComputeSubmergedArea_s_md;\n          this.ComputeMass(md, 1);\n          b2Transform.MulXV(xf, md.center, c);\n          return md.mass;\n        } else {\n          // Completely dry\n          return 0;\n        }\n      case 1:\n        if (intoIndex === -1) {\n          intoIndex = this.m_count - 1;\n        } else {\n          outoIndex = this.m_count - 1;\n        }\n        break;\n    }\n    const intoIndex2: number = (intoIndex + 1) % this.m_count;\n    const outoIndex2: number = (outoIndex + 1) % this.m_count;\n    const intoLamdda: number = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\n    const outoLamdda: number = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\n\n    const intoVec: b2Vec2 = b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(\n      this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda,\n      this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda,\n    );\n    const outoVec: b2Vec2 = b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(\n      this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda,\n      this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda,\n    );\n\n    // Initialize accumulator\n    let area = 0;\n    const center: b2Vec2 = b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();\n    let p2: b2Vec2 = this.m_vertices[intoIndex2];\n    let p3: b2Vec2;\n\n    // An awkward loop from intoIndex2+1 to outIndex2\n    let i: number = intoIndex2;\n    while (i !== outoIndex2) {\n      i = (i + 1) % this.m_count;\n      if (i === outoIndex2) {\n        p3 = outoVec;\n      } else {\n        p3 = this.m_vertices[i];\n      }\n\n      const triangleArea: number =\n        0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\n      area += triangleArea;\n      // Area weighted centroid\n      center.x += (triangleArea * (intoVec.x + p2.x + p3.x)) / 3;\n      center.y += (triangleArea * (intoVec.y + p2.y + p3.y)) / 3;\n\n      p2 = p3;\n    }\n\n    // Normalize and transform centroid\n    center.SelfMul(1 / area);\n    b2Transform.MulXV(xf, center, c);\n\n    return area;\n  }\n\n  /*\n    static ComputeOBB(obb, vs, count) {\n      const i: number = 0;\n      const p: Array = [count + 1];\n      for (i = 0; i < count; ++i) {\n        p[i] = vs[i];\n      }\n      p[count] = p[0];\n      const minArea = b2_maxFloat;\n      for (i = 1; i <= count; ++i) {\n        const root = p[i - 1];\n        const uxX = p[i].x - root.x;\n        const uxY = p[i].y - root.y;\n        const length = b2Sqrt(uxX * uxX + uxY * uxY);\n        uxX /= length;\n        uxY /= length;\n        const uyX = (-uxY);\n        const uyY = uxX;\n        const lowerX = b2_maxFloat;\n        const lowerY = b2_maxFloat;\n        const upperX = (-b2_maxFloat);\n        const upperY = (-b2_maxFloat);\n        for (let j = 0; j < count; ++j) {\n          const dX = p[j].x - root.x;\n          const dY = p[j].y - root.y;\n          const rX = (uxX * dX + uxY * dY);\n          const rY = (uyX * dX + uyY * dY);\n          if (rX < lowerX) lowerX = rX;\n          if (rY < lowerY) lowerY = rY;\n          if (rX > upperX) upperX = rX;\n          if (rY > upperY) upperY = rY;\n        }\n        const area = (upperX - lowerX) * (upperY - lowerY);\n        if (area < 0.95 * minArea) {\n          minArea = area;\n          obb.R.ex.x = uxX;\n          obb.R.ex.y = uxY;\n          obb.R.ey.x = uyX;\n          obb.R.ey.y = uyY;\n          const center_x: number = 0.5 * (lowerX + upperX);\n          const center_y: number = 0.5 * (lowerY + upperY);\n          const tMat = obb.R;\n          obb.center.x = root.x + (tMat.ex.x * center_x + tMat.ey.x * center_y);\n          obb.center.y = root.y + (tMat.ex.y * center_x + tMat.ey.y * center_y);\n          obb.extents.x = 0.5 * (upperX - lowerX);\n          obb.extents.y = 0.5 * (upperY - lowerY);\n        }\n      }\n    }\n    */\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2Assert } from '../../common/b2Settings';\nimport { b2Sqrt, b2Sweep } from '../../common/b2Math';\nimport {\n  b2ContactID,\n  b2Manifold,\n  b2ManifoldPoint,\n  b2TestOverlapShape,\n  b2WorldManifold,\n} from '../../collision/b2Collision';\nimport { b2TimeOfImpact, b2TOIInput, b2TOIOutput } from '../../collision/b2TimeOfImpact';\nimport { b2Body } from '../b2Body';\nimport { b2Fixture } from '../b2Fixture';\nimport { b2Shape, b2ShapeType } from '../../collision/shapes/b2Shape';\nimport { b2ContactListener } from '../b2WorldCallbacks';\nimport { b2CollideCircles, b2CollidePolygonAndCircle } from '../../collision/b2CollideCircle';\nimport { b2CircleShape } from '../../collision/shapes/b2CircleShape';\nimport { b2PolygonShape } from '../../collision/shapes/b2PolygonShape';\nimport { b2CollidePolygons } from '../../collision/b2CollidePolygon';\nimport { b2CollideEdgeAndCircle, b2CollideEdgeAndPolygon } from '../../collision/b2CollideEdge';\nimport { b2EdgeShape } from '../../collision/shapes/b2EdgeShape';\nimport { b2ChainShape } from '../../collision/shapes/b2ChainShape';\n\n/// Friction mixing law. The idea is to allow either fixture to drive the friction to zero.\n/// For example, anything slides on ice.\nfunction b2MixFriction(friction1: number, friction2: number): number {\n  return b2Sqrt(friction1 * friction2);\n}\n\n/// Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface.\n/// For example, a superball bounces on anything.\nfunction b2MixRestitution(restitution1: number, restitution2: number): number {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nexport class b2ContactEdge {\n  readonly contact: b2Contact;\n  private _other: b2Body | null = null; ///< provides quick access to the other body attached.\n  prev: b2ContactEdge | null = null; ///< the previous contact edge in the body's contact list\n  next: b2ContactEdge | null = null; ///< the next contact edge in the body's contact list\n\n  constructor(contact: b2Contact) {\n    this.contact = contact;\n  }\n\n  Reset(): void {\n    this._other = null;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get other(): b2Body {\n    B2_ASSERT && b2Assert(this._other !== null);\n    return this._other!;\n  }\n\n  set other(value: b2Body) {\n    B2_ASSERT && b2Assert(this._other === null);\n    this._other = value;\n  }\n}\n\nconst ComputeTOI_s_input = new b2TOIInput();\nconst ComputeTOI_s_output = new b2TOIOutput();\nconst Evaluate_s_edge = new b2EdgeShape();\n\nconst Evaluate = (contact: b2Contact) => {\n  const xfA = contact.m_fixtureA.m_body.m_xf;\n  const xfB = contact.m_fixtureB.m_body.m_xf;\n  const typeA = contact.m_fixtureA._shapeType;\n  const typeB = contact.m_fixtureB._shapeType;\n  const shapeA = contact.m_fixtureA.m_shape;\n  const shapeB = contact.m_fixtureB.m_shape;\n  const manifold = contact.m_manifold;\n  const indexA = contact.m_indexA;\n  const pt = (typeA << 2) | typeB;\n  if (pt === ((b2ShapeType.e_circleShape << 2) | b2ShapeType.e_circleShape)) {\n    b2CollideCircles(manifold, shapeA as b2CircleShape, xfA, shapeB as b2CircleShape, xfB);\n  } else if (pt === ((b2ShapeType.e_polygonShape << 2) | b2ShapeType.e_circleShape)) {\n    b2CollidePolygonAndCircle(\n      manifold,\n      shapeA as b2PolygonShape,\n      xfA,\n      shapeB as b2CircleShape,\n      xfB,\n    );\n  } else if (pt === ((b2ShapeType.e_polygonShape << 2) | b2ShapeType.e_polygonShape)) {\n    b2CollidePolygons(manifold, shapeA as b2PolygonShape, xfA, shapeB as b2PolygonShape, xfB);\n  } else if (pt === ((b2ShapeType.e_edgeShape << 2) | b2ShapeType.e_circleShape)) {\n    b2CollideEdgeAndCircle(manifold, shapeA as b2EdgeShape, xfA, shapeB as b2CircleShape, xfB);\n  } else if (pt === ((b2ShapeType.e_edgeShape << 2) | b2ShapeType.e_polygonShape)) {\n    b2CollideEdgeAndPolygon(manifold, shapeA as b2EdgeShape, xfA, shapeB as b2PolygonShape, xfB);\n  } else if (pt === ((b2ShapeType.e_chainShape << 2) | b2ShapeType.e_circleShape)) {\n    (shapeA as b2ChainShape).GetChildEdge(Evaluate_s_edge, indexA);\n    b2CollideEdgeAndCircle(manifold, Evaluate_s_edge, xfA, shapeB as b2CircleShape, xfB);\n  } else if (pt === ((b2ShapeType.e_chainShape << 2) | b2ShapeType.e_polygonShape)) {\n    (shapeA as b2ChainShape).GetChildEdge(Evaluate_s_edge, indexA);\n    b2CollideEdgeAndPolygon(manifold, Evaluate_s_edge, xfA, shapeB as b2PolygonShape, xfB);\n  }\n};\n\nexport class b2Contact<A extends b2Shape = b2Shape, B extends b2Shape = b2Shape> {\n  m_prev: b2Contact | null = null;\n  m_next: b2Contact | null = null;\n\n  readonly m_nodeA: b2ContactEdge = new b2ContactEdge(this);\n  readonly m_nodeB: b2ContactEdge = new b2ContactEdge(this);\n\n  m_fixtureA: b2Fixture = (null as unknown) as b2Fixture;\n  m_fixtureB: b2Fixture = (null as unknown) as b2Fixture;\n\n  m_indexA = 0;\n  m_indexB = 0;\n\n  m_manifold = new b2Manifold(); // TODO: readonly\n\n  m_toiCount = 0;\n  m_toi = NaN;\n  m_friction = NaN;\n  m_restitution = NaN;\n  m_tangentSpeed = NaN;\n\n  m_oldManifold = new b2Manifold(); // TODO: readonly\n\n  m_islandFlag = false; /// Used when crawling contact graph when forming islands.\n  m_touchingFlag = false; /// Set when the shapes are touching.\n  m_enabledFlag = false; /// This contact can be disabled (by user)\n  m_filterFlag = false; /// This contact needs filtering because a fixture filter was changed.\n  m_bulletHitFlag = false; /// This bullet contact had a TOI event\n  m_toiFlag = false; /// This contact has a valid TOI in m_toi\n\n  constructor() {\n    this.m_toi = 0.0;\n    this.m_friction = 0.0;\n    this.m_restitution = 0.0;\n    this.m_tangentSpeed = 0.0;\n  }\n\n  GetManifold() {\n    return this.m_manifold;\n  }\n\n  GetWorldManifold(worldManifold: b2WorldManifold): void {\n    worldManifold.Initialize(\n      this.m_manifold,\n      this.m_fixtureA.m_body.m_xf,\n      this.m_fixtureA._shapeRadius,\n      this.m_fixtureB.m_body.m_xf,\n      this.m_fixtureB._shapeRadius,\n    );\n  }\n\n  IsTouching(): boolean {\n    return this.m_touchingFlag;\n  }\n\n  SetEnabled(flag: boolean): void {\n    this.m_enabledFlag = flag;\n  }\n\n  IsEnabled(): boolean {\n    return this.m_enabledFlag;\n  }\n\n  GetNext(): b2Contact | null {\n    return this.m_next;\n  }\n\n  GetFixtureA(): b2Fixture {\n    return this.m_fixtureA;\n  }\n\n  GetChildIndexA(): number {\n    return this.m_indexA;\n  }\n\n  GetShapeA(): A {\n    return this.m_fixtureA.GetShape() as A;\n  }\n\n  GetFixtureB(): b2Fixture {\n    return this.m_fixtureB;\n  }\n\n  GetChildIndexB(): number {\n    return this.m_indexB;\n  }\n\n  GetShapeB(): B {\n    return this.m_fixtureB.GetShape() as B;\n  }\n\n  FlagForFiltering(): void {\n    this.m_filterFlag = true;\n  }\n\n  SetFriction(friction: number): void {\n    this.m_friction = friction;\n  }\n\n  GetFriction(): number {\n    return this.m_friction;\n  }\n\n  ResetFriction(): void {\n    this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n  }\n\n  SetRestitution(restitution: number): void {\n    this.m_restitution = restitution;\n  }\n\n  GetRestitution(): number {\n    return this.m_restitution;\n  }\n\n  ResetRestitution(): void {\n    this.m_restitution = b2MixRestitution(\n      this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution,\n    );\n  }\n\n  SetTangentSpeed(speed: number): void {\n    this.m_tangentSpeed = speed;\n  }\n\n  GetTangentSpeed(): number {\n    return this.m_tangentSpeed;\n  }\n\n  Reset(fixtureA: b2Fixture, indexA: number, fixtureB: b2Fixture, indexB: number): void {\n    this.m_islandFlag = false;\n    this.m_touchingFlag = false;\n    this.m_enabledFlag = true;\n    this.m_filterFlag = false;\n    this.m_bulletHitFlag = false;\n    this.m_toiFlag = false;\n\n    this.m_fixtureA = fixtureA;\n    this.m_fixtureB = fixtureB;\n\n    this.m_indexA = indexA;\n    this.m_indexB = indexB;\n\n    this.m_manifold.pointCount = 0;\n\n    this.m_prev = null;\n    this.m_next = null;\n\n    this.m_nodeA.Reset();\n    this.m_nodeB.Reset();\n\n    this.m_toiCount = 0;\n\n    this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n    this.m_restitution = b2MixRestitution(\n      this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution,\n    );\n  }\n\n  Update(listener: b2ContactListener): void {\n    const tManifold: b2Manifold = this.m_oldManifold;\n    this.m_oldManifold = this.m_manifold;\n    this.m_manifold = tManifold;\n\n    // Re-enable this contact.\n    this.m_enabledFlag = true;\n\n    let touching = false;\n    const wasTouching: boolean = this.m_touchingFlag;\n\n    const sensorA = this.m_fixtureA.IsSensor();\n    const sensorB = this.m_fixtureB.IsSensor();\n    const sensor = sensorA || sensorB;\n\n    const bodyA = this.m_fixtureA.GetBody();\n    const bodyB = this.m_fixtureB.GetBody();\n    const xfA = bodyA.GetTransform();\n    const xfB = bodyB.GetTransform();\n    const shapeA: A = this.GetShapeA();\n    const shapeB: B = this.GetShapeB();\n\n    // Is this contact a sensor?\n    if (sensor) {\n      touching = b2TestOverlapShape(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\n\n      // Sensors don't generate manifolds.\n      this.m_manifold.pointCount = 0;\n    } else {\n      Evaluate(this);\n      touching = this.m_manifold.pointCount > 0;\n\n      // Match old contact ids to new contact ids and copy the\n      // stored impulses to warm start the solver.\n      for (let i = 0; i < this.m_manifold.pointCount; ++i) {\n        const mp2: b2ManifoldPoint = this.m_manifold.points[i];\n        mp2.normalImpulse = 0;\n        mp2.tangentImpulse = 0;\n        const id2: b2ContactID = mp2.id;\n\n        for (let j = 0; j < this.m_oldManifold.pointCount; ++j) {\n          const mp1: b2ManifoldPoint = this.m_oldManifold.points[j];\n\n          if (mp1.id.key === id2.key) {\n            mp2.normalImpulse = mp1.normalImpulse;\n            mp2.tangentImpulse = mp1.tangentImpulse;\n            break;\n          }\n        }\n      }\n\n      if (touching !== wasTouching) {\n        bodyA.SetAwake(true);\n        bodyB.SetAwake(true);\n      }\n    }\n\n    this.m_touchingFlag = touching;\n\n    if (!wasTouching && touching) {\n      listener.BeginContact(this);\n    }\n\n    if (wasTouching && !touching) {\n      listener.EndContact(this);\n    }\n\n    if (!sensor && touching) {\n      listener.PreSolve(this, this.m_oldManifold);\n    }\n  }\n\n  ComputeTOI(sweepA: b2Sweep, sweepB: b2Sweep): number {\n    const input = ComputeTOI_s_input;\n    input.proxyA.SetShape(this.GetShapeA(), this.m_indexA);\n    input.proxyB.SetShape(this.GetShapeB(), this.m_indexB);\n    input.sweepA.Copy(sweepA);\n    input.sweepB.Copy(sweepB);\n    input.tMax = b2_linearSlop;\n\n    const output = ComputeTOI_s_output;\n\n    b2TimeOfImpact(output, input);\n\n    return output.t;\n  }\n}\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_invalidParticleIndex } from '../common/b2SettingsParticleSystem';\nimport { b2ClampInt, b2Vec2, XY } from '../common/b2Math';\nimport { b2Color, RGBA } from '../common/b2Draw';\nimport { b2ParticleGroup } from './b2ParticleGroup';\n\n/**\n * The particle type. Can be combined with the | operator.\n */\nexport const enum b2ParticleFlag {\n  none = 0,\n  /// Water particle.\n  b2_waterParticle = 1 << 0,\n  /// Removed after next simulation step.\n  b2_zombieParticle = 1 << 1,\n  /// Zero velocity.\n  b2_wallParticle = 1 << 2,\n  /// With restitution from stretching.\n  b2_springParticle = 1 << 3,\n  /// With restitution from deformation.\n  b2_elasticParticle = 1 << 4,\n  /// With viscosity.\n  b2_viscousParticle = 1 << 5,\n  /// Without isotropic pressure.\n  b2_powderParticle = 1 << 6,\n  /// With surface tension.\n  b2_tensileParticle = 1 << 7,\n  /// Mix color between contacting particles.\n  b2_colorMixingParticle = 1 << 8,\n  /// Call b2DestructionListener on destruction.\n  b2_destructionListenerParticle = 1 << 9,\n  /// Prevents other particles from leaking.\n  b2_barrierParticle = 1 << 10,\n  /// Less compressibility.\n  b2_staticPressureParticle = 1 << 11,\n  /// Makes pairs or triads with other particles.\n  b2_reactiveParticle = 1 << 12,\n  /// With high repulsive force.\n  b2_repulsiveParticle = 1 << 13,\n  /// Call b2ContactListener when this particle is about to interact with\n  /// a rigid body or stops interacting with a rigid body.\n  /// This results in an expensive operation compared to using\n  /// b2_fixtureContactFilterParticle to detect collisions between\n  /// particles.\n  b2_fixtureContactListenerParticle = 1 << 14,\n  /// Call b2ContactListener when this particle is about to interact with\n  /// another particle or stops interacting with another particle.\n  /// This results in an expensive operation compared to using\n  /// b2_particleContactFilterParticle to detect collisions between\n  /// particles.\n  b2_particleContactListenerParticle = 1 << 15,\n  /// Call b2ContactFilter when this particle interacts with rigid bodies.\n  b2_fixtureContactFilterParticle = 1 << 16,\n  /// Call b2ContactFilter when this particle interacts with other\n  /// particles.\n  b2_particleContactFilterParticle = 1 << 17,\n}\n\nexport interface b2IParticleDef {\n  flags?: b2ParticleFlag;\n  position?: XY;\n  velocity?: XY;\n  color?: RGBA;\n  lifetime?: number;\n  userData?: any;\n  group?: b2ParticleGroup | null;\n}\n\nexport class b2ParticleDef implements b2IParticleDef {\n  flags = b2ParticleFlag.none;\n  readonly position = new b2Vec2();\n  readonly velocity = new b2Vec2();\n  readonly color = new b2Color(0, 0, 0, 0);\n  lifetime = NaN;\n  userData: any = null;\n  group: b2ParticleGroup | null = null;\n\n  constructor() {\n    this.lifetime = 0.0;\n  }\n}\n\nexport function b2CalculateParticleIterations(\n  gravity: number,\n  radius: number,\n  timeStep: number,\n): number {\n  // In some situations you may want more particle iterations than this,\n  // but to avoid excessive cycle cost, don't recommend more than this.\n  const B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;\n  const B2_RADIUS_THRESHOLD = 0.01;\n  const iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);\n  return b2ClampInt(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);\n}\n\nexport class b2ParticleHandle {\n  index = b2_invalidParticleIndex;\n\n  GetIndex(): number {\n    return this.index;\n  }\n\n  SetIndex(index: number): void {\n    this.index = index;\n  }\n}\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2_maxFloat, b2Assert, b2MakeArray, b2Maybe } from '../common/b2Settings';\nimport {\n  b2_barrierCollisionTime,\n  b2_invalidParticleIndex,\n  b2_maxParticleForce,\n  b2_maxParticleIndex,\n  b2_maxParticlePressure,\n  b2_maxTriadDistanceSquared,\n  b2_minParticleSystemBufferCapacity,\n  b2_minParticleWeight,\n  b2_particleStride,\n} from '../common/b2SettingsParticleSystem';\nimport {\n  b2Abs,\n  b2Clamp,\n  b2InvSqrt,\n  b2Max,\n  b2MaxInt,\n  b2Min,\n  b2MinInt,\n  b2Rot,\n  b2Sqrt,\n  b2Transform,\n  b2Vec2,\n  XY,\n} from '../common/b2Math';\nimport { b2Color } from '../common/b2Draw';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../collision/b2Collision';\nimport { b2MassData, b2Shape, b2ShapeType } from '../collision/shapes/b2Shape';\nimport { b2EdgeShape } from '../collision/shapes/b2EdgeShape';\nimport { b2ChainShape } from '../collision/shapes/b2ChainShape';\nimport { b2TimeStep } from '../dynamics/b2TimeStep';\nimport { b2Fixture } from '../dynamics/b2Fixture';\nimport { b2Body } from '../dynamics/b2Body';\nimport { b2World } from '../dynamics/b2World';\nimport {\n  b2ContactFilter,\n  b2ContactListener,\n  b2QueryCallback,\n  b2RayCastCallback,\n} from '../dynamics/b2WorldCallbacks';\nimport { b2IParticleDef, b2ParticleDef, b2ParticleFlag, b2ParticleHandle } from './b2Particle';\nimport {\n  b2IParticleGroupDef,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2ParticleGroupFlag,\n} from './b2ParticleGroup';\nimport { b2VoronoiDiagram } from './b2VoronoiDiagram';\nimport { b2DistanceProxy } from '../collision/b2Distance';\n\nfunction std_iter_swap<T>(array: T[], a: number, b: number): void {\n  const tmp: T = array[a];\n  array[a] = array[b];\n  array[b] = tmp;\n}\n\nfunction default_compare<T>(a: T, b: T): boolean {\n  return a < b;\n}\n\nfunction std_sort<T>(\n  array: T[],\n  first = 0,\n  len: number = array.length - first,\n  cmp: (a: T, b: T) => boolean = default_compare,\n): T[] {\n  let left = first;\n  const stack: number[] = [];\n  let pos = 0;\n\n  for (;;) {\n    /* outer loop */\n    for (; left + 1 < len; len++) {\n      /* sort left to len-1 */\n      const pivot = array[left + Math.floor(Math.random() * (len - left))]; /* pick random pivot */\n      stack[pos++] = len; /* sort right part later */\n      for (let right = left - 1; ; ) {\n        /* inner loop: partitioning */\n        // eslint-disable-next-line no-empty\n        while (cmp(array[++right], pivot)) {} /* look for greater element */\n        // eslint-disable-next-line no-empty\n        while (cmp(pivot, array[--len])) {} /* look for smaller element */\n\n        if (right >= len) {\n          break;\n        } /* partition point found? */\n        std_iter_swap(array, right, len); /* the only swap */\n      } /* partitioned, continue left part */\n    }\n    if (pos === 0) {\n      break;\n    } /* stack empty? */\n    left = len; /* left to right is sorted */\n    len = stack[--pos]; /* get next range to sort */\n  }\n\n  return array;\n}\n\nfunction std_stable_sort<T>(\n  array: T[],\n  first = 0,\n  len: number = array.length - first,\n  cmp: (a: T, b: T) => boolean = default_compare,\n): T[] {\n  return std_sort(array, first, len, cmp);\n}\n\nfunction std_remove_if<T>(\n  array: T[],\n  predicate: (value: T) => boolean,\n  length: number = array.length,\n) {\n  let l = 0;\n\n  for (let c = 0; c < length; ++c) {\n    // if we can be collapsed, keep l where it is.\n    if (predicate(array[c])) {\n      continue;\n    }\n\n    // this node can't be collapsed; push it back as far as we can.\n    if (c === l) {\n      ++l;\n      continue; // quick exit if we're already in the right spot\n    }\n\n    // array[l++] = array[c];\n    std_iter_swap(array, l++, c);\n  }\n\n  return l;\n}\n\nfunction std_lower_bound<A, B>(\n  array: A[],\n  first: number,\n  last: number,\n  val: B,\n  cmp: (a: A, b: B) => boolean,\n): number {\n  let count = last - first;\n  while (count > 0) {\n    const step = Math.floor(count / 2);\n    let it = first + step;\n\n    if (cmp(array[it], val)) {\n      first = ++it;\n      count -= step + 1;\n    } else {\n      count = step;\n    }\n  }\n  return first;\n}\n\nfunction std_upper_bound<A, B>(\n  array: B[],\n  first: number,\n  last: number,\n  val: A,\n  cmp: (a: A, b: B) => boolean,\n): number {\n  let count = last - first;\n  while (count > 0) {\n    const step = Math.floor(count / 2);\n    let it = first + step;\n\n    if (!cmp(val, array[it])) {\n      first = ++it;\n      count -= step + 1;\n    } else {\n      count = step;\n    }\n  }\n  return first;\n}\n\nfunction std_rotate<T>(array: T[], first: number, n_first: number, last: number): void {\n  let next = n_first;\n  while (first !== next) {\n    std_iter_swap(array, first++, next++);\n    if (next === last) {\n      next = n_first;\n    } else if (first === n_first) {\n      n_first = next;\n    }\n  }\n}\n\nfunction std_unique<T>(\n  array: T[],\n  first: number,\n  last: number,\n  cmp: (a: T, b: T) => boolean,\n): number {\n  if (first === last) {\n    return last;\n  }\n  let result = first;\n  while (++first !== last) {\n    if (!cmp(array[result], array[first])) {\n      ///array[++result] = array[first];\n      std_iter_swap(array, ++result, first);\n    }\n  }\n  return ++result;\n}\n\nconst newIndices = (i: number, start: number, mid: number, end: number): number => {\n  if (i < start) {\n    return i;\n  } else if (i < mid) {\n    return i + end - mid;\n  } else if (i < end) {\n    return i + start - mid;\n  } else {\n    return i;\n  }\n};\n\nexport class b2GrowableBuffer<T> {\n  data: T[] = [];\n  count = 0;\n  capacity = 0;\n  allocator: () => T;\n\n  constructor(allocator: () => T) {\n    this.allocator = allocator;\n  }\n\n  Append(): number {\n    if (this.count >= this.capacity) {\n      this.Grow();\n    }\n    return this.count++;\n  }\n\n  Reserve(newCapacity: number): void {\n    if (this.capacity >= newCapacity) {\n      return;\n    }\n\n    !!B2_DEBUG && b2Assert(this.capacity === this.data.length);\n    for (let i = this.capacity; i < newCapacity; ++i) {\n      this.data[i] = this.allocator();\n    }\n    this.capacity = newCapacity;\n  }\n\n  Grow(): void {\n    // Double the capacity.\n    const newCapacity = this.capacity ? 2 * this.capacity : b2_minParticleSystemBufferCapacity;\n    !!B2_DEBUG && b2Assert(newCapacity > this.capacity);\n    this.Reserve(newCapacity);\n  }\n\n  Free(): void {\n    if (this.data.length === 0) {\n      return;\n    }\n\n    this.data = [];\n    this.capacity = 0;\n    this.count = 0;\n  }\n\n  Shorten(newEnd: number): void {\n    !!B2_DEBUG && b2Assert(false);\n  }\n\n  Data(): T[] {\n    return this.data;\n  }\n\n  GetCount(): number {\n    return this.count;\n  }\n\n  SetCount(newCount: number): void {\n    !!B2_DEBUG && b2Assert(0 <= newCount && newCount <= this.capacity);\n    this.count = newCount;\n  }\n\n  GetCapacity(): number {\n    return this.capacity;\n  }\n\n  RemoveIf(pred: (t: T) => boolean): void {\n    if (B2_DEBUG) {\n      let count = 0;\n      for (let i = 0; i < this.count; ++i) {\n        if (!pred(this.data[i])) {\n          count++;\n        }\n      }\n\n      this.count = std_remove_if(this.data, pred, this.count);\n\n      b2Assert(count === this.count);\n    } else {\n      this.count = std_remove_if(this.data, pred, this.count);\n    }\n  }\n\n  Unique(pred: (a: T, b: T) => boolean): void {\n    this.count = std_unique(this.data, 0, this.count, pred);\n  }\n}\n\nexport type b2ParticleIndex = number;\n\nexport class b2FixtureParticleQueryCallback extends b2QueryCallback {\n  m_system: b2ParticleSystem;\n\n  constructor(system: b2ParticleSystem) {\n    super();\n    this.m_system = system;\n  }\n\n  ShouldQueryParticleSystem(system: b2ParticleSystem): boolean {\n    // Skip reporting particles.\n    return false;\n  }\n\n  ReportFixture(fixture: b2Fixture): boolean {\n    if (fixture.IsSensor()) {\n      return true;\n    }\n    const shape = fixture.GetShape();\n    const childCount = shape.GetChildCount();\n    for (let childIndex = 0; childIndex < childCount; childIndex++) {\n      const aabb = fixture.GetAABB(childIndex);\n      const enumerator = this.m_system.GetInsideBoundsEnumerator(aabb);\n      let index: number;\n      while ((index = enumerator.GetNext()) >= 0) {\n        this.ReportFixtureAndParticle(fixture, childIndex, index);\n      }\n    }\n    return true;\n  }\n\n  ReportParticle(system: b2ParticleSystem, index: number): boolean {\n    return false;\n  }\n\n  ReportFixtureAndParticle(fixture: b2Fixture, childIndex: number, index: number): void {\n    !!B2_DEBUG && b2Assert(false); // pure virtual\n  }\n}\n\nexport class b2ParticleContact {\n  indexA = 0;\n  indexB = 0;\n  weight = NaN;\n  normal = new b2Vec2();\n  flags = b2ParticleFlag.none;\n\n  constructor() {\n    this.weight = 0.0;\n  }\n\n  SetIndices(a: number, b: number): void {\n    !!B2_DEBUG && b2Assert(a <= b2_maxParticleIndex && b <= b2_maxParticleIndex);\n    this.indexA = a;\n    this.indexB = b;\n  }\n\n  SetWeight(w: number): void {\n    this.weight = w;\n  }\n\n  SetNormal(n: b2Vec2): void {\n    this.normal.Copy(n);\n  }\n\n  SetFlags(f: b2ParticleFlag): void {\n    this.flags = f;\n  }\n\n  GetIndexA(): number {\n    return this.indexA;\n  }\n\n  GetIndexB(): number {\n    return this.indexB;\n  }\n\n  GetWeight(): number {\n    return this.weight;\n  }\n\n  GetNormal(): b2Vec2 {\n    return this.normal;\n  }\n\n  GetFlags(): b2ParticleFlag {\n    return this.flags;\n  }\n\n  IsEqual(rhs: b2ParticleContact): boolean {\n    return (\n      this.indexA === rhs.indexA &&\n      this.indexB === rhs.indexB &&\n      this.flags === rhs.flags &&\n      this.weight === rhs.weight &&\n      this.normal.x === rhs.normal.x &&\n      this.normal.y === rhs.normal.y\n    );\n  }\n\n  IsNotEqual(rhs: b2ParticleContact): boolean {\n    return !this.IsEqual(rhs);\n  }\n\n  ApproximatelyEqual(rhs: b2ParticleContact): boolean {\n    const MAX_WEIGHT_DIFF = 0.01; // Weight 0 ~ 1, so about 1%\n    const MAX_NORMAL_DIFF_SQ = 0.01 * 0.01; // Normal length = 1, so 1%\n    return (\n      this.indexA === rhs.indexA &&\n      this.indexB === rhs.indexB &&\n      this.flags === rhs.flags &&\n      b2Abs(this.weight - rhs.weight) < MAX_WEIGHT_DIFF &&\n      b2Vec2.DistanceSquaredVV(this.normal, rhs.normal) < MAX_NORMAL_DIFF_SQ\n    );\n  }\n}\n\nexport class b2ParticleBodyContact {\n  index = 0; // Index of the particle making contact.\n  body!: b2Body; // The body making contact.\n  fixture!: b2Fixture; // The specific fixture making contact\n  weight = NaN; // Weight of the contact. A value between 0.0f and 1.0f.\n  normal = new b2Vec2(); // The normalized direction from the particle to the body.\n  mass = NaN; // The effective mass used in calculating force.\n  constructor() {\n    this.weight = 0.0;\n    this.mass = 0.0;\n  }\n}\n\nexport class b2ParticlePair {\n  indexA = 0; // Indices of the respective particles making pair.\n  indexB = 0;\n  flags = b2ParticleFlag.none; // The logical sum of the particle flags. See the b2ParticleFlag enum.\n  strength = NaN; // The strength of cohesion among the particles.\n  distance = NaN; // The initial distance of the particles.\n  constructor() {\n    this.strength = 0.0;\n    this.distance = 0.0;\n  }\n}\n\nexport class b2ParticleTriad {\n  indexA = 0; // Indices of the respective particles making triad.\n  indexB = 0;\n  indexC = 0;\n  flags = b2ParticleFlag.none; // The logical sum of the particle flags. See the b2ParticleFlag enum.\n  strength = NaN; // The strength of cohesion among the particles.\n  pa = new b2Vec2(); // Values used for calculation.\n  pb = new b2Vec2();\n  pc = new b2Vec2();\n  ka = NaN;\n  kb = NaN;\n  kc = NaN;\n  s = NaN;\n\n  constructor() {\n    this.strength = 0.0;\n    this.ka = 0.0;\n    this.kb = 0.0;\n    this.kc = 0.0;\n    this.s = 0.0;\n  }\n}\n\nexport class b2ParticleSystemDef {\n  // Initialize physical coefficients to the maximum values that\n  // maintain numerical stability.\n\n  /**\n   * Enable strict Particle/Body contact check.\n   * See SetStrictContactCheck for details.\n   */\n  strictContactCheck = false;\n\n  /**\n   * Set the particle density.\n   * See SetDensity for details.\n   */\n  density = NaN;\n\n  /**\n   * Change the particle gravity scale. Adjusts the effect of the\n   * global gravity vector on particles. Default value is 1.0f.\n   */\n  gravityScale = NaN;\n\n  /**\n   * Particles behave as circles with this radius. In Box2D units.\n   */\n  radius = NaN;\n\n  /**\n   * Set the maximum number of particles.\n   * By default, there is no maximum. The particle buffers can\n   * continue to grow while b2World's block allocator still has\n   * memory.\n   * See SetMaxParticleCount for details.\n   */\n  maxCount = 0;\n\n  /**\n   * Increases pressure in response to compression\n   * Smaller values allow more compression\n   */\n  pressureStrength = 0.005;\n\n  /**\n   * Reduces velocity along the collision normal\n   * Smaller value reduces less\n   */\n  dampingStrength = NaN;\n\n  /**\n   * Restores shape of elastic particle groups\n   * Larger values increase elastic particle velocity\n   */\n  elasticStrength = 0.25;\n\n  /**\n   * Restores length of spring particle groups\n   * Larger values increase spring particle velocity\n   */\n  springStrength = 0.25;\n\n  /**\n   * Reduces relative velocity of viscous particles\n   * Larger values slow down viscous particles more\n   */\n  viscousStrength = 0.25;\n\n  /**\n   * Produces pressure on tensile particles\n   * 0~0.2. Larger values increase the amount of surface tension.\n   */\n  surfaceTensionPressureStrength = 0.2;\n\n  /**\n   * Smoothes outline of tensile particles\n   * 0~0.2. Larger values result in rounder, smoother,\n   * water-drop-like clusters of particles.\n   */\n  surfaceTensionNormalStrength = 0.2;\n\n  /**\n   * Produces additional pressure on repulsive particles\n   * Larger values repulse more\n   * Negative values mean attraction. The range where particles\n   * behave stably is about -0.2 to 2.0.\n   */\n  repulsiveStrength = NaN;\n\n  /**\n   * Produces repulsion between powder particles\n   * Larger values repulse more\n   */\n  powderStrength = 0.5;\n\n  /**\n   * Pushes particles out of solid particle group\n   * Larger values repulse more\n   */\n  ejectionStrength = 0.5;\n\n  /**\n   * Produces static pressure\n   * Larger values increase the pressure on neighboring partilces\n   * For a description of static pressure, see\n   * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\n   */\n  staticPressureStrength = 0.2;\n\n  /**\n   * Reduces instability in static pressure calculation\n   * Larger values make stabilize static pressure with fewer\n   * iterations\n   */\n  staticPressureRelaxation = 0.2;\n\n  /**\n   * Computes static pressure more precisely\n   * See SetStaticPressureIterations for details\n   */\n  staticPressureIterations = 8;\n\n  /**\n   * Determines how fast colors are mixed\n   * 1.0f ==> mixed immediately\n   * 0.5f ==> mixed half way each simulation step (see\n   * b2World::Step())\n   */\n  colorMixingStrength = 0.5;\n\n  /**\n   * Whether to destroy particles by age when no more particles\n   * can be created.  See #b2ParticleSystem::SetDestructionByAge()\n   * for more information.\n   */\n  destroyByAge = true;\n\n  /**\n   * Granularity of particle lifetimes in seconds.  By default\n   * this is set to (1.0f / 60.0f) seconds.  b2ParticleSystem uses\n   * a 32-bit signed value to track particle lifetimes so the\n   * maximum lifetime of a particle is (2^32 - 1) / (1.0f /\n   * lifetimeGranularity) seconds. With the value set to 1/60 the\n   * maximum lifetime or age of a particle is 2.27 years.\n   */\n  lifetimeGranularity = 1.0 / 60.0;\n\n  constructor() {\n    this.density = 1.0;\n    this.gravityScale = 1.0;\n    this.radius = 1.0;\n    this.dampingStrength = 1.0;\n    this.repulsiveStrength = 1.0;\n  }\n\n  Copy(def: b2ParticleSystemDef): b2ParticleSystemDef {\n    this.strictContactCheck = def.strictContactCheck;\n    this.density = def.density;\n    this.gravityScale = def.gravityScale;\n    this.radius = def.radius;\n    this.maxCount = def.maxCount;\n    this.pressureStrength = def.pressureStrength;\n    this.dampingStrength = def.dampingStrength;\n    this.elasticStrength = def.elasticStrength;\n    this.springStrength = def.springStrength;\n    this.viscousStrength = def.viscousStrength;\n    this.surfaceTensionPressureStrength = def.surfaceTensionPressureStrength;\n    this.surfaceTensionNormalStrength = def.surfaceTensionNormalStrength;\n    this.repulsiveStrength = def.repulsiveStrength;\n    this.powderStrength = def.powderStrength;\n    this.ejectionStrength = def.ejectionStrength;\n    this.staticPressureStrength = def.staticPressureStrength;\n    this.staticPressureRelaxation = def.staticPressureRelaxation;\n    this.staticPressureIterations = def.staticPressureIterations;\n    this.colorMixingStrength = def.colorMixingStrength;\n    this.destroyByAge = def.destroyByAge;\n    this.lifetimeGranularity = def.lifetimeGranularity;\n    return this;\n  }\n\n  Clone(): b2ParticleSystemDef {\n    return new b2ParticleSystemDef().Copy(this);\n  }\n}\n\nexport class b2ParticleSystem {\n  m_paused = false;\n  m_timestamp = 0;\n  m_allParticleFlags = b2ParticleFlag.none;\n  m_needsUpdateAllParticleFlags = false;\n  m_allGroupFlags = b2ParticleGroupFlag.none;\n  m_needsUpdateAllGroupFlags = false;\n  m_hasForce = false;\n  m_iterationIndex = 0;\n  m_inverseDensity = NaN;\n  m_particleDiameter = NaN;\n  m_inverseDiameter = NaN;\n  m_squaredDiameter = NaN;\n  m_count = 0;\n  m_internalAllocatedCapacity = 0;\n  /**\n   * Allocator for b2ParticleHandle instances.\n   */\n  ///m_handleAllocator: any = null;\n  /**\n   * Maps particle indicies to handles.\n   */\n  m_handleIndexBuffer = new b2ParticleSystem_UserOverridableBuffer<b2ParticleHandle | null>();\n  m_flagsBuffer = new b2ParticleSystem_UserOverridableBuffer<b2ParticleFlag>();\n  m_positionBuffer = new b2ParticleSystem_UserOverridableBuffer<b2Vec2>();\n  m_velocityBuffer = new b2ParticleSystem_UserOverridableBuffer<b2Vec2>();\n  m_forceBuffer: b2Vec2[] = [];\n  /**\n   * this.m_weightBuffer is populated in ComputeWeight and used in\n   * ComputeDepth(), SolveStaticPressure() and SolvePressure().\n   */\n  m_weightBuffer: number[] = [];\n  /**\n   * When any particles have the flag b2_staticPressureParticle,\n   * this.m_staticPressureBuffer is first allocated and used in\n   * SolveStaticPressure() and SolvePressure().  It will be\n   * reallocated on subsequent CreateParticle() calls.\n   */\n  m_staticPressureBuffer: number[] = [];\n  /**\n   * this.m_accumulationBuffer is used in many functions as a temporary\n   * buffer for scalar values.\n   */\n  m_accumulationBuffer: number[] = [];\n  /**\n   * When any particles have the flag b2_tensileParticle,\n   * this.m_accumulation2Buffer is first allocated and used in\n   * SolveTensile() as a temporary buffer for vector values.  It\n   * will be reallocated on subsequent CreateParticle() calls.\n   */\n  m_accumulation2Buffer: b2Vec2[] = [];\n  /**\n   * When any particle groups have the flag b2_solidParticleGroup,\n   * this.m_depthBuffer is first allocated and populated in\n   * ComputeDepth() and used in SolveSolid(). It will be\n   * reallocated on subsequent CreateParticle() calls.\n   */\n  m_depthBuffer: number[] = [];\n  m_colorBuffer = new b2ParticleSystem_UserOverridableBuffer<b2Color>();\n  m_groupBuffer: Array<b2ParticleGroup | null> = [];\n  m_userDataBuffer = new b2ParticleSystem_UserOverridableBuffer<any>();\n  /**\n   * Stuck particle detection parameters and record keeping\n   */\n  m_stuckThreshold = 0;\n  m_lastBodyContactStepBuffer = new b2ParticleSystem_UserOverridableBuffer<number>();\n  m_bodyContactCountBuffer = new b2ParticleSystem_UserOverridableBuffer<number>();\n  m_consecutiveContactStepsBuffer = new b2ParticleSystem_UserOverridableBuffer<number>();\n  m_stuckParticleBuffer = new b2GrowableBuffer<number>(() => 0);\n  m_proxyBuffer = new b2GrowableBuffer<b2ParticleSystem_Proxy>(() => new b2ParticleSystem_Proxy());\n  m_contactBuffer = new b2GrowableBuffer<b2ParticleContact>(() => new b2ParticleContact());\n  m_bodyContactBuffer = new b2GrowableBuffer<b2ParticleBodyContact>(\n    () => new b2ParticleBodyContact(),\n  );\n  m_pairBuffer = new b2GrowableBuffer<b2ParticlePair>(() => new b2ParticlePair());\n  m_triadBuffer = new b2GrowableBuffer<b2ParticleTriad>(() => new b2ParticleTriad());\n  /**\n   * Time each particle should be destroyed relative to the last\n   * time this.m_timeElapsed was initialized.  Each unit of time\n   * corresponds to b2ParticleSystemDef::lifetimeGranularity\n   * seconds.\n   */\n  m_expirationTimeBuffer = new b2ParticleSystem_UserOverridableBuffer<number>();\n  /**\n   * List of particle indices sorted by expiration time.\n   */\n  m_indexByExpirationTimeBuffer = new b2ParticleSystem_UserOverridableBuffer<number>();\n  /**\n   * Time elapsed in 32:32 fixed point.  Each non-fractional unit\n   * of time corresponds to\n   * b2ParticleSystemDef::lifetimeGranularity seconds.\n   */\n  // TODO: check and implement optimized SMI storage?\n  m_timeElapsed = 0;\n  /**\n   * Whether the expiration time buffer has been modified and\n   * needs to be resorted.\n   */\n  m_expirationTimeBufferRequiresSorting = false;\n  m_groupCount = 0;\n  m_groupList: b2ParticleGroup | null = null;\n  m_def = new b2ParticleSystemDef();\n  m_world: b2World;\n  m_prev: b2ParticleSystem | null = null;\n  m_next: b2ParticleSystem | null = null;\n\n  static readonly xTruncBits = 12;\n  static readonly yTruncBits = 12;\n  static readonly tagBits = 8 * 4; // 8u * sizeof(uint32);\n  static readonly yOffset = 1 << (b2ParticleSystem.yTruncBits - 1);\n  static readonly yShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits;\n  static readonly xShift =\n    b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits - b2ParticleSystem.xTruncBits;\n  static readonly xScale = 1 << b2ParticleSystem.xShift;\n  static readonly xOffset = b2ParticleSystem.xScale * (1 << (b2ParticleSystem.xTruncBits - 1));\n  static readonly yMask = ((1 << b2ParticleSystem.yTruncBits) - 1) << b2ParticleSystem.yShift;\n  static readonly xMask = ~b2ParticleSystem.yMask;\n\n  static computeTag(x: number, y: number): number {\n    ///return ((uint32)(y + yOffset) << yShift) + (uint32)(xScale * x + xOffset);\n    return (\n      ((((y + b2ParticleSystem.yOffset) >>> 0) << b2ParticleSystem.yShift) +\n        ((b2ParticleSystem.xScale * x + b2ParticleSystem.xOffset) >>> 0)) >>>\n      0\n    );\n  }\n\n  static computeRelativeTag(tag: number, x: number, y: number): number {\n    ///return tag + (y << yShift) + (x << xShift);\n    return (tag + (y << b2ParticleSystem.yShift) + (x << b2ParticleSystem.xShift)) >>> 0;\n  }\n\n  constructor(def: b2ParticleSystemDef, world: b2World) {\n    this.m_inverseDensity = 0.0;\n    this.m_particleDiameter = 0.0;\n    this.m_inverseDiameter = 0.0;\n    this.m_squaredDiameter = 0.0;\n\n    this.SetStrictContactCheck(def.strictContactCheck);\n    this.SetDensity(def.density);\n    this.SetGravityScale(def.gravityScale);\n    this.SetRadius(def.radius);\n    this.SetMaxParticleCount(def.maxCount);\n    !!B2_DEBUG && b2Assert(def.lifetimeGranularity > 0.0);\n    this.m_def = def.Clone();\n    this.m_world = world;\n    this.SetDestructionByAge(this.m_def.destroyByAge);\n  }\n\n  Drop(): void {\n    while (this.m_groupList) {\n      this.DestroyParticleGroup(this.m_groupList);\n    }\n\n    this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);\n    this.FreeUserOverridableBuffer(this.m_flagsBuffer);\n    this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);\n    this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);\n    this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);\n    this.FreeUserOverridableBuffer(this.m_positionBuffer);\n    this.FreeUserOverridableBuffer(this.m_velocityBuffer);\n    this.FreeUserOverridableBuffer(this.m_colorBuffer);\n    this.FreeUserOverridableBuffer(this.m_userDataBuffer);\n    this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);\n    this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);\n    this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);\n    this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);\n  }\n\n  /**\n   * Create a particle whose properties have been defined.\n   *\n   * No reference to the definition is retained.\n   *\n   * A simulation step must occur before it's possible to interact\n   * with a newly created particle.  For example,\n   * DestroyParticleInShape() will not destroy a particle until\n   * b2World::Step() has been called.\n   *\n   * warning: This function is locked during callbacks.\n   */\n  CreateParticle(def: b2IParticleDef): number {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    if (this.m_count >= this.m_internalAllocatedCapacity) {\n      // Double the particle capacity.\n      const capacity = this.m_count ? 2 * this.m_count : b2_minParticleSystemBufferCapacity;\n      this.ReallocateInternalAllocatedBuffers(capacity);\n    }\n    if (this.m_count >= this.m_internalAllocatedCapacity) {\n      // If the oldest particle should be destroyed...\n      if (this.m_def.destroyByAge) {\n        this.DestroyOldestParticle(0, false);\n        // Need to destroy this particle *now* so that it's possible to\n        // create a new particle.\n        this.SolveZombie();\n      } else {\n        return b2_invalidParticleIndex;\n      }\n    }\n    const index = this.m_count++;\n    this.m_flagsBuffer.data[index] = 0;\n    if (this.m_lastBodyContactStepBuffer.data) {\n      this.m_lastBodyContactStepBuffer.data[index] = 0;\n    }\n    if (this.m_bodyContactCountBuffer.data) {\n      this.m_bodyContactCountBuffer.data[index] = 0;\n    }\n    if (this.m_consecutiveContactStepsBuffer.data) {\n      this.m_consecutiveContactStepsBuffer.data[index] = 0;\n    }\n    this.m_positionBuffer.data[index] = (this.m_positionBuffer.data[index] || new b2Vec2()).Copy(\n      b2Maybe(def.position, b2Vec2.ZERO),\n    );\n    this.m_velocityBuffer.data[index] = (this.m_velocityBuffer.data[index] || new b2Vec2()).Copy(\n      b2Maybe(def.velocity, b2Vec2.ZERO),\n    );\n    this.m_weightBuffer[index] = 0;\n    this.m_forceBuffer[index] = (this.m_forceBuffer[index] || new b2Vec2()).SetZero();\n    if (this.m_staticPressureBuffer) {\n      this.m_staticPressureBuffer[index] = 0;\n    }\n    if (this.m_depthBuffer) {\n      this.m_depthBuffer[index] = 0;\n    }\n    const color: b2Color = new b2Color().Copy(b2Maybe(def.color, b2Color.ZERO));\n    if (this.m_colorBuffer.data || !color.IsZero()) {\n      this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n      this.m_colorBuffer.data[index] = (this.m_colorBuffer.data[index] || new b2Color()).Copy(\n        color,\n      );\n    }\n    if (this.m_userDataBuffer.data || def.userData) {\n      this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\n      this.m_userDataBuffer.data[index] = def.userData;\n    }\n    if (this.m_handleIndexBuffer.data) {\n      this.m_handleIndexBuffer.data[index] = null;\n    }\n    ///Proxy& proxy = m_proxyBuffer.Append();\n    const proxy = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];\n\n    // If particle lifetimes are enabled or the lifetime is set in the particle\n    // definition, initialize the lifetime.\n    const lifetime = b2Maybe(def.lifetime, 0.0);\n    const finiteLifetime = lifetime > 0.0;\n    if (this.m_expirationTimeBuffer.data || finiteLifetime) {\n      this.SetParticleLifetime(\n        index,\n        finiteLifetime ? lifetime : this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()),\n      );\n      // Add a reference to the newly added particle to the end of the\n      // queue.\n      this.m_indexByExpirationTimeBuffer.data[index] = index;\n    }\n\n    proxy.index = index;\n    const group = b2Maybe(def.group, null);\n    this.m_groupBuffer[index] = group;\n    if (group) {\n      if (group.m_firstIndex < group.m_lastIndex) {\n        // Move particles in the group just before the new particle.\n        this.RotateBuffer(group.m_firstIndex, group.m_lastIndex, index);\n        !!B2_DEBUG && b2Assert(group.m_lastIndex === index);\n        // Update the index range of the group to contain the new particle.\n        group.m_lastIndex = index + 1;\n      } else {\n        // If the group is empty, reset the index range to contain only the\n        // new particle.\n        group.m_firstIndex = index;\n        group.m_lastIndex = index + 1;\n      }\n    }\n    this.SetParticleFlags(index, b2Maybe(def.flags, 0));\n    return index;\n  }\n\n  /**\n   * Retrieve a handle to the particle at the specified index.\n   *\n   * Please see #b2ParticleHandle for why you might want a handle.\n   */\n  GetParticleHandleFromIndex(index: number): b2ParticleHandle {\n    !!B2_DEBUG &&\n      b2Assert(index >= 0 && index < this.GetParticleCount() && index !== b2_invalidParticleIndex);\n    this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);\n    let handle = this.m_handleIndexBuffer.data[index];\n    if (handle) {\n      return handle;\n    }\n    // Create a handle.\n    ///handle = m_handleAllocator.Allocate();\n    handle = new b2ParticleHandle();\n    !!B2_DEBUG && b2Assert(handle !== null);\n    handle.index = index;\n    this.m_handleIndexBuffer.data[index] = handle;\n    return handle;\n  }\n\n  /**\n   * Destroy a particle.\n   *\n   * The particle is removed after the next simulation step (see\n   * b2World::Step()).\n   *\n   * @param index Index of the particle to destroy.\n   * @param callDestructionListener Whether to call the\n   *      destruction listener just before the particle is\n   *      destroyed.\n   */\n  DestroyParticle(index: number, callDestructionListener = false): void {\n    let flags = b2ParticleFlag.b2_zombieParticle;\n    if (callDestructionListener) {\n      flags |= b2ParticleFlag.b2_destructionListenerParticle;\n    }\n    this.SetParticleFlags(index, this.m_flagsBuffer.data[index] | flags);\n  }\n\n  /**\n   * Destroy the Nth oldest particle in the system.\n   *\n   * The particle is removed after the next b2World::Step().\n   *\n   * @param index Index of the Nth oldest particle to\n   *      destroy, 0 will destroy the oldest particle in the\n   *      system, 1 will destroy the next oldest particle etc.\n   * @param callDestructionListener Whether to call the\n   *      destruction listener just before the particle is\n   *      destroyed.\n   */\n  DestroyOldestParticle(index: number, callDestructionListener = false): void {\n    const particleCount = this.GetParticleCount();\n    !!B2_DEBUG && b2Assert(index >= 0 && index < particleCount);\n    // Make sure particle lifetime tracking is enabled.\n    !!B2_DEBUG && b2Assert(this.m_indexByExpirationTimeBuffer.data !== null);\n    // Destroy the oldest particle (preferring to destroy finite\n    // lifetime particles first) to free a slot in the buffer.\n    const oldestFiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[\n      particleCount - (index + 1)\n    ];\n    const oldestInfiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[index];\n    this.DestroyParticle(\n      this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle] > 0.0\n        ? oldestFiniteLifetimeParticle\n        : oldestInfiniteLifetimeParticle,\n      callDestructionListener,\n    );\n  }\n\n  /**\n   * Destroy particles inside a shape.\n   *\n   * warning: This function is locked during callbacks.\n   *\n   * In addition, this function immediately destroys particles in\n   * the shape in constrast to DestroyParticle() which defers the\n   * destruction until the next simulation step.\n   *\n   * @return Number of particles destroyed.\n   * @param shape Shape which encloses particles\n   *      that should be destroyed.\n   * @param xf Transform applied to the shape.\n   * @param callDestructionListener Whether to call the\n   *      world b2DestructionListener for each particle\n   *      destroyed.\n   */\n  DestroyParticlesInShape(\n    shape: b2Shape,\n    xf: b2Transform,\n    callDestructionListener = false,\n  ): number {\n    const s_aabb = b2ParticleSystem.DestroyParticlesInShape_s_aabb;\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    const callback = new b2ParticleSystem_DestroyParticlesInShapeCallback(\n      this,\n      shape,\n      xf,\n      callDestructionListener,\n    );\n\n    const aabb = s_aabb;\n    shape.ComputeAABB(aabb, xf, 0);\n    this.m_world.QueryAABB(callback, aabb);\n    return callback.Destroyed();\n  }\n\n  static readonly DestroyParticlesInShape_s_aabb = new b2AABB();\n\n  /**\n   * Create a particle group whose properties have been defined.\n   *\n   * No reference to the definition is retained.\n   *\n   * warning: This function is locked during callbacks.\n   */\n  CreateParticleGroup(groupDef: b2IParticleGroupDef): b2ParticleGroup {\n    const s_transform = b2ParticleSystem.CreateParticleGroup_s_transform;\n\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    const transform = s_transform;\n    transform.SetPositionAngle(b2Maybe(groupDef.position, b2Vec2.ZERO), b2Maybe(groupDef.angle, 0));\n    const firstIndex = this.m_count;\n    if (groupDef.shape) {\n      this.CreateParticlesWithShapeForGroup(groupDef.shape, groupDef, transform);\n    }\n    if (groupDef.shapes) {\n      this.CreateParticlesWithShapesForGroup(\n        groupDef.shapes,\n        b2Maybe(groupDef.shapeCount, groupDef.shapes.length),\n        groupDef,\n        transform,\n      );\n    }\n    if (groupDef.positionData) {\n      const count = b2Maybe(groupDef.particleCount, groupDef.positionData.length);\n      for (let i = 0; i < count; i++) {\n        const p = groupDef.positionData[i];\n        this.CreateParticleForGroup(groupDef, transform, p);\n      }\n    }\n    const lastIndex = this.m_count;\n\n    let group = new b2ParticleGroup(this);\n    group.m_firstIndex = firstIndex;\n    group.m_lastIndex = lastIndex;\n    group.m_strength = b2Maybe(groupDef.strength, 1);\n    group.m_userData = groupDef.userData;\n    group.m_transform.Copy(transform);\n    group.m_prev = null;\n    group.m_next = this.m_groupList;\n    if (this.m_groupList) {\n      this.m_groupList.m_prev = group;\n    }\n    this.m_groupList = group;\n    ++this.m_groupCount;\n    for (let i = firstIndex; i < lastIndex; i++) {\n      this.m_groupBuffer[i] = group;\n    }\n    this.SetGroupFlags(group, b2Maybe(groupDef.groupFlags, 0));\n\n    // Create pairs and triads between particles in the group.\n    const filter = new b2ParticleSystem_ConnectionFilter();\n    this.UpdateContacts(true);\n    this.UpdatePairsAndTriads(firstIndex, lastIndex, filter);\n\n    if (groupDef.group) {\n      this.JoinParticleGroups(groupDef.group, group);\n      group = groupDef.group;\n    }\n\n    return group;\n  }\n\n  static readonly CreateParticleGroup_s_transform = new b2Transform();\n\n  /**\n   * Join two particle groups.\n   *\n   * warning: This function is locked during callbacks.\n   *\n   * @param groupA the first group. Expands to encompass the second group.\n   * @param groupB the second group. It is destroyed.\n   */\n  JoinParticleGroups(groupA: b2ParticleGroup, groupB: b2ParticleGroup): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    !!B2_DEBUG && b2Assert(groupA !== groupB);\n    this.RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, this.m_count);\n    !!B2_DEBUG && b2Assert(groupB.m_lastIndex === this.m_count);\n    this.RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex);\n    !!B2_DEBUG && b2Assert(groupA.m_lastIndex === groupB.m_firstIndex);\n\n    // Create pairs and triads connecting groupA and groupB.\n    const filter = new b2ParticleSystem_JoinParticleGroupsFilter(groupB.m_firstIndex);\n    this.UpdateContacts(true);\n    this.UpdatePairsAndTriads(groupA.m_firstIndex, groupB.m_lastIndex, filter);\n\n    for (let i = groupB.m_firstIndex; i < groupB.m_lastIndex; i++) {\n      this.m_groupBuffer[i] = groupA;\n    }\n    const groupFlags = groupA.m_groupFlags | groupB.m_groupFlags;\n    this.SetGroupFlags(groupA, groupFlags);\n    groupA.m_lastIndex = groupB.m_lastIndex;\n    groupB.m_firstIndex = groupB.m_lastIndex;\n    this.DestroyParticleGroup(groupB);\n  }\n\n  /**\n   * Split particle group into multiple disconnected groups.\n   *\n   * warning: This function is locked during callbacks.\n   *\n   * @param group the group to be split.\n   */\n  SplitParticleGroup(group: b2ParticleGroup): void {\n    this.UpdateContacts(true);\n    const particleCount = group.GetParticleCount();\n    // We create several linked lists. Each list represents a set of connected particles.\n    const nodeBuffer: b2ParticleSystem_ParticleListNode[] = b2MakeArray(\n      particleCount,\n      (index: number) => new b2ParticleSystem_ParticleListNode(),\n    );\n    b2ParticleSystem.InitializeParticleLists(group, nodeBuffer);\n    this.MergeParticleListsInContact(group, nodeBuffer);\n    const survivingList = b2ParticleSystem.FindLongestParticleList(group, nodeBuffer);\n    this.MergeZombieParticleListNodes(group, nodeBuffer, survivingList);\n    this.CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList);\n    this.UpdatePairsAndTriadsWithParticleList(group, nodeBuffer);\n  }\n\n  /**\n   * Get the world particle group list. With the returned group,\n   * use b2ParticleGroup::GetNext to get the next group in the\n   * world list.\n   *\n   * A null group indicates the end of the list.\n   *\n   * @return the head of the world particle group list.\n   */\n  GetParticleGroupList(): b2ParticleGroup | null {\n    return this.m_groupList;\n  }\n\n  /**\n   * Get the number of particle groups.\n   */\n  GetParticleGroupCount(): number {\n    return this.m_groupCount;\n  }\n\n  /**\n   * Get the number of particles.\n   */\n  GetParticleCount(): number {\n    return this.m_count;\n  }\n\n  /**\n   * Get the maximum number of particles.\n   */\n  GetMaxParticleCount(): number {\n    return this.m_def.maxCount;\n  }\n\n  /**\n   * Set the maximum number of particles.\n   *\n   * A value of 0 means there is no maximum. The particle buffers\n   * can continue to grow while b2World's block allocator still\n   * has memory.\n   *\n   * Note: If you try to CreateParticle() with more than this\n   * count, b2_invalidParticleIndex is returned unless\n   * SetDestructionByAge() is used to enable the destruction of\n   * the oldest particles in the system.\n   */\n  SetMaxParticleCount(count: number): void {\n    !!B2_DEBUG && b2Assert(this.m_count <= count);\n    this.m_def.maxCount = count;\n  }\n\n  /**\n   * Get all existing particle flags.\n   */\n  GetAllParticleFlags(): b2ParticleFlag {\n    return this.m_allParticleFlags;\n  }\n\n  /**\n   * Get all existing particle group flags.\n   */\n  GetAllGroupFlags(): b2ParticleGroupFlag {\n    return this.m_allGroupFlags;\n  }\n\n  /**\n   * Pause or unpause the particle system. When paused,\n   * b2World::Step() skips over this particle system. All\n   * b2ParticleSystem function calls still work.\n   *\n   * @param paused paused is true to pause, false to un-pause.\n   */\n  SetPaused(paused: boolean): void {\n    this.m_paused = paused;\n  }\n\n  /**\n   * Initially, true, then, the last value passed into\n   * SetPaused().\n   *\n   * @return true if the particle system is being updated in b2World::Step().\n   */\n  GetPaused(): boolean {\n    return this.m_paused;\n  }\n\n  /**\n   * Change the particle density.\n   *\n   * Particle density affects the mass of the particles, which in\n   * turn affects how the particles interact with b2Bodies. Note\n   * that the density does not affect how the particles interact\n   * with each other.\n   */\n  SetDensity(density: number): void {\n    this.m_def.density = density;\n    this.m_inverseDensity = 1 / this.m_def.density;\n  }\n\n  /**\n   * Get the particle density.\n   */\n  GetDensity(): number {\n    return this.m_def.density;\n  }\n\n  /**\n   * Change the particle gravity scale. Adjusts the effect of the\n   * global gravity vector on particles.\n   */\n  SetGravityScale(gravityScale: number): void {\n    this.m_def.gravityScale = gravityScale;\n  }\n\n  /**\n   * Get the particle gravity scale.\n   */\n  GetGravityScale(): number {\n    return this.m_def.gravityScale;\n  }\n\n  /**\n   * Damping is used to reduce the velocity of particles. The\n   * damping parameter can be larger than 1.0f but the damping\n   * effect becomes sensitive to the time step when the damping\n   * parameter is large.\n   */\n  SetDamping(damping: number): void {\n    this.m_def.dampingStrength = damping;\n  }\n\n  /**\n   * Get damping for particles\n   */\n  GetDamping(): number {\n    return this.m_def.dampingStrength;\n  }\n\n  /**\n   * Change the number of iterations when calculating the static\n   * pressure of particles. By default, 8 iterations. You can\n   * reduce the number of iterations down to 1 in some situations,\n   * but this may cause instabilities when many particles come\n   * together. If you see particles popping away from each other\n   * like popcorn, you may have to increase the number of\n   * iterations.\n   *\n   * For a description of static pressure, see\n   * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\n   */\n  SetStaticPressureIterations(iterations: number): void {\n    this.m_def.staticPressureIterations = iterations;\n  }\n\n  /**\n   * Get the number of iterations for static pressure of\n   * particles.\n   */\n  GetStaticPressureIterations(): number {\n    return this.m_def.staticPressureIterations;\n  }\n\n  /**\n   * Change the particle radius.\n   *\n   * You should set this only once, on world start.\n   * If you change the radius during execution, existing particles\n   * may explode, shrink, or behave unexpectedly.\n   */\n  SetRadius(radius: number): void {\n    this.m_particleDiameter = 2 * radius;\n    this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;\n    this.m_inverseDiameter = 1 / this.m_particleDiameter;\n  }\n\n  /**\n   * Get the particle radius.\n   */\n  GetRadius(): number {\n    return this.m_particleDiameter / 2;\n  }\n\n  /**\n   * Get the position of each particle\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle positions array.\n   */\n  GetPositionBuffer(): b2Vec2[] {\n    return this.m_positionBuffer.data;\n  }\n\n  /**\n   * Get the velocity of each particle\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle velocities array.\n   */\n  GetVelocityBuffer(): b2Vec2[] {\n    return this.m_velocityBuffer.data;\n  }\n\n  /**\n   * Get the color of each particle\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle colors array.\n   */\n  GetColorBuffer(): b2Color[] {\n    this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n    return this.m_colorBuffer.data;\n  }\n\n  /**\n   * Get the particle-group of each particle.\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle group array.\n   */\n  GetGroupBuffer(): Array<b2ParticleGroup | null> {\n    return this.m_groupBuffer;\n  }\n\n  /**\n   * Get the weight of each particle\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle positions array.\n   */\n  GetWeightBuffer(): number[] {\n    return this.m_weightBuffer;\n  }\n\n  /**\n   * Get the user-specified data of each particle.\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle user-data array.\n   */\n  GetUserDataBuffer<T>(): T[] {\n    this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\n    return this.m_userDataBuffer.data;\n  }\n\n  /**\n   * Get the flags for each particle. See the b2ParticleFlag enum.\n   *\n   * Array is length GetParticleCount()\n   *\n   * @return the pointer to the head of the particle-flags array.\n   */\n  GetFlagsBuffer(): b2ParticleFlag[] {\n    return this.m_flagsBuffer.data;\n  }\n\n  /**\n   * Set flags for a particle. See the b2ParticleFlag enum.\n   */\n  SetParticleFlags(index: number, newFlags: b2ParticleFlag): void {\n    const oldFlags = this.m_flagsBuffer.data[index];\n    if (oldFlags & ~newFlags) {\n      // If any flags might be removed\n      this.m_needsUpdateAllParticleFlags = true;\n    }\n    if (~this.m_allParticleFlags & newFlags) {\n      // If any flags were added\n      if (newFlags & b2ParticleFlag.b2_tensileParticle) {\n        this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer);\n      }\n      if (newFlags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\n      }\n      this.m_allParticleFlags |= newFlags;\n    }\n    this.m_flagsBuffer.data[index] = newFlags;\n  }\n\n  /**\n   * Get flags for a particle. See the b2ParticleFlag enum.\n   */\n  GetParticleFlags(index: number): b2ParticleFlag {\n    return this.m_flagsBuffer.data[index];\n  }\n\n  /**\n   * Set an external buffer for particle data.\n   *\n   * Normally, the b2World's block allocator is used for particle\n   * data. However, sometimes you may have an OpenGL or Java\n   * buffer for particle data. To avoid data duplication, you may\n   * supply this external buffer.\n   *\n   * Note that, when b2World's block allocator is used, the\n   * particle data buffers can grow as required. However, when\n   * external buffers are used, the maximum number of particles is\n   * clamped to the size of the smallest external buffer.\n   *\n   * @param buffer a pointer to a block of memory.\n   * @param capacity the number of values in the block.\n   */\n  SetFlagsBuffer(buffer: b2ParticleFlag[]): void {\n    this.SetUserOverridableBuffer(this.m_flagsBuffer, buffer);\n  }\n\n  SetPositionBuffer(buffer: b2Vec2[] | Float32Array): void {\n    if (buffer instanceof Float32Array) {\n      if ((buffer.length & 1) !== 0) {\n        throw new Error();\n      }\n      const count: number = buffer.length / 2;\n      const array: b2Vec2[] = [];\n      let ptr = 0;\n      for (let i = 0; i < count; ++i) {\n        array.push(new b2Vec2(buffer[ptr++], buffer[ptr++]));\n      }\n      buffer = array;\n    }\n    this.SetUserOverridableBuffer(this.m_positionBuffer, buffer);\n  }\n\n  SetVelocityBuffer(buffer: b2Vec2[] | Float32Array): void {\n    if (buffer instanceof Float32Array) {\n      if ((buffer.length & 1) !== 0) {\n        throw new Error();\n      }\n      const count: number = buffer.length / 2;\n      const array: b2Vec2[] = [];\n      let ptr = 0;\n      for (let i = 0; i < count; ++i) {\n        array.push(new b2Vec2(buffer[ptr++], buffer[ptr++]));\n      }\n      buffer = array;\n    }\n    this.SetUserOverridableBuffer(this.m_velocityBuffer, buffer);\n  }\n\n  SetColorBuffer(buffer: b2Color[] | Float32Array): void {\n    if (buffer instanceof Float32Array) {\n      if ((buffer.length & 3) !== 0) {\n        throw new Error();\n      }\n      const count: number = buffer.length / 4;\n      const array: b2Color[] = [];\n      let ptr = 0;\n      for (let i = 0; i < count; ++i) {\n        array.push(new b2Color(buffer[ptr++], buffer[ptr++], buffer[ptr++], buffer[ptr++]));\n      }\n      buffer = array;\n    }\n    this.SetUserOverridableBuffer(this.m_colorBuffer, buffer);\n  }\n\n  SetUserDataBuffer<T>(buffer: T[]): void {\n    this.SetUserOverridableBuffer(this.m_userDataBuffer, buffer);\n  }\n\n  /**\n   * Get contacts between particles\n   * Contact data can be used for many reasons, for example to\n   * trigger rendering or audio effects.\n   */\n  GetContacts(): b2ParticleContact[] {\n    return this.m_contactBuffer.data;\n  }\n\n  GetContactCount(): number {\n    return this.m_contactBuffer.count;\n  }\n\n  /**\n   * Get contacts between particles and bodies\n   *\n   * Contact data can be used for many reasons, for example to\n   * trigger rendering or audio effects.\n   */\n  GetBodyContacts(): b2ParticleBodyContact[] {\n    return this.m_bodyContactBuffer.data;\n  }\n\n  GetBodyContactCount(): number {\n    return this.m_bodyContactBuffer.count;\n  }\n\n  /**\n   * Get array of particle pairs. The particles in a pair:\n   *   (1) are contacting,\n   *   (2) are in the same particle group,\n   *   (3) are part of a rigid particle group, or are spring, elastic,\n   *       or wall particles.\n   *   (4) have at least one particle that is a spring or barrier\n   *       particle (i.e. one of the types in k_pairFlags),\n   *   (5) have at least one particle that returns true for\n   *       ConnectionFilter::IsNecessary,\n   *   (6) are not zombie particles.\n   *\n   * Essentially, this is an array of spring or barrier particles\n   * that are interacting. The array is sorted by b2ParticlePair's\n   * indexA, and then indexB. There are no duplicate entries.\n   */\n  GetPairs(): b2ParticlePair[] {\n    return this.m_pairBuffer.data;\n  }\n\n  GetPairCount(): number {\n    return this.m_pairBuffer.count;\n  }\n\n  /**\n   * Get array of particle triads. The particles in a triad:\n   *   (1) are in the same particle group,\n   *   (2) are in a Voronoi triangle together,\n   *   (3) are within b2_maxTriadDistance particle diameters of each\n   *       other,\n   *   (4) return true for ConnectionFilter::ShouldCreateTriad\n   *   (5) have at least one particle of type elastic (i.e. one of the\n   *       types in k_triadFlags),\n   *   (6) are part of a rigid particle group, or are spring, elastic,\n   *       or wall particles.\n   *   (7) are not zombie particles.\n   *\n   * Essentially, this is an array of elastic particles that are\n   * interacting. The array is sorted by b2ParticleTriad's indexA,\n   * then indexB, then indexC. There are no duplicate entries.\n   */\n  GetTriads(): b2ParticleTriad[] {\n    return this.m_triadBuffer.data;\n  }\n\n  GetTriadCount(): number {\n    return this.m_triadBuffer.count;\n  }\n\n  /**\n   * Set an optional threshold for the maximum number of\n   * consecutive particle iterations that a particle may contact\n   * multiple bodies before it is considered a candidate for being\n   * \"stuck\". Setting to zero or less disables.\n   */\n  SetStuckThreshold(steps: number): void {\n    this.m_stuckThreshold = steps;\n\n    if (steps > 0) {\n      this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(\n        this.m_lastBodyContactStepBuffer.data,\n      );\n      this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data);\n      this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(\n        this.m_consecutiveContactStepsBuffer.data,\n      );\n    }\n  }\n\n  /**\n   * Get potentially stuck particles from the last step; the user\n   * must decide if they are stuck or not, and if so, delete or\n   * move them\n   */\n  GetStuckCandidates(): number[] {\n    ///return m_stuckParticleBuffer.Data();\n    return this.m_stuckParticleBuffer.Data();\n  }\n\n  /**\n   * Get the number of stuck particle candidates from the last\n   * step.\n   */\n  GetStuckCandidateCount(): number {\n    ///return m_stuckParticleBuffer.GetCount();\n    return this.m_stuckParticleBuffer.GetCount();\n  }\n\n  /**\n   * Compute the kinetic energy that can be lost by damping force\n   */\n  ComputeCollisionEnergy(): number {\n    const s_v = b2ParticleSystem.ComputeCollisionEnergy_s_v;\n    const vel_data = this.m_velocityBuffer.data;\n    let sum_v2 = 0;\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const n = contact.normal;\n      ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\n      const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n      const vn = b2Vec2.DotVV(v, n);\n      if (vn < 0) {\n        sum_v2 += vn * vn;\n      }\n    }\n    return 0.5 * this.GetParticleMass() * sum_v2;\n  }\n\n  static readonly ComputeCollisionEnergy_s_v = new b2Vec2();\n\n  /**\n   * Set strict Particle/Body contact check.\n   *\n   * This is an option that will help ensure correct behavior if\n   * there are corners in the world model where Particle/Body\n   * contact is ambiguous. This option scales at n*log(n) of the\n   * number of Particle/Body contacts, so it is best to only\n   * enable if it is necessary for your geometry. Enable if you\n   * see strange particle behavior around b2Body intersections.\n   */\n  SetStrictContactCheck(enabled: boolean): void {\n    this.m_def.strictContactCheck = enabled;\n  }\n\n  /**\n   * Get the status of the strict contact check.\n   */\n  GetStrictContactCheck(): boolean {\n    return this.m_def.strictContactCheck;\n  }\n\n  /**\n   * Set the lifetime (in seconds) of a particle relative to the\n   * current time.  A lifetime of less than or equal to 0.0f\n   * results in the particle living forever until it's manually\n   * destroyed by the application.\n   */\n  SetParticleLifetime(index: number, lifetime: number): void {\n    !!B2_DEBUG && b2Assert(this.ValidateParticleIndex(index));\n    const initializeExpirationTimes = this.m_indexByExpirationTimeBuffer.data === null;\n    this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\n    this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(\n      this.m_indexByExpirationTimeBuffer.data,\n    );\n\n    // Initialize the inverse mapping buffer.\n    if (initializeExpirationTimes) {\n      const particleCount = this.GetParticleCount();\n      for (let i = 0; i < particleCount; ++i) {\n        this.m_indexByExpirationTimeBuffer.data[i] = i;\n      }\n    }\n    ///const int32 quantizedLifetime = (int32)(lifetime / m_def.lifetimeGranularity);\n    const quantizedLifetime = lifetime / this.m_def.lifetimeGranularity;\n    // Use a negative lifetime so that it's possible to track which\n    // of the infinite lifetime particles are older.\n    const newExpirationTime =\n      quantizedLifetime > 0.0\n        ? this.GetQuantizedTimeElapsed() + quantizedLifetime\n        : quantizedLifetime;\n    if (newExpirationTime !== this.m_expirationTimeBuffer.data[index]) {\n      this.m_expirationTimeBuffer.data[index] = newExpirationTime;\n      this.m_expirationTimeBufferRequiresSorting = true;\n    }\n  }\n\n  /**\n   * Get the lifetime (in seconds) of a particle relative to the\n   * current time.  A value > 0.0f is returned if the particle is\n   * scheduled to be destroyed in the future, values <= 0.0f\n   * indicate the particle has an infinite lifetime.\n   */\n  GetParticleLifetime(index: number): number {\n    !!B2_DEBUG && b2Assert(this.ValidateParticleIndex(index));\n    return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);\n  }\n\n  /**\n   * Enable / disable destruction of particles in CreateParticle()\n   * when no more particles can be created due to a prior call to\n   * SetMaxParticleCount().  When this is enabled, the oldest\n   * particle is destroyed in CreateParticle() favoring the\n   * destruction of particles with a finite lifetime over\n   * particles with infinite lifetimes. This feature is enabled by\n   * default when particle lifetimes are tracked.  Explicitly\n   * enabling this feature using this function enables particle\n   * lifetime tracking.\n   */\n  SetDestructionByAge(enable: boolean): void {\n    if (enable) {\n      this.GetExpirationTimeBuffer();\n    }\n    this.m_def.destroyByAge = enable;\n  }\n\n  /**\n   * Get whether the oldest particle will be destroyed in\n   * CreateParticle() when the maximum number of particles are\n   * present in the system.\n   */\n  GetDestructionByAge(): boolean {\n    return this.m_def.destroyByAge;\n  }\n\n  /**\n   * Get the array of particle expiration times indexed by\n   * particle index.\n   *\n   * GetParticleCount() items are in the returned array.\n   */\n  GetExpirationTimeBuffer(): number[] {\n    this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\n    return this.m_expirationTimeBuffer.data;\n  }\n\n  /**\n   * Convert a expiration time value in returned by\n   * GetExpirationTimeBuffer() to a time in seconds relative to\n   * the current simulation time.\n   */\n  ExpirationTimeToLifetime(expirationTime: number): number {\n    return (\n      (expirationTime > 0 ? expirationTime - this.GetQuantizedTimeElapsed() : expirationTime) *\n      this.m_def.lifetimeGranularity\n    );\n  }\n\n  /**\n   * Get the array of particle indices ordered by reverse\n   * lifetime. The oldest particle indexes are at the end of the\n   * array with the newest at the start.  Particles with infinite\n   * lifetimes (i.e expiration times less than or equal to 0) are\n   * placed at the start of the array.\n   * ExpirationTimeToLifetime(GetExpirationTimeBuffer()[index]) is\n   * equivalent to GetParticleLifetime(index).\n   *\n   * GetParticleCount() items are in the returned array.\n   */\n  GetIndexByExpirationTimeBuffer(): number[] {\n    // If particles are present, initialize / reinitialize the lifetime buffer.\n    if (this.GetParticleCount()) {\n      this.SetParticleLifetime(0, this.GetParticleLifetime(0));\n    } else {\n      this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(\n        this.m_indexByExpirationTimeBuffer.data,\n      );\n    }\n    return this.m_indexByExpirationTimeBuffer.data;\n  }\n\n  /**\n   * Apply an impulse to one particle. This immediately modifies\n   * the velocity. Similar to b2Body::ApplyLinearImpulse.\n   *\n   * @param index the particle that will be modified.\n   * @param impulse impulse the world impulse vector, usually in N-seconds or kg-m/s.\n   */\n  ParticleApplyLinearImpulse(index: number, impulse: XY): void {\n    this.ApplyLinearImpulse(index, index + 1, impulse);\n  }\n\n  /**\n   * Apply an impulse to all particles between 'firstIndex' and\n   * 'lastIndex'. This immediately modifies the velocity. Note\n   * that the impulse is applied to the total mass of all\n   * particles. So, calling ParticleApplyLinearImpulse(0, impulse)\n   * and ParticleApplyLinearImpulse(1, impulse) will impart twice\n   * as much velocity as calling just ApplyLinearImpulse(0, 1,\n   * impulse).\n   *\n   * @param firstIndex the first particle to be modified.\n   * @param lastIndex the last particle to be modified.\n   * @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\n   */\n  ApplyLinearImpulse(firstIndex: number, lastIndex: number, impulse: XY): void {\n    const vel_data = this.m_velocityBuffer.data;\n    const numParticles = lastIndex - firstIndex;\n    const totalMass = numParticles * this.GetParticleMass();\n    ///const b2Vec2 velocityDelta = impulse / totalMass;\n    const velocityDelta = new b2Vec2().Copy(impulse).SelfMul(1 / totalMass);\n    for (let i = firstIndex; i < lastIndex; i++) {\n      ///m_velocityBuffer.data[i] += velocityDelta;\n      vel_data[i].SelfAdd(velocityDelta);\n    }\n  }\n\n  static IsSignificantForce(force: XY): boolean {\n    return force.x !== 0 || force.y !== 0;\n  }\n\n  /**\n   * Apply a force to the center of a particle.\n   *\n   * @param index the particle that will be modified.\n   * @param force the world force vector, usually in Newtons (N).\n   */\n  ParticleApplyForce(index: number, force: XY): void {\n    if (\n      b2ParticleSystem.IsSignificantForce(force) &&\n      this.ForceCanBeApplied(this.m_flagsBuffer.data[index])\n    ) {\n      this.PrepareForceBuffer();\n      ///m_forceBuffer[index] += force;\n      this.m_forceBuffer[index].SelfAdd(force);\n    }\n  }\n\n  /**\n   * Distribute a force across several particles. The particles\n   * must not be wall particles. Note that the force is\n   * distributed across all the particles, so calling this\n   * function for indices 0..N is not the same as calling\n   * ParticleApplyForce(i, force) for i in 0..N.\n   *\n   * @param firstIndex the first particle to be modified.\n   * @param lastIndex the last particle to be modified.\n   * @param force the world force vector, usually in Newtons (N).\n   */\n  ApplyForce(firstIndex: number, lastIndex: number, force: XY): void {\n    // Ensure we're not trying to apply force to particles that can't move,\n    // such as wall particles.\n    if (B2_DEBUG) {\n      let flags = 0;\n      for (let i = firstIndex; i < lastIndex; i++) {\n        flags |= this.m_flagsBuffer.data[i];\n      }\n      b2Assert(this.ForceCanBeApplied(flags));\n    }\n\n    // Early out if force does nothing (optimization).\n    ///const b2Vec2 distributedForce = force / (float32)(lastIndex - firstIndex);\n    const distributedForce = new b2Vec2().Copy(force).SelfMul(1 / (lastIndex - firstIndex));\n    if (b2ParticleSystem.IsSignificantForce(distributedForce)) {\n      this.PrepareForceBuffer();\n\n      // Distribute the force over all the particles.\n      for (let i = firstIndex; i < lastIndex; i++) {\n        ///m_forceBuffer[i] += distributedForce;\n        this.m_forceBuffer[i].SelfAdd(distributedForce);\n      }\n    }\n  }\n\n  /**\n   * Get the next particle-system in the world's particle-system\n   * list.\n   */\n  GetNext(): b2ParticleSystem | null {\n    return this.m_next;\n  }\n\n  /**\n   * Query the particle system for all particles that potentially\n   * overlap the provided AABB.\n   * b2QueryCallback::ShouldQueryParticleSystem is ignored.\n   *\n   * @param callback a user implemented callback class.\n   * @param aabb the query box.\n   */\n  QueryAABB(callback: b2QueryCallback, aabb: b2AABB): void {\n    if (this.m_proxyBuffer.count === 0) {\n      return;\n    }\n    const beginProxy = 0;\n    const endProxy = this.m_proxyBuffer.count;\n    const firstProxy = std_lower_bound(\n      this.m_proxyBuffer.data,\n      beginProxy,\n      endProxy,\n      b2ParticleSystem.computeTag(\n        this.m_inverseDiameter * aabb.lowerBound.x,\n        this.m_inverseDiameter * aabb.lowerBound.y,\n      ),\n      b2ParticleSystem_Proxy.CompareProxyTag,\n    );\n    const lastProxy = std_upper_bound(\n      this.m_proxyBuffer.data,\n      firstProxy,\n      endProxy,\n      b2ParticleSystem.computeTag(\n        this.m_inverseDiameter * aabb.upperBound.x,\n        this.m_inverseDiameter * aabb.upperBound.y,\n      ),\n      b2ParticleSystem_Proxy.CompareTagProxy,\n    );\n    const pos_data = this.m_positionBuffer.data;\n    for (let k = firstProxy; k < lastProxy; ++k) {\n      const proxy = this.m_proxyBuffer.data[k];\n      const i = proxy.index;\n      const p = pos_data[i];\n      if (\n        aabb.lowerBound.x < p.x &&\n        p.x < aabb.upperBound.x &&\n        aabb.lowerBound.y < p.y &&\n        p.y < aabb.upperBound.y\n      ) {\n        if (!callback.ReportParticle(this, i)) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Query the particle system for all particles that potentially\n   * overlap the provided shape's AABB. Calls QueryAABB\n   * internally. b2QueryCallback::ShouldQueryParticleSystem is\n   * ignored.\n   *\n   * @param callback a user implemented callback class.\n   * @param shape the query shape\n   * @param xf the transform of the AABB\n   * @param childIndex\n   */\n  QueryShapeAABB(callback: b2QueryCallback, shape: b2Shape, xf: b2Transform, childIndex = 0): void {\n    const s_aabb = b2ParticleSystem.QueryShapeAABB_s_aabb;\n    const aabb = s_aabb;\n    shape.ComputeAABB(aabb, xf, childIndex);\n    this.QueryAABB(callback, aabb);\n  }\n\n  static readonly QueryShapeAABB_s_aabb = new b2AABB();\n\n  QueryPointAABB(callback: b2QueryCallback, point: XY, slop: number = b2_linearSlop): void {\n    const s_aabb = b2ParticleSystem.QueryPointAABB_s_aabb;\n    const aabb = s_aabb;\n    aabb.lowerBound.Set(point.x - slop, point.y - slop);\n    aabb.upperBound.Set(point.x + slop, point.y + slop);\n    this.QueryAABB(callback, aabb);\n  }\n\n  static readonly QueryPointAABB_s_aabb = new b2AABB();\n\n  /**\n   * Ray-cast the particle system for all particles in the path of\n   * the ray. Your callback controls whether you get the closest\n   * point, any point, or n-points. The ray-cast ignores particles\n   * that contain the starting point.\n   * b2RayCastCallback::ShouldQueryParticleSystem is ignored.\n   *\n   * @param callback a user implemented callback class.\n   * @param point1 the ray starting point\n   * @param point2 the ray ending point\n   */\n  RayCast(callback: b2RayCastCallback, point1: XY, point2: XY): void {\n    const s_aabb = b2ParticleSystem.RayCast_s_aabb;\n    const s_p = b2ParticleSystem.RayCast_s_p;\n    const s_v = b2ParticleSystem.RayCast_s_v;\n    const s_n = b2ParticleSystem.RayCast_s_n;\n    const s_point = b2ParticleSystem.RayCast_s_point;\n    if (this.m_proxyBuffer.count === 0) {\n      return;\n    }\n    const pos_data = this.m_positionBuffer.data;\n    const aabb = s_aabb;\n    b2Vec2.MinV(point1, point2, aabb.lowerBound);\n    b2Vec2.MaxV(point1, point2, aabb.upperBound);\n    let fraction = 1;\n    // solving the following equation:\n    // ((1-t)*point1+t*point2-position)^2=diameter^2\n    // where t is a potential fraction\n    ///b2Vec2 v = point2 - point1;\n    const v = b2Vec2.SubVV(point2, point1, s_v);\n    const v2 = b2Vec2.DotVV(v, v);\n    const enumerator = this.GetInsideBoundsEnumerator(aabb);\n\n    let i: number;\n    while ((i = enumerator.GetNext()) >= 0) {\n      ///b2Vec2 p = point1 - m_positionBuffer.data[i];\n      const p = b2Vec2.SubVV(point1, pos_data[i], s_p);\n      const pv = b2Vec2.DotVV(p, v);\n      const p2 = b2Vec2.DotVV(p, p);\n      const determinant = pv * pv - v2 * (p2 - this.m_squaredDiameter);\n      if (determinant >= 0) {\n        const sqrtDeterminant = b2Sqrt(determinant);\n        // find a solution between 0 and fraction\n        let t = (-pv - sqrtDeterminant) / v2;\n        if (t > fraction) {\n          continue;\n        }\n        if (t < 0) {\n          t = (-pv + sqrtDeterminant) / v2;\n          if (t < 0 || t > fraction) {\n            continue;\n          }\n        }\n        ///b2Vec2 n = p + t * v;\n        const n = b2Vec2.AddVMulSV(p, t, v, s_n);\n        n.Normalize();\n        ///float32 f = callback.ReportParticle(this, i, point1 + t * v, n, t);\n        const f = callback.ReportParticle(this, i, b2Vec2.AddVMulSV(point1, t, v, s_point), n, t);\n        fraction = b2Min(fraction, f);\n        if (fraction <= 0) {\n          break;\n        }\n      }\n    }\n  }\n\n  static readonly RayCast_s_aabb = new b2AABB();\n  static readonly RayCast_s_p = new b2Vec2();\n  static readonly RayCast_s_v = new b2Vec2();\n  static readonly RayCast_s_n = new b2Vec2();\n  static readonly RayCast_s_point = new b2Vec2();\n\n  /**\n   * Compute the axis-aligned bounding box for all particles\n   * contained within this particle system.\n   * @param aabb Returns the axis-aligned bounding box of the system.\n   */\n  ComputeAABB(aabb: b2AABB): void {\n    const particleCount = this.GetParticleCount();\n    !!B2_DEBUG && b2Assert(aabb !== null);\n    aabb.lowerBound.x = +b2_maxFloat;\n    aabb.lowerBound.y = +b2_maxFloat;\n    aabb.upperBound.x = -b2_maxFloat;\n    aabb.upperBound.y = -b2_maxFloat;\n\n    const pos_data = this.m_positionBuffer.data;\n    for (let i = 0; i < particleCount; i++) {\n      const p = pos_data[i];\n      b2Vec2.MinV(aabb.lowerBound, p, aabb.lowerBound);\n      b2Vec2.MaxV(aabb.upperBound, p, aabb.upperBound);\n    }\n    aabb.lowerBound.x -= this.m_particleDiameter;\n    aabb.lowerBound.y -= this.m_particleDiameter;\n    aabb.upperBound.x += this.m_particleDiameter;\n    aabb.upperBound.y += this.m_particleDiameter;\n  }\n\n  /**\n   * All particle types that require creating pairs\n   */\n  static readonly k_pairFlags: number = b2ParticleFlag.b2_springParticle;\n\n  /**\n   * All particle types that require creating triads\n   */\n  static readonly k_triadFlags = b2ParticleFlag.b2_elasticParticle;\n\n  /**\n   * All particle types that do not produce dynamic pressure\n   */\n  static readonly k_noPressureFlags =\n    b2ParticleFlag.b2_powderParticle | b2ParticleFlag.b2_tensileParticle;\n\n  /**\n   * All particle types that apply extra damping force with bodies\n   */\n  static readonly k_extraDampingFlags = b2ParticleFlag.b2_staticPressureParticle;\n\n  static readonly k_barrierWallFlags =\n    b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_wallParticle;\n\n  FreeBuffer<T>(b: T[] | null, capacity: number): void {\n    if (b === null) {\n      return;\n    }\n    b.length = 0;\n  }\n\n  FreeUserOverridableBuffer<T>(b: b2ParticleSystem_UserOverridableBuffer<T>): void {\n    if (b.userSuppliedCapacity === 0) {\n      this.FreeBuffer(b.data, this.m_internalAllocatedCapacity);\n    }\n  }\n\n  /**\n   * Reallocate a buffer\n   */\n  ReallocateBuffer3<T>(oldBuffer: T[] | null, oldCapacity: number, newCapacity: number): T[] {\n    // b2Assert(newCapacity > oldCapacity);\n    if (newCapacity <= oldCapacity) {\n      throw new Error();\n    }\n    const newBuffer = oldBuffer ? oldBuffer.slice() : [];\n    newBuffer.length = newCapacity;\n    return newBuffer;\n  }\n\n  /**\n   * Reallocate a buffer\n   */\n  ReallocateBuffer5<T>(\n    buffer: T[] | null,\n    userSuppliedCapacity: number,\n    oldCapacity: number,\n    newCapacity: number,\n    deferred: boolean,\n  ): T[] {\n    // b2Assert(newCapacity > oldCapacity);\n    if (newCapacity <= oldCapacity) {\n      throw new Error();\n    }\n    // A 'deferred' buffer is reallocated only if it is not NULL.\n    // If 'userSuppliedCapacity' is not zero, buffer is user supplied and must\n    // be kept.\n    // b2Assert(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity);\n    if (!(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity)) {\n      throw new Error();\n    }\n    if ((!deferred || buffer) && !userSuppliedCapacity) {\n      buffer = this.ReallocateBuffer3(buffer, oldCapacity, newCapacity);\n    }\n    return buffer as any; // TODO: fix this\n  }\n\n  /**\n   * Reallocate a buffer\n   */\n  ReallocateBuffer4<T>(\n    buffer: b2ParticleSystem_UserOverridableBuffer<any>,\n    oldCapacity: number,\n    newCapacity: number,\n    deferred: boolean,\n  ): T[] {\n    !!B2_DEBUG && b2Assert(newCapacity > oldCapacity);\n    return this.ReallocateBuffer5(\n      buffer.data,\n      buffer.userSuppliedCapacity,\n      oldCapacity,\n      newCapacity,\n      deferred,\n    );\n  }\n\n  RequestBuffer<T>(buffer: T[] | null): T[] {\n    if (!buffer) {\n      if (this.m_internalAllocatedCapacity === 0) {\n        this.ReallocateInternalAllocatedBuffers(b2_minParticleSystemBufferCapacity);\n      }\n\n      buffer = [];\n      buffer.length = this.m_internalAllocatedCapacity;\n    }\n    return buffer;\n  }\n\n  /**\n   * Reallocate the handle / index map and schedule the allocation\n   * of a new pool for handle allocation.\n   */\n  ReallocateHandleBuffers(newCapacity: number): void {\n    !!B2_DEBUG && b2Assert(newCapacity > this.m_internalAllocatedCapacity);\n    // Reallocate a new handle / index map buffer, copying old handle pointers\n    // is fine since they're kept around.\n    this.m_handleIndexBuffer.data = this.ReallocateBuffer4(\n      this.m_handleIndexBuffer,\n      this.m_internalAllocatedCapacity,\n      newCapacity,\n      true,\n    );\n    // Set the size of the next handle allocation.\n    ///this.m_handleAllocator.SetItemsPerSlab(newCapacity - this.m_internalAllocatedCapacity);\n  }\n\n  ReallocateInternalAllocatedBuffers(capacity: number): void {\n    function LimitCapacity(capacity: number, maxCount: number): number {\n      return maxCount && capacity > maxCount ? maxCount : capacity;\n    }\n\n    // Don't increase capacity beyond the smallest user-supplied buffer size.\n    capacity = LimitCapacity(capacity, this.m_def.maxCount);\n    capacity = LimitCapacity(capacity, this.m_flagsBuffer.userSuppliedCapacity);\n    capacity = LimitCapacity(capacity, this.m_positionBuffer.userSuppliedCapacity);\n    capacity = LimitCapacity(capacity, this.m_velocityBuffer.userSuppliedCapacity);\n    capacity = LimitCapacity(capacity, this.m_colorBuffer.userSuppliedCapacity);\n    capacity = LimitCapacity(capacity, this.m_userDataBuffer.userSuppliedCapacity);\n    if (this.m_internalAllocatedCapacity < capacity) {\n      this.ReallocateHandleBuffers(capacity);\n      this.m_flagsBuffer.data = this.ReallocateBuffer4(\n        this.m_flagsBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n\n      // Conditionally defer these as they are optional if the feature is\n      // not enabled.\n      const stuck = this.m_stuckThreshold > 0;\n      this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(\n        this.m_lastBodyContactStepBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        stuck,\n      );\n      this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(\n        this.m_bodyContactCountBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        stuck,\n      );\n      this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(\n        this.m_consecutiveContactStepsBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        stuck,\n      );\n      this.m_positionBuffer.data = this.ReallocateBuffer4(\n        this.m_positionBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_velocityBuffer.data = this.ReallocateBuffer4(\n        this.m_velocityBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_forceBuffer = this.ReallocateBuffer5(\n        this.m_forceBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_weightBuffer = this.ReallocateBuffer5(\n        this.m_weightBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_staticPressureBuffer = this.ReallocateBuffer5(\n        this.m_staticPressureBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_accumulationBuffer = this.ReallocateBuffer5(\n        this.m_accumulationBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_accumulation2Buffer = this.ReallocateBuffer5(\n        this.m_accumulation2Buffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_depthBuffer = this.ReallocateBuffer5(\n        this.m_depthBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_colorBuffer.data = this.ReallocateBuffer4(\n        this.m_colorBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_groupBuffer = this.ReallocateBuffer5(\n        this.m_groupBuffer,\n        0,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_userDataBuffer.data = this.ReallocateBuffer4(\n        this.m_userDataBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(\n        this.m_expirationTimeBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        true,\n      );\n      this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(\n        this.m_indexByExpirationTimeBuffer,\n        this.m_internalAllocatedCapacity,\n        capacity,\n        false,\n      );\n      this.m_internalAllocatedCapacity = capacity;\n    }\n  }\n\n  CreateParticleForGroup(groupDef: b2IParticleGroupDef, xf: b2Transform, p: XY): void {\n    const particleDef = new b2ParticleDef();\n    particleDef.flags = b2Maybe(groupDef.flags, 0);\n    ///particleDef.position = b2Mul(xf, p);\n    b2Transform.MulXV(xf, p, particleDef.position);\n    ///particleDef.velocity =\n    ///  groupDef.linearVelocity +\n    ///  b2Cross(groupDef.angularVelocity,\n    ///      particleDef.position - groupDef.position);\n    b2Vec2.AddVV(\n      b2Maybe(groupDef.linearVelocity, b2Vec2.ZERO),\n      b2Vec2.CrossSV(\n        b2Maybe(groupDef.angularVelocity, 0),\n        b2Vec2.SubVV(particleDef.position, b2Maybe(groupDef.position, b2Vec2.ZERO), b2Vec2.s_t0),\n        b2Vec2.s_t0,\n      ),\n      particleDef.velocity,\n    );\n    particleDef.color.Copy(b2Maybe(groupDef.color, b2Color.ZERO));\n    particleDef.lifetime = b2Maybe(groupDef.lifetime, 0);\n    particleDef.userData = groupDef.userData;\n    this.CreateParticle(particleDef);\n  }\n\n  CreateParticlesStrokeShapeForGroup(\n    shape: b2Shape,\n    groupDef: b2IParticleGroupDef,\n    xf: b2Transform,\n  ): void {\n    const s_edge = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;\n    const s_d = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;\n    const s_p = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;\n    let stride = b2Maybe(groupDef.stride, 0);\n    if (stride === 0) {\n      stride = this.GetParticleStride();\n    }\n    let positionOnEdge = 0;\n    const childCount = shape.GetChildCount();\n    for (let childIndex = 0; childIndex < childCount; childIndex++) {\n      let edge: b2EdgeShape | null = null;\n      if (shape.GetType() === b2ShapeType.e_edgeShape) {\n        edge = shape as b2EdgeShape;\n      } else {\n        !!B2_DEBUG && b2Assert(shape.GetType() === b2ShapeType.e_chainShape);\n        edge = s_edge;\n        (shape as b2ChainShape).GetChildEdge(edge, childIndex);\n      }\n      const d = b2Vec2.SubVV(edge.m_vertex2, edge.m_vertex1, s_d);\n      const edgeLength = d.Length();\n\n      while (positionOnEdge < edgeLength) {\n        ///b2Vec2 p = edge.m_vertex1 + positionOnEdge / edgeLength * d;\n        const p = b2Vec2.AddVMulSV(edge.m_vertex1, positionOnEdge / edgeLength, d, s_p);\n        this.CreateParticleForGroup(groupDef, xf, p);\n        positionOnEdge += stride;\n      }\n      positionOnEdge -= edgeLength;\n    }\n  }\n\n  static readonly CreateParticlesStrokeShapeForGroup_s_edge = new b2EdgeShape();\n  static readonly CreateParticlesStrokeShapeForGroup_s_d = new b2Vec2();\n  static readonly CreateParticlesStrokeShapeForGroup_s_p = new b2Vec2();\n\n  CreateParticlesFillShapeForGroup(\n    shape: b2Shape,\n    groupDef: b2IParticleGroupDef,\n    xf: b2Transform,\n  ): void {\n    const s_aabb = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;\n    const s_p = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;\n    let stride = b2Maybe(groupDef.stride, 0);\n    if (stride === 0) {\n      stride = this.GetParticleStride();\n    }\n    ///b2Transform identity;\n    /// identity.SetIdentity();\n    const identity = b2Transform.IDENTITY;\n    const aabb = s_aabb;\n    !!B2_DEBUG && b2Assert(shape.GetChildCount() === 1);\n    shape.ComputeAABB(aabb, identity, 0);\n    for (\n      let y = Math.floor(aabb.lowerBound.y / stride) * stride;\n      y < aabb.upperBound.y;\n      y += stride\n    ) {\n      for (\n        let x = Math.floor(aabb.lowerBound.x / stride) * stride;\n        x < aabb.upperBound.x;\n        x += stride\n      ) {\n        const p = s_p.Set(x, y);\n        if (shape.TestPoint(identity, p)) {\n          this.CreateParticleForGroup(groupDef, xf, p);\n        }\n      }\n    }\n  }\n\n  static readonly CreateParticlesFillShapeForGroup_s_aabb = new b2AABB();\n  static readonly CreateParticlesFillShapeForGroup_s_p = new b2Vec2();\n\n  CreateParticlesWithShapeForGroup(\n    shape: b2Shape,\n    groupDef: b2IParticleGroupDef,\n    xf: b2Transform,\n  ): void {\n    switch (shape.GetType()) {\n      case b2ShapeType.e_edgeShape:\n      case b2ShapeType.e_chainShape:\n        this.CreateParticlesStrokeShapeForGroup(shape, groupDef, xf);\n        break;\n      case b2ShapeType.e_polygonShape:\n      case b2ShapeType.e_circleShape:\n        this.CreateParticlesFillShapeForGroup(shape, groupDef, xf);\n        break;\n      default:\n        !!B2_DEBUG && b2Assert(false);\n        break;\n    }\n  }\n\n  CreateParticlesWithShapesForGroup(\n    shapes: b2Shape[],\n    shapeCount: number,\n    groupDef: b2IParticleGroupDef,\n    xf: b2Transform,\n  ): void {\n    const compositeShape = new b2ParticleSystem_CompositeShape(shapes, shapeCount);\n    this.CreateParticlesFillShapeForGroup(compositeShape, groupDef, xf);\n  }\n\n  CloneParticle(oldIndex: number, group: b2ParticleGroup): number {\n    const def = new b2ParticleDef();\n    def.flags = this.m_flagsBuffer.data[oldIndex];\n    def.position.Copy(this.m_positionBuffer.data[oldIndex]);\n    def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);\n    if (this.m_colorBuffer.data) {\n      def.color.Copy(this.m_colorBuffer.data[oldIndex]);\n    }\n    if (this.m_userDataBuffer.data) {\n      def.userData = this.m_userDataBuffer.data[oldIndex];\n    }\n    def.group = group;\n    const newIndex = this.CreateParticle(def);\n    if (this.m_handleIndexBuffer.data) {\n      const handle = this.m_handleIndexBuffer.data[oldIndex];\n      if (handle) {\n        handle.index = newIndex;\n      }\n      this.m_handleIndexBuffer.data[newIndex] = handle;\n      this.m_handleIndexBuffer.data[oldIndex] = null;\n    }\n    if (this.m_lastBodyContactStepBuffer.data) {\n      this.m_lastBodyContactStepBuffer.data[newIndex] = this.m_lastBodyContactStepBuffer.data[\n        oldIndex\n      ];\n    }\n    if (this.m_bodyContactCountBuffer.data) {\n      this.m_bodyContactCountBuffer.data[newIndex] = this.m_bodyContactCountBuffer.data[oldIndex];\n    }\n    if (this.m_consecutiveContactStepsBuffer.data) {\n      this.m_consecutiveContactStepsBuffer.data[\n        newIndex\n      ] = this.m_consecutiveContactStepsBuffer.data[oldIndex];\n    }\n    if (this.m_hasForce) {\n      this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);\n    }\n    if (this.m_staticPressureBuffer) {\n      this.m_staticPressureBuffer[newIndex] = this.m_staticPressureBuffer[oldIndex];\n    }\n    if (this.m_depthBuffer) {\n      this.m_depthBuffer[newIndex] = this.m_depthBuffer[oldIndex];\n    }\n    if (this.m_expirationTimeBuffer.data) {\n      this.m_expirationTimeBuffer.data[newIndex] = this.m_expirationTimeBuffer.data[oldIndex];\n    }\n    return newIndex;\n  }\n\n  DestroyParticlesInGroup(group: b2ParticleGroup, callDestructionListener = false): void {\n    for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n      this.DestroyParticle(i, callDestructionListener);\n    }\n  }\n\n  DestroyParticleGroup(group: b2ParticleGroup): void {\n    !!B2_DEBUG && b2Assert(this.m_groupCount > 0);\n    !!B2_DEBUG && b2Assert(group !== null);\n\n    if (this.m_world.m_destructionListener) {\n      this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);\n    }\n\n    this.SetGroupFlags(group, 0);\n    for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n      this.m_groupBuffer[i] = null;\n    }\n\n    if (group.m_prev) {\n      group.m_prev.m_next = group.m_next;\n    }\n    if (group.m_next) {\n      group.m_next.m_prev = group.m_prev;\n    }\n    if (group === this.m_groupList) {\n      this.m_groupList = group.m_next;\n    }\n\n    --this.m_groupCount;\n  }\n\n  static ParticleCanBeConnected(flags: b2ParticleFlag, group: b2ParticleGroup | null): boolean {\n    return (\n      (flags &\n        (b2ParticleFlag.b2_wallParticle |\n          b2ParticleFlag.b2_springParticle |\n          b2ParticleFlag.b2_elasticParticle)) !==\n        0 ||\n      (group !== null && (group.GetGroupFlags() & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0)\n    );\n  }\n\n  UpdatePairsAndTriads(\n    firstIndex: number,\n    lastIndex: number,\n    filter: b2ParticleSystem_ConnectionFilter,\n  ): void {\n    const s_dab = b2ParticleSystem.UpdatePairsAndTriads_s_dab;\n    const s_dbc = b2ParticleSystem.UpdatePairsAndTriads_s_dbc;\n    const s_dca = b2ParticleSystem.UpdatePairsAndTriads_s_dca;\n    const pos_data = this.m_positionBuffer.data;\n    // Create pairs or triads.\n    // All particles in each pair/triad should satisfy the following:\n    // * firstIndex <= index < lastIndex\n    // * don't have b2_zombieParticle\n    // * ParticleCanBeConnected returns true\n    // * ShouldCreatePair/ShouldCreateTriad returns true\n    // Any particles in each pair/triad should satisfy the following:\n    // * filter.IsNeeded returns true\n    // * have one of k_pairFlags/k_triadsFlags\n    !!B2_DEBUG && b2Assert(firstIndex <= lastIndex);\n    let particleFlags = 0;\n    for (let i = firstIndex; i < lastIndex; i++) {\n      particleFlags |= this.m_flagsBuffer.data[i];\n    }\n    if (particleFlags & b2ParticleSystem.k_pairFlags) {\n      for (let k = 0; k < this.m_contactBuffer.count; k++) {\n        const contact = this.m_contactBuffer.data[k];\n        const a = contact.indexA;\n        const b = contact.indexB;\n        const af = this.m_flagsBuffer.data[a];\n        const bf = this.m_flagsBuffer.data[b];\n        const groupA = this.m_groupBuffer[a];\n        const groupB = this.m_groupBuffer[b];\n        if (\n          a >= firstIndex &&\n          a < lastIndex &&\n          b >= firstIndex &&\n          b < lastIndex &&\n          !((af | bf) & b2ParticleFlag.b2_zombieParticle) &&\n          (af | bf) & b2ParticleSystem.k_pairFlags &&\n          (filter.IsNecessary(a) || filter.IsNecessary(b)) &&\n          b2ParticleSystem.ParticleCanBeConnected(af, groupA) &&\n          b2ParticleSystem.ParticleCanBeConnected(bf, groupB) &&\n          filter.ShouldCreatePair(a, b)\n        ) {\n          ///b2ParticlePair& pair = m_pairBuffer.Append();\n          const pair = this.m_pairBuffer.data[this.m_pairBuffer.Append()];\n          pair.indexA = a;\n          pair.indexB = b;\n          pair.flags = contact.flags;\n          pair.strength = b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1);\n          ///pair.distance = b2Distance(pos_data[a], pos_data[b]); // TODO: this was wrong!\n          pair.distance = b2Vec2.DistanceVV(pos_data[a], pos_data[b]);\n        }\n        ///std::stable_sort(m_pairBuffer.Begin(), m_pairBuffer.End(), ComparePairIndices);\n        std_stable_sort(\n          this.m_pairBuffer.data,\n          0,\n          this.m_pairBuffer.count,\n          b2ParticleSystem.ComparePairIndices,\n        );\n        ///m_pairBuffer.Unique(MatchPairIndices);\n        this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);\n      }\n    }\n    if (particleFlags & b2ParticleSystem.k_triadFlags) {\n      const diagram = new b2VoronoiDiagram(lastIndex - firstIndex);\n      ///let necessary_count = 0;\n      for (let i = firstIndex; i < lastIndex; i++) {\n        const flags = this.m_flagsBuffer.data[i];\n        const group = this.m_groupBuffer[i];\n        if (\n          !(flags & b2ParticleFlag.b2_zombieParticle) &&\n          b2ParticleSystem.ParticleCanBeConnected(flags, group)\n        ) {\n          ///if (filter.IsNecessary(i)) {\n          ///++necessary_count;\n          ///}\n          diagram.AddGenerator(pos_data[i], i, filter.IsNecessary(i));\n        }\n      }\n      ///if (necessary_count === 0) {\n      /////debugger;\n      ///for (let i = firstIndex; i < lastIndex; i++) {\n      ///  filter.IsNecessary(i);\n      ///}\n      ///}\n      const stride = this.GetParticleStride();\n      diagram.Generate(stride / 2, stride * 2);\n      const callback = /*UpdateTriadsCallback*/ (a: number, b: number, c: number): void => {\n        const af = this.m_flagsBuffer.data[a];\n        const bf = this.m_flagsBuffer.data[b];\n        const cf = this.m_flagsBuffer.data[c];\n        if ((af | bf | cf) & b2ParticleSystem.k_triadFlags && filter.ShouldCreateTriad(a, b, c)) {\n          const pa = pos_data[a];\n          const pb = pos_data[b];\n          const pc = pos_data[c];\n          const dab = b2Vec2.SubVV(pa, pb, s_dab);\n          const dbc = b2Vec2.SubVV(pb, pc, s_dbc);\n          const dca = b2Vec2.SubVV(pc, pa, s_dca);\n          const maxDistanceSquared = b2_maxTriadDistanceSquared * this.m_squaredDiameter;\n          if (\n            b2Vec2.DotVV(dab, dab) > maxDistanceSquared ||\n            b2Vec2.DotVV(dbc, dbc) > maxDistanceSquared ||\n            b2Vec2.DotVV(dca, dca) > maxDistanceSquared\n          ) {\n            return;\n          }\n          const groupA = this.m_groupBuffer[a];\n          const groupB = this.m_groupBuffer[b];\n          const groupC = this.m_groupBuffer[c];\n          ///b2ParticleTriad& triad = m_system.m_triadBuffer.Append();\n          const triad = this.m_triadBuffer.data[this.m_triadBuffer.Append()];\n          triad.indexA = a;\n          triad.indexB = b;\n          triad.indexC = c;\n          triad.flags = af | bf | cf;\n          triad.strength = b2Min(\n            b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1),\n            groupC ? groupC.m_strength : 1,\n          );\n          ///let midPoint = b2Vec2.MulSV(1.0 / 3.0, b2Vec2.AddVV(pa, b2Vec2.AddVV(pb, pc, new b2Vec2()), new b2Vec2()), new b2Vec2());\n          const midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\n          const midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\n          ///triad.pa = b2Vec2.SubVV(pa, midPoint, new b2Vec2());\n          triad.pa.x = pa.x - midPoint_x;\n          triad.pa.y = pa.y - midPoint_y;\n          ///triad.pb = b2Vec2.SubVV(pb, midPoint, new b2Vec2());\n          triad.pb.x = pb.x - midPoint_x;\n          triad.pb.y = pb.y - midPoint_y;\n          ///triad.pc = b2Vec2.SubVV(pc, midPoint, new b2Vec2());\n          triad.pc.x = pc.x - midPoint_x;\n          triad.pc.y = pc.y - midPoint_y;\n          triad.ka = -b2Vec2.DotVV(dca, dab);\n          triad.kb = -b2Vec2.DotVV(dab, dbc);\n          triad.kc = -b2Vec2.DotVV(dbc, dca);\n          triad.s = b2Vec2.CrossVV(pa, pb) + b2Vec2.CrossVV(pb, pc) + b2Vec2.CrossVV(pc, pa);\n        }\n      };\n      diagram.GetNodes(callback);\n      ///std::stable_sort(m_triadBuffer.Begin(), m_triadBuffer.End(), CompareTriadIndices);\n      std_stable_sort(\n        this.m_triadBuffer.data,\n        0,\n        this.m_triadBuffer.count,\n        b2ParticleSystem.CompareTriadIndices,\n      );\n      ///m_triadBuffer.Unique(MatchTriadIndices);\n      this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);\n    }\n  }\n\n  private static UpdatePairsAndTriads_s_dab = new b2Vec2();\n  private static UpdatePairsAndTriads_s_dbc = new b2Vec2();\n  private static UpdatePairsAndTriads_s_dca = new b2Vec2();\n\n  UpdatePairsAndTriadsWithReactiveParticles(): void {\n    const filter = new b2ParticleSystem_ReactiveFilter(this.m_flagsBuffer);\n    this.UpdatePairsAndTriads(0, this.m_count, filter);\n\n    for (let i = 0; i < this.m_count; i++) {\n      this.m_flagsBuffer.data[i] &= ~b2ParticleFlag.b2_reactiveParticle;\n    }\n    this.m_allParticleFlags &= ~b2ParticleFlag.b2_reactiveParticle;\n  }\n\n  static ComparePairIndices(a: b2ParticlePair, b: b2ParticlePair): boolean {\n    const diffA = a.indexA - b.indexA;\n    if (diffA !== 0) {\n      return diffA < 0;\n    }\n    return a.indexB < b.indexB;\n  }\n\n  static MatchPairIndices(a: b2ParticlePair, b: b2ParticlePair): boolean {\n    return a.indexA === b.indexA && a.indexB === b.indexB;\n  }\n\n  static CompareTriadIndices(a: b2ParticleTriad, b: b2ParticleTriad): boolean {\n    const diffA = a.indexA - b.indexA;\n    if (diffA !== 0) {\n      return diffA < 0;\n    }\n    const diffB = a.indexB - b.indexB;\n    if (diffB !== 0) {\n      return diffB < 0;\n    }\n    return a.indexC < b.indexC;\n  }\n\n  static MatchTriadIndices(a: b2ParticleTriad, b: b2ParticleTriad): boolean {\n    return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC;\n  }\n\n  static InitializeParticleLists(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n  ): void {\n    const bufferIndex = group.GetBufferIndex();\n    const particleCount = group.GetParticleCount();\n    for (let i = 0; i < particleCount; i++) {\n      const node: b2ParticleSystem_ParticleListNode = nodeBuffer[i];\n      node.list = node;\n      node.next = null;\n      node.count = 1;\n      node.index = i + bufferIndex;\n    }\n  }\n\n  MergeParticleListsInContact(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n  ): void {\n    const bufferIndex = group.GetBufferIndex();\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      /*const b2ParticleContact&*/\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      if (!group.ContainsParticle(a) || !group.ContainsParticle(b)) {\n        continue;\n      }\n      let listA: b2ParticleSystem_ParticleListNode = nodeBuffer[a - bufferIndex].list;\n      let listB: b2ParticleSystem_ParticleListNode = nodeBuffer[b - bufferIndex].list;\n      if (listA === listB) {\n        continue;\n      }\n      // To minimize the cost of insertion, make sure listA is longer than\n      // listB.\n      if (listA.count < listB.count) {\n        const _tmp = listA;\n        listA = listB;\n        listB = _tmp; ///b2Swap(listA, listB);\n      }\n      !!B2_DEBUG && b2Assert(listA.count >= listB.count);\n      b2ParticleSystem.MergeParticleLists(listA, listB);\n    }\n  }\n\n  static MergeParticleLists(\n    listA: b2ParticleSystem_ParticleListNode,\n    listB: b2ParticleSystem_ParticleListNode,\n  ): void {\n    // Insert listB between index 0 and 1 of listA\n    // Example:\n    //     listA => a1 => a2 => a3 => null\n    //     listB => b1 => b2 => null\n    // to\n    //     listA => listB => b1 => b2 => a1 => a2 => a3 => null\n    !!B2_DEBUG && b2Assert(listA !== listB);\n    for (let b: b2ParticleSystem_ParticleListNode = listB; ; ) {\n      b.list = listA;\n      const nextB: b2ParticleSystem_ParticleListNode | null = b.next;\n      if (nextB) {\n        b = nextB;\n      } else {\n        b.next = listA.next;\n        break;\n      }\n    }\n    listA.next = listB;\n    listA.count += listB.count;\n    listB.count = 0;\n  }\n\n  static FindLongestParticleList(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n  ): b2ParticleSystem_ParticleListNode {\n    const particleCount = group.GetParticleCount();\n    let result: b2ParticleSystem_ParticleListNode = nodeBuffer[0];\n    for (let i = 0; i < particleCount; i++) {\n      const node: b2ParticleSystem_ParticleListNode = nodeBuffer[i];\n      if (result.count < node.count) {\n        result = node;\n      }\n    }\n    return result;\n  }\n\n  MergeZombieParticleListNodes(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n    survivingList: b2ParticleSystem_ParticleListNode,\n  ): void {\n    const particleCount = group.GetParticleCount();\n    for (let i = 0; i < particleCount; i++) {\n      const node: b2ParticleSystem_ParticleListNode = nodeBuffer[i];\n      if (\n        node !== survivingList &&\n        this.m_flagsBuffer.data[node.index] & b2ParticleFlag.b2_zombieParticle\n      ) {\n        b2ParticleSystem.MergeParticleListAndNode(survivingList, node);\n      }\n    }\n  }\n\n  static MergeParticleListAndNode(\n    list: b2ParticleSystem_ParticleListNode,\n    node: b2ParticleSystem_ParticleListNode,\n  ): void {\n    // Insert node between index 0 and 1 of list\n    // Example:\n    //     list => a1 => a2 => a3 => null\n    //     node => null\n    // to\n    //     list => node => a1 => a2 => a3 => null\n    if (B2_DEBUG) {\n      b2Assert(node !== list);\n      b2Assert(node.list === node);\n      b2Assert(node.count === 1);\n    }\n    node.list = list;\n    node.next = list.next;\n    list.next = node;\n    list.count++;\n    node.count = 0;\n  }\n\n  CreateParticleGroupsFromParticleList(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n    survivingList: b2ParticleSystem_ParticleListNode,\n  ): void {\n    const particleCount = group.GetParticleCount();\n    const def = new b2ParticleGroupDef();\n    def.groupFlags = group.GetGroupFlags();\n    def.userData = group.GetUserData();\n    for (let i = 0; i < particleCount; i++) {\n      const list: b2ParticleSystem_ParticleListNode = nodeBuffer[i];\n      if (!list.count || list === survivingList) {\n        continue;\n      }\n      !!B2_DEBUG && b2Assert(list.list === list);\n      const newGroup: b2ParticleGroup = this.CreateParticleGroup(def);\n      for (let node: b2ParticleSystem_ParticleListNode | null = list; node; node = node.next) {\n        const oldIndex = node.index;\n        if (B2_DEBUG) {\n          const flags = this.m_flagsBuffer.data[oldIndex];\n          b2Assert(!(flags & b2ParticleFlag.b2_zombieParticle));\n        }\n        const newIndex = this.CloneParticle(oldIndex, newGroup);\n        this.m_flagsBuffer.data[oldIndex] |= b2ParticleFlag.b2_zombieParticle;\n        node.index = newIndex;\n      }\n    }\n  }\n\n  UpdatePairsAndTriadsWithParticleList(\n    group: b2ParticleGroup,\n    nodeBuffer: b2ParticleSystem_ParticleListNode[],\n  ): void {\n    const bufferIndex = group.GetBufferIndex();\n    // Update indices in pairs and triads. If an index belongs to the group,\n    // replace it with the corresponding value in nodeBuffer.\n    // Note that nodeBuffer is allocated only for the group and the index should\n    // be shifted by bufferIndex.\n    for (let k = 0; k < this.m_pairBuffer.count; k++) {\n      const pair = this.m_pairBuffer.data[k];\n      const a = pair.indexA;\n      const b = pair.indexB;\n      if (group.ContainsParticle(a)) {\n        pair.indexA = nodeBuffer[a - bufferIndex].index;\n      }\n      if (group.ContainsParticle(b)) {\n        pair.indexB = nodeBuffer[b - bufferIndex].index;\n      }\n    }\n    for (let k = 0; k < this.m_triadBuffer.count; k++) {\n      const triad = this.m_triadBuffer.data[k];\n      const a = triad.indexA;\n      const b = triad.indexB;\n      const c = triad.indexC;\n      if (group.ContainsParticle(a)) {\n        triad.indexA = nodeBuffer[a - bufferIndex].index;\n      }\n      if (group.ContainsParticle(b)) {\n        triad.indexB = nodeBuffer[b - bufferIndex].index;\n      }\n      if (group.ContainsParticle(c)) {\n        triad.indexC = nodeBuffer[c - bufferIndex].index;\n      }\n    }\n  }\n\n  ComputeDepth(): void {\n    const contactGroups: b2ParticleContact[] = []; // TODO: static\n    let contactGroupsCount = 0;\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const groupA = this.m_groupBuffer[a];\n      const groupB = this.m_groupBuffer[b];\n      if (\n        groupA &&\n        groupA === groupB &&\n        groupA.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth\n      ) {\n        contactGroups[contactGroupsCount++] = contact;\n      }\n    }\n    const groupsToUpdate: b2ParticleGroup[] = []; // TODO: static\n    let groupsToUpdateCount = 0;\n    for (let group = this.m_groupList; group; group = group.GetNext()) {\n      if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\n        groupsToUpdate[groupsToUpdateCount++] = group;\n        this.SetGroupFlags(\n          group,\n          group.m_groupFlags & ~b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth,\n        );\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n          this.m_accumulationBuffer[i] = 0;\n        }\n      }\n    }\n    // Compute sum of weight of contacts except between different groups.\n    for (let k = 0; k < contactGroupsCount; k++) {\n      const contact = contactGroups[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const w = contact.weight;\n      this.m_accumulationBuffer[a] += w;\n      this.m_accumulationBuffer[b] += w;\n    }\n\n    !!B2_DEBUG && b2Assert(this.m_depthBuffer !== null);\n    for (let i = 0; i < groupsToUpdateCount; i++) {\n      const group = groupsToUpdate[i];\n      for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n        const w = this.m_accumulationBuffer[i];\n        this.m_depthBuffer[i] = w < 0.8 ? 0 : b2_maxFloat;\n      }\n    }\n    // The number of iterations is equal to particle number from the deepest\n    // particle to the nearest surface particle, and in general it is smaller\n    // than sqrt of total particle number.\n    ///int32 iterationCount = (int32)b2Sqrt((float)m_count);\n    const iterationCount = b2Sqrt(this.m_count) >> 0;\n    for (let t = 0; t < iterationCount; t++) {\n      let updated = false;\n      for (let k = 0; k < contactGroupsCount; k++) {\n        const contact = contactGroups[k];\n        const a = contact.indexA;\n        const b = contact.indexB;\n        const r = 1 - contact.weight;\n        ///float32& ap0 = m_depthBuffer[a];\n        const ap0 = this.m_depthBuffer[a];\n        ///float32& bp0 = m_depthBuffer[b];\n        const bp0 = this.m_depthBuffer[b];\n        const ap1 = bp0 + r;\n        const bp1 = ap0 + r;\n        if (ap0 > ap1) {\n          ///ap0 = ap1;\n          this.m_depthBuffer[a] = ap1;\n          updated = true;\n        }\n        if (bp0 > bp1) {\n          ///bp0 = bp1;\n          this.m_depthBuffer[b] = bp1;\n          updated = true;\n        }\n      }\n      if (!updated) {\n        break;\n      }\n    }\n    for (let i = 0; i < groupsToUpdateCount; i++) {\n      const group = groupsToUpdate[i];\n      for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n        if (this.m_depthBuffer[i] < b2_maxFloat) {\n          this.m_depthBuffer[i] *= this.m_particleDiameter;\n        } else {\n          this.m_depthBuffer[i] = 0;\n        }\n      }\n    }\n  }\n\n  GetInsideBoundsEnumerator(aabb: Readonly<b2AABB>): b2ParticleSystem_InsideBoundsEnumerator {\n    const lowerTag = b2ParticleSystem.computeTag(\n      this.m_inverseDiameter * aabb.lowerBound.x - 1,\n      this.m_inverseDiameter * aabb.lowerBound.y - 1,\n    );\n    const upperTag = b2ParticleSystem.computeTag(\n      this.m_inverseDiameter * aabb.upperBound.x + 1,\n      this.m_inverseDiameter * aabb.upperBound.y + 1,\n    );\n    ///const Proxy* beginProxy = m_proxyBuffer.Begin();\n    const beginProxy = 0;\n    ///const Proxy* endProxy = m_proxyBuffer.End();\n    const endProxy = this.m_proxyBuffer.count;\n    ///const Proxy* firstProxy = std::lower_bound(beginProxy, endProxy, lowerTag);\n    const firstProxy = std_lower_bound(\n      this.m_proxyBuffer.data,\n      beginProxy,\n      endProxy,\n      lowerTag,\n      b2ParticleSystem_Proxy.CompareProxyTag,\n    );\n    ///const Proxy* lastProxy = std::upper_bound(firstProxy, endProxy, upperTag);\n    const lastProxy = std_upper_bound(\n      this.m_proxyBuffer.data,\n      beginProxy,\n      endProxy,\n      upperTag,\n      b2ParticleSystem_Proxy.CompareTagProxy,\n    );\n\n    !!B2_DEBUG && b2Assert(beginProxy <= firstProxy);\n    !!B2_DEBUG && b2Assert(firstProxy <= lastProxy);\n    !!B2_DEBUG && b2Assert(lastProxy <= endProxy);\n\n    return new b2ParticleSystem_InsideBoundsEnumerator(\n      this,\n      lowerTag,\n      upperTag,\n      firstProxy,\n      lastProxy,\n    );\n  }\n\n  UpdateAllParticleFlags(): void {\n    this.m_allParticleFlags = 0;\n    for (let i = 0; i < this.m_count; i++) {\n      this.m_allParticleFlags |= this.m_flagsBuffer.data[i];\n    }\n    this.m_needsUpdateAllParticleFlags = false;\n  }\n\n  UpdateAllGroupFlags(): void {\n    this.m_allGroupFlags = 0;\n    for (let group = this.m_groupList; group; group = group.GetNext()) {\n      this.m_allGroupFlags |= group.m_groupFlags;\n    }\n    this.m_needsUpdateAllGroupFlags = false;\n  }\n\n  AddContact(a: number, b: number, contacts: b2GrowableBuffer<b2ParticleContact>): void {\n    !!B2_DEBUG && b2Assert(contacts === this.m_contactBuffer);\n    const flags_data = this.m_flagsBuffer.data;\n    const pos_data = this.m_positionBuffer.data;\n    ///b2Vec2 d = m_positionBuffer.data[b] - m_positionBuffer.data[a];\n    const d = b2Vec2.SubVV(pos_data[b], pos_data[a], b2ParticleSystem.AddContact_s_d);\n    const distBtParticlesSq = b2Vec2.DotVV(d, d);\n    if (0 < distBtParticlesSq && distBtParticlesSq < this.m_squaredDiameter) {\n      const invD = b2InvSqrt(distBtParticlesSq);\n      ///b2ParticleContact& contact = contacts.Append();\n      const contact = this.m_contactBuffer.data[this.m_contactBuffer.Append()];\n      contact.indexA = a;\n      contact.indexB = b;\n      contact.flags = flags_data[a] | flags_data[b];\n      contact.weight = 1 - distBtParticlesSq * invD * this.m_inverseDiameter;\n      contact.normal.x = invD * d.x;\n      contact.normal.y = invD * d.y;\n    }\n  }\n\n  static readonly AddContact_s_d = new b2Vec2();\n\n  FindContacts_Reference(contacts: b2GrowableBuffer<b2ParticleContact>): void {\n    !!B2_DEBUG && b2Assert(contacts === this.m_contactBuffer);\n    const beginProxy = 0;\n    const endProxy = this.m_proxyBuffer.count;\n\n    this.m_contactBuffer.count = 0;\n    for (let a = beginProxy, c = beginProxy; a < endProxy; a++) {\n      const rightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 0);\n      for (let b = a + 1; b < endProxy; b++) {\n        if (rightTag < this.m_proxyBuffer.data[b].tag) {\n          break;\n        }\n        this.AddContact(\n          this.m_proxyBuffer.data[a].index,\n          this.m_proxyBuffer.data[b].index,\n          this.m_contactBuffer,\n        );\n      }\n      const bottomLeftTag = b2ParticleSystem.computeRelativeTag(\n        this.m_proxyBuffer.data[a].tag,\n        -1,\n        1,\n      );\n      for (; c < endProxy; c++) {\n        if (bottomLeftTag <= this.m_proxyBuffer.data[c].tag) {\n          break;\n        }\n      }\n      const bottomRightTag = b2ParticleSystem.computeRelativeTag(\n        this.m_proxyBuffer.data[a].tag,\n        1,\n        1,\n      );\n      for (let b = c; b < endProxy; b++) {\n        if (bottomRightTag < this.m_proxyBuffer.data[b].tag) {\n          break;\n        }\n        this.AddContact(\n          this.m_proxyBuffer.data[a].index,\n          this.m_proxyBuffer.data[b].index,\n          this.m_contactBuffer,\n        );\n      }\n    }\n  }\n\n  ///void ReorderForFindContact(FindContactInput* reordered, int alignedCount) const;\n  ///void GatherChecksOneParticle(const uint32 bound, const int startIndex, const int particleIndex, int* nextUncheckedIndex, b2GrowableBuffer<FindContactCheck>& checks) const;\n  ///void GatherChecks(b2GrowableBuffer<FindContactCheck>& checks) const;\n  ///void FindContacts_Simd(b2GrowableBuffer<b2ParticleContact>& contacts) const;\n\n  FindContacts(contacts: b2GrowableBuffer<b2ParticleContact>): void {\n    this.FindContacts_Reference(contacts);\n  }\n\n  ///static void UpdateProxyTags(const uint32* const tags, b2GrowableBuffer<Proxy>& proxies);\n  ///static bool ProxyBufferHasIndex(int32 index, const Proxy* const a, int count);\n  ///static int NumProxiesWithSameTag(const Proxy* const a, const Proxy* const b, int count);\n  ///static bool AreProxyBuffersTheSame(const b2GrowableBuffer<Proxy>& a, const b2GrowableBuffer<Proxy>& b);\n\n  UpdateProxies_Reference(proxies: b2GrowableBuffer<b2ParticleSystem_Proxy>): void {\n    !!B2_DEBUG && b2Assert(proxies === this.m_proxyBuffer);\n    const pos_data = this.m_positionBuffer.data;\n    const inv_diam = this.m_inverseDiameter;\n    for (let k = 0; k < this.m_proxyBuffer.count; ++k) {\n      const proxy = this.m_proxyBuffer.data[k];\n      const i = proxy.index;\n      const p = pos_data[i];\n      proxy.tag = b2ParticleSystem.computeTag(inv_diam * p.x, inv_diam * p.y);\n    }\n  }\n\n  ///void UpdateProxies_Simd(b2GrowableBuffer<Proxy>& proxies) const;\n\n  UpdateProxies(proxies: b2GrowableBuffer<b2ParticleSystem_Proxy>): void {\n    this.UpdateProxies_Reference(proxies);\n  }\n\n  SortProxies(proxies: b2GrowableBuffer<b2ParticleSystem_Proxy>): void {\n    !!B2_DEBUG && b2Assert(proxies === this.m_proxyBuffer);\n\n    ///std::sort(proxies.Begin(), proxies.End());\n    std_sort(\n      this.m_proxyBuffer.data,\n      0,\n      this.m_proxyBuffer.count,\n      b2ParticleSystem_Proxy.CompareProxyProxy,\n    );\n  }\n\n  FilterContacts(contacts: b2GrowableBuffer<b2ParticleContact>): void {\n    // Optionally filter the contact.\n    const contactFilter = this.GetParticleContactFilter();\n    if (contactFilter === null) {\n      return;\n    }\n\n    /// contacts.RemoveIf(b2ParticleContactRemovePredicate(this, contactFilter));\n    !!B2_DEBUG && b2Assert(contacts === this.m_contactBuffer);\n    const predicate = (contact: b2ParticleContact): boolean => {\n      return (\n        (contact.flags & b2ParticleFlag.b2_particleContactFilterParticle) !== 0 &&\n        !contactFilter.ShouldCollideParticleParticle(this, contact.indexA, contact.indexB)\n      );\n    };\n    this.m_contactBuffer.RemoveIf(predicate);\n  }\n\n  NotifyContactListenerPreContact(particlePairs: b2ParticlePairSet): void {\n    const contactListener = this.GetParticleContactListener();\n    if (contactListener === null) {\n      return;\n    }\n\n    ///particlePairs.Initialize(m_contactBuffer.Begin(), m_contactBuffer.GetCount(), GetFlagsBuffer());\n    particlePairs.Initialize(this.m_contactBuffer, this.m_flagsBuffer);\n\n    throw new Error(); // TODO: notify\n  }\n\n  NotifyContactListenerPostContact(particlePairs: b2ParticlePairSet): void {\n    const contactListener = this.GetParticleContactListener();\n    if (contactListener === null) {\n      return;\n    }\n\n    // Loop through all new contacts, reporting any new ones, and\n    // \"invalidating\" the ones that still exist.\n    ///const b2ParticleContact* const endContact = m_contactBuffer.End();\n    ///for (b2ParticleContact* contact = m_contactBuffer.Begin(); contact < endContact; ++contact)\n    for (let k = 0; k < this.m_contactBuffer.count; ++k) {\n      const contact = this.m_contactBuffer.data[k];\n      ///ParticlePair pair;\n      ///pair.first = contact.GetIndexA();\n      ///pair.second = contact.GetIndexB();\n      ///const int32 itemIndex = particlePairs.Find(pair);\n      const itemIndex = -1; // TODO\n      if (itemIndex >= 0) {\n        // Already touching, ignore this contact.\n        particlePairs.Invalidate(itemIndex);\n      } else {\n        // Just started touching, inform the listener.\n        contactListener.BeginContactParticleParticle(this, contact);\n      }\n    }\n\n    // Report particles that are no longer touching.\n    // That is, any pairs that were not invalidated above.\n    ///const int32 pairCount = particlePairs.GetCount();\n    ///const ParticlePair* const pairs = particlePairs.GetBuffer();\n    ///const int8* const valid = particlePairs.GetValidBuffer();\n    ///for (int32 i = 0; i < pairCount; ++i)\n    ///{\n    ///  if (valid[i])\n    ///  {\n    ///    contactListener.EndContactParticleParticle(this, pairs[i].first, pairs[i].second);\n    ///  }\n    ///}\n\n    throw new Error(); // TODO: notify\n  }\n\n  static b2ParticleContactIsZombie(contact: b2ParticleContact): boolean {\n    return (contact.flags & b2ParticleFlag.b2_zombieParticle) === b2ParticleFlag.b2_zombieParticle;\n  }\n\n  UpdateContacts(exceptZombie: boolean): void {\n    this.UpdateProxies(this.m_proxyBuffer);\n    this.SortProxies(this.m_proxyBuffer);\n\n    const particlePairs = new b2ParticlePairSet(); // TODO: static\n    this.NotifyContactListenerPreContact(particlePairs);\n\n    this.FindContacts(this.m_contactBuffer);\n    this.FilterContacts(this.m_contactBuffer);\n\n    this.NotifyContactListenerPostContact(particlePairs);\n\n    if (exceptZombie) {\n      this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);\n    }\n  }\n\n  NotifyBodyContactListenerPreContact(fixtureSet: b2ParticleSystem_FixtureParticleSet): void {\n    const contactListener = this.GetFixtureContactListener();\n    if (contactListener === null) {\n      return;\n    }\n\n    ///fixtureSet.Initialize(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.GetCount(), GetFlagsBuffer());\n    fixtureSet.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer);\n\n    throw new Error(); // TODO: notify\n  }\n\n  NotifyBodyContactListenerPostContact(fixtureSet: b2ParticleSystem_FixtureParticleSet): void {\n    const contactListener = this.GetFixtureContactListener();\n    if (contactListener === null) {\n      return;\n    }\n\n    // Loop through all new contacts, reporting any new ones, and\n    // \"invalidating\" the ones that still exist.\n    ///for (b2ParticleBodyContact* contact = m_bodyContactBuffer.Begin(); contact !== m_bodyContactBuffer.End(); ++contact)\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      !!B2_DEBUG && b2Assert(contact !== null);\n      ///FixtureParticle fixtureParticleToFind;\n      ///fixtureParticleToFind.first = contact.fixture;\n      ///fixtureParticleToFind.second = contact.index;\n      ///const int32 index = fixtureSet.Find(fixtureParticleToFind);\n      const index = -1; // TODO\n      if (index >= 0) {\n        // Already touching remove this from the set.\n        fixtureSet.Invalidate(index);\n      } else {\n        // Just started touching, report it!\n        contactListener.BeginContactFixtureParticle(this, contact);\n      }\n    }\n\n    // If the contact listener is enabled, report all fixtures that are no\n    // longer in contact with particles.\n    ///const FixtureParticle* const fixtureParticles = fixtureSet.GetBuffer();\n    ///const int8* const fixtureParticlesValid = fixtureSet.GetValidBuffer();\n    ///const int32 fixtureParticleCount = fixtureSet.GetCount();\n    ///for (int32 i = 0; i < fixtureParticleCount; ++i)\n    ///{\n    ///  if (fixtureParticlesValid[i])\n    ///  {\n    ///    const FixtureParticle* const fixtureParticle = &fixtureParticles[i];\n    ///    contactListener.EndContactFixtureParticle(fixtureParticle.first, this, fixtureParticle.second);\n    ///  }\n    ///}\n\n    throw new Error(); // TODO: notify\n  }\n\n  UpdateBodyContacts(): void {\n    const s_aabb = b2ParticleSystem.UpdateBodyContacts_s_aabb;\n\n    // If the particle contact listener is enabled, generate a set of\n    // fixture / particle contacts.\n    const fixtureSet = new b2ParticleSystem_FixtureParticleSet(); // TODO: static\n    this.NotifyBodyContactListenerPreContact(fixtureSet);\n\n    if (this.m_stuckThreshold > 0) {\n      const particleCount = this.GetParticleCount();\n      for (let i = 0; i < particleCount; i++) {\n        // Detect stuck particles, see comment in\n        // b2ParticleSystem::DetectStuckParticle()\n        this.m_bodyContactCountBuffer.data[i] = 0;\n        if (this.m_timestamp > this.m_lastBodyContactStepBuffer.data[i] + 1) {\n          this.m_consecutiveContactStepsBuffer.data[i] = 0;\n        }\n      }\n    }\n    this.m_bodyContactBuffer.SetCount(0);\n    this.m_stuckParticleBuffer.SetCount(0);\n\n    const aabb = s_aabb;\n    this.ComputeAABB(aabb);\n\n    if (this.UpdateBodyContacts_callback === null) {\n      this.UpdateBodyContacts_callback = new b2ParticleSystem_UpdateBodyContactsCallback(this);\n    }\n    const callback = this.UpdateBodyContacts_callback;\n    callback.m_contactFilter = this.GetFixtureContactFilter();\n    this.m_world.QueryAABB(callback, aabb);\n\n    if (this.m_def.strictContactCheck) {\n      this.RemoveSpuriousBodyContacts();\n    }\n\n    this.NotifyBodyContactListenerPostContact(fixtureSet);\n  }\n\n  static readonly UpdateBodyContacts_s_aabb = new b2AABB();\n  UpdateBodyContacts_callback: b2ParticleSystem_UpdateBodyContactsCallback | null = null;\n\n  Solve(step: b2TimeStep): void {\n    const s_subStep = b2ParticleSystem.Solve_s_subStep;\n    if (this.m_count === 0) {\n      return;\n    }\n    // If particle lifetimes are enabled, destroy particles that are too old.\n    if (this.m_expirationTimeBuffer.data) {\n      this.SolveLifetimes(step);\n    }\n    if (this.m_allParticleFlags & b2ParticleFlag.b2_zombieParticle) {\n      this.SolveZombie();\n    }\n    if (this.m_needsUpdateAllParticleFlags) {\n      this.UpdateAllParticleFlags();\n    }\n    if (this.m_needsUpdateAllGroupFlags) {\n      this.UpdateAllGroupFlags();\n    }\n    if (this.m_paused) {\n      return;\n    }\n    for (\n      this.m_iterationIndex = 0;\n      this.m_iterationIndex < step.particleIterations;\n      this.m_iterationIndex++\n    ) {\n      ++this.m_timestamp;\n      const subStep = s_subStep.Copy(step);\n      subStep.dt /= step.particleIterations;\n      subStep.inv_dt *= step.particleIterations;\n      this.UpdateContacts(false);\n      this.UpdateBodyContacts();\n      this.ComputeWeight();\n      if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\n        this.ComputeDepth();\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_reactiveParticle) {\n        this.UpdatePairsAndTriadsWithReactiveParticles();\n      }\n      if (this.m_hasForce) {\n        this.SolveForce(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_viscousParticle) {\n        this.SolveViscous();\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_repulsiveParticle) {\n        this.SolveRepulsive(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_powderParticle) {\n        this.SolvePowder(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_tensileParticle) {\n        this.SolveTensile(subStep);\n      }\n      if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\n        this.SolveSolid(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.SolveColorMixing();\n      }\n      this.SolveGravity(subStep);\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\n        this.SolveStaticPressure(subStep);\n      }\n      this.SolvePressure(subStep);\n      this.SolveDamping(subStep);\n      if (this.m_allParticleFlags & b2ParticleSystem.k_extraDampingFlags) {\n        this.SolveExtraDamping();\n      }\n      // SolveElastic and SolveSpring refer the current velocities for\n      // numerical stability, they should be called as late as possible.\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_elasticParticle) {\n        this.SolveElastic(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_springParticle) {\n        this.SolveSpring(subStep);\n      }\n      this.LimitVelocity(subStep);\n      if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\n        this.SolveRigidDamping();\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_barrierParticle) {\n        this.SolveBarrier(subStep);\n      }\n      // SolveCollision, SolveRigid and SolveWall should be called after\n      // other force functions because they may require particles to have\n      // specific velocities.\n      this.SolveCollision(subStep);\n      if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\n        this.SolveRigid(subStep);\n      }\n      if (this.m_allParticleFlags & b2ParticleFlag.b2_wallParticle) {\n        this.SolveWall();\n      }\n      // The particle positions can be updated only at the end of substep.\n      for (let i = 0; i < this.m_count; i++) {\n        ///m_positionBuffer.data[i] += subStep.dt * m_velocityBuffer.data[i];\n        this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt, this.m_velocityBuffer.data[i]);\n      }\n    }\n  }\n\n  static readonly Solve_s_subStep = new b2TimeStep();\n\n  SolveCollision(step: b2TimeStep): void {\n    const s_aabb = b2ParticleSystem.SolveCollision_s_aabb;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n\n    // This function detects particles which are crossing boundary of bodies\n    // and modifies velocities of them so that they will move just in front of\n    // boundary. This function function also applies the reaction force to\n    // bodies as precisely as the numerical stability is kept.\n    const aabb = s_aabb;\n    aabb.lowerBound.x = +b2_maxFloat;\n    aabb.lowerBound.y = +b2_maxFloat;\n    aabb.upperBound.x = -b2_maxFloat;\n    aabb.upperBound.y = -b2_maxFloat;\n    for (let i = 0; i < this.m_count; i++) {\n      const v = vel_data[i];\n      const p1 = pos_data[i];\n      ///let p2 = p1 + step.dt * v;\n      const p2_x = p1.x + step.dt * v.x;\n      const p2_y = p1.y + step.dt * v.y;\n      ///aabb.lowerBound = b2Min(aabb.lowerBound, b2Min(p1, p2));\n      aabb.lowerBound.x = b2Min(aabb.lowerBound.x, b2Min(p1.x, p2_x));\n      aabb.lowerBound.y = b2Min(aabb.lowerBound.y, b2Min(p1.y, p2_y));\n      ///aabb.upperBound = b2Max(aabb.upperBound, b2Max(p1, p2));\n      aabb.upperBound.x = b2Max(aabb.upperBound.x, b2Max(p1.x, p2_x));\n      aabb.upperBound.y = b2Max(aabb.upperBound.y, b2Max(p1.y, p2_y));\n    }\n    if (this.SolveCollision_callback === null) {\n      this.SolveCollision_callback = new b2ParticleSystem_SolveCollisionCallback(this, step);\n    }\n    const callback = this.SolveCollision_callback;\n    callback.m_step = step;\n    this.m_world.QueryAABB(callback, aabb);\n  }\n\n  static readonly SolveCollision_s_aabb = new b2AABB();\n  SolveCollision_callback: b2ParticleSystem_SolveCollisionCallback | null = null;\n\n  LimitVelocity(step: b2TimeStep): void {\n    const vel_data = this.m_velocityBuffer.data;\n    const criticalVelocitySquared = this.GetCriticalVelocitySquared(step);\n    for (let i = 0; i < this.m_count; i++) {\n      const v = vel_data[i];\n      const v2 = b2Vec2.DotVV(v, v);\n      if (v2 > criticalVelocitySquared) {\n        ///v *= b2Sqrt(criticalVelocitySquared / v2);\n        v.SelfMul(b2Sqrt(criticalVelocitySquared / v2));\n      }\n    }\n  }\n\n  SolveGravity(step: b2TimeStep): void {\n    const s_gravity = b2ParticleSystem.SolveGravity_s_gravity;\n    const vel_data = this.m_velocityBuffer.data;\n    ///b2Vec2 gravity = step.dt * m_def.gravityScale * m_world.GetGravity();\n    const gravity = b2Vec2.MulSV(\n      step.dt * this.m_def.gravityScale,\n      this.m_world.GetGravity(),\n      s_gravity,\n    );\n    for (let i = 0; i < this.m_count; i++) {\n      vel_data[i].SelfAdd(gravity);\n    }\n  }\n\n  static readonly SolveGravity_s_gravity = new b2Vec2();\n\n  SolveBarrier(step: b2TimeStep): void {\n    const s_aabb = b2ParticleSystem.SolveBarrier_s_aabb;\n    const s_va = b2ParticleSystem.SolveBarrier_s_va;\n    const s_vb = b2ParticleSystem.SolveBarrier_s_vb;\n    const s_pba = b2ParticleSystem.SolveBarrier_s_pba;\n    const s_vba = b2ParticleSystem.SolveBarrier_s_vba;\n    const s_vc = b2ParticleSystem.SolveBarrier_s_vc;\n    const s_pca = b2ParticleSystem.SolveBarrier_s_pca;\n    const s_vca = b2ParticleSystem.SolveBarrier_s_vca;\n    const s_qba = b2ParticleSystem.SolveBarrier_s_qba;\n    const s_qca = b2ParticleSystem.SolveBarrier_s_qca;\n    const s_dv = b2ParticleSystem.SolveBarrier_s_dv;\n    const s_f = b2ParticleSystem.SolveBarrier_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    // If a particle is passing between paired barrier particles,\n    // its velocity will be decelerated to avoid passing.\n    for (let i = 0; i < this.m_count; i++) {\n      const flags = this.m_flagsBuffer.data[i];\n      ///if ((flags & b2ParticleSystem.k_barrierWallFlags) === b2ParticleSystem.k_barrierWallFlags)\n      if ((flags & b2ParticleSystem.k_barrierWallFlags) !== 0) {\n        vel_data[i].SetZero();\n      }\n    }\n    const tmax = b2_barrierCollisionTime * step.dt;\n    const mass = this.GetParticleMass();\n    for (let k = 0; k < this.m_pairBuffer.count; k++) {\n      const pair = this.m_pairBuffer.data[k];\n      if (pair.flags & b2ParticleFlag.b2_barrierParticle) {\n        const a = pair.indexA;\n        const b = pair.indexB;\n        const pa = pos_data[a];\n        const pb = pos_data[b];\n        /// b2AABB aabb;\n        const aabb = s_aabb;\n        ///aabb.lowerBound = b2Min(pa, pb);\n        b2Vec2.MinV(pa, pb, aabb.lowerBound);\n        ///aabb.upperBound = b2Max(pa, pb);\n        b2Vec2.MaxV(pa, pb, aabb.upperBound);\n        const aGroup = this.m_groupBuffer[a];\n        const bGroup = this.m_groupBuffer[b];\n        ///b2Vec2 va = GetLinearVelocity(aGroup, a, pa);\n        const va = this.GetLinearVelocity(aGroup, a, pa, s_va);\n        ///b2Vec2 vb = GetLinearVelocity(bGroup, b, pb);\n        const vb = this.GetLinearVelocity(bGroup, b, pb, s_vb);\n        ///b2Vec2 pba = pb - pa;\n        const pba = b2Vec2.SubVV(pb, pa, s_pba);\n        ///b2Vec2 vba = vb - va;\n        const vba = b2Vec2.SubVV(vb, va, s_vba);\n        ///InsideBoundsEnumerator enumerator = GetInsideBoundsEnumerator(aabb);\n        const enumerator = this.GetInsideBoundsEnumerator(aabb);\n        let c: number;\n        while ((c = enumerator.GetNext()) >= 0) {\n          const pc = pos_data[c];\n          const cGroup = this.m_groupBuffer[c];\n          if (aGroup !== cGroup && bGroup !== cGroup) {\n            ///b2Vec2 vc = GetLinearVelocity(cGroup, c, pc);\n            const vc = this.GetLinearVelocity(cGroup, c, pc, s_vc);\n            // Solve the equation below:\n            //   (1-s)*(pa+t*va)+s*(pb+t*vb) = pc+t*vc\n            // which expresses that the particle c will pass a line\n            // connecting the particles a and b at the time of t.\n            // if s is between 0 and 1, c will pass between a and b.\n            ///b2Vec2 pca = pc - pa;\n            const pca = b2Vec2.SubVV(pc, pa, s_pca);\n            ///b2Vec2 vca = vc - va;\n            const vca = b2Vec2.SubVV(vc, va, s_vca);\n            const e2 = b2Vec2.CrossVV(vba, vca);\n            const e1 = b2Vec2.CrossVV(pba, vca) - b2Vec2.CrossVV(pca, vba);\n            const e0 = b2Vec2.CrossVV(pba, pca);\n            let s: number, t: number;\n            ///b2Vec2 qba, qca;\n            const qba = s_qba,\n              qca = s_qca;\n            if (e2 === 0) {\n              if (e1 === 0) {\n                continue;\n              }\n              t = -e0 / e1;\n              if (!(t >= 0 && t < tmax)) {\n                continue;\n              }\n              ///qba = pba + t * vba;\n              b2Vec2.AddVMulSV(pba, t, vba, qba);\n              ///qca = pca + t * vca;\n              b2Vec2.AddVMulSV(pca, t, vca, qca);\n              s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\n              if (!(s >= 0 && s <= 1)) {\n                continue;\n              }\n            } else {\n              const det = e1 * e1 - 4 * e0 * e2;\n              if (det < 0) {\n                continue;\n              }\n              const sqrtDet = b2Sqrt(det);\n              let t1 = (-e1 - sqrtDet) / (2 * e2);\n              let t2 = (-e1 + sqrtDet) / (2 * e2);\n              ///if (t1 > t2) b2Swap(t1, t2);\n              if (t1 > t2) {\n                const tmp = t1;\n                t1 = t2;\n                t2 = tmp;\n              }\n              t = t1;\n              ///qba = pba + t * vba;\n              b2Vec2.AddVMulSV(pba, t, vba, qba);\n              ///qca = pca + t * vca;\n              b2Vec2.AddVMulSV(pca, t, vca, qca);\n              ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\n              s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\n              if (!(t >= 0 && t < tmax && s >= 0 && s <= 1)) {\n                t = t2;\n                if (!(t >= 0 && t < tmax)) {\n                  continue;\n                }\n                ///qba = pba + t * vba;\n                b2Vec2.AddVMulSV(pba, t, vba, qba);\n                ///qca = pca + t * vca;\n                b2Vec2.AddVMulSV(pca, t, vca, qca);\n                ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\n                s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\n                if (!(s >= 0 && s <= 1)) {\n                  continue;\n                }\n              }\n            }\n            // Apply a force to particle c so that it will have the\n            // interpolated velocity at the collision point on line ab.\n            ///b2Vec2 dv = va + s * vba - vc;\n            const dv = s_dv;\n            dv.x = va.x + s * vba.x - vc.x;\n            dv.y = va.y + s * vba.y - vc.y;\n            ///b2Vec2 f = GetParticleMass() * dv;\n            const f = b2Vec2.MulSV(mass, dv, s_f);\n            if (cGroup && this.IsRigidGroup(cGroup)) {\n              // If c belongs to a rigid group, the force will be\n              // distributed in the group.\n              const mass = cGroup.GetMass();\n              const inertia = cGroup.GetInertia();\n              if (mass > 0) {\n                ///cGroup.m_linearVelocity += 1 / mass * f;\n                cGroup.m_linearVelocity.SelfMulAdd(1 / mass, f);\n              }\n              if (inertia > 0) {\n                ///cGroup.m_angularVelocity += b2Cross(pc - cGroup.GetCenter(), f) / inertia;\n                cGroup.m_angularVelocity +=\n                  b2Vec2.CrossVV(b2Vec2.SubVV(pc, cGroup.GetCenter(), b2Vec2.s_t0), f) / inertia;\n              }\n            } else {\n              ///m_velocityBuffer.data[c] += dv;\n              vel_data[c].SelfAdd(dv);\n            }\n            // Apply a reversed force to particle c after particle\n            // movement so that momentum will be preserved.\n            ///ParticleApplyForce(c, -step.inv_dt * f);\n            this.ParticleApplyForce(c, f.SelfMul(-step.inv_dt));\n          }\n        }\n      }\n    }\n  }\n\n  static readonly SolveBarrier_s_aabb = new b2AABB();\n  static readonly SolveBarrier_s_va = new b2Vec2();\n  static readonly SolveBarrier_s_vb = new b2Vec2();\n  static readonly SolveBarrier_s_pba = new b2Vec2();\n  static readonly SolveBarrier_s_vba = new b2Vec2();\n  static readonly SolveBarrier_s_vc = new b2Vec2();\n  static readonly SolveBarrier_s_pca = new b2Vec2();\n  static readonly SolveBarrier_s_vca = new b2Vec2();\n  static readonly SolveBarrier_s_qba = new b2Vec2();\n  static readonly SolveBarrier_s_qca = new b2Vec2();\n  static readonly SolveBarrier_s_dv = new b2Vec2();\n  static readonly SolveBarrier_s_f = new b2Vec2();\n\n  SolveStaticPressure(step: b2TimeStep): void {\n    this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);\n    const criticalPressure = this.GetCriticalPressure(step);\n    const pressurePerWeight = this.m_def.staticPressureStrength * criticalPressure;\n    const maxPressure = b2_maxParticlePressure * criticalPressure;\n    const relaxation = this.m_def.staticPressureRelaxation;\n    /// Compute pressure satisfying the modified Poisson equation:\n    ///   Sum_for_j((p_i - p_j) * w_ij) + relaxation * p_i =\n    ///   pressurePerWeight * (w_i - b2_minParticleWeight)\n    /// by iterating the calculation:\n    ///   p_i = (Sum_for_j(p_j * w_ij) + pressurePerWeight *\n    ///         (w_i - b2_minParticleWeight)) / (w_i + relaxation)\n    /// where\n    ///   p_i and p_j are static pressure of particle i and j\n    ///   w_ij is contact weight between particle i and j\n    ///   w_i is sum of contact weight of particle i\n    for (let t = 0; t < this.m_def.staticPressureIterations; t++) {\n      ///memset(m_accumulationBuffer, 0, sizeof(*m_accumulationBuffer) * m_count);\n      for (let i = 0; i < this.m_count; i++) {\n        this.m_accumulationBuffer[i] = 0;\n      }\n      for (let k = 0; k < this.m_contactBuffer.count; k++) {\n        const contact = this.m_contactBuffer.data[k];\n        if (contact.flags & b2ParticleFlag.b2_staticPressureParticle) {\n          const a = contact.indexA;\n          const b = contact.indexB;\n          const w = contact.weight;\n          this.m_accumulationBuffer[a] += w * this.m_staticPressureBuffer[b]; // a <- b\n          this.m_accumulationBuffer[b] += w * this.m_staticPressureBuffer[a]; // b <- a\n        }\n      }\n      for (let i = 0; i < this.m_count; i++) {\n        const w = this.m_weightBuffer[i];\n        if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\n          const wh = this.m_accumulationBuffer[i];\n          const h = (wh + pressurePerWeight * (w - b2_minParticleWeight)) / (w + relaxation);\n          this.m_staticPressureBuffer[i] = b2Clamp(h, 0.0, maxPressure);\n        } else {\n          this.m_staticPressureBuffer[i] = 0;\n        }\n      }\n    }\n  }\n\n  ComputeWeight(): void {\n    // calculates the sum of contact-weights for each particle\n    // that means dimensionless density\n    ///memset(m_weightBuffer, 0, sizeof(*m_weightBuffer) * m_count);\n    for (let k = 0; k < this.m_count; k++) {\n      this.m_weightBuffer[k] = 0;\n    }\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      const w = contact.weight;\n      this.m_weightBuffer[a] += w;\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const w = contact.weight;\n      this.m_weightBuffer[a] += w;\n      this.m_weightBuffer[b] += w;\n    }\n  }\n\n  SolvePressure(step: b2TimeStep): void {\n    const s_f = b2ParticleSystem.SolvePressure_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    // calculates pressure as a linear function of density\n    const criticalPressure = this.GetCriticalPressure(step);\n    const pressurePerWeight = this.m_def.pressureStrength * criticalPressure;\n    const maxPressure = b2_maxParticlePressure * criticalPressure;\n    for (let i = 0; i < this.m_count; i++) {\n      const w = this.m_weightBuffer[i];\n      const h = pressurePerWeight * b2Max(0.0, w - b2_minParticleWeight);\n      this.m_accumulationBuffer[i] = b2Min(h, maxPressure);\n    }\n    // ignores particles which have their own repulsive force\n    if (this.m_allParticleFlags & b2ParticleSystem.k_noPressureFlags) {\n      for (let i = 0; i < this.m_count; i++) {\n        if (this.m_flagsBuffer.data[i] & b2ParticleSystem.k_noPressureFlags) {\n          this.m_accumulationBuffer[i] = 0;\n        }\n      }\n    }\n    // static pressure\n    if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\n      !!B2_DEBUG && b2Assert(this.m_staticPressureBuffer !== null);\n      for (let i = 0; i < this.m_count; i++) {\n        if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\n          this.m_accumulationBuffer[i] += this.m_staticPressureBuffer[i];\n        }\n      }\n    }\n    // applies pressure between each particles in contact\n    const velocityPerPressure = step.dt / (this.m_def.density * this.m_particleDiameter);\n    const inv_mass = this.GetParticleInvMass();\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      const b = contact.body;\n      const w = contact.weight;\n      const m = contact.mass;\n      const n = contact.normal;\n      const p = pos_data[a];\n      const h = this.m_accumulationBuffer[a] + pressurePerWeight * w;\n      ///b2Vec2 f = velocityPerPressure * w * m * h * n;\n      const f = b2Vec2.MulSV(velocityPerPressure * w * m * h, n, s_f);\n      ///m_velocityBuffer.data[a] -= GetParticleInvMass() * f;\n      vel_data[a].SelfMulSub(inv_mass, f);\n      b.ApplyLinearImpulse(f, p, true);\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const w = contact.weight;\n      const n = contact.normal;\n      const h = this.m_accumulationBuffer[a] + this.m_accumulationBuffer[b];\n      ///b2Vec2 f = velocityPerPressure * w * h * n;\n      const f = b2Vec2.MulSV(velocityPerPressure * w * h, n, s_f);\n      ///m_velocityBuffer.data[a] -= f;\n      vel_data[a].SelfSub(f);\n      ///m_velocityBuffer.data[b] += f;\n      vel_data[b].SelfAdd(f);\n    }\n  }\n\n  static readonly SolvePressure_s_f = new b2Vec2();\n\n  SolveDamping(step: b2TimeStep): void {\n    const s_v = b2ParticleSystem.SolveDamping_s_v;\n    const s_f = b2ParticleSystem.SolveDamping_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    // reduces normal velocity of each contact\n    const linearDamping = this.m_def.dampingStrength;\n    const quadraticDamping = 1 / this.GetCriticalVelocity(step);\n    const inv_mass = this.GetParticleInvMass();\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      const b = contact.body;\n      const w = contact.weight;\n      const m = contact.mass;\n      const n = contact.normal;\n      const p = pos_data[a];\n      ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\n      const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\n      const vn = b2Vec2.DotVV(v, n);\n      if (vn < 0) {\n        const damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\n        ///b2Vec2 f = damping * m * vn * n;\n        const f = b2Vec2.MulSV(damping * m * vn, n, s_f);\n        ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\n        vel_data[a].SelfMulAdd(inv_mass, f);\n        ///b.ApplyLinearImpulse(-f, p, true);\n        b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n      }\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const w = contact.weight;\n      const n = contact.normal;\n      ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\n      const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n      const vn = b2Vec2.DotVV(v, n);\n      if (vn < 0) {\n        ///float32 damping = b2Max(linearDamping * w, b2Min(- quadraticDamping * vn, 0.5f));\n        const damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\n        ///b2Vec2 f = damping * vn * n;\n        const f = b2Vec2.MulSV(damping * vn, n, s_f);\n        ///this.m_velocityBuffer.data[a] += f;\n        vel_data[a].SelfAdd(f);\n        ///this.m_velocityBuffer.data[b] -= f;\n        vel_data[b].SelfSub(f);\n      }\n    }\n  }\n\n  static readonly SolveDamping_s_v = new b2Vec2();\n  static readonly SolveDamping_s_f = new b2Vec2();\n\n  SolveRigidDamping(): void {\n    const s_t0 = b2ParticleSystem.SolveRigidDamping_s_t0;\n    const s_t1 = b2ParticleSystem.SolveRigidDamping_s_t1;\n    const s_p = b2ParticleSystem.SolveRigidDamping_s_p;\n    const s_v = b2ParticleSystem.SolveRigidDamping_s_v;\n    const invMassA = [0.0],\n      invInertiaA = [0.0],\n      tangentDistanceA = [0.0]; // TODO: static\n    const invMassB = [0.0],\n      invInertiaB = [0.0],\n      tangentDistanceB = [0.0]; // TODO: static\n    // Apply impulse to rigid particle groups colliding with other objects\n    // to reduce relative velocity at the colliding point.\n    const pos_data = this.m_positionBuffer.data;\n    const damping = this.m_def.dampingStrength;\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      const aGroup = this.m_groupBuffer[a];\n      if (aGroup && this.IsRigidGroup(aGroup)) {\n        const b = contact.body;\n        const n = contact.normal;\n        const w = contact.weight;\n        const p = pos_data[a];\n        ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - aGroup.GetLinearVelocityFromWorldPoint(p);\n        const v = b2Vec2.SubVV(\n          b.GetLinearVelocityFromWorldPoint(p, s_t0),\n          aGroup.GetLinearVelocityFromWorldPoint(p, s_t1),\n          s_v,\n        );\n        const vn = b2Vec2.DotVV(v, n);\n        if (vn < 0) {\n          // The group's average velocity at particle position 'p' is pushing\n          // the particle into the body.\n          ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, true, aGroup, a, p, n);\n          this.InitDampingParameterWithRigidGroupOrParticle(\n            invMassA,\n            invInertiaA,\n            tangentDistanceA,\n            true,\n            aGroup,\n            a,\n            p,\n            n,\n          );\n          // Calculate b.m_I from functions of b2Body.\n          ///this.InitDampingParameter(&invMassB, &invInertiaB, &tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\n          this.InitDampingParameter(\n            invMassB,\n            invInertiaB,\n            tangentDistanceB,\n            b.GetMass(),\n            b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(),\n            b.GetWorldCenter(),\n            p,\n            n,\n          );\n          ///float32 f = damping * b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\n          const f =\n            damping *\n            b2Min(w, 1.0) *\n            this.ComputeDampingImpulse(\n              invMassA[0],\n              invInertiaA[0],\n              tangentDistanceA[0],\n              invMassB[0],\n              invInertiaB[0],\n              tangentDistanceB[0],\n              vn,\n            );\n          ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, f, n);\n          this.ApplyDamping(\n            invMassA[0],\n            invInertiaA[0],\n            tangentDistanceA[0],\n            true,\n            aGroup,\n            a,\n            f,\n            n,\n          );\n          ///b.ApplyLinearImpulse(-f * n, p, true);\n          b.ApplyLinearImpulse(b2Vec2.MulSV(-f, n, b2Vec2.s_t0), p, true);\n        }\n      }\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      const n = contact.normal;\n      const w = contact.weight;\n      const aGroup = this.m_groupBuffer[a];\n      const bGroup = this.m_groupBuffer[b];\n      const aRigid = this.IsRigidGroup(aGroup);\n      const bRigid = this.IsRigidGroup(bGroup);\n      if (aGroup !== bGroup && (aRigid || bRigid)) {\n        ///b2Vec2 p = 0.5f * (this.m_positionBuffer.data[a] + this.m_positionBuffer.data[b]);\n        const p = b2Vec2.MidVV(pos_data[a], pos_data[b], s_p);\n        ///b2Vec2 v = GetLinearVelocity(bGroup, b, p) - GetLinearVelocity(aGroup, a, p);\n        const v = b2Vec2.SubVV(\n          this.GetLinearVelocity(bGroup, b, p, s_t0),\n          this.GetLinearVelocity(aGroup, a, p, s_t1),\n          s_v,\n        );\n        const vn = b2Vec2.DotVV(v, n);\n        if (vn < 0) {\n          ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, aRigid, aGroup, a, p, n);\n          this.InitDampingParameterWithRigidGroupOrParticle(\n            invMassA,\n            invInertiaA,\n            tangentDistanceA,\n            aRigid,\n            aGroup,\n            a,\n            p,\n            n,\n          );\n          ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassB, &invInertiaB, &tangentDistanceB, bRigid, bGroup, b, p, n);\n          this.InitDampingParameterWithRigidGroupOrParticle(\n            invMassB,\n            invInertiaB,\n            tangentDistanceB,\n            bRigid,\n            bGroup,\n            b,\n            p,\n            n,\n          );\n          ///float32 f = damping * w * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\n          const f =\n            damping *\n            w *\n            this.ComputeDampingImpulse(\n              invMassA[0],\n              invInertiaA[0],\n              tangentDistanceA[0],\n              invMassB[0],\n              invInertiaB[0],\n              tangentDistanceB[0],\n              vn,\n            );\n          ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, f, n);\n          this.ApplyDamping(\n            invMassA[0],\n            invInertiaA[0],\n            tangentDistanceA[0],\n            aRigid,\n            aGroup,\n            a,\n            f,\n            n,\n          );\n          ///this.ApplyDamping(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, -f, n);\n          this.ApplyDamping(\n            invMassB[0],\n            invInertiaB[0],\n            tangentDistanceB[0],\n            bRigid,\n            bGroup,\n            b,\n            -f,\n            n,\n          );\n        }\n      }\n    }\n  }\n\n  static readonly SolveRigidDamping_s_t0 = new b2Vec2();\n  static readonly SolveRigidDamping_s_t1 = new b2Vec2();\n  static readonly SolveRigidDamping_s_p = new b2Vec2();\n  static readonly SolveRigidDamping_s_v = new b2Vec2();\n\n  SolveExtraDamping(): void {\n    const s_v = b2ParticleSystem.SolveExtraDamping_s_v;\n    const s_f = b2ParticleSystem.SolveExtraDamping_s_f;\n    const vel_data = this.m_velocityBuffer.data;\n    // Applies additional damping force between bodies and particles which can\n    // produce strong repulsive force. Applying damping force multiple times\n    // is effective in suppressing vibration.\n    const pos_data = this.m_positionBuffer.data;\n    const inv_mass = this.GetParticleInvMass();\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      if (this.m_flagsBuffer.data[a] & b2ParticleSystem.k_extraDampingFlags) {\n        const b = contact.body;\n        const m = contact.mass;\n        const n = contact.normal;\n        const p = pos_data[a];\n        ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\n        const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\n        ///float32 vn = b2Dot(v, n);\n        const vn = b2Vec2.DotVV(v, n);\n        if (vn < 0) {\n          ///b2Vec2 f = 0.5f * m * vn * n;\n          const f = b2Vec2.MulSV(0.5 * m * vn, n, s_f);\n          ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\n          vel_data[a].SelfMulAdd(inv_mass, f);\n          ///b.ApplyLinearImpulse(-f, p, true);\n          b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n        }\n      }\n    }\n  }\n\n  static readonly SolveExtraDamping_s_v = new b2Vec2();\n  static readonly SolveExtraDamping_s_f = new b2Vec2();\n\n  SolveWall(): void {\n    const vel_data = this.m_velocityBuffer.data;\n    for (let i = 0; i < this.m_count; i++) {\n      if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_wallParticle) {\n        vel_data[i].SetZero();\n      }\n    }\n  }\n\n  SolveRigid(step: b2TimeStep): void {\n    const s_position = b2ParticleSystem.SolveRigid_s_position;\n    const s_rotation = b2ParticleSystem.SolveRigid_s_rotation;\n    const s_transform = b2ParticleSystem.SolveRigid_s_transform;\n    const s_velocityTransform = b2ParticleSystem.SolveRigid_s_velocityTransform;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    for (let group = this.m_groupList; group; group = group.GetNext()) {\n      if (group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\n        group.UpdateStatistics();\n        ///b2Rot rotation(step.dt * group.m_angularVelocity);\n        const rotation = s_rotation;\n        rotation.SetAngle(step.dt * group.m_angularVelocity);\n        ///b2Transform transform(group.m_center + step.dt * group.m_linearVelocity - b2Mul(rotation, group.m_center), rotation);\n        const position = b2Vec2.AddVV(\n          group.m_center,\n          b2Vec2.SubVV(\n            b2Vec2.MulSV(step.dt, group.m_linearVelocity, b2Vec2.s_t0),\n            b2Rot.MulRV(rotation, group.m_center, b2Vec2.s_t1),\n            b2Vec2.s_t0,\n          ),\n          s_position,\n        );\n        const transform = s_transform;\n        transform.SetPositionRotation(position, rotation);\n        ///group.m_transform = b2Mul(transform, group.m_transform);\n        b2Transform.MulXX(transform, group.m_transform, group.m_transform);\n        const velocityTransform = s_velocityTransform;\n        velocityTransform.p.x = step.inv_dt * transform.p.x;\n        velocityTransform.p.y = step.inv_dt * transform.p.y;\n        velocityTransform.q.s = step.inv_dt * transform.q.s;\n        velocityTransform.q.c = step.inv_dt * (transform.q.c - 1);\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n          ///m_velocityBuffer.data[i] = b2Mul(velocityTransform, m_positionBuffer.data[i]);\n          b2Transform.MulXV(velocityTransform, pos_data[i], vel_data[i]);\n        }\n      }\n    }\n  }\n\n  static readonly SolveRigid_s_position = new b2Vec2();\n  static readonly SolveRigid_s_rotation = new b2Rot();\n  static readonly SolveRigid_s_transform = new b2Transform();\n  static readonly SolveRigid_s_velocityTransform = new b2Transform();\n\n  SolveElastic(step: b2TimeStep): void {\n    const s_pa = b2ParticleSystem.SolveElastic_s_pa;\n    const s_pb = b2ParticleSystem.SolveElastic_s_pb;\n    const s_pc = b2ParticleSystem.SolveElastic_s_pc;\n    const s_r = b2ParticleSystem.SolveElastic_s_r;\n    const s_t0 = b2ParticleSystem.SolveElastic_s_t0;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    const elasticStrength = step.inv_dt * this.m_def.elasticStrength;\n    for (let k = 0; k < this.m_triadBuffer.count; k++) {\n      const triad = this.m_triadBuffer.data[k];\n      if (triad.flags & b2ParticleFlag.b2_elasticParticle) {\n        const a = triad.indexA;\n        const b = triad.indexB;\n        const c = triad.indexC;\n        const oa = triad.pa;\n        const ob = triad.pb;\n        const oc = triad.pc;\n        ///b2Vec2 pa = m_positionBuffer.data[a];\n        const pa = s_pa.Copy(pos_data[a]);\n        ///b2Vec2 pb = m_positionBuffer.data[b];\n        const pb = s_pb.Copy(pos_data[b]);\n        ///b2Vec2 pc = m_positionBuffer.data[c];\n        const pc = s_pc.Copy(pos_data[c]);\n        const va = vel_data[a];\n        const vb = vel_data[b];\n        const vc = vel_data[c];\n        ///pa += step.dt * va;\n        pa.SelfMulAdd(step.dt, va);\n        ///pb += step.dt * vb;\n        pb.SelfMulAdd(step.dt, vb);\n        ///pc += step.dt * vc;\n        pc.SelfMulAdd(step.dt, vc);\n        ///b2Vec2 midPoint = (float32) 1 / 3 * (pa + pb + pc);\n        const midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\n        const midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\n        ///pa -= midPoint;\n        pa.x -= midPoint_x;\n        pa.y -= midPoint_y;\n        ///pb -= midPoint;\n        pb.x -= midPoint_x;\n        pb.y -= midPoint_y;\n        ///pc -= midPoint;\n        pc.x -= midPoint_x;\n        pc.y -= midPoint_y;\n        ///b2Rot r;\n        const r = s_r;\n        r.s = b2Vec2.CrossVV(oa, pa) + b2Vec2.CrossVV(ob, pb) + b2Vec2.CrossVV(oc, pc);\n        r.c = b2Vec2.DotVV(oa, pa) + b2Vec2.DotVV(ob, pb) + b2Vec2.DotVV(oc, pc);\n        const r2 = r.s * r.s + r.c * r.c;\n        let invR = b2InvSqrt(r2);\n        if (!isFinite(invR)) {\n          invR = 1.98177537e19;\n        }\n        r.s *= invR;\n        r.c *= invR;\n        ///r.angle = Math.atan2(r.s, r.c); // TODO: optimize\n        const strength = elasticStrength * triad.strength;\n        ///va += strength * (b2Mul(r, oa) - pa);\n        b2Rot.MulRV(r, oa, s_t0);\n        b2Vec2.SubVV(s_t0, pa, s_t0);\n        b2Vec2.MulSV(strength, s_t0, s_t0);\n        va.SelfAdd(s_t0);\n        ///vb += strength * (b2Mul(r, ob) - pb);\n        b2Rot.MulRV(r, ob, s_t0);\n        b2Vec2.SubVV(s_t0, pb, s_t0);\n        b2Vec2.MulSV(strength, s_t0, s_t0);\n        vb.SelfAdd(s_t0);\n        ///vc += strength * (b2Mul(r, oc) - pc);\n        b2Rot.MulRV(r, oc, s_t0);\n        b2Vec2.SubVV(s_t0, pc, s_t0);\n        b2Vec2.MulSV(strength, s_t0, s_t0);\n        vc.SelfAdd(s_t0);\n      }\n    }\n  }\n\n  static readonly SolveElastic_s_pa = new b2Vec2();\n  static readonly SolveElastic_s_pb = new b2Vec2();\n  static readonly SolveElastic_s_pc = new b2Vec2();\n  static readonly SolveElastic_s_r = new b2Rot();\n  static readonly SolveElastic_s_t0 = new b2Vec2();\n\n  SolveSpring(step: b2TimeStep): void {\n    const s_pa = b2ParticleSystem.SolveSpring_s_pa;\n    const s_pb = b2ParticleSystem.SolveSpring_s_pb;\n    const s_d = b2ParticleSystem.SolveSpring_s_d;\n    const s_f = b2ParticleSystem.SolveSpring_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    const springStrength = step.inv_dt * this.m_def.springStrength;\n    for (let k = 0; k < this.m_pairBuffer.count; k++) {\n      const pair = this.m_pairBuffer.data[k];\n      if (pair.flags & b2ParticleFlag.b2_springParticle) {\n        ///int32 a = pair.indexA;\n        const a = pair.indexA;\n        ///int32 b = pair.indexB;\n        const b = pair.indexB;\n        ///b2Vec2 pa = m_positionBuffer.data[a];\n        const pa = s_pa.Copy(pos_data[a]);\n        ///b2Vec2 pb = m_positionBuffer.data[b];\n        const pb = s_pb.Copy(pos_data[b]);\n        ///b2Vec2& va = m_velocityBuffer.data[a];\n        const va = vel_data[a];\n        ///b2Vec2& vb = m_velocityBuffer.data[b];\n        const vb = vel_data[b];\n        ///pa += step.dt * va;\n        pa.SelfMulAdd(step.dt, va);\n        ///pb += step.dt * vb;\n        pb.SelfMulAdd(step.dt, vb);\n        ///b2Vec2 d = pb - pa;\n        const d = b2Vec2.SubVV(pb, pa, s_d);\n        ///float32 r0 = pair.distance;\n        const r0 = pair.distance;\n        ///float32 r1 = d.Length();\n        const r1 = d.Length();\n        ///float32 strength = springStrength * pair.strength;\n        const strength = springStrength * pair.strength;\n        ///b2Vec2 f = strength * (r0 - r1) / r1 * d;\n        const f = b2Vec2.MulSV((strength * (r0 - r1)) / r1, d, s_f);\n        ///va -= f;\n        va.SelfSub(f);\n        ///vb += f;\n        vb.SelfAdd(f);\n      }\n    }\n  }\n\n  static readonly SolveSpring_s_pa = new b2Vec2();\n  static readonly SolveSpring_s_pb = new b2Vec2();\n  static readonly SolveSpring_s_d = new b2Vec2();\n  static readonly SolveSpring_s_f = new b2Vec2();\n\n  SolveTensile(step: b2TimeStep): void {\n    const s_weightedNormal = b2ParticleSystem.SolveTensile_s_weightedNormal;\n    const s_s = b2ParticleSystem.SolveTensile_s_s;\n    const s_f = b2ParticleSystem.SolveTensile_s_f;\n    const vel_data = this.m_velocityBuffer.data;\n    !!B2_DEBUG && b2Assert(this.m_accumulation2Buffer !== null);\n    for (let i = 0; i < this.m_count; i++) {\n      this.m_accumulation2Buffer[i] = new b2Vec2();\n      this.m_accumulation2Buffer[i].SetZero();\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\n        const a = contact.indexA;\n        const b = contact.indexB;\n        const w = contact.weight;\n        const n = contact.normal;\n        ///b2Vec2 weightedNormal = (1 - w) * w * n;\n        const weightedNormal = b2Vec2.MulSV((1 - w) * w, n, s_weightedNormal);\n        ///m_accumulation2Buffer[a] -= weightedNormal;\n        this.m_accumulation2Buffer[a].SelfSub(weightedNormal);\n        ///m_accumulation2Buffer[b] += weightedNormal;\n        this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);\n      }\n    }\n    const criticalVelocity = this.GetCriticalVelocity(step);\n    const pressureStrength = this.m_def.surfaceTensionPressureStrength * criticalVelocity;\n    const normalStrength = this.m_def.surfaceTensionNormalStrength * criticalVelocity;\n    const maxVelocityVariation = b2_maxParticleForce * criticalVelocity;\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\n        const a = contact.indexA;\n        const b = contact.indexB;\n        const w = contact.weight;\n        const n = contact.normal;\n        const h = this.m_weightBuffer[a] + this.m_weightBuffer[b];\n        ///b2Vec2 s = m_accumulation2Buffer[b] - m_accumulation2Buffer[a];\n        const s = b2Vec2.SubVV(this.m_accumulation2Buffer[b], this.m_accumulation2Buffer[a], s_s);\n        const fn =\n          b2Min(\n            pressureStrength * (h - 2) + normalStrength * b2Vec2.DotVV(s, n),\n            maxVelocityVariation,\n          ) * w;\n        ///b2Vec2 f = fn * n;\n        const f = b2Vec2.MulSV(fn, n, s_f);\n        ///m_velocityBuffer.data[a] -= f;\n        vel_data[a].SelfSub(f);\n        ///m_velocityBuffer.data[b] += f;\n        vel_data[b].SelfAdd(f);\n      }\n    }\n  }\n\n  static readonly SolveTensile_s_weightedNormal = new b2Vec2();\n  static readonly SolveTensile_s_s = new b2Vec2();\n  static readonly SolveTensile_s_f = new b2Vec2();\n\n  SolveViscous(): void {\n    const s_v = b2ParticleSystem.SolveViscous_s_v;\n    const s_f = b2ParticleSystem.SolveViscous_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    const viscousStrength = this.m_def.viscousStrength;\n    const inv_mass = this.GetParticleInvMass();\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_viscousParticle) {\n        const b = contact.body;\n        const w = contact.weight;\n        const m = contact.mass;\n        const p = pos_data[a];\n        ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\n        const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\n        ///b2Vec2 f = viscousStrength * m * w * v;\n        const f = b2Vec2.MulSV(viscousStrength * m * w, v, s_f);\n        ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\n        vel_data[a].SelfMulAdd(inv_mass, f);\n        ///b.ApplyLinearImpulse(-f, p, true);\n        b.ApplyLinearImpulse(f.SelfNeg(), p, true);\n      }\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      if (contact.flags & b2ParticleFlag.b2_viscousParticle) {\n        const a = contact.indexA;\n        const b = contact.indexB;\n        const w = contact.weight;\n        ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\n        const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\n        ///b2Vec2 f = viscousStrength * w * v;\n        const f = b2Vec2.MulSV(viscousStrength * w, v, s_f);\n        ///m_velocityBuffer.data[a] += f;\n        vel_data[a].SelfAdd(f);\n        ///m_velocityBuffer.data[b] -= f;\n        vel_data[b].SelfSub(f);\n      }\n    }\n  }\n\n  static readonly SolveViscous_s_v = new b2Vec2();\n  static readonly SolveViscous_s_f = new b2Vec2();\n\n  SolveRepulsive(step: b2TimeStep): void {\n    const s_f = b2ParticleSystem.SolveRepulsive_s_f;\n    const vel_data = this.m_velocityBuffer.data;\n    const repulsiveStrength = this.m_def.repulsiveStrength * this.GetCriticalVelocity(step);\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      if (contact.flags & b2ParticleFlag.b2_repulsiveParticle) {\n        const a = contact.indexA;\n        const b = contact.indexB;\n        if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\n          const w = contact.weight;\n          const n = contact.normal;\n          ///b2Vec2 f = repulsiveStrength * w * n;\n          const f = b2Vec2.MulSV(repulsiveStrength * w, n, s_f);\n          ///m_velocityBuffer.data[a] -= f;\n          vel_data[a].SelfSub(f);\n          ///m_velocityBuffer.data[b] += f;\n          vel_data[b].SelfAdd(f);\n        }\n      }\n    }\n  }\n\n  static readonly SolveRepulsive_s_f = new b2Vec2();\n\n  SolvePowder(step: b2TimeStep): void {\n    const s_f = b2ParticleSystem.SolvePowder_s_f;\n    const pos_data = this.m_positionBuffer.data;\n    const vel_data = this.m_velocityBuffer.data;\n    const powderStrength = this.m_def.powderStrength * this.GetCriticalVelocity(step);\n    const minWeight = 1.0 - b2_particleStride;\n    const inv_mass = this.GetParticleInvMass();\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      const a = contact.index;\n      if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_powderParticle) {\n        const w = contact.weight;\n        if (w > minWeight) {\n          const b = contact.body;\n          const m = contact.mass;\n          const p = pos_data[a];\n          const n = contact.normal;\n          const f = b2Vec2.MulSV(powderStrength * m * (w - minWeight), n, s_f);\n          vel_data[a].SelfMulSub(inv_mass, f);\n          b.ApplyLinearImpulse(f, p, true);\n        }\n      }\n    }\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      if (contact.flags & b2ParticleFlag.b2_powderParticle) {\n        const w = contact.weight;\n        if (w > minWeight) {\n          const a = contact.indexA;\n          const b = contact.indexB;\n          const n = contact.normal;\n          const f = b2Vec2.MulSV(powderStrength * (w - minWeight), n, s_f);\n          vel_data[a].SelfSub(f);\n          vel_data[b].SelfAdd(f);\n        }\n      }\n    }\n  }\n\n  static readonly SolvePowder_s_f = new b2Vec2();\n\n  SolveSolid(step: b2TimeStep): void {\n    const s_f = b2ParticleSystem.SolveSolid_s_f;\n    const vel_data = this.m_velocityBuffer.data;\n    // applies extra repulsive force from solid particle groups\n    this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\n    const ejectionStrength = step.inv_dt * this.m_def.ejectionStrength;\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      const a = contact.indexA;\n      const b = contact.indexB;\n      if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\n        const w = contact.weight;\n        const n = contact.normal;\n        const h = this.m_depthBuffer[a] + this.m_depthBuffer[b];\n        const f = b2Vec2.MulSV(ejectionStrength * h * w, n, s_f);\n        vel_data[a].SelfSub(f);\n        vel_data[b].SelfAdd(f);\n      }\n    }\n  }\n\n  static readonly SolveSolid_s_f = new b2Vec2();\n\n  SolveForce(step: b2TimeStep): void {\n    const vel_data = this.m_velocityBuffer.data;\n    const velocityPerForce = step.dt * this.GetParticleInvMass();\n    for (let i = 0; i < this.m_count; i++) {\n      ///m_velocityBuffer.data[i] += velocityPerForce * m_forceBuffer[i];\n      vel_data[i].SelfMulAdd(velocityPerForce, this.m_forceBuffer[i]);\n    }\n    this.m_hasForce = false;\n  }\n\n  SolveColorMixing(): void {\n    // mixes color between contacting particles\n    const colorMixing = 0.5 * this.m_def.colorMixingStrength;\n    if (colorMixing) {\n      for (let k = 0; k < this.m_contactBuffer.count; k++) {\n        const contact = this.m_contactBuffer.data[k];\n        const a = contact.indexA;\n        const b = contact.indexB;\n        if (\n          this.m_flagsBuffer.data[a] &\n          this.m_flagsBuffer.data[b] &\n          b2ParticleFlag.b2_colorMixingParticle\n        ) {\n          const colorA = this.m_colorBuffer.data[a];\n          const colorB = this.m_colorBuffer.data[b];\n          // Use the static method to ensure certain compilers inline\n          // this correctly.\n          b2Color.MixColors(colorA, colorB, colorMixing);\n        }\n      }\n    }\n  }\n\n  SolveZombie(): void {\n    // removes particles with zombie flag\n    let newCount = 0;\n    const newIndicesArray: number[] = []; // TODO: static\n    for (let i = 0; i < this.m_count; i++) {\n      newIndicesArray[i] = b2_invalidParticleIndex;\n    }\n    !!B2_DEBUG && b2Assert(newIndicesArray.length === this.m_count);\n    let allParticleFlags = 0;\n    for (let i = 0; i < this.m_count; i++) {\n      const flags = this.m_flagsBuffer.data[i];\n      if (flags & b2ParticleFlag.b2_zombieParticle) {\n        const destructionListener = this.m_world.m_destructionListener;\n        if (flags & b2ParticleFlag.b2_destructionListenerParticle && destructionListener) {\n          destructionListener.SayGoodbyeParticle(this, i);\n        }\n        // Destroy particle handle.\n        if (this.m_handleIndexBuffer.data) {\n          const handle = this.m_handleIndexBuffer.data[i];\n          if (handle) {\n            handle.index = b2_invalidParticleIndex;\n            this.m_handleIndexBuffer.data[i] = null;\n            ///m_handleAllocator.Free(handle);\n          }\n        }\n        newIndicesArray[i] = b2_invalidParticleIndex;\n      } else {\n        newIndicesArray[i] = newCount;\n        if (i !== newCount) {\n          // Update handle to reference new particle index.\n          if (this.m_handleIndexBuffer.data) {\n            const handle = this.m_handleIndexBuffer.data[i];\n            if (handle) {\n              handle.index = newCount;\n            }\n            this.m_handleIndexBuffer.data[newCount] = handle;\n          }\n          this.m_flagsBuffer.data[newCount] = this.m_flagsBuffer.data[i];\n          if (this.m_lastBodyContactStepBuffer.data) {\n            this.m_lastBodyContactStepBuffer.data[newCount] = this.m_lastBodyContactStepBuffer.data[\n              i\n            ];\n          }\n          if (this.m_bodyContactCountBuffer.data) {\n            this.m_bodyContactCountBuffer.data[newCount] = this.m_bodyContactCountBuffer.data[i];\n          }\n          if (this.m_consecutiveContactStepsBuffer.data) {\n            this.m_consecutiveContactStepsBuffer.data[\n              newCount\n            ] = this.m_consecutiveContactStepsBuffer.data[i];\n          }\n          this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[i]);\n          this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[i]);\n          this.m_groupBuffer[newCount] = this.m_groupBuffer[i];\n          if (this.m_hasForce) {\n            this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[i]);\n          }\n          if (this.m_staticPressureBuffer) {\n            this.m_staticPressureBuffer[newCount] = this.m_staticPressureBuffer[i];\n          }\n          if (this.m_depthBuffer) {\n            this.m_depthBuffer[newCount] = this.m_depthBuffer[i];\n          }\n          if (this.m_colorBuffer.data) {\n            this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[i]);\n          }\n          if (this.m_userDataBuffer.data) {\n            this.m_userDataBuffer.data[newCount] = this.m_userDataBuffer.data[i];\n          }\n          if (this.m_expirationTimeBuffer.data) {\n            this.m_expirationTimeBuffer.data[newCount] = this.m_expirationTimeBuffer.data[i];\n          }\n        }\n        newCount++;\n        allParticleFlags |= flags;\n      }\n    }\n\n    // predicate functions\n    const Test = {\n      ///static bool IsProxyInvalid(const Proxy& proxy)\n      IsProxyInvalid: (proxy: b2ParticleSystem_Proxy) => {\n        return proxy.index < 0;\n      },\n      ///static bool IsContactInvalid(const b2ParticleContact& contact)\n      IsContactInvalid: (contact: b2ParticleContact) => {\n        return contact.indexA < 0 || contact.indexB < 0;\n      },\n      ///static bool IsBodyContactInvalid(const b2ParticleBodyContact& contact)\n      IsBodyContactInvalid: (contact: b2ParticleBodyContact) => {\n        return contact.index < 0;\n      },\n      ///static bool IsPairInvalid(const b2ParticlePair& pair)\n      IsPairInvalid: (pair: b2ParticlePair) => {\n        return pair.indexA < 0 || pair.indexB < 0;\n      },\n      ///static bool IsTriadInvalid(const b2ParticleTriad& triad)\n      IsTriadInvalid: (triad: b2ParticleTriad) => {\n        return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0;\n      },\n    };\n\n    // update proxies\n    for (let k = 0; k < this.m_proxyBuffer.count; k++) {\n      const proxy = this.m_proxyBuffer.data[k];\n      proxy.index = newIndicesArray[proxy.index];\n    }\n    this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);\n\n    // update contacts\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      contact.indexA = newIndicesArray[contact.indexA];\n      contact.indexB = newIndicesArray[contact.indexB];\n    }\n    this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);\n\n    // update particle-body contacts\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      contact.index = newIndicesArray[contact.index];\n    }\n    this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);\n\n    // update pairs\n    for (let k = 0; k < this.m_pairBuffer.count; k++) {\n      const pair = this.m_pairBuffer.data[k];\n      pair.indexA = newIndicesArray[pair.indexA];\n      pair.indexB = newIndicesArray[pair.indexB];\n    }\n    this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);\n\n    // update triads\n    for (let k = 0; k < this.m_triadBuffer.count; k++) {\n      const triad = this.m_triadBuffer.data[k];\n      triad.indexA = newIndicesArray[triad.indexA];\n      triad.indexB = newIndicesArray[triad.indexB];\n      triad.indexC = newIndicesArray[triad.indexC];\n    }\n    this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);\n\n    // Update lifetime indices.\n    if (this.m_indexByExpirationTimeBuffer.data) {\n      let writeOffset = 0;\n      for (let readOffset = 0; readOffset < this.m_count; readOffset++) {\n        const newIndex = newIndicesArray[this.m_indexByExpirationTimeBuffer.data[readOffset]];\n        if (newIndex !== b2_invalidParticleIndex) {\n          this.m_indexByExpirationTimeBuffer.data[writeOffset++] = newIndex;\n        }\n      }\n    }\n\n    // update groups\n    for (let group = this.m_groupList; group; group = group.GetNext()) {\n      let firstIndex = newCount;\n      let lastIndex = 0;\n      let modified = false;\n      for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\n        const j = newIndicesArray[i];\n        if (j >= 0) {\n          firstIndex = b2MinInt(firstIndex, j);\n          lastIndex = b2MaxInt(lastIndex, j + 1);\n        } else {\n          modified = true;\n        }\n      }\n      if (firstIndex < lastIndex) {\n        group.m_firstIndex = firstIndex;\n        group.m_lastIndex = lastIndex;\n        if (modified) {\n          if (group.m_groupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\n            this.SetGroupFlags(\n              group,\n              group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth,\n            );\n          }\n        }\n      } else {\n        group.m_firstIndex = 0;\n        group.m_lastIndex = 0;\n        if (!(group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)) {\n          this.SetGroupFlags(\n            group,\n            group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed,\n          );\n        }\n      }\n    }\n\n    // update particle count\n    this.m_count = newCount;\n    this.m_allParticleFlags = allParticleFlags;\n    this.m_needsUpdateAllParticleFlags = false;\n\n    // destroy bodies with no particles\n    for (let group = this.m_groupList; group; ) {\n      const next = group.GetNext();\n      if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed) {\n        this.DestroyParticleGroup(group);\n      }\n      group = next;\n    }\n  }\n\n  /**\n   * Destroy all particles which have outlived their lifetimes set\n   * by SetParticleLifetime().\n   */\n  SolveLifetimes(step: b2TimeStep): void {\n    // Update the time elapsed.\n    this.m_timeElapsed = this.LifetimeToExpirationTime(step.dt);\n    // Get the floor (non-fractional component) of the elapsed time.\n    const quantizedTimeElapsed = this.GetQuantizedTimeElapsed();\n\n    const expirationTimes = this.m_expirationTimeBuffer.data;\n    const expirationTimeIndices = this.m_indexByExpirationTimeBuffer.data;\n    const particleCount = this.GetParticleCount();\n    // Sort the lifetime buffer if it's required.\n    if (this.m_expirationTimeBufferRequiresSorting) {\n      ///const ExpirationTimeComparator expirationTimeComparator(expirationTimes);\n      ///std::sort(expirationTimeIndices, expirationTimeIndices + particleCount, expirationTimeComparator);\n\n      /**\n       * Compare the lifetime of particleIndexA and particleIndexB\n       * returning true if the lifetime of A is greater than B for\n       * particles that will expire.  If either particle's lifetime is\n       * infinite (<= 0.0f) this function return true if the lifetime\n       * of A is lesser than B. When used with std::sort() this\n       * results in an array of particle indicies sorted in reverse\n       * order by particle lifetime.\n       *\n       * For example, the set of lifetimes\n       * (1.0, 0.7, 0.3, 0.0, -1.0, 2.0)\n       * would be sorted as\n       * (0.0, 1.0, -2.0, 1.0, 0.7, 0.3)\n       */\n      const ExpirationTimeComparator = (\n        particleIndexA: number,\n        particleIndexB: number,\n      ): boolean => {\n        const expirationTimeA = expirationTimes[particleIndexA];\n        const expirationTimeB = expirationTimes[particleIndexB];\n        const infiniteExpirationTimeA = expirationTimeA <= 0.0;\n        const infiniteExpirationTimeB = expirationTimeB <= 0.0;\n        return infiniteExpirationTimeA === infiniteExpirationTimeB\n          ? expirationTimeA > expirationTimeB\n          : infiniteExpirationTimeA;\n      };\n\n      std_sort(expirationTimeIndices, 0, particleCount, ExpirationTimeComparator);\n\n      this.m_expirationTimeBufferRequiresSorting = false;\n    }\n\n    // Destroy particles which have expired.\n    for (let i = particleCount - 1; i >= 0; --i) {\n      const particleIndex = expirationTimeIndices[i];\n      const expirationTime = expirationTimes[particleIndex];\n      // If no particles need to be destroyed, skip this.\n      if (quantizedTimeElapsed < expirationTime || expirationTime <= 0) {\n        break;\n      }\n      // Destroy this particle.\n      this.DestroyParticle(particleIndex);\n    }\n  }\n\n  RotateBuffer(start: number, mid: number, end: number): void {\n    // move the particles assigned to the given group toward the end of array\n    if (start === mid || mid === end) {\n      return;\n    }\n\n    !!B2_DEBUG && b2Assert(mid >= start && mid <= end);\n\n    ///std::rotate(m_flagsBuffer.data + start, m_flagsBuffer.data + mid, m_flagsBuffer.data + end);\n    std_rotate(this.m_flagsBuffer.data, start, mid, end);\n    if (this.m_lastBodyContactStepBuffer.data) {\n      ///std::rotate(m_lastBodyContactStepBuffer.data + start, m_lastBodyContactStepBuffer.data + mid, m_lastBodyContactStepBuffer.data + end);\n      std_rotate(this.m_lastBodyContactStepBuffer.data, start, mid, end);\n    }\n    if (this.m_bodyContactCountBuffer.data) {\n      ///std::rotate(m_bodyContactCountBuffer.data + start, m_bodyContactCountBuffer.data + mid, m_bodyContactCountBuffer.data + end);\n      std_rotate(this.m_bodyContactCountBuffer.data, start, mid, end);\n    }\n    if (this.m_consecutiveContactStepsBuffer.data) {\n      ///std::rotate(m_consecutiveContactStepsBuffer.data + start, m_consecutiveContactStepsBuffer.data + mid, m_consecutiveContactStepsBuffer.data + end);\n      std_rotate(this.m_consecutiveContactStepsBuffer.data, start, mid, end);\n    }\n    ///std::rotate(m_positionBuffer.data + start, m_positionBuffer.data + mid, m_positionBuffer.data + end);\n    std_rotate(this.m_positionBuffer.data, start, mid, end);\n    ///std::rotate(m_velocityBuffer.data + start, m_velocityBuffer.data + mid, m_velocityBuffer.data + end);\n    std_rotate(this.m_velocityBuffer.data, start, mid, end);\n    ///std::rotate(m_groupBuffer + start, m_groupBuffer + mid, m_groupBuffer + end);\n    std_rotate(this.m_groupBuffer, start, mid, end);\n    if (this.m_hasForce) {\n      ///std::rotate(m_forceBuffer + start, m_forceBuffer + mid, m_forceBuffer + end);\n      std_rotate(this.m_forceBuffer, start, mid, end);\n    }\n    if (this.m_staticPressureBuffer) {\n      ///std::rotate(m_staticPressureBuffer + start, m_staticPressureBuffer + mid, m_staticPressureBuffer + end);\n      std_rotate(this.m_staticPressureBuffer, start, mid, end);\n    }\n    if (this.m_depthBuffer) {\n      ///std::rotate(m_depthBuffer + start, m_depthBuffer + mid, m_depthBuffer + end);\n      std_rotate(this.m_depthBuffer, start, mid, end);\n    }\n    if (this.m_colorBuffer.data) {\n      ///std::rotate(m_colorBuffer.data + start, m_colorBuffer.data + mid, m_colorBuffer.data + end);\n      std_rotate(this.m_colorBuffer.data, start, mid, end);\n    }\n    if (this.m_userDataBuffer.data) {\n      ///std::rotate(m_userDataBuffer.data + start, m_userDataBuffer.data + mid, m_userDataBuffer.data + end);\n      std_rotate(this.m_userDataBuffer.data, start, mid, end);\n    }\n\n    // Update handle indices.\n    if (this.m_handleIndexBuffer.data) {\n      ///std::rotate(m_handleIndexBuffer.data + start, m_handleIndexBuffer.data + mid, m_handleIndexBuffer.data + end);\n      std_rotate(this.m_handleIndexBuffer.data, start, mid, end);\n      for (let i = start; i < end; ++i) {\n        const handle = this.m_handleIndexBuffer.data[i];\n        if (handle) {\n          handle.index = newIndices(handle.index, start, mid, end);\n        }\n      }\n    }\n\n    if (this.m_expirationTimeBuffer.data) {\n      ///std::rotate(m_expirationTimeBuffer.data + start, m_expirationTimeBuffer.data + mid, m_expirationTimeBuffer.data + end);\n      std_rotate(this.m_expirationTimeBuffer.data, start, mid, end);\n      // Update expiration time buffer indices.\n      const particleCount = this.GetParticleCount();\n      const indexByExpirationTime = this.m_indexByExpirationTimeBuffer.data;\n      for (let i = 0; i < particleCount; ++i) {\n        indexByExpirationTime[i] = newIndices(indexByExpirationTime[i], start, mid, end);\n      }\n    }\n\n    // update proxies\n    for (let k = 0; k < this.m_proxyBuffer.count; k++) {\n      const proxy = this.m_proxyBuffer.data[k];\n      proxy.index = newIndices(proxy.index, start, mid, end);\n    }\n\n    // update contacts\n    for (let k = 0; k < this.m_contactBuffer.count; k++) {\n      const contact = this.m_contactBuffer.data[k];\n      contact.indexA = newIndices(contact.indexA, start, mid, end);\n      contact.indexB = newIndices(contact.indexB, start, mid, end);\n    }\n\n    // update particle-body contacts\n    for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\n      const contact = this.m_bodyContactBuffer.data[k];\n      contact.index = newIndices(contact.index, start, mid, end);\n    }\n\n    // update pairs\n    for (let k = 0; k < this.m_pairBuffer.count; k++) {\n      const pair = this.m_pairBuffer.data[k];\n      pair.indexA = newIndices(pair.indexA, start, mid, end);\n      pair.indexB = newIndices(pair.indexB, start, mid, end);\n    }\n\n    // update triads\n    for (let k = 0; k < this.m_triadBuffer.count; k++) {\n      const triad = this.m_triadBuffer.data[k];\n      triad.indexA = newIndices(triad.indexA, start, mid, end);\n      triad.indexB = newIndices(triad.indexB, start, mid, end);\n      triad.indexC = newIndices(triad.indexC, start, mid, end);\n    }\n\n    // update groups\n    for (let group = this.m_groupList; group; group = group.GetNext()) {\n      group.m_firstIndex = newIndices(group.m_firstIndex, start, mid, end);\n      group.m_lastIndex = newIndices(group.m_lastIndex - 1, start, mid, end) + 1;\n    }\n  }\n\n  GetCriticalVelocity(step: b2TimeStep): number {\n    return this.m_particleDiameter * step.inv_dt;\n  }\n\n  GetCriticalVelocitySquared(step: b2TimeStep): number {\n    const velocity = this.GetCriticalVelocity(step);\n    return velocity * velocity;\n  }\n\n  GetCriticalPressure(step: b2TimeStep): number {\n    return this.m_def.density * this.GetCriticalVelocitySquared(step);\n  }\n\n  GetParticleStride(): number {\n    return b2_particleStride * this.m_particleDiameter;\n  }\n\n  GetParticleMass(): number {\n    const stride = this.GetParticleStride();\n    return this.m_def.density * stride * stride;\n  }\n\n  GetParticleInvMass(): number {\n    ///return 1.777777 * this.m_inverseDensity * this.m_inverseDiameter * this.m_inverseDiameter;\n    // mass = density * stride^2, so we take the inverse of this.\n    const inverseStride = this.m_inverseDiameter * (1.0 / b2_particleStride);\n    return this.m_inverseDensity * inverseStride * inverseStride;\n  }\n\n  /**\n   * Get the world's contact filter if any particles with the\n   * b2_contactFilterParticle flag are present in the system.\n   */\n  GetFixtureContactFilter(): b2ContactFilter | null {\n    return this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactFilterParticle\n      ? this.m_world.m_contactManager.m_contactFilter\n      : null;\n  }\n\n  /**\n   * Get the world's contact filter if any particles with the\n   * b2_particleContactFilterParticle flag are present in the\n   * system.\n   */\n  GetParticleContactFilter(): b2ContactFilter | null {\n    return this.m_allParticleFlags & b2ParticleFlag.b2_particleContactFilterParticle\n      ? this.m_world.m_contactManager.m_contactFilter\n      : null;\n  }\n\n  /**\n   * Get the world's contact listener if any particles with the\n   * b2_fixtureContactListenerParticle flag are present in the\n   * system.\n   */\n  GetFixtureContactListener(): b2ContactListener | null {\n    return this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactListenerParticle\n      ? this.m_world.m_contactManager.m_contactListener\n      : null;\n  }\n\n  /**\n   * Get the world's contact listener if any particles with the\n   * b2_particleContactListenerParticle flag are present in the\n   * system.\n   */\n  GetParticleContactListener(): b2ContactListener | null {\n    return this.m_allParticleFlags & b2ParticleFlag.b2_particleContactListenerParticle\n      ? this.m_world.m_contactManager.m_contactListener\n      : null;\n  }\n\n  SetUserOverridableBuffer<T>(buffer: b2ParticleSystem_UserOverridableBuffer<T>, data: T[]): void {\n    buffer.data = data;\n    buffer.userSuppliedCapacity = data.length;\n  }\n\n  SetGroupFlags(group: b2ParticleGroup, newFlags: b2ParticleGroupFlag): void {\n    const oldFlags = group.m_groupFlags;\n    if ((oldFlags ^ newFlags) & b2ParticleGroupFlag.b2_solidParticleGroup) {\n      // If the b2_solidParticleGroup flag changed schedule depth update.\n      newFlags |= b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth;\n    }\n    if (oldFlags & ~newFlags) {\n      // If any flags might be removed\n      this.m_needsUpdateAllGroupFlags = true;\n    }\n    if (~this.m_allGroupFlags & newFlags) {\n      // If any flags were added\n      if (newFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\n        this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\n      }\n      this.m_allGroupFlags |= newFlags;\n    }\n    group.m_groupFlags = newFlags;\n  }\n\n  static BodyContactCompare(lhs: b2ParticleBodyContact, rhs: b2ParticleBodyContact): boolean {\n    if (lhs.index === rhs.index) {\n      // Subsort by weight, decreasing.\n      return lhs.weight > rhs.weight;\n    }\n    return lhs.index < rhs.index;\n  }\n\n  RemoveSpuriousBodyContacts(): void {\n    // At this point we have a list of contact candidates based on AABB\n    // overlap.The AABB query that  generated this returns all collidable\n    // fixtures overlapping particle bounding boxes.  This breaks down around\n    // vertices where two shapes intersect, such as a \"ground\" surface made\n    // of multiple b2PolygonShapes; it potentially applies a lot of spurious\n    // impulses from normals that should not actually contribute.  See the\n    // Ramp example in Testbed.\n    //\n    // To correct for this, we apply this algorithm:\n    //   * sort contacts by particle and subsort by weight (nearest to farthest)\n    //   * for each contact per particle:\n    //      - project a point at the contact distance along the inverse of the\n    //        contact normal\n    //      - if this intersects the fixture that generated the contact, apply\n    //         it, otherwise discard as impossible\n    //      - repeat for up to n nearest contacts, currently we get good results\n    //        from n=3.\n    ///std::sort(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleSystem::BodyContactCompare);\n    std_sort(\n      this.m_bodyContactBuffer.data,\n      0,\n      this.m_bodyContactBuffer.count,\n      b2ParticleSystem.BodyContactCompare,\n    );\n\n    ///int32 discarded = 0;\n    ///std::remove_if(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleBodyContactRemovePredicate(this, &discarded));\n    ///\n    ///m_bodyContactBuffer.SetCount(m_bodyContactBuffer.GetCount() - discarded);\n\n    const s_n = b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;\n    const s_pos = b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;\n    const s_normal = b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;\n\n    // Max number of contacts processed per particle, from nearest to farthest.\n    // This must be at least 2 for correctness with concave shapes; 3 was\n    // experimentally arrived at as looking reasonable.\n    const k_maxContactsPerPoint = 3;\n    // Index of last particle processed.\n    let lastIndex = -1;\n    // Number of contacts processed for the current particle.\n    let currentContacts = 0;\n    // Output the number of discarded contacts.\n    // let discarded = 0;\n    const b2ParticleBodyContactRemovePredicate = (contact: b2ParticleBodyContact): boolean => {\n      // This implements the selection criteria described in\n      // RemoveSpuriousBodyContacts().\n      // This functor is iterating through a list of Body contacts per\n      // Particle, ordered from near to far.  For up to the maximum number of\n      // contacts we allow per point per step, we verify that the contact\n      // normal of the Body that genenerated the contact makes physical sense\n      // by projecting a point back along that normal and seeing if it\n      // intersects the fixture generating the contact.\n\n      if (contact.index !== lastIndex) {\n        currentContacts = 0;\n        lastIndex = contact.index;\n      }\n\n      if (currentContacts++ > k_maxContactsPerPoint) {\n        // ++discarded;\n        return true;\n      }\n\n      // Project along inverse normal (as returned in the contact) to get the\n      // point to check.\n      ///b2Vec2 n = contact.normal;\n      const n = s_n.Copy(contact.normal);\n      // weight is 1-(inv(diameter) * distance)\n      ///n *= system.m_particleDiameter * (1 - contact.weight);\n      n.SelfMul(this.m_particleDiameter * (1 - contact.weight));\n      ///b2Vec2 pos = system.m_positionBuffer.data[contact.index] + n;\n      const pos = b2Vec2.AddVV(this.m_positionBuffer.data[contact.index], n, s_pos);\n\n      // pos is now a point projected back along the contact normal to the\n      // contact distance. If the surface makes sense for a contact, pos will\n      // now lie on or in the fixture generating\n      if (!contact.fixture.TestPoint(pos)) {\n        const childCount = contact.fixture.GetShape().GetChildCount();\n        for (let childIndex = 0; childIndex < childCount; childIndex++) {\n          const normal = s_normal;\n          const distance = contact.fixture.ComputeDistance(pos, normal, childIndex);\n          if (distance < b2_linearSlop) {\n            return false;\n          }\n        }\n        // ++discarded;\n        return true;\n      }\n\n      return false;\n    };\n    this.m_bodyContactBuffer.count = std_remove_if(\n      this.m_bodyContactBuffer.data,\n      b2ParticleBodyContactRemovePredicate,\n      this.m_bodyContactBuffer.count,\n    );\n  }\n\n  private static RemoveSpuriousBodyContacts_s_n = new b2Vec2();\n  private static RemoveSpuriousBodyContacts_s_pos = new b2Vec2();\n  private static RemoveSpuriousBodyContacts_s_normal = new b2Vec2();\n\n  DetectStuckParticle(particle: number): void {\n    // Detect stuck particles\n    //\n    // The basic algorithm is to allow the user to specify an optional\n    // threshold where we detect whenever a particle is contacting\n    // more than one fixture for more than threshold consecutive\n    // steps. This is considered to be \"stuck\", and these are put\n    // in a list the user can query per step, if enabled, to deal with\n    // such particles.\n\n    if (this.m_stuckThreshold <= 0) {\n      return;\n    }\n\n    // Get the state variables for this particle.\n    ///int32 * const consecutiveCount = &m_consecutiveContactStepsBuffer.data[particle];\n    ///int32 * const lastStep = &m_lastBodyContactStepBuffer.data[particle];\n    ///int32 * const bodyCount = &m_bodyContactCountBuffer.data[particle];\n\n    // This is only called when there is a body contact for this particle.\n    ///++(*bodyCount);\n    ++this.m_bodyContactCountBuffer.data[particle];\n\n    // We want to only trigger detection once per step, the first time we\n    // contact more than one fixture in a step for a given particle.\n    ///if (*bodyCount === 2)\n    if (this.m_bodyContactCountBuffer.data[particle] === 2) {\n      ///++(*consecutiveCount);\n      ++this.m_consecutiveContactStepsBuffer.data[particle];\n      ///if (*consecutiveCount > m_stuckThreshold)\n      if (this.m_consecutiveContactStepsBuffer.data[particle] > this.m_stuckThreshold) {\n        ///int32& newStuckParticle = m_stuckParticleBuffer.Append();\n        ///newStuckParticle = particle;\n        this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = particle;\n      }\n    }\n    ///*lastStep = m_timestamp;\n    this.m_lastBodyContactStepBuffer.data[particle] = this.m_timestamp;\n  }\n\n  /**\n   * Determine whether a particle index is valid.\n   */\n  ValidateParticleIndex(index: number): boolean {\n    return index >= 0 && index < this.GetParticleCount() && index !== b2_invalidParticleIndex;\n  }\n\n  /**\n   * Get the time elapsed in\n   * b2ParticleSystemDef::lifetimeGranularity.\n   */\n  GetQuantizedTimeElapsed(): number {\n    ///return (int32)(m_timeElapsed >> 32);\n    return Math.floor(this.m_timeElapsed / 0x100000000);\n  }\n\n  /**\n   * Convert a lifetime in seconds to an expiration time.\n   */\n  LifetimeToExpirationTime(lifetime: number): number {\n    ///return m_timeElapsed + (int64)((lifetime / m_def.lifetimeGranularity) * (float32)(1LL << 32));\n    return (\n      this.m_timeElapsed + Math.floor((lifetime / this.m_def.lifetimeGranularity) * 0x100000000)\n    );\n  }\n\n  ForceCanBeApplied(flags: b2ParticleFlag): boolean {\n    return !(flags & b2ParticleFlag.b2_wallParticle);\n  }\n\n  PrepareForceBuffer(): void {\n    if (!this.m_hasForce) {\n      ///memset(m_forceBuffer, 0, sizeof(*m_forceBuffer) * m_count);\n      for (let i = 0; i < this.m_count; i++) {\n        this.m_forceBuffer[i].SetZero();\n      }\n      this.m_hasForce = true;\n    }\n  }\n\n  IsRigidGroup(group: b2ParticleGroup | null): boolean {\n    return group !== null && (group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0;\n  }\n\n  GetLinearVelocity(\n    group: b2ParticleGroup | null,\n    particleIndex: number,\n    point: b2Vec2,\n    out: b2Vec2,\n  ): b2Vec2 {\n    if (group && this.IsRigidGroup(group)) {\n      return group.GetLinearVelocityFromWorldPoint(point, out);\n    } else {\n      ///return m_velocityBuffer.data[particleIndex];\n      return out.Copy(this.m_velocityBuffer.data[particleIndex]);\n    }\n  }\n\n  InitDampingParameter(\n    invMass: number[],\n    invInertia: number[],\n    tangentDistance: number[],\n    mass: number,\n    inertia: number,\n    center: b2Vec2,\n    point: b2Vec2,\n    normal: b2Vec2,\n  ): void {\n    ///*invMass = mass > 0 ? 1 / mass : 0;\n    invMass[0] = mass > 0 ? 1 / mass : 0;\n    ///*invInertia = inertia > 0 ? 1 / inertia : 0;\n    invInertia[0] = inertia > 0 ? 1 / inertia : 0;\n    ///*tangentDistance = b2Cross(point - center, normal);\n    tangentDistance[0] = b2Vec2.CrossVV(b2Vec2.SubVV(point, center, b2Vec2.s_t0), normal);\n  }\n\n  InitDampingParameterWithRigidGroupOrParticle(\n    invMass: number[],\n    invInertia: number[],\n    tangentDistance: number[],\n    isRigidGroup: boolean,\n    group: b2ParticleGroup | null,\n    particleIndex: number,\n    point: b2Vec2,\n    normal: b2Vec2,\n  ): void {\n    if (group && isRigidGroup) {\n      this.InitDampingParameter(\n        invMass,\n        invInertia,\n        tangentDistance,\n        group.GetMass(),\n        group.GetInertia(),\n        group.GetCenter(),\n        point,\n        normal,\n      );\n    } else {\n      const flags = this.m_flagsBuffer.data[particleIndex];\n      this.InitDampingParameter(\n        invMass,\n        invInertia,\n        tangentDistance,\n        flags & b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(),\n        0,\n        point,\n        point,\n        normal,\n      );\n    }\n  }\n\n  ComputeDampingImpulse(\n    invMassA: number,\n    invInertiaA: number,\n    tangentDistanceA: number,\n    invMassB: number,\n    invInertiaB: number,\n    tangentDistanceB: number,\n    normalVelocity: number,\n  ): number {\n    const invMass =\n      invMassA +\n      invInertiaA * tangentDistanceA * tangentDistanceA +\n      invMassB +\n      invInertiaB * tangentDistanceB * tangentDistanceB;\n    return invMass > 0 ? normalVelocity / invMass : 0;\n  }\n\n  ApplyDamping(\n    invMass: number,\n    invInertia: number,\n    tangentDistance: number,\n    isRigidGroup: boolean,\n    group: b2ParticleGroup | null,\n    particleIndex: number,\n    impulse: number,\n    normal: b2Vec2,\n  ): void {\n    if (group && isRigidGroup) {\n      ///group.m_linearVelocity += impulse * invMass * normal;\n      group.m_linearVelocity.SelfMulAdd(impulse * invMass, normal);\n      ///group.m_angularVelocity += impulse * tangentDistance * invInertia;\n      group.m_angularVelocity += impulse * tangentDistance * invInertia;\n    } else {\n      ///m_velocityBuffer.data[particleIndex] += impulse * invMass * normal;\n      this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse * invMass, normal);\n    }\n  }\n}\n\nexport class b2ParticleSystem_UserOverridableBuffer<T> {\n  userSuppliedCapacity = 0;\n  _data: T[] | null = null;\n  get data(): T[] {\n    return this._data as T[];\n  } // HACK: may return null\n  set data(value: T[]) {\n    this._data = value;\n  }\n}\n\nexport class b2ParticleSystem_Proxy {\n  index: number = b2_invalidParticleIndex;\n  tag = 0;\n\n  static CompareProxyProxy(a: b2ParticleSystem_Proxy, b: b2ParticleSystem_Proxy): boolean {\n    return a.tag < b.tag;\n  }\n\n  static CompareTagProxy(a: number, b: b2ParticleSystem_Proxy): boolean {\n    return a < b.tag;\n  }\n\n  static CompareProxyTag(a: b2ParticleSystem_Proxy, b: number): boolean {\n    return a.tag < b;\n  }\n}\n\nexport class b2ParticleSystem_InsideBoundsEnumerator {\n  m_system: b2ParticleSystem;\n  m_xLower: number;\n  m_xUpper: number;\n  m_yLower: number;\n  m_yUpper: number;\n  m_first: number;\n  m_last: number;\n\n  /**\n   * InsideBoundsEnumerator enumerates all particles inside the\n   * given bounds.\n   *\n   * Construct an enumerator with bounds of tags and a range of\n   * proxies.\n   */\n  constructor(system: b2ParticleSystem, lower: number, upper: number, first: number, last: number) {\n    this.m_system = system;\n    this.m_xLower = (lower & b2ParticleSystem.xMask) >>> 0;\n    this.m_xUpper = (upper & b2ParticleSystem.xMask) >>> 0;\n    this.m_yLower = (lower & b2ParticleSystem.yMask) >>> 0;\n    this.m_yUpper = (upper & b2ParticleSystem.yMask) >>> 0;\n    this.m_first = first;\n    this.m_last = last;\n    !!B2_DEBUG && b2Assert(this.m_first <= this.m_last);\n  }\n\n  /**\n   * Get index of the next particle. Returns\n   * b2_invalidParticleIndex if there are no more particles.\n   */\n  GetNext(): number {\n    while (this.m_first < this.m_last) {\n      const xTag =\n        (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.xMask) >>> 0;\n      if (!!B2_ASSERT && !!B2_DEBUG) {\n        // B2_ASSERT -> B2_ASSERT_ENABLED ??\n        const yTag =\n          (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.yMask) >>> 0;\n        b2Assert(yTag >= this.m_yLower);\n        b2Assert(yTag <= this.m_yUpper);\n      }\n      if (xTag >= this.m_xLower && xTag <= this.m_xUpper) {\n        return this.m_system.m_proxyBuffer.data[this.m_first++].index;\n      }\n      this.m_first++;\n    }\n    return b2_invalidParticleIndex;\n  }\n}\n\nexport class b2ParticleSystem_ParticleListNode {\n  /**\n   * The head of the list.\n   */\n  list!: b2ParticleSystem_ParticleListNode;\n  /**\n   * The next node in the list.\n   */\n  next: b2ParticleSystem_ParticleListNode | null = null;\n  /**\n   * Number of entries in the list. Valid only for the node at the\n   * head of the list.\n   */\n  count = 0;\n  /**\n   * Particle index.\n   */\n  index = 0;\n}\n\n/**\n * @constructor\n */\nexport class b2ParticleSystem_FixedSetAllocator<T> {\n  Allocate(itemSize: number, count: number): number {\n    // TODO\n    return count;\n  }\n\n  Clear(): void {\n    // TODO\n  }\n\n  GetCount(): number {\n    // TODO\n    return 0;\n  }\n\n  Invalidate(itemIndex: number): void {\n    // TODO\n  }\n\n  GetValidBuffer(): boolean[] {\n    // TODO\n    return [];\n  }\n\n  GetBuffer(): T[] {\n    // TODO\n    return [];\n  }\n\n  SetCount(count: number): void {\n    // TODO\n  }\n}\n\nexport class b2ParticleSystem_FixtureParticle {\n  first: b2Fixture;\n  second: number = b2_invalidParticleIndex;\n\n  constructor(fixture: b2Fixture, particle: number) {\n    this.first = fixture;\n    this.second = particle;\n  }\n}\n\nexport class b2ParticleSystem_FixtureParticleSet extends b2ParticleSystem_FixedSetAllocator<\n  b2ParticleSystem_FixtureParticle\n> {\n  Initialize(\n    bodyContactBuffer: b2GrowableBuffer<b2ParticleBodyContact>,\n    flagsBuffer: b2ParticleSystem_UserOverridableBuffer<b2ParticleFlag>,\n  ): void {\n    // TODO\n  }\n\n  Find(pair: b2ParticleSystem_FixtureParticle): number {\n    // TODO\n    return b2_invalidParticleIndex;\n  }\n}\n\nexport class b2ParticleSystem_ParticlePair {\n  first: number = b2_invalidParticleIndex;\n  second: number = b2_invalidParticleIndex;\n\n  constructor(particleA: number, particleB: number) {\n    this.first = particleA;\n    this.second = particleB;\n  }\n}\n\nexport class b2ParticlePairSet extends b2ParticleSystem_FixedSetAllocator<\n  b2ParticleSystem_ParticlePair\n> {\n  Initialize(\n    contactBuffer: b2GrowableBuffer<b2ParticleContact>,\n    flagsBuffer: b2ParticleSystem_UserOverridableBuffer<b2ParticleFlag>,\n  ): void {\n    // TODO\n  }\n\n  Find(pair: b2ParticleSystem_ParticlePair): number {\n    // TODO\n    return b2_invalidParticleIndex;\n  }\n}\n\nexport class b2ParticleSystem_ConnectionFilter {\n  /**\n   * Is the particle necessary for connection?\n   * A pair or a triad should contain at least one 'necessary'\n   * particle.\n   */\n  IsNecessary(index: number): boolean {\n    return true;\n  }\n\n  /**\n   * An additional condition for creating a pair.\n   */\n  ShouldCreatePair(a: number, b: number): boolean {\n    return true;\n  }\n\n  /**\n   * An additional condition for creating a triad.\n   */\n  ShouldCreateTriad(a: number, b: number, c: number): boolean {\n    return true;\n  }\n}\n\nexport class b2ParticleSystem_DestroyParticlesInShapeCallback extends b2QueryCallback {\n  m_system: b2ParticleSystem;\n  m_shape: b2Shape;\n  m_xf: b2Transform;\n  m_callDestructionListener = false;\n  m_destroyed = 0;\n\n  constructor(\n    system: b2ParticleSystem,\n    shape: b2Shape,\n    xf: b2Transform,\n    callDestructionListener: boolean,\n  ) {\n    super();\n    this.m_system = system;\n    this.m_shape = shape;\n    this.m_xf = xf;\n    this.m_callDestructionListener = callDestructionListener;\n    this.m_destroyed = 0;\n  }\n\n  ReportFixture(fixture: b2Fixture): boolean {\n    return false;\n  }\n\n  ReportParticle(particleSystem: b2ParticleSystem, index: number): boolean {\n    if (particleSystem !== this.m_system) {\n      return false;\n    }\n    !!B2_DEBUG && b2Assert(index >= 0 && index < this.m_system.m_count);\n    if (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[index])) {\n      this.m_system.DestroyParticle(index, this.m_callDestructionListener);\n      this.m_destroyed++;\n    }\n    return true;\n  }\n\n  Destroyed(): number {\n    return this.m_destroyed;\n  }\n}\n\nexport class b2ParticleSystem_JoinParticleGroupsFilter extends b2ParticleSystem_ConnectionFilter {\n  m_threshold = 0;\n\n  constructor(threshold: number) {\n    super();\n    this.m_threshold = threshold;\n  }\n\n  /**\n   * An additional condition for creating a pair.\n   */\n  ShouldCreatePair(a: number, b: number): boolean {\n    return (\n      (a < this.m_threshold && this.m_threshold <= b) ||\n      (b < this.m_threshold && this.m_threshold <= a)\n    );\n  }\n\n  /**\n   * An additional condition for creating a triad.\n   */\n  ShouldCreateTriad(a: number, b: number, c: number): boolean {\n    return (\n      (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) &&\n      (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c)\n    );\n  }\n}\n\nexport class b2ParticleSystem_CompositeShape extends b2Shape {\n  constructor(shapes: b2Shape[], shapeCount?: number) {\n    super(b2ShapeType.e_unknown, 0.0);\n    this.m_shapes = shapes;\n    this.m_shapeCount = shapeCount ?? shapes.length;\n  }\n\n  m_shapes: b2Shape[];\n  m_shapeCount = 0;\n\n  Clone(): b2Shape {\n    !!B2_DEBUG && b2Assert(false);\n    throw new Error();\n  }\n\n  GetChildCount(): number {\n    return 1;\n  }\n\n  /**\n   * @see b2Shape::TestPoint\n   */\n  TestPoint(xf: b2Transform, p: XY): boolean {\n    for (let i = 0; i < this.m_shapeCount; i++) {\n      if (this.m_shapes[i].TestPoint(xf, p)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @see b2Shape::ComputeDistance\n   */\n  ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    !!B2_DEBUG && b2Assert(false);\n    return 0;\n  }\n\n  /**\n   * Implement b2Shape.\n   */\n  RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    xf: b2Transform,\n    childIndex: number,\n  ): boolean {\n    !!B2_DEBUG && b2Assert(false);\n    return false;\n  }\n\n  /**\n   * @see b2Shape::ComputeAABB\n   */\n  ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void {\n    const s_subaabb = new b2AABB();\n    aabb.lowerBound.x = +b2_maxFloat;\n    aabb.lowerBound.y = +b2_maxFloat;\n    aabb.upperBound.x = -b2_maxFloat;\n    aabb.upperBound.y = -b2_maxFloat;\n    !!B2_DEBUG && b2Assert(childIndex === 0);\n    for (let i = 0; i < this.m_shapeCount; i++) {\n      const childCount = this.m_shapes[i].GetChildCount();\n      for (let j = 0; j < childCount; j++) {\n        const subaabb = s_subaabb;\n        this.m_shapes[i].ComputeAABB(subaabb, xf, j);\n        aabb.Combine1(subaabb);\n      }\n    }\n  }\n\n  /**\n   * @see b2Shape::ComputeMass\n   */\n  ComputeMass(massData: b2MassData, density: number): void {\n    !!B2_DEBUG && b2Assert(false);\n  }\n\n  SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void {\n    !!B2_DEBUG && b2Assert(false);\n  }\n\n  ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number {\n    !!B2_DEBUG && b2Assert(false);\n    return 0;\n  }\n}\n\nexport class b2ParticleSystem_ReactiveFilter extends b2ParticleSystem_ConnectionFilter {\n  m_flagsBuffer: b2ParticleSystem_UserOverridableBuffer<b2ParticleFlag>;\n\n  constructor(flagsBuffer: b2ParticleSystem_UserOverridableBuffer<b2ParticleFlag>) {\n    super();\n    this.m_flagsBuffer = flagsBuffer;\n  }\n\n  IsNecessary(index: number): boolean {\n    return (this.m_flagsBuffer.data[index] & b2ParticleFlag.b2_reactiveParticle) !== 0;\n  }\n}\n\nexport class b2ParticleSystem_UpdateBodyContactsCallback extends b2FixtureParticleQueryCallback {\n  m_contactFilter: b2ContactFilter | null = null;\n\n  constructor(system: b2ParticleSystem, contactFilter: b2ContactFilter | null = null) {\n    super(system); // base class constructor\n    this.m_contactFilter = contactFilter;\n  }\n\n  ShouldCollideFixtureParticle(\n    fixture: b2Fixture,\n    particleSystem: b2ParticleSystem,\n    particleIndex: number,\n  ): boolean {\n    // Call the contact filter if it's set, to determine whether to\n    // filter this contact.  Returns true if contact calculations should\n    // be performed, false otherwise.\n    if (this.m_contactFilter) {\n      const flags = this.m_system.GetFlagsBuffer();\n      if (flags[particleIndex] & b2ParticleFlag.b2_fixtureContactFilterParticle) {\n        return this.m_contactFilter.ShouldCollideFixtureParticle(\n          fixture,\n          this.m_system,\n          particleIndex,\n        );\n      }\n    }\n    return true;\n  }\n\n  ReportFixtureAndParticle(fixture: b2Fixture, childIndex: number, a: number): void {\n    const s_n = b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;\n    const s_rp = b2ParticleSystem_UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;\n    const ap = this.m_system.m_positionBuffer.data[a];\n    const n = s_n;\n    const d = fixture.ComputeDistance(ap, n, childIndex);\n    if (\n      d < this.m_system.m_particleDiameter &&\n      this.ShouldCollideFixtureParticle(fixture, this.m_system, a)\n    ) {\n      const b = fixture.GetBody();\n      const bp = b.GetWorldCenter();\n      const bm = b.GetMass();\n      const bI = b.GetInertia() - bm * b.GetLocalCenter().LengthSquared();\n      const invBm = bm > 0 ? 1 / bm : 0;\n      const invBI = bI > 0 ? 1 / bI : 0;\n      const invAm =\n        this.m_system.m_flagsBuffer.data[a] & b2ParticleFlag.b2_wallParticle\n          ? 0\n          : this.m_system.GetParticleInvMass();\n      ///b2Vec2 rp = ap - bp;\n      const rp = b2Vec2.SubVV(ap, bp, s_rp);\n      const rpn = b2Vec2.CrossVV(rp, n);\n      const invM = invAm + invBm + invBI * rpn * rpn;\n\n      ///b2ParticleBodyContact& contact = m_system.m_bodyContactBuffer.Append();\n      const contact = this.m_system.m_bodyContactBuffer.data[\n        this.m_system.m_bodyContactBuffer.Append()\n      ];\n      contact.index = a;\n      contact.body = b;\n      contact.fixture = fixture;\n      contact.weight = 1 - d * this.m_system.m_inverseDiameter;\n      ///contact.normal = -n;\n      contact.normal.Copy(n.SelfNeg());\n      contact.mass = invM > 0 ? 1 / invM : 0;\n      this.m_system.DetectStuckParticle(a);\n    }\n  }\n\n  static readonly ReportFixtureAndParticle_s_n = new b2Vec2();\n  static readonly ReportFixtureAndParticle_s_rp = new b2Vec2();\n}\n\nexport class b2ParticleSystem_SolveCollisionCallback extends b2FixtureParticleQueryCallback {\n  m_step: b2TimeStep;\n\n  constructor(system: b2ParticleSystem, step: b2TimeStep) {\n    super(system); // base class constructor\n    this.m_step = step;\n  }\n\n  ReportFixtureAndParticle(fixture: b2Fixture, childIndex: number, a: number): void {\n    const s_p1 = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p1;\n    const s_output = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_output;\n    const s_input = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_input;\n    const s_p = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_p;\n    const s_v = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_v;\n    const s_f = b2ParticleSystem_SolveCollisionCallback.ReportFixtureAndParticle_s_f;\n\n    const body = fixture.GetBody();\n    const ap = this.m_system.m_positionBuffer.data[a];\n    const av = this.m_system.m_velocityBuffer.data[a];\n    const output = s_output;\n    const input = s_input;\n    if (this.m_system.m_iterationIndex === 0) {\n      // Put 'ap' in the local space of the previous frame\n      ///b2Vec2 p1 = b2MulT(body.m_xf0, ap);\n      const p1 = b2Transform.MulTXV(body.m_xf0, ap, s_p1);\n      if (fixture.GetShape().GetType() === b2ShapeType.e_circleShape) {\n        // Make relative to the center of the circle\n        ///p1 -= body.GetLocalCenter();\n        p1.SelfSub(body.GetLocalCenter());\n        // Re-apply rotation about the center of the circle\n        ///p1 = b2Mul(body.m_xf0.q, p1);\n        b2Rot.MulRV(body.m_xf0.q, p1, p1);\n        // Subtract rotation of the current frame\n        ///p1 = b2MulT(body.m_xf.q, p1);\n        b2Rot.MulTRV(body.m_xf.q, p1, p1);\n        // Return to local space\n        ///p1 += body.GetLocalCenter();\n        p1.SelfAdd(body.GetLocalCenter());\n      }\n      // Return to global space and apply rotation of current frame\n      ///input.p1 = b2Mul(body.m_xf, p1);\n      b2Transform.MulXV(body.m_xf, p1, input.p1);\n    } else {\n      ///input.p1 = ap;\n      input.p1.Copy(ap);\n    }\n    ///input.p2 = ap + m_step.dt * av;\n    b2Vec2.AddVMulSV(ap, this.m_step.dt, av, input.p2);\n    input.maxFraction = 1;\n    if (fixture.RayCast(output, input, childIndex)) {\n      const n = output.normal;\n      ///b2Vec2 p = (1 - output.fraction) * input.p1 + output.fraction * input.p2 + b2_linearSlop * n;\n      const p = s_p;\n      p.x = (1 - output.fraction) * input.p1.x + output.fraction * input.p2.x + b2_linearSlop * n.x;\n      p.y = (1 - output.fraction) * input.p1.y + output.fraction * input.p2.y + b2_linearSlop * n.y;\n      ///b2Vec2 v = m_step.inv_dt * (p - ap);\n      const v = s_v;\n      v.x = this.m_step.inv_dt * (p.x - ap.x);\n      v.y = this.m_step.inv_dt * (p.y - ap.y);\n      ///m_system.m_velocityBuffer.data[a] = v;\n      this.m_system.m_velocityBuffer.data[a].Copy(v);\n      ///b2Vec2 f = m_step.inv_dt * m_system.GetParticleMass() * (av - v);\n      const f = s_f;\n      f.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.x - v.x);\n      f.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.y - v.y);\n      this.m_system.ParticleApplyForce(a, f);\n    }\n  }\n\n  static readonly ReportFixtureAndParticle_s_p1 = new b2Vec2();\n  static readonly ReportFixtureAndParticle_s_output = new b2RayCastOutput();\n  static readonly ReportFixtureAndParticle_s_input = new b2RayCastInput();\n  static readonly ReportFixtureAndParticle_s_p = new b2Vec2();\n  static readonly ReportFixtureAndParticle_s_v = new b2Vec2();\n  static readonly ReportFixtureAndParticle_s_f = new b2Vec2();\n\n  ReportParticle(system: b2ParticleSystem, index: number): boolean {\n    return false;\n  }\n}\n\n// #endif\n","import { b2Color, b2Draw, b2DrawFlags } from '../common/b2Draw';\nimport { b2World } from './b2World';\nimport { b2Body, b2BodyType } from './b2Body';\nimport { b2AABB } from '../collision/b2Collision';\nimport { b2ChainShape } from '../collision/shapes/b2ChainShape';\nimport { b2CircleShape } from '../collision/shapes/b2CircleShape';\nimport { b2EdgeShape } from '../collision/shapes/b2EdgeShape';\nimport { b2PolygonShape } from '../collision/shapes/b2PolygonShape';\nimport { b2Shape, b2ShapeType } from '../collision/shapes/b2Shape';\nimport { b2Fixture, b2FixtureProxy } from './b2Fixture';\nimport { b2Joint, b2JointType } from './joints/b2Joint';\nimport { b2PulleyJoint } from './joints/b2PulleyJoint';\nimport { b2Transform, b2Vec2 } from '../common/b2Math';\nimport { b2ParticleSystem } from '../particle/b2ParticleSystem';\n\nfunction DrawParticleSystem(drawer: b2Draw, system: b2ParticleSystem): void {\n  const particleCount = system.GetParticleCount();\n  if (particleCount) {\n    const radius = system.GetRadius();\n    const positionBuffer = system.GetPositionBuffer();\n    if (system.m_colorBuffer.data) {\n      const colorBuffer = system.GetColorBuffer();\n      drawer.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);\n    } else {\n      drawer.DrawParticles(positionBuffer, radius, null, particleCount);\n    }\n  }\n}\n\nconst DrawJoint_s_p1: b2Vec2 = new b2Vec2();\nconst DrawJoint_s_p2: b2Vec2 = new b2Vec2();\nconst DrawJoint_s_color: b2Color = new b2Color(0.5, 0.8, 0.8);\nconst DrawJoint_s_c: b2Color = new b2Color();\n\nfunction DrawJoint(drawer: b2Draw, joint: b2Joint): void {\n  const bodyA: b2Body = joint.GetBodyA();\n  const bodyB: b2Body = joint.GetBodyB();\n  const xf1: b2Transform = bodyA.m_xf;\n  const xf2: b2Transform = bodyB.m_xf;\n  const x1: b2Vec2 = xf1.p;\n  const x2: b2Vec2 = xf2.p;\n  const p1: b2Vec2 = joint.GetAnchorA(DrawJoint_s_p1);\n  const p2: b2Vec2 = joint.GetAnchorB(DrawJoint_s_p2);\n\n  const color: b2Color = DrawJoint_s_color.SetRGB(0.5, 0.8, 0.8);\n\n  switch (joint.m_type) {\n    case b2JointType.e_distanceJoint:\n      drawer.DrawSegment(p1, p2, color);\n      break;\n\n    case b2JointType.e_pulleyJoint: {\n      const pulley = joint as b2PulleyJoint;\n      const s1: b2Vec2 = pulley.GetGroundAnchorA();\n      const s2: b2Vec2 = pulley.GetGroundAnchorB();\n      drawer.DrawSegment(s1, p1, color);\n      drawer.DrawSegment(s2, p2, color);\n      drawer.DrawSegment(s1, s2, color);\n      break;\n    }\n\n    case b2JointType.e_mouseJoint: {\n      const c = DrawJoint_s_c;\n      c.Set(0.0, 1.0, 0.0);\n      drawer.DrawPoint(p1, 4.0, c);\n      drawer.DrawPoint(p2, 4.0, c);\n\n      c.Set(0.8, 0.8, 0.8);\n      drawer.DrawSegment(p1, p2, c);\n      break;\n    }\n\n    default:\n      drawer.DrawSegment(x1, p1, color);\n      drawer.DrawSegment(p1, p2, color);\n      drawer.DrawSegment(x2, p2, color);\n  }\n}\n\nconst DrawShape_s_ghostColor = new b2Color();\n\nfunction DrawShape(drawer: b2Draw, fixture: b2Fixture, color: b2Color): void {\n  const shape: b2Shape = fixture.GetShape();\n\n  switch (shape.m_type) {\n    case b2ShapeType.e_circleShape: {\n      const circle: b2CircleShape = shape as b2CircleShape;\n      const center: b2Vec2 = circle.m_p;\n      const radius: number = circle.m_radius;\n      const axis: b2Vec2 = b2Vec2.UNITX;\n      drawer.DrawSolidCircle(center, radius, axis, color);\n      break;\n    }\n\n    case b2ShapeType.e_edgeShape: {\n      const edge: b2EdgeShape = shape as b2EdgeShape;\n      const v1: b2Vec2 = edge.m_vertex1;\n      const v2: b2Vec2 = edge.m_vertex2;\n      drawer.DrawSegment(v1, v2, color);\n      break;\n    }\n\n    case b2ShapeType.e_chainShape: {\n      const chain: b2ChainShape = shape as b2ChainShape;\n      const count: number = chain.m_count;\n      const vertices: b2Vec2[] = chain.m_vertices;\n      const ghostColor: b2Color = DrawShape_s_ghostColor.SetRGBA(\n        0.75 * color.r,\n        0.75 * color.g,\n        0.75 * color.b,\n        color.a,\n      );\n      let v1: b2Vec2 = vertices[0];\n      drawer.DrawPoint(v1, 4.0, color);\n\n      if (chain.m_hasPrevVertex) {\n        const vp = chain.m_prevVertex;\n        drawer.DrawSegment(vp, v1, ghostColor);\n        drawer.DrawCircle(vp, 0.1, ghostColor);\n      }\n\n      for (let i = 1; i < count; ++i) {\n        const v2: b2Vec2 = vertices[i];\n        drawer.DrawSegment(v1, v2, color);\n        drawer.DrawPoint(v2, 4.0, color);\n        v1 = v2;\n      }\n\n      if (chain.m_hasNextVertex) {\n        const vn = chain.m_nextVertex;\n        drawer.DrawSegment(vn, v1, ghostColor);\n        drawer.DrawCircle(vn, 0.1, ghostColor);\n      }\n      break;\n    }\n\n    case b2ShapeType.e_polygonShape: {\n      const poly: b2PolygonShape = shape as b2PolygonShape;\n      const vertexCount: number = poly.m_count;\n      const vertices: b2Vec2[] = poly.m_vertices;\n      drawer.DrawSolidPolygon(vertices, vertexCount, color);\n      break;\n    }\n  }\n}\n\n/// Call this to draw shapes and other debug draw data.\nconst DrawDebugData_s_color = new b2Color(0, 0, 0);\nconst DrawDebugData_s_vs = b2Vec2.MakeArray(4);\nconst DrawDebugData_s_xf = new b2Transform();\n\nexport function drawDebugData(drawer: b2Draw, world: b2World): void {\n  const flags = drawer.GetFlags();\n  const color = DrawDebugData_s_color.SetRGB(0, 0, 0);\n\n  if (flags & b2DrawFlags.e_shapeBit) {\n    for (let b: b2Body | null = world.m_bodyList; b; b = b.m_next) {\n      const xf: b2Transform = b.m_xf;\n\n      drawer.PushTransform(xf);\n\n      for (let f = b.GetFixtureList(); f; f = f.m_next) {\n        if (!b.IsActive()) {\n          color.SetRGB(0.5, 0.5, 0.3);\n          DrawShape(drawer, f, color);\n        } else if (b.GetType() === b2BodyType.b2_staticBody) {\n          color.SetRGB(0.5, 0.9, 0.5);\n          DrawShape(drawer, f, color);\n        } else if (b.GetType() === b2BodyType.b2_kinematicBody) {\n          color.SetRGB(0.5, 0.5, 0.9);\n          DrawShape(drawer, f, color);\n        } else if (!b.IsAwake()) {\n          color.SetRGB(0.6, 0.6, 0.6);\n          DrawShape(drawer, f, color);\n        } else {\n          color.SetRGB(0.9, 0.7, 0.7);\n          DrawShape(drawer, f, color);\n        }\n      }\n\n      drawer.PopTransform(xf);\n    }\n  }\n\n  if (!!B2_ENABLE_PARTICLE && flags & b2DrawFlags.e_particleBit) {\n    for (let p = world.m_particleSystemList; p; p = p.m_next) {\n      DrawParticleSystem(drawer, p);\n    }\n  }\n\n  if (flags & b2DrawFlags.e_jointBit) {\n    for (let j = world.m_jointList; j; j = j.m_next) {\n      DrawJoint(drawer, j);\n    }\n  }\n\n  /*\n    if (flags & b2DrawFlags.e_pairBit) {\n      color.SetRGB(0.3, 0.9, 0.9);\n      for (let contact = this.m_contactManager.m_contactList; contact; contact = contact.m_next) {\n        const fixtureA = contact.GetFixtureA();\n        const fixtureB = contact.GetFixtureB();\n\n        const cA = fixtureA.GetAABB().GetCenter();\n        const cB = fixtureB.GetAABB().GetCenter();\n\n        this.m_debugDraw.DrawSegment(cA, cB, color);\n      }\n    }\n    */\n\n  if (flags & b2DrawFlags.e_aabbBit) {\n    color.SetRGB(0.9, 0.3, 0.9);\n    const vs = DrawDebugData_s_vs;\n\n    for (let b: b2Body | null = world.m_bodyList; b; b = b.m_next) {\n      if (!b.IsActive()) {\n        continue;\n      }\n\n      for (let f = b.GetFixtureList(); f; f = f.m_next) {\n        for (let i = 0; i < f.m_proxyCount; ++i) {\n          const proxy: b2FixtureProxy = f.m_proxies[i];\n\n          const aabb: b2AABB = proxy.treeNode.aabb;\n          vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\n          vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\n          vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\n          vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\n\n          drawer.DrawPolygon(vs, 4, color);\n        }\n      }\n    }\n  }\n\n  if (flags & b2DrawFlags.e_centerOfMassBit) {\n    for (let b: b2Body | null = world.m_bodyList; b; b = b.m_next) {\n      const xf = DrawDebugData_s_xf;\n      xf.q.Copy(b.m_xf.q);\n      xf.p.Copy(b.GetWorldCenter());\n      drawer.DrawTransform(xf);\n    }\n  }\n\n  // @see b2Controller list\n  if (B2_ENABLE_CONTROLLER) {\n    if (flags & b2DrawFlags.e_controllerBit) {\n      for (let c = world.m_controllerList; c; c = c.m_next) {\n        c.Draw(drawer);\n      }\n    }\n  }\n}\n","import { g_debugDraw } from './DebugDraw';\nimport { FullScreenUI } from './FullscreenUI';\n// #if B2_ENABLE_PARTICLE\nimport {\n  ParticleParameter,\n  ParticleParameterDefinition,\n  ParticleParameterValue,\n} from './ParticleParameter';\n// #endif\nimport {\n  b2AABB,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CalculateParticleIterations,\n  b2CircleShape,\n  b2Color,\n  b2Contact,\n  b2ContactImpulse,\n  b2ContactListener,\n  b2DestructionListener,\n  b2DrawFlags,\n  b2Fixture,\n  b2FixtureDef,\n  b2GetPointStates,\n  b2Joint,\n  b2MakeArray,\n  b2Manifold,\n  b2Max,\n  b2MouseJoint,\n  b2MouseJointDef,\n  b2ParticleGroup,\n  b2ParticleSystem,\n  b2ParticleSystemDef,\n  b2PointState,\n  b2Profile,\n  b2QueryCallback,\n  b2RandomRange,\n  b2Shape,\n  b2Transform,\n  b2Vec2,\n  b2World,\n  b2WorldManifold,\n  drawDebugData,\n} from '@highduck/box2d';\n\nexport const DRAW_STRING_NEW_LINE = 16;\n\nexport function RandomFloat(lo = -1, hi = 1) {\n  let r = Math.random();\n  r = (hi - lo) * r + lo;\n  return r;\n}\n\nexport class Settings {\n  hz = 60;\n  velocityIterations = 8;\n  positionIterations = 3;\n  // #if B2_ENABLE_PARTICLE\n  // Particle iterations are needed for numerical stability in particle\n  // simulations with small particles and relatively high gravity.\n  // b2CalculateParticleIterations helps to determine the number.\n  particleIterations = b2CalculateParticleIterations(10, 0.04, 1 / this.hz);\n  // #endif\n  drawShapes = true;\n  // #if B2_ENABLE_PARTICLE\n  drawParticles = true;\n  // #endif\n  drawJoints = true;\n  drawAABBs = false;\n  drawContactPoints = false;\n  drawContactNormals = false;\n  drawContactImpulse = false;\n  drawFrictionImpulse = false;\n  drawCOMs = false;\n  drawControllers = true;\n  drawStats = false;\n  drawProfile = false;\n  enableWarmStarting = true;\n  enableContinuous = true;\n  enableSubStepping = false;\n  enableSleep = true;\n  pause = false;\n  singleStep = false;\n  // #if B2_ENABLE_PARTICLE\n  strictContacts = false;\n  // #endif\n}\n\nexport class TestEntry {\n  constructor(readonly category: string, readonly name: string, readonly createFcn: () => Test) {}\n}\n\nexport class DestructionListener extends b2DestructionListener {\n  constructor(readonly test: Test) {\n    super();\n  }\n\n  SayGoodbyeJoint(joint: b2Joint): void {\n    if (this.test.m_mouseJoint === joint) {\n      this.test.m_mouseJoint = null;\n    } else {\n      this.test.JointDestroyed(joint);\n    }\n  }\n\n  // SayGoodbyeFixture(fixture: b2Fixture): void {}\n\n  // #if B2_ENABLE_PARTICLE\n  SayGoodbyeParticleGroup(group: b2ParticleGroup) {\n    this.test.ParticleGroupDestroyed(group);\n  }\n\n  // #endif\n}\n\nexport class ContactPoint {\n  fixtureA!: b2Fixture;\n  fixtureB!: b2Fixture;\n  readonly normal: b2Vec2 = new b2Vec2();\n  readonly position: b2Vec2 = new b2Vec2();\n  state: b2PointState = b2PointState.b2_nullState;\n  normalImpulse = 0;\n  tangentImpulse = 0;\n  separation = 0;\n}\n\n// #if B2_ENABLE_PARTICLE\nclass QueryCallback2 extends b2QueryCallback {\n  m_particleSystem: b2ParticleSystem;\n  m_shape: b2Shape;\n  m_velocity: b2Vec2;\n\n  constructor(particleSystem: b2ParticleSystem, shape: b2Shape, velocity: b2Vec2) {\n    super();\n    this.m_particleSystem = particleSystem;\n    this.m_shape = shape;\n    this.m_velocity = velocity;\n  }\n\n  public ReportFixture(fixture: b2Fixture): boolean {\n    return false;\n  }\n\n  public ReportParticle(particleSystem: b2ParticleSystem, index: number): boolean {\n    if (particleSystem !== this.m_particleSystem) {\n      return false;\n    }\n    const xf = b2Transform.IDENTITY;\n    const p = this.m_particleSystem.GetPositionBuffer()[index];\n    if (this.m_shape.TestPoint(xf, p)) {\n      const v = this.m_particleSystem.GetVelocityBuffer()[index];\n      v.Copy(this.m_velocity);\n    }\n    return true;\n  }\n}\n\n// #endif\n\nexport class Test extends b2ContactListener {\n  // #if B2_ENABLE_PARTICLE\n  public static readonly fullscreenUI = new FullScreenUI();\n  public static readonly particleParameter = new ParticleParameter();\n  // #endif\n  public static readonly k_maxContactPoints: number = 2048;\n\n  public m_world: b2World;\n  // #if B2_ENABLE_PARTICLE\n  public m_particleSystem: b2ParticleSystem;\n  // #endif\n  public m_bomb: b2Body | null = null;\n  public m_textLine = 30;\n  public m_mouseJoint: b2MouseJoint | null = null;\n  public readonly m_points: ContactPoint[] = b2MakeArray(\n    Test.k_maxContactPoints,\n    (i) => new ContactPoint(),\n  );\n  public m_pointCount = 0;\n  public m_destructionListener: DestructionListener;\n  public readonly m_bombSpawnPoint: b2Vec2 = new b2Vec2();\n  public m_bombSpawning = false;\n  public readonly m_mouseWorld: b2Vec2 = new b2Vec2();\n  // #if B2_ENABLE_PARTICLE\n  public m_mouseTracing = false;\n  public readonly m_mouseTracerPosition: b2Vec2 = new b2Vec2();\n  public readonly m_mouseTracerVelocity: b2Vec2 = new b2Vec2();\n  // #endif\n  public m_stepCount = 0;\n  public readonly m_maxProfile: b2Profile = new b2Profile();\n  public readonly m_totalProfile: b2Profile = new b2Profile();\n  public m_groundBody: b2Body;\n  // #if B2_ENABLE_PARTICLE\n  public m_particleParameters: ParticleParameterValue[] | null = null;\n  public m_particleParameterDef: ParticleParameterDefinition | null = null;\n\n  // #endif\n\n  constructor() {\n    super();\n\n    // #if B2_ENABLE_PARTICLE\n    const particleSystemDef = new b2ParticleSystemDef();\n    // #endif\n    const gravity: b2Vec2 = new b2Vec2(0, -10);\n    this.m_world = new b2World(gravity);\n    // #if B2_ENABLE_PARTICLE\n    this.m_particleSystem = this.m_world.CreateParticleSystem(particleSystemDef);\n    // #endif\n    this.m_bomb = null;\n    this.m_textLine = 30;\n    this.m_mouseJoint = null;\n\n    this.m_destructionListener = new DestructionListener(this);\n    this.m_world.SetDestructionListener(this.m_destructionListener);\n    this.m_world.SetContactListener(this);\n\n    // #if B2_ENABLE_PARTICLE\n    this.m_particleSystem.SetGravityScale(0.4);\n    this.m_particleSystem.SetDensity(1.2);\n    // #endif\n\n    const bodyDef = new b2BodyDef();\n    this.m_groundBody = this.m_world.CreateBody(bodyDef);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public JointDestroyed(joint: b2Joint): void {}\n\n  // #if B2_ENABLE_PARTICLE\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public ParticleGroupDestroyed(group: b2ParticleGroup) {}\n\n  // #endif\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public BeginContact(contact: b2Contact): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public EndContact(contact: b2Contact): void {}\n\n  private static PreSolve_s_state1: b2PointState[] = [\n    /*b2_maxManifoldPoints*/\n  ];\n  private static PreSolve_s_state2: b2PointState[] = [\n    /*b2_maxManifoldPoints*/\n  ];\n  private static PreSolve_s_worldManifold: b2WorldManifold = new b2WorldManifold();\n\n  public PreSolve(contact: b2Contact, oldManifold: b2Manifold): void {\n    const manifold: b2Manifold = contact.GetManifold();\n\n    if (manifold.pointCount === 0) {\n      return;\n    }\n\n    const fixtureA: b2Fixture | null = contact.GetFixtureA();\n    const fixtureB: b2Fixture | null = contact.GetFixtureB();\n\n    const state1: b2PointState[] = Test.PreSolve_s_state1;\n    const state2: b2PointState[] = Test.PreSolve_s_state2;\n    b2GetPointStates(state1, state2, oldManifold, manifold);\n\n    const worldManifold: b2WorldManifold = Test.PreSolve_s_worldManifold;\n    contact.GetWorldManifold(worldManifold);\n\n    for (let i = 0; i < manifold.pointCount && this.m_pointCount < Test.k_maxContactPoints; ++i) {\n      const cp: ContactPoint = this.m_points[this.m_pointCount];\n      cp.fixtureA = fixtureA;\n      cp.fixtureB = fixtureB;\n      cp.position.Copy(worldManifold.points[i]);\n      cp.normal.Copy(worldManifold.normal);\n      cp.state = state2[i];\n      cp.normalImpulse = manifold.points[i].normalImpulse;\n      cp.tangentImpulse = manifold.points[i].tangentImpulse;\n      cp.separation = worldManifold.separations[i];\n      ++this.m_pointCount;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public PostSolve(contact: b2Contact, impulse: b2ContactImpulse): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public Keyboard(key: string): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public KeyboardUp(key: string): void {}\n\n  public SetTextLine(line: number): void {\n    this.m_textLine = line;\n  }\n\n  public DrawTitle(title: string): void {\n    g_debugDraw.DrawString(5, DRAW_STRING_NEW_LINE, title);\n    this.m_textLine = 3 * DRAW_STRING_NEW_LINE;\n  }\n\n  public MouseDown(p: b2Vec2): void {\n    this.m_mouseWorld.Copy(p);\n    // #if B2_ENABLE_PARTICLE\n    this.m_mouseTracing = true;\n    this.m_mouseTracerPosition.Copy(p);\n    this.m_mouseTracerVelocity.SetZero();\n    // #endif\n\n    if (this.m_mouseJoint !== null) {\n      this.m_world.DestroyJoint(this.m_mouseJoint);\n      this.m_mouseJoint = null;\n    }\n\n    let hit_fixture: b2Fixture | null | any = null; // HACK: tsc doesn't detect calling callbacks\n\n    // Query the world for overlapping shapes.\n    this.m_world.QueryPointAABB(p, (fixture: b2Fixture): boolean => {\n      const body = fixture.GetBody();\n      if (body.GetType() === b2BodyType.b2_dynamicBody) {\n        const inside = fixture.TestPoint(p);\n        if (inside) {\n          hit_fixture = fixture;\n          return false; // We are done, terminate the query.\n        }\n      }\n      return true; // Continue the query.\n    });\n\n    if (hit_fixture) {\n      const body = hit_fixture.GetBody();\n      const md: b2MouseJointDef = new b2MouseJointDef();\n      md.bodyA = this.m_groundBody;\n      md.bodyB = body;\n      md.target.Copy(p);\n      md.maxForce = 1000 * body.GetMass();\n      this.m_mouseJoint = this.m_world.CreateJoint(md) as b2MouseJoint;\n      body.SetAwake(true);\n    }\n  }\n\n  public SpawnBomb(worldPt: b2Vec2): void {\n    this.m_bombSpawnPoint.Copy(worldPt);\n    this.m_bombSpawning = true;\n  }\n\n  public CompleteBombSpawn(p: b2Vec2): void {\n    if (!this.m_bombSpawning) {\n      return;\n    }\n\n    const multiplier = 30;\n    const vel: b2Vec2 = b2Vec2.SubVV(this.m_bombSpawnPoint, p, new b2Vec2());\n    vel.SelfMul(multiplier);\n    this.LaunchBombAt(this.m_bombSpawnPoint, vel);\n    this.m_bombSpawning = false;\n  }\n\n  public ShiftMouseDown(p: b2Vec2): void {\n    this.m_mouseWorld.Copy(p);\n\n    if (this.m_mouseJoint !== null) {\n      return;\n    }\n\n    this.SpawnBomb(p);\n  }\n\n  public MouseUp(p: b2Vec2): void {\n    // #if B2_ENABLE_PARTICLE\n    this.m_mouseTracing = false;\n    // #endif\n    if (this.m_mouseJoint) {\n      this.m_world.DestroyJoint(this.m_mouseJoint);\n      this.m_mouseJoint = null;\n    }\n\n    if (this.m_bombSpawning) {\n      this.CompleteBombSpawn(p);\n    }\n  }\n\n  public MouseMove(p: b2Vec2): void {\n    this.m_mouseWorld.Copy(p);\n\n    if (this.m_mouseJoint) {\n      this.m_mouseJoint.SetTarget(p);\n    }\n  }\n\n  public LaunchBomb(): void {\n    const p: b2Vec2 = new b2Vec2(b2RandomRange(-15, 15), 30);\n    const v: b2Vec2 = b2Vec2.MulSV(-5, p, new b2Vec2());\n    this.LaunchBombAt(p, v);\n  }\n\n  public LaunchBombAt(position: b2Vec2, velocity: b2Vec2): void {\n    if (this.m_bomb) {\n      this.m_world.DestroyBody(this.m_bomb);\n      this.m_bomb = null;\n    }\n\n    const bd: b2BodyDef = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Copy(position);\n    bd.bullet = true;\n    this.m_bomb = this.m_world.CreateBody(bd);\n    this.m_bomb.SetLinearVelocity(velocity);\n\n    const circle: b2CircleShape = new b2CircleShape();\n    circle.m_radius = 0.3;\n\n    const fd: b2FixtureDef = new b2FixtureDef();\n    fd.shape = circle;\n    fd.density = 20;\n    fd.restitution = 0;\n\n    // b2Vec2 minV = position - b2Vec2(0.3f,0.3f);\n    // b2Vec2 maxV = position + b2Vec2(0.3f,0.3f);\n\n    // b2AABB aabb;\n    // aabb.lowerBound = minV;\n    // aabb.upperBound = maxV;\n\n    this.m_bomb.CreateFixture(fd);\n  }\n\n  public Step(settings: Settings): void {\n    let timeStep = settings.hz > 0 ? 1 / settings.hz : 0;\n\n    if (settings.pause) {\n      if (settings.singleStep) {\n        settings.singleStep = false;\n      } else {\n        timeStep = 0;\n      }\n\n      g_debugDraw.DrawString(5, this.m_textLine, '****PAUSED****');\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    let flags = b2DrawFlags.e_none;\n    if (settings.drawShapes) {\n      flags |= b2DrawFlags.e_shapeBit;\n    }\n    // #if B2_ENABLE_PARTICLE\n    if (settings.drawParticles) {\n      flags |= b2DrawFlags.e_particleBit;\n    }\n    // #endif\n    if (settings.drawJoints) {\n      flags |= b2DrawFlags.e_jointBit;\n    }\n    if (settings.drawAABBs) {\n      flags |= b2DrawFlags.e_aabbBit;\n    }\n    if (settings.drawCOMs) {\n      flags |= b2DrawFlags.e_centerOfMassBit;\n    }\n    if (settings.drawControllers) {\n      flags |= b2DrawFlags.e_controllerBit;\n    }\n    g_debugDraw.SetFlags(flags);\n\n    this.m_world.SetAllowSleeping(settings.enableSleep);\n    this.m_world.SetWarmStarting(settings.enableWarmStarting);\n    this.m_world.SetContinuousPhysics(settings.enableContinuous);\n    this.m_world.SetSubStepping(settings.enableSubStepping);\n    // #if B2_ENABLE_PARTICLE\n    this.m_particleSystem.SetStrictContactCheck(settings.strictContacts);\n    // #endif\n\n    this.m_pointCount = 0;\n\n    // #if B2_ENABLE_PARTICLE\n    this.m_world.Step(\n      timeStep,\n      settings.velocityIterations,\n      settings.positionIterations,\n      settings.particleIterations,\n    );\n    // #else\n    // this.m_world.Step(timeStep, settings.velocityIterations, settings.positionIterations);\n    // #endif\n\n    drawDebugData(g_debugDraw, this.m_world);\n\n    if (timeStep > 0) {\n      ++this.m_stepCount;\n    }\n\n    if (settings.drawStats) {\n      const bodyCount = this.m_world.GetBodyCount();\n      const contactCount = this.m_world.GetContactCount();\n      const jointCount = this.m_world.GetJointCount();\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'bodies/contacts/joints = ' + bodyCount + '/' + contactCount + '/' + jointCount,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n\n      // #if B2_ENABLE_PARTICLE\n      const particleCount = this.m_particleSystem.GetParticleCount();\n      const groupCount = this.m_particleSystem.GetParticleGroupCount();\n      const pairCount = this.m_particleSystem.GetPairCount();\n      const triadCount = this.m_particleSystem.GetTriadCount();\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'particles/groups/pairs/triads = ' +\n          particleCount +\n          '/' +\n          groupCount +\n          '/' +\n          pairCount +\n          '/' +\n          triadCount,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      // #endif\n\n      const proxyCount = this.m_world.GetProxyCount();\n      const height = this.m_world.GetTreeHeight();\n      const balance = this.m_world.GetTreeBalance();\n      const quality = this.m_world.GetTreeQuality();\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'proxies/height/balance/quality = ' +\n          proxyCount +\n          '/' +\n          height +\n          '/' +\n          balance +\n          '/' +\n          quality.toFixed(2),\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    // Track maximum profile times\n    {\n      const p = this.m_world.GetProfile();\n      this.m_maxProfile.step = b2Max(this.m_maxProfile.step, p.step);\n      this.m_maxProfile.collide = b2Max(this.m_maxProfile.collide, p.collide);\n      this.m_maxProfile.solve = b2Max(this.m_maxProfile.solve, p.solve);\n      this.m_maxProfile.solveInit = b2Max(this.m_maxProfile.solveInit, p.solveInit);\n      this.m_maxProfile.solveVelocity = b2Max(this.m_maxProfile.solveVelocity, p.solveVelocity);\n      this.m_maxProfile.solvePosition = b2Max(this.m_maxProfile.solvePosition, p.solvePosition);\n      this.m_maxProfile.solveTOI = b2Max(this.m_maxProfile.solveTOI, p.solveTOI);\n      this.m_maxProfile.broadphase = b2Max(this.m_maxProfile.broadphase, p.broadphase);\n\n      this.m_totalProfile.step += p.step;\n      this.m_totalProfile.collide += p.collide;\n      this.m_totalProfile.solve += p.solve;\n      this.m_totalProfile.solveInit += p.solveInit;\n      this.m_totalProfile.solveVelocity += p.solveVelocity;\n      this.m_totalProfile.solvePosition += p.solvePosition;\n      this.m_totalProfile.solveTOI += p.solveTOI;\n      this.m_totalProfile.broadphase += p.broadphase;\n    }\n\n    if (settings.drawProfile) {\n      const p = this.m_world.GetProfile();\n\n      const aveProfile = new b2Profile();\n      if (this.m_stepCount > 0) {\n        const scale: number = 1 / this.m_stepCount;\n        aveProfile.step = scale * this.m_totalProfile.step;\n        aveProfile.collide = scale * this.m_totalProfile.collide;\n        aveProfile.solve = scale * this.m_totalProfile.solve;\n        aveProfile.solveInit = scale * this.m_totalProfile.solveInit;\n        aveProfile.solveVelocity = scale * this.m_totalProfile.solveVelocity;\n        aveProfile.solvePosition = scale * this.m_totalProfile.solvePosition;\n        aveProfile.solveTOI = scale * this.m_totalProfile.solveTOI;\n        aveProfile.broadphase = scale * this.m_totalProfile.broadphase;\n      }\n\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'step [ave] (max) = ' +\n          p.step.toFixed(2) +\n          ' [' +\n          aveProfile.step.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.step.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'collide [ave] (max) = ' +\n          p.collide.toFixed(2) +\n          ' [' +\n          aveProfile.collide.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.collide.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'solve [ave] (max) = ' +\n          p.solve.toFixed(2) +\n          ' [' +\n          aveProfile.solve.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.solve.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'solve init [ave] (max) = ' +\n          p.solveInit.toFixed(2) +\n          ' [' +\n          aveProfile.solveInit.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.solveInit.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'solve velocity [ave] (max) = ' +\n          p.solveVelocity.toFixed(2) +\n          ' [' +\n          aveProfile.solveVelocity.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.solveVelocity.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'solve position [ave] (max) = ' +\n          p.solvePosition.toFixed(2) +\n          ' [' +\n          aveProfile.solvePosition.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.solvePosition.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'solveTOI [ave] (max) = ' +\n          p.solveTOI.toFixed(2) +\n          ' [' +\n          aveProfile.solveTOI.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.solveTOI.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        'broad-phase [ave] (max) = ' +\n          p.broadphase.toFixed(2) +\n          ' [' +\n          aveProfile.broadphase.toFixed(2) +\n          '] (' +\n          this.m_maxProfile.broadphase.toFixed(2) +\n          ')',\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    // #if B2_ENABLE_PARTICLE\n    if (this.m_mouseTracing && !this.m_mouseJoint) {\n      const delay = 0.1;\n      ///b2Vec2 acceleration = 2 / delay * (1 / delay * (m_mouseWorld - m_mouseTracerPosition) - m_mouseTracerVelocity);\n      const acceleration = new b2Vec2();\n      acceleration.x =\n        (2 / delay) *\n        ((1 / delay) * (this.m_mouseWorld.x - this.m_mouseTracerPosition.x) -\n          this.m_mouseTracerVelocity.x);\n      acceleration.y =\n        (2 / delay) *\n        ((1 / delay) * (this.m_mouseWorld.y - this.m_mouseTracerPosition.y) -\n          this.m_mouseTracerVelocity.y);\n      ///m_mouseTracerVelocity += timeStep * acceleration;\n      this.m_mouseTracerVelocity.SelfMulAdd(timeStep, acceleration);\n      ///m_mouseTracerPosition += timeStep * m_mouseTracerVelocity;\n      this.m_mouseTracerPosition.SelfMulAdd(timeStep, this.m_mouseTracerVelocity);\n      const shape = new b2CircleShape();\n      shape.m_p.Copy(this.m_mouseTracerPosition);\n      shape.m_radius = 2 * this.GetDefaultViewZoom();\n      ///QueryCallback2 callback(m_particleSystem, &shape, m_mouseTracerVelocity);\n      const callback = new QueryCallback2(this.m_particleSystem, shape, this.m_mouseTracerVelocity);\n      const aabb = new b2AABB();\n      const xf = new b2Transform();\n      xf.SetIdentity();\n      shape.ComputeAABB(aabb, xf, 0);\n      this.m_world.QueryAABB(callback, aabb);\n    }\n    // #endif\n\n    if (this.m_bombSpawning) {\n      const c: b2Color = new b2Color(0, 0, 1);\n      g_debugDraw.DrawPoint(this.m_bombSpawnPoint, 4, c);\n\n      c.SetRGB(0.8, 0.8, 0.8);\n      g_debugDraw.DrawSegment(this.m_mouseWorld, this.m_bombSpawnPoint, c);\n    }\n\n    if (settings.drawContactPoints) {\n      const k_impulseScale = 0.1;\n      const k_axisScale = 0.3;\n\n      for (let i = 0; i < this.m_pointCount; ++i) {\n        const point = this.m_points[i];\n\n        if (point.state === b2PointState.b2_addState) {\n          // Add\n          g_debugDraw.DrawPoint(point.position, 10, new b2Color(0.3, 0.95, 0.3));\n        } else if (point.state === b2PointState.b2_persistState) {\n          // Persist\n          g_debugDraw.DrawPoint(point.position, 5, new b2Color(0.3, 0.3, 0.95));\n        }\n\n        if (settings.drawContactNormals) {\n          const p1 = point.position;\n          const p2: b2Vec2 = b2Vec2.AddVV(\n            p1,\n            b2Vec2.MulSV(k_axisScale, point.normal, b2Vec2.s_t0),\n            new b2Vec2(),\n          );\n          g_debugDraw.DrawSegment(p1, p2, new b2Color(0.9, 0.9, 0.9));\n        } else if (settings.drawContactImpulse) {\n          const p1 = point.position;\n          const p2: b2Vec2 = b2Vec2.AddVMulSV(\n            p1,\n            k_impulseScale * point.normalImpulse,\n            point.normal,\n            new b2Vec2(),\n          );\n          g_debugDraw.DrawSegment(p1, p2, new b2Color(0.9, 0.9, 0.3));\n        }\n\n        if (settings.drawFrictionImpulse) {\n          const tangent: b2Vec2 = b2Vec2.CrossVOne(point.normal, new b2Vec2());\n          const p1 = point.position;\n          const p2: b2Vec2 = b2Vec2.AddVMulSV(\n            p1,\n            k_impulseScale * point.tangentImpulse,\n            tangent,\n            new b2Vec2(),\n          );\n          g_debugDraw.DrawSegment(p1, p2, new b2Color(0.9, 0.9, 0.3));\n        }\n      }\n    }\n  }\n\n  public ShiftOrigin(newOrigin: b2Vec2): void {\n    this.m_world.ShiftOrigin(newOrigin);\n  }\n\n  public GetDefaultViewZoom(): number {\n    return 1.0;\n  }\n\n  // #if B2_ENABLE_PARTICLE\n  public static readonly k_ParticleColors: b2Color[] = [\n    new b2Color().SetByteRGBA(0xff, 0x00, 0x00, 0xff), // red\n    new b2Color().SetByteRGBA(0x00, 0xff, 0x00, 0xff), // green\n    new b2Color().SetByteRGBA(0x00, 0x00, 0xff, 0xff), // blue\n    new b2Color().SetByteRGBA(0xff, 0x8c, 0x00, 0xff), // orange\n    new b2Color().SetByteRGBA(0x00, 0xce, 0xd1, 0xff), // turquoise\n    new b2Color().SetByteRGBA(0xff, 0x00, 0xff, 0xff), // magenta\n    new b2Color().SetByteRGBA(0xff, 0xd7, 0x00, 0xff), // gold\n    new b2Color().SetByteRGBA(0x00, 0xff, 0xff, 0xff), // cyan\n  ];\n\n  public static readonly k_ParticleColorsCount = Test.k_ParticleColors.length;\n\n  /**\n   * Apply a preset range of colors to a particle group.\n   *\n   * A different color out of k_ParticleColors is applied to each\n   * particlesPerColor particles in the specified group.\n   *\n   * If particlesPerColor is 0, the particles in the group are\n   * divided into k_ParticleColorsCount equal sets of colored\n   * particles.\n   */\n  public ColorParticleGroup(group: b2ParticleGroup, particlesPerColor: number) {\n    // DEBUG: b2Assert(group !== null);\n    const colorBuffer = this.m_particleSystem.GetColorBuffer();\n    const particleCount = group.GetParticleCount();\n    const groupStart = group.GetBufferIndex();\n    const groupEnd = particleCount + groupStart;\n    const colorCount = Test.k_ParticleColors.length;\n    if (!particlesPerColor) {\n      particlesPerColor = Math.floor(particleCount / colorCount);\n      if (!particlesPerColor) {\n        particlesPerColor = 1;\n      }\n    }\n    for (let i = groupStart; i < groupEnd; i++) {\n      ///colorBuffer[i].Copy(Testbed.Test.k_ParticleColors[Math.floor(i / particlesPerColor) % colorCount]);\n      colorBuffer[i] = Test.k_ParticleColors[\n        Math.floor(i / particlesPerColor) % colorCount\n      ].Clone();\n    }\n  }\n\n  /**\n   * Remove particle parameters matching \"filterMask\" from the set\n   * of particle parameters available for this test.\n   */\n  public InitializeParticleParameters(filterMask: number) {\n    const defaultNumValues = ParticleParameter.k_defaultDefinition[0].numValues;\n    const defaultValues = ParticleParameter.k_defaultDefinition[0].values;\n    ///  m_particleParameters = new ParticleParameter::Value[defaultNumValues];\n    this.m_particleParameters = [];\n    // Disable selection of wall and barrier particle types.\n    let numValues = 0;\n    for (let i = 0; i < defaultNumValues; i++) {\n      if (defaultValues[i].value & filterMask) {\n        continue;\n      }\n      ///memcpy(&m_particleParameters[numValues], &defaultValues[i], sizeof(defaultValues[0]));\n      this.m_particleParameters[numValues] = new ParticleParameterValue(defaultValues[i]);\n      numValues++;\n    }\n    this.m_particleParameterDef = new ParticleParameterDefinition(\n      this.m_particleParameters,\n      numValues,\n    );\n    ///m_particleParameterDef.values = m_particleParameters;\n    ///m_particleParameterDef.numValues = numValues;\n    Test.SetParticleParameters([this.m_particleParameterDef], 1);\n  }\n\n  /**\n   * Restore default particle parameters.\n   */\n  public RestoreParticleParameters() {\n    if (this.m_particleParameters) {\n      Test.SetParticleParameters(ParticleParameter.k_defaultDefinition, 1);\n      ///  delete [] m_particleParameters;\n      this.m_particleParameters = null;\n    }\n  }\n\n  /**\n   * Set whether to restart the test on particle parameter\n   * changes. This parameter is re-enabled when the test changes.\n   */\n  public static SetRestartOnParticleParameterChange(enable: boolean): void {\n    Test.particleParameter.SetRestartOnChange(enable);\n  }\n\n  /**\n   * Set the currently selected particle parameter value.  This\n   * value must match one of the values in\n   * Main::k_particleTypes or one of the values referenced by\n   * particleParameterDef passed to SetParticleParameters().\n   */\n  public static SetParticleParameterValue(value: number): number {\n    const index = Test.particleParameter.FindIndexByValue(value);\n    // If the particle type isn't found, so fallback to the first entry in the\n    // parameter.\n    Test.particleParameter.Set(index >= 0 ? index : 0);\n    return Test.particleParameter.GetValue();\n  }\n\n  /**\n   * Get the currently selected particle parameter value and\n   * enable particle parameter selection arrows on Android.\n   */\n  public static GetParticleParameterValue(): number {\n    // Enable display of particle type selection arrows.\n    Test.fullscreenUI.SetParticleParameterSelectionEnabled(true);\n    return Test.particleParameter.GetValue();\n  }\n\n  /**\n   * Override the default particle parameters for the test.\n   */\n  public static SetParticleParameters(\n    particleParameterDef: ParticleParameterDefinition[],\n    particleParameterDefCount: number = particleParameterDef.length,\n  ) {\n    Test.particleParameter.SetDefinition(particleParameterDef, particleParameterDefCount);\n  }\n\n  // #endif\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { Test, TestEntry } from '@highduck/box2d-testbed';\n\nexport const g_testEntries: TestEntry[] = [];\n\nexport function registerTest(category: string, name: string, createFunction: () => Test): void {\n  g_testEntries.push(new TestEntry(category, name, createFunction));\n}\n","'use strict';\n\nvar fails = require('./fails');\n\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n// so we use an intermediate function.\nfunction RE(s, f) {\n  return RegExp(s, f);\n}\n\nexports.UNSUPPORTED_Y = fails(function () {\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n  var re = RE('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\nexports.BROKEN_CARET = fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = RE('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Clamp,\n  b2DegToRad,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Segway extends Test {\n  public static PENDULUM_LENGTH = 10;\n\n  public targetPosition = 10;\n  public targetPositionInterval = 0;\n  public posAvg = 0;\n  public readonly angleController: PIDController = new PIDController();\n  public readonly positionController: PIDController = new PIDController();\n  public pendulumBody: b2Body;\n  public wheelBody: b2Body;\n  public groundBody: b2Body;\n  public wheelJoint: b2RevoluteJoint;\n\n  constructor() {\n    super();\n\n    this.m_world.SetGravity({ x: 0, y: -30 });\n\n    this.angleController.gainP = 1000;\n    this.angleController.gainI = 0;\n    this.angleController.gainD = 250;\n\n    this.positionController.gainP = 0.5;\n    this.positionController.gainI = 0;\n    this.positionController.gainD = 1.5;\n\n    const bd: b2BodyDef = new b2BodyDef();\n    const fd: b2FixtureDef = new b2FixtureDef();\n\n    // pendulumBody = new p2.Body({\n    //     mass: 1,\n    //     position: [0, 2 + 0.5 * PENDULUM_LENGTH]\n    // });\n    // pendulumBody.addShape(new p2.Box({ width: 1, height: PENDULUM_LENGTH }));\n    // world.addBody(pendulumBody);\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.x = 0;\n    bd.position.y = 2 + 0.5 * Segway.PENDULUM_LENGTH;\n    this.pendulumBody = this.m_world.CreateBody(bd);\n    const pendulumShape: b2PolygonShape = new b2PolygonShape();\n    pendulumShape.SetAsBox(0.5, 0.5 * Segway.PENDULUM_LENGTH);\n    fd.shape = pendulumShape;\n    fd.density = 1 / (1 * Segway.PENDULUM_LENGTH); // TODO: specify mass\n    // fd.mass = 1;\n    this.pendulumBody.CreateFixture(fd);\n\n    // wheelBody = new p2.Body({\n    //     mass: 1,\n    //     position: [0,1]\n    // });\n    // wheelBody.addShape(new p2.Circle({ radius: 0.6 }));\n    // world.addBody(wheelBody);\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.x = 0;\n    bd.position.y = 1;\n    this.wheelBody = this.m_world.CreateBody(bd);\n    const wheelShape: b2CircleShape = new b2CircleShape();\n    wheelShape.m_radius = 0.6;\n    fd.shape = wheelShape;\n    fd.density = 1 / (Math.PI * 0.6 * 0.6); // TODO: specify mass\n    // fd.mass = 1;\n    fd.friction = 10;\n    this.wheelBody.CreateFixture(fd);\n\n    // var wheelJoint = new p2.RevoluteConstraint(wheelBody, pendulumBody, {\n    //     localPivotA: [0, 0],\n    //     localPivotB: [0, -0.5 * PENDULUM_LENGTH],\n    //     collideConnected: false\n    // });\n    // world.addConstraint(wheelJoint);\n    // wheelJoint.motorEnabled = true;\n    // var m = 40;\n    // wheelJoint.motorEquation.maxForce = m;\n    // wheelJoint.motorEquation.minForce = -m;\n    const jd = new b2RevoluteJointDef();\n    jd.Initialize(this.wheelBody, this.pendulumBody, { x: 0, y: 0 });\n    jd.localAnchorA.Set(0, 0);\n    jd.localAnchorB.Set(0, -0.5 * Segway.PENDULUM_LENGTH);\n    jd.collideConnected = false;\n    jd.enableMotor = true;\n    jd.maxMotorTorque = 40;\n    this.wheelJoint = this.m_world.CreateJoint(jd) /* TODO: ??? */ as b2RevoluteJoint;\n\n    // Create ground\n    // var groundShape = new p2.Plane();\n    // var groundBody = new p2.Body({\n    //     position:[0,0],\n    // });\n    // groundBody.addShape(groundShape);\n    // world.addBody(groundBody);\n    bd.type = b2BodyType.b2_staticBody;\n    bd.position.x = 0;\n    bd.position.y = 0;\n    this.groundBody = this.m_world.CreateBody(bd);\n    const groundShape: b2EdgeShape = new b2EdgeShape();\n    groundShape.Set({ x: -100, y: 0 }, { x: 100, y: 0 });\n    fd.shape = groundShape;\n    fd.friction = 10;\n    this.groundBody.CreateFixture(fd);\n  }\n\n  public Step(settings: Settings): void {\n    let dt: number = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    super.Step(settings);\n\n    this.targetPositionInterval += dt;\n    if (this.targetPositionInterval >= 8) {\n      this.targetPositionInterval = 0;\n      this.targetPosition = this.targetPosition === 10 ? -10 : 10;\n    }\n\n    let targetAngle = 0;\n\n    //if (true) {\n    const alpha = 0.4;\n    // posAvg = (1 - alpha) * posAvg + alpha * pendulumBody.position[0];\n    this.posAvg = (1 - alpha) * this.posAvg + alpha * this.pendulumBody.GetPosition().x;\n    this.positionController.currentError = this.targetPosition - this.posAvg;\n    // positionController.step(world.lastTimeStep);\n    this.positionController.step(dt);\n    let targetLinAccel: number = this.positionController.output;\n    // targetLinAccel = clamp(targetLinAccel, -10.0, 10.0);\n    targetLinAccel = b2Clamp(targetLinAccel, -10, 10);\n    // targetAngle = targetLinAccel / world.gravity[1];\n    targetAngle = targetLinAccel / this.m_world.GetGravity().y;\n    // targetAngle = clamp(targetAngle, -15 * DEGTORAD, 15 * DEGTORAD);\n    targetAngle = b2Clamp(targetAngle, b2DegToRad(-15), b2DegToRad(15));\n    //}\n\n    // var currentAngle = pendulumBody.angle;\n    let currentAngle: number = this.pendulumBody.GetAngle();\n    currentAngle = normalizeAngle(currentAngle);\n    this.angleController.currentError = targetAngle - currentAngle;\n    // angleController.step(world.lastTimeStep);\n    this.angleController.step(dt);\n    let targetSpeed: number = this.angleController.output;\n    // give up if speed required is really high\n    if (Math.abs(targetSpeed) > 1000) {\n      targetSpeed = 0;\n    }\n    // this is the only output\n    // var targetAngularVelocity = -targetSpeed / (2 * Math.PI * wheelBody.shapes[0].radius); // wheel circumference = 2*pi*r\n    const targetAngularVelocity: number = targetSpeed / (2 * Math.PI * 0.6); // wheel circumference = 2*pi*r\n    // wheelJoint.motorSpeed = targetAngularVelocity;\n    this.wheelJoint.SetMotorSpeed(targetAngularVelocity);\n  }\n\n  public static Create(): Test {\n    return new Segway();\n  }\n}\n\n/*\n  Simple PID controller for single float variable\n  http://en.wikipedia.org/wiki/PID_controller#Pseudocode\n*/\nclass PIDController {\n  public gainP = 1;\n  public gainI = 1;\n  public gainD = 1;\n  public currentError = 0;\n  public previousError = 0;\n  public integral = 0;\n  public output = 0;\n\n  public step(dt: number): void {\n    this.integral = dt * (this.integral + this.currentError);\n    const derivative: number = (1 / dt) * (this.currentError - this.previousError);\n    this.output =\n      this.gainP * this.currentError + this.gainI * this.integral + this.gainD * derivative;\n    this.previousError = this.currentError;\n  }\n}\n\n// var DEGTORAD = 0.0174532925199432957;\n// var RADTODEG = 57.295779513082320876;\n// var PENDULUM_LENGTH = 10;\n// var targetPosition = 0;\n// var targetPositionInterval = setInterval(changeTargetPos, 8000);\n// function changeTargetPos(){\n//     targetPosition = targetPosition===0 ? 10 : 0;\n// }\n// changeTargetPos();\n// var posAvg = 0;\n// var angleController = new PIDController();\n// angleController.gainP = 1000;\n// angleController.gainI = 0;\n// angleController.gainD = 250;\n// var positionController = new PIDController();\n// positionController.gainP = 0.5;\n// positionController.gainI = 0;\n// positionController.gainD = 1.5;\n// // Create demo application\n// var app = new p2.WebGLRenderer(function(){\n//     var world = new p2.World({\n//         gravity : [0,-30]\n//     });\n//     this.setWorld(world);\n//     world.defaultContactMaterial.friction = 10;\n//     pendulumBody = new p2.Body({\n//         mass: 1,\n//         position: [0, 2 + 0.5 * PENDULUM_LENGTH]\n//     });\n//     pendulumBody.addShape(new p2.Box({ width: 1, height: PENDULUM_LENGTH }));\n//     world.addBody(pendulumBody);\n//     wheelBody = new p2.Body({\n//         mass: 1,\n//         position: [0,1]\n//     });\n//     wheelBody.addShape(new p2.Circle({ radius: 0.6 }));\n//     world.addBody(wheelBody);\n//     var wheelJoint = new p2.RevoluteConstraint(wheelBody, pendulumBody, {\n//         localPivotA: [0, 0],\n//         localPivotB: [0, -0.5 * PENDULUM_LENGTH],\n//         collideConnected: false\n//     });\n//     world.addConstraint(wheelJoint);\n//     wheelJoint.motorEnabled = true;\n//     var m = 40;\n//     wheelJoint.motorEquation.maxForce = m;\n//     wheelJoint.motorEquation.minForce = -m;\n//     // Create ground\n//     var groundShape = new p2.Plane();\n//     var groundBody = new p2.Body({\n//         position:[0,0],\n//     });\n//     groundBody.addShape(groundShape);\n//     world.addBody(groundBody);\n//     world.on('postStep', function(){\n//         var targetAngle = 0;\n//         if ( true ) {\n//             var alpha = 0.4;\n//             posAvg = (1 - alpha) * posAvg + alpha * pendulumBody.position[0];\n//             positionController.currentError = targetPosition - posAvg;\n//             positionController.step(world.lastTimeStep);\n//             var targetLinAccel = positionController.output;\n//             targetLinAccel = clamp(targetLinAccel, -10.0, 10.0);\n//             targetAngle = targetLinAccel / world.gravity[1];\n//             targetAngle = clamp(targetAngle, -15 * DEGTORAD, 15 * DEGTORAD);\n//         }\n//         var currentAngle = pendulumBody.angle;\n//         currentAngle = normalizeAngle(currentAngle);\n//         angleController.currentError = ( targetAngle - currentAngle );\n//         angleController.step(world.lastTimeStep);\n//         var targetSpeed = angleController.output;\n//         // give up if speed required is really high\n//         if ( Math.abs(targetSpeed) > 1000 )\n//             targetSpeed = 0;\n//         // this is the only output\n//         var targetAngularVelocity = -targetSpeed / (2 * Math.PI * wheelBody.shapes[0].radius); // wheel circumference = 2*pi*r\n//         wheelJoint.motorSpeed = targetAngularVelocity;\n//     });\n//     app.frame(3,5,16,16);\n// });\n// /*\n//     Simple PID controller for single float variable\n//     http://en.wikipedia.org/wiki/PID_controller#Pseudocode\n// */\n// function PIDController(){\n//     this.gainP = 1;\n//     this.gainI = 1;\n//     this.gainD = 1;\n//     this.currentError = 0;\n//     this.previousError = 0;\n//     this.integral = 0;\n//     this.output = 0;\n// }\n// PIDController.prototype.step = function(dt) {\n//     this.integral = dt * (this.integral + this.currentError);\n//     var derivative = (1 / dt) * (this.currentError - this.previousError);\n//     this.output = this.gainP * this.currentError + this.gainI * this.integral + this.gainD * derivative;\n//     this.previousError = this.currentError;\n// };\n// function clamp(num, min, max) {\n//     return Math.min(Math.max(num, min), max);\n// };\nfunction normalizeAngle(angle: number): number {\n  while (angle > b2DegToRad(180)) {\n    angle -= b2DegToRad(360);\n  }\n  while (angle < b2DegToRad(-180)) {\n    angle += b2DegToRad(360);\n  }\n  return angle;\n}\n","/*\n * Copyright (c) 2011 Erin Catto http://box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Transform, XY } from './b2Math';\n\nexport interface RGB {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface RGBA extends RGB {\n  a: number;\n}\n\n/// Color for debug drawing. Each value has the range [0,1].\nexport class b2Color implements RGBA {\n  static readonly ZERO: Readonly<b2Color> = new b2Color(0, 0, 0, 0);\n\n  static readonly RED: Readonly<b2Color> = new b2Color(1, 0, 0);\n  static readonly GREEN: Readonly<b2Color> = new b2Color(0, 1, 0);\n  static readonly BLUE: Readonly<b2Color> = new b2Color(0, 0, 1);\n  r = NaN;\n  g = NaN;\n  b = NaN;\n  a = NaN;\n\n  constructor(r = 0.5, g = 0.5, b = 0.5, a = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  Clone(): b2Color {\n    return new b2Color().Copy(this);\n  }\n\n  Copy(other: RGBA): this {\n    this.r = other.r;\n    this.g = other.g;\n    this.b = other.b;\n    this.a = other.a;\n    return this;\n  }\n\n  IsEqual(color: RGBA): boolean {\n    return this.r === color.r && this.g === color.g && this.b === color.b && this.a === color.a;\n  }\n\n  IsZero(): boolean {\n    return this.r === 0 && this.g === 0 && this.b === 0 && this.a === 0;\n  }\n\n  Set(r: number, g: number, b: number, a: number = this.a): void {\n    this.SetRGBA(r, g, b, a);\n  }\n\n  SetByteRGB(r: number, g: number, b: number): this {\n    this.r = r / 0xff;\n    this.g = g / 0xff;\n    this.b = b / 0xff;\n    return this;\n  }\n\n  SetByteRGBA(r: number, g: number, b: number, a: number): this {\n    this.r = r / 0xff;\n    this.g = g / 0xff;\n    this.b = b / 0xff;\n    this.a = a / 0xff;\n    return this;\n  }\n\n  SetRGB(rr: number, gg: number, bb: number): this {\n    this.r = rr;\n    this.g = gg;\n    this.b = bb;\n    return this;\n  }\n\n  SetRGBA(rr: number, gg: number, bb: number, aa: number): this {\n    this.r = rr;\n    this.g = gg;\n    this.b = bb;\n    this.a = aa;\n    return this;\n  }\n\n  SelfAdd(color: RGBA): this {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    this.a += color.a;\n    return this;\n  }\n\n  Add<T extends RGBA>(color: RGBA, out: T): T {\n    out.r = this.r + color.r;\n    out.g = this.g + color.g;\n    out.b = this.b + color.b;\n    out.a = this.a + color.a;\n    return out;\n  }\n\n  SelfSub(color: RGBA): this {\n    this.r -= color.r;\n    this.g -= color.g;\n    this.b -= color.b;\n    this.a -= color.a;\n    return this;\n  }\n\n  Sub<T extends RGBA>(color: RGBA, out: T): T {\n    out.r = this.r - color.r;\n    out.g = this.g - color.g;\n    out.b = this.b - color.b;\n    out.a = this.a - color.a;\n    return out;\n  }\n\n  SelfMul(s: number): this {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    this.a *= s;\n    return this;\n  }\n\n  Mul<T extends RGBA>(s: number, out: T): T {\n    out.r = this.r * s;\n    out.g = this.g * s;\n    out.b = this.b * s;\n    out.a = this.a * s;\n    return out;\n  }\n\n  Mix(mixColor: RGBA, strength: number): void {\n    b2Color.MixColors(this, mixColor, strength);\n  }\n\n  static MixColors(colorA: RGBA, colorB: RGBA, strength: number): void {\n    const dr = strength * (colorB.r - colorA.r);\n    const dg = strength * (colorB.g - colorA.g);\n    const db = strength * (colorB.b - colorA.b);\n    const da = strength * (colorB.a - colorA.a);\n    colorA.r += dr;\n    colorA.g += dg;\n    colorA.b += db;\n    colorA.a += da;\n    colorB.r -= dr;\n    colorB.g -= dg;\n    colorB.b -= db;\n    colorB.a -= da;\n  }\n\n  MakeStyleString(alpha: number = this.a): string {\n    return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);\n  }\n\n  static MakeStyleString(r: number, g: number, b: number, a = 1.0): string {\n    // function clamp(x: number, lo: number, hi: number) { return x < lo ? lo : hi < x ? hi : x; }\n    r *= 255; // r = clamp(r, 0, 255);\n    g *= 255; // g = clamp(g, 0, 255);\n    b *= 255; // b = clamp(b, 0, 255);\n    // a = clamp(a, 0, 1);\n    if (a < 1) {\n      return `rgba(${r},${g},${b},${a})`;\n    } else {\n      return `rgb(${r},${g},${b})`;\n    }\n  }\n}\n\nexport const enum b2DrawFlags {\n  e_none = 0,\n  e_shapeBit = 0x0001, ///< draw shapes\n  e_jointBit = 0x0002, ///< draw joint connections\n  e_aabbBit = 0x0004, ///< draw axis aligned bounding boxes\n  e_pairBit = 0x0008, ///< draw broad-phase pairs\n  e_centerOfMassBit = 0x0010, ///< draw center of mass frame\n  e_particleBit = 0x0020, ///< draw particles\n  e_controllerBit = 0x0040, /// @see b2Controller list\n  e_all = 0x003f,\n}\n\n/// Implement and register this class with a b2World to provide debug drawing of physics\n/// entities in your game.\nexport abstract class b2Draw {\n  m_drawFlags = b2DrawFlags.e_none;\n\n  SetFlags(flags: b2DrawFlags): void {\n    this.m_drawFlags = flags;\n  }\n\n  GetFlags(): b2DrawFlags {\n    return this.m_drawFlags;\n  }\n\n  AppendFlags(flags: b2DrawFlags): void {\n    this.m_drawFlags |= flags;\n  }\n\n  ClearFlags(flags: b2DrawFlags): void {\n    this.m_drawFlags &= ~flags;\n  }\n\n  abstract PushTransform(xf: b2Transform): void;\n\n  abstract PopTransform(xf: b2Transform): void;\n\n  abstract DrawPolygon(vertices: XY[], vertexCount: number, color: RGBA): void;\n\n  abstract DrawSolidPolygon(vertices: XY[], vertexCount: number, color: RGBA): void;\n\n  abstract DrawCircle(center: XY, radius: number, color: RGBA): void;\n\n  abstract DrawSolidCircle(center: XY, radius: number, axis: XY, color: RGBA): void;\n\n  abstract DrawParticles(centers: XY[], radius: number, colors: RGBA[] | null, count: number): void;\n\n  abstract DrawSegment(p1: XY, p2: XY, color: RGBA): void;\n\n  abstract DrawTransform(xf: b2Transform): void;\n\n  abstract DrawPoint(p: XY, size: number, color: RGBA): void;\n}\n","/*\n * Copyright (c) 2011 Erin Catto http://box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n/// Timer for profiling. This has platform specific code and may\n/// not work on every platform.\nexport class b2Timer {\n  m_start = NaN;\n\n  constructor() {\n    if (B2_ENABLE_PROFILER) {\n      this.m_start = performance.now();\n    }\n  }\n\n  /// Reset the timer.\n  Reset(): b2Timer {\n    if (B2_ENABLE_PROFILER) {\n      this.m_start = performance.now();\n    }\n    return this;\n  }\n\n  /// Get the time since construction or the last reset.\n  GetMilliseconds(): number {\n    if (B2_ENABLE_PROFILER) {\n      return performance.now() - this.m_start;\n    } else {\n      return 0;\n    }\n  }\n}\n\nexport class b2Counter {\n  m_count = 0;\n  m_min_count = 0;\n  m_max_count = 0;\n\n  GetCount(): number {\n    return this.m_count;\n  }\n\n  GetMinCount(): number {\n    return this.m_min_count;\n  }\n\n  GetMaxCount(): number {\n    return this.m_max_count;\n  }\n\n  ResetCount(): number {\n    const count = this.m_count;\n    this.m_count = 0;\n    return count;\n  }\n\n  ResetMinCount(): void {\n    this.m_min_count = 0;\n  }\n\n  ResetMaxCount(): void {\n    this.m_max_count = 0;\n  }\n\n  Increment(): void {\n    ++this.m_count;\n\n    if (this.m_max_count < this.m_count) {\n      this.m_max_count = this.m_count;\n    }\n  }\n\n  Decrement(): void {\n    --this.m_count;\n\n    if (this.m_min_count > this.m_count) {\n      this.m_min_count = this.m_count;\n    }\n  }\n}\n","/*\n * Copyright (c) 2010 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert, b2MakeNullArray } from './b2Settings';\n\n/// This is a growable LIFO stack with an initial capacity of N.\n/// If the stack size exceeds the initial capacity, the heap is used\n/// to increase the size of the stack.\n\nexport class b2GrowableStack<T> {\n  m_stack: Array<T | null>;\n  m_count = 0;\n\n  constructor(N: number) {\n    this.m_stack = b2MakeNullArray(N);\n  }\n\n  Reset(): this {\n    this.m_count = 0;\n    return this;\n  }\n\n  Push(element: T): void {\n    if (this.m_count < this.m_stack.length) {\n      this.m_stack[this.m_count] = element;\n    } else {\n      this.m_stack.push(element);\n    }\n    ++this.m_count;\n  }\n\n  Pop(): T {\n    !!B2_DEBUG && b2Assert(this.m_count > 0);\n    if (this.m_count === 0) {\n      throw new Error();\n    }\n    --this.m_count;\n    const element = this.m_stack[this.m_count]!;\n    this.m_stack[this.m_count] = null;\n    return element;\n  }\n\n  GetCount(): number {\n    return this.m_count;\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../b2Collision';\nimport { b2DistanceProxy } from '../b2Distance';\nimport { b2Assert } from '../../common/b2Settings';\n\n/// This holds the mass data computed for a shape.\nexport class b2MassData {\n  /// The mass of the shape, usually in kilograms.\n  mass = NaN;\n\n  /// The rotational inertia of the shape about the local origin.\n  I = NaN;\n\n  /// The position of the shape's centroid relative to the shape's origin.\n  readonly center = new b2Vec2();\n\n  constructor() {\n    this.mass = 0.0;\n    this.I = 0.0;\n  }\n}\n\nexport const enum b2ShapeType {\n  e_unknown = -1,\n  e_circleShape = 0,\n  e_edgeShape = 1,\n  e_polygonShape = 2,\n  e_chainShape = 3,\n  e_shapeTypeCount = 4,\n}\n\n/// A shape is used for collision detection. You can create a shape however you like.\n/// Shapes used for simulation in b2World are created automatically when a b2Fixture\n/// is created. Shapes may encapsulate a one or more child shapes.\nexport abstract class b2Shape {\n  readonly m_type: b2ShapeType;\n\n  /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for\n  /// making rounded polygons.\n  m_radius = NaN;\n\n  constructor(type: b2ShapeType, radius: number) {\n    this.m_type = type;\n    this.m_radius = radius;\n  }\n\n  /// Clone the concrete shape.\n  abstract Clone(): b2Shape;\n\n  Copy(other: b2Shape): b2Shape {\n    !!B2_DEBUG && b2Assert(this.m_type === other.m_type);\n    this.m_radius = other.m_radius;\n    return this;\n  }\n\n  /// Get the type of this shape. You can use this to down cast to the concrete shape.\n  /// @return the shape type.\n  GetType(): b2ShapeType {\n    return this.m_type;\n  }\n\n  /// Get the number of child primitives.\n  abstract GetChildCount(): number;\n\n  /// Test a point for containment in this shape. This only works for convex shapes.\n  /// @param xf the shape world transform.\n  /// @param p a point in world coordinates.\n  abstract TestPoint(xf: b2Transform, p: XY): boolean;\n\n  /// Compute the distance from the current shape to the specified point. This only works for convex shapes.\n  /// @param xf the shape world transform.\n  /// @param p a point in world coordinates.\n  /// @param distance returns the distance from the current shape.\n  /// @param normal returns the direction in which the distance increases.\n  abstract ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number;\n\n  /// Cast a ray against a child shape.\n  /// @param output the ray-cast results.\n  /// @param input the ray-cast input parameters.\n  /// @param transform the transform to be applied to the shape.\n  /// @param childIndex the child shape index\n  abstract RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    transform: b2Transform,\n    childIndex: number,\n  ): boolean;\n\n  /// Given a transform, compute the associated axis aligned bounding box for a child shape.\n  /// @param aabb returns the axis aligned box.\n  /// @param xf the world transform of the shape.\n  /// @param childIndex the child shape\n  abstract ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void;\n\n  /// Compute the mass properties of this shape using its dimensions and density.\n  /// The inertia tensor is computed about the local origin.\n  /// @param massData returns the mass data for this shape.\n  /// @param density the density in kilograms per meter squared.\n  abstract ComputeMass(massData: b2MassData, density: number): void;\n\n  abstract SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void;\n\n  abstract ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number;\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_epsilon, b2_pi, b2Assert } from '../../common/b2Settings';\nimport { b2Asin, b2Pow, b2Sq, b2Sqrt, b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../b2Collision';\nimport { b2DistanceProxy } from '../b2Distance';\nimport { b2MassData, b2Shape, b2ShapeType } from './b2Shape';\n\n/// @see b2Shape::ComputeDistance\nconst ComputeDistance_s_center = new b2Vec2();\n\n/// A circle shape.\nexport class b2CircleShape extends b2Shape {\n  readonly m_p: b2Vec2 = new b2Vec2();\n\n  constructor(radius = 0.0) {\n    super(b2ShapeType.e_circleShape, radius);\n  }\n\n  Set(position: XY, radius: number = this.m_radius): this {\n    this.m_p.Copy(position);\n    this.m_radius = radius;\n    return this;\n  }\n\n  /// Implement b2Shape.\n  Clone(): b2CircleShape {\n    return new b2CircleShape().Copy(this);\n  }\n\n  Copy(other: b2CircleShape): b2CircleShape {\n    super.Copy(other);\n\n    !!B2_DEBUG && b2Assert(other instanceof b2CircleShape);\n\n    this.m_p.Copy(other.m_p);\n    return this;\n  }\n\n  /// @see b2Shape::GetChildCount\n  GetChildCount(): number {\n    return 1;\n  }\n\n  /// Implement b2Shape.\n  private static TestPoint_s_center = new b2Vec2();\n  private static TestPoint_s_d = new b2Vec2();\n\n  TestPoint(transform: b2Transform, p: XY): boolean {\n    const center: b2Vec2 = b2Transform.MulXV(transform, this.m_p, b2CircleShape.TestPoint_s_center);\n    const d: b2Vec2 = b2Vec2.SubVV(p, center, b2CircleShape.TestPoint_s_d);\n    return b2Vec2.DotVV(d, d) <= b2Sq(this.m_radius);\n  }\n\n  ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    if (B2_ENABLE_PARTICLE) {\n      const center = b2Transform.MulXV(xf, this.m_p, ComputeDistance_s_center);\n      b2Vec2.SubVV(p, center, normal);\n      return normal.Normalize() - this.m_radius;\n    } else {\n      return 0.0;\n    }\n  }\n\n  /// Implement b2Shape.\n  // Collision Detection in Interactive 3D Environments by Gino van den Bergen\n  // From Section 3.1.2\n  // x = s + a * r\n  // norm(x) = radius\n  private static RayCast_s_position = new b2Vec2();\n  private static RayCast_s_s = new b2Vec2();\n  private static RayCast_s_r = new b2Vec2();\n\n  RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    transform: b2Transform,\n    childIndex: number,\n  ): boolean {\n    const position: b2Vec2 = b2Transform.MulXV(\n      transform,\n      this.m_p,\n      b2CircleShape.RayCast_s_position,\n    );\n    const s: b2Vec2 = b2Vec2.SubVV(input.p1, position, b2CircleShape.RayCast_s_s);\n    const b: number = b2Vec2.DotVV(s, s) - b2Sq(this.m_radius);\n\n    // Solve quadratic equation.\n    const r: b2Vec2 = b2Vec2.SubVV(input.p2, input.p1, b2CircleShape.RayCast_s_r);\n    const c: number = b2Vec2.DotVV(s, r);\n    const rr: number = b2Vec2.DotVV(r, r);\n    const sigma = c * c - rr * b;\n\n    // Check for negative discriminant and short segment.\n    if (sigma < 0 || rr < b2_epsilon) {\n      return false;\n    }\n\n    // Find the point of intersection of the line with the circle.\n    let a: number = -(c + b2Sqrt(sigma));\n\n    // Is the intersection point on the segment?\n    if (0 <= a && a <= input.maxFraction * rr) {\n      a /= rr;\n      output.fraction = a;\n      b2Vec2.AddVMulSV(s, a, r, output.normal).SelfNormalize();\n      return true;\n    }\n\n    return false;\n  }\n\n  /// @see b2Shape::ComputeAABB\n  private static ComputeAABB_s_p = new b2Vec2();\n\n  ComputeAABB(aabb: b2AABB, transform: b2Transform, childIndex: number): void {\n    const p: b2Vec2 = b2Transform.MulXV(transform, this.m_p, b2CircleShape.ComputeAABB_s_p);\n    aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius);\n    aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius);\n  }\n\n  /// @see b2Shape::ComputeMass\n  ComputeMass(massData: b2MassData, density: number): void {\n    const radius_sq: number = b2Sq(this.m_radius);\n    massData.mass = density * b2_pi * radius_sq;\n    massData.center.Copy(this.m_p);\n\n    // inertia about the local origin\n    massData.I = massData.mass * (0.5 * radius_sq + b2Vec2.DotVV(this.m_p, this.m_p));\n  }\n\n  SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void {\n    proxy.m_vertices = proxy.m_buffer;\n    proxy.m_vertices[0].Copy(this.m_p);\n    proxy.m_count = 1;\n    proxy.m_radius = this.m_radius;\n  }\n\n  ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number {\n    const p: b2Vec2 = b2Transform.MulXV(xf, this.m_p, new b2Vec2());\n    const l: number = -(b2Vec2.DotVV(normal, p) - offset);\n\n    if (l < -this.m_radius + b2_epsilon) {\n      // Completely dry\n      return 0;\n    }\n    if (l > this.m_radius) {\n      // Completely wet\n      c.Copy(p);\n      return b2_pi * this.m_radius * this.m_radius;\n    }\n\n    // Magic\n    const r2: number = this.m_radius * this.m_radius;\n    const l2: number = l * l;\n    const area: number = r2 * (b2Asin(l / this.m_radius) + b2_pi / 2) + l * b2Sqrt(r2 - l2);\n    const com: number = ((-2 / 3) * b2Pow(r2 - l2, 1.5)) / area;\n\n    c.x = p.x + normal.x * com;\n    c.y = p.y + normal.y * com;\n\n    return area;\n  }\n}\n","/*\n * Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_polygonRadius, b2Assert } from '../../common/b2Settings';\nimport { b2Rot, b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../b2Collision';\nimport { b2DistanceProxy } from '../b2Distance';\nimport { b2MassData, b2Shape, b2ShapeType } from './b2Shape';\n\n/// @see b2Shape::ComputeDistance\nconst ComputeDistance_s_v1 = new b2Vec2();\nconst ComputeDistance_s_v2 = new b2Vec2();\nconst ComputeDistance_s_d = new b2Vec2();\nconst ComputeDistance_s_s = new b2Vec2();\n\n/// A line segment (edge) shape. These can be connected in chains or loops\n/// to other edge shapes. The connectivity information is used to ensure\n/// correct contact normals.\nexport class b2EdgeShape extends b2Shape {\n  readonly m_vertex1: b2Vec2 = new b2Vec2();\n  readonly m_vertex2: b2Vec2 = new b2Vec2();\n  readonly m_vertex0: b2Vec2 = new b2Vec2();\n  readonly m_vertex3: b2Vec2 = new b2Vec2();\n  m_hasVertex0 = false;\n  m_hasVertex3 = false;\n\n  constructor() {\n    super(b2ShapeType.e_edgeShape, b2_polygonRadius);\n  }\n\n  /// Set this as an isolated edge.\n  Set(v1: XY, v2: XY): b2EdgeShape {\n    this.m_vertex1.Copy(v1);\n    this.m_vertex2.Copy(v2);\n    this.m_hasVertex0 = false;\n    this.m_hasVertex3 = false;\n    return this;\n  }\n\n  /// Implement b2Shape.\n  Clone(): b2EdgeShape {\n    return new b2EdgeShape().Copy(this);\n  }\n\n  Copy(other: b2EdgeShape): b2EdgeShape {\n    super.Copy(other);\n\n    !!B2_DEBUG && b2Assert(other instanceof b2EdgeShape);\n\n    this.m_vertex1.Copy(other.m_vertex1);\n    this.m_vertex2.Copy(other.m_vertex2);\n    this.m_vertex0.Copy(other.m_vertex0);\n    this.m_vertex3.Copy(other.m_vertex3);\n    this.m_hasVertex0 = other.m_hasVertex0;\n    this.m_hasVertex3 = other.m_hasVertex3;\n\n    return this;\n  }\n\n  /// @see b2Shape::GetChildCount\n  GetChildCount(): number {\n    return 1;\n  }\n\n  /// @see b2Shape::TestPoint\n  TestPoint(xf: b2Transform, p: XY): boolean {\n    return false;\n  }\n\n  ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    if (B2_ENABLE_PARTICLE) {\n      const v1 = b2Transform.MulXV(xf, this.m_vertex1, ComputeDistance_s_v1);\n      const v2 = b2Transform.MulXV(xf, this.m_vertex2, ComputeDistance_s_v2);\n\n      const d = b2Vec2.SubVV(p, v1, ComputeDistance_s_d);\n      const s = b2Vec2.SubVV(v2, v1, ComputeDistance_s_s);\n      const ds = b2Vec2.DotVV(d, s);\n      if (ds > 0) {\n        const s2 = b2Vec2.DotVV(s, s);\n        if (ds > s2) {\n          b2Vec2.SubVV(p, v2, d);\n        } else {\n          d.SelfMulSub(ds / s2, s);\n        }\n      }\n      normal.Copy(d);\n      return normal.Normalize();\n    } else {\n      return 0.0;\n    }\n  }\n\n  /// Implement b2Shape.\n  // p = p1 + t * d\n  // v = v1 + s * e\n  // p1 + t * d = v1 + s * e\n  // s * e - t * d = p1 - v1\n  private static RayCast_s_p1 = new b2Vec2();\n  private static RayCast_s_p2 = new b2Vec2();\n  private static RayCast_s_d = new b2Vec2();\n  private static RayCast_s_e = new b2Vec2();\n  private static RayCast_s_q = new b2Vec2();\n  private static RayCast_s_r = new b2Vec2();\n\n  RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    xf: b2Transform,\n    childIndex: number,\n  ): boolean {\n    // Put the ray into the edge's frame of reference.\n    const p1: b2Vec2 = b2Transform.MulTXV(xf, input.p1, b2EdgeShape.RayCast_s_p1);\n    const p2: b2Vec2 = b2Transform.MulTXV(xf, input.p2, b2EdgeShape.RayCast_s_p2);\n    const d: b2Vec2 = b2Vec2.SubVV(p2, p1, b2EdgeShape.RayCast_s_d);\n\n    const v1: b2Vec2 = this.m_vertex1;\n    const v2: b2Vec2 = this.m_vertex2;\n    const e: b2Vec2 = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_e);\n    const normal: b2Vec2 = output.normal.Set(e.y, -e.x).SelfNormalize();\n\n    // q = p1 + t * d\n    // dot(normal, q - v1) = 0\n    // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n    const numerator: number = b2Vec2.DotVV(normal, b2Vec2.SubVV(v1, p1, b2Vec2.s_t0));\n    const denominator: number = b2Vec2.DotVV(normal, d);\n\n    if (denominator === 0) {\n      return false;\n    }\n\n    const t: number = numerator / denominator;\n    if (t < 0 || input.maxFraction < t) {\n      return false;\n    }\n\n    const q: b2Vec2 = b2Vec2.AddVMulSV(p1, t, d, b2EdgeShape.RayCast_s_q);\n\n    // q = v1 + s * r\n    // s = dot(q - v1, r) / dot(r, r)\n    const r: b2Vec2 = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_r);\n    const rr: number = b2Vec2.DotVV(r, r);\n    if (rr === 0) {\n      return false;\n    }\n\n    const s: number = b2Vec2.DotVV(b2Vec2.SubVV(q, v1, b2Vec2.s_t0), r) / rr;\n    if (s < 0 || 1 < s) {\n      return false;\n    }\n\n    output.fraction = t;\n    b2Rot.MulRV(xf.q, output.normal, output.normal);\n    if (numerator > 0) {\n      output.normal.SelfNeg();\n    }\n    return true;\n  }\n\n  /// @see b2Shape::ComputeAABB\n  private static ComputeAABB_s_v1 = new b2Vec2();\n  private static ComputeAABB_s_v2 = new b2Vec2();\n\n  ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void {\n    const v1: b2Vec2 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeAABB_s_v1);\n    const v2: b2Vec2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeAABB_s_v2);\n\n    b2Vec2.MinV(v1, v2, aabb.lowerBound);\n    b2Vec2.MaxV(v1, v2, aabb.upperBound);\n\n    const r: number = this.m_radius;\n    aabb.lowerBound.SelfSubXY(r, r);\n    aabb.upperBound.SelfAddXY(r, r);\n  }\n\n  /// @see b2Shape::ComputeMass\n  ComputeMass(massData: b2MassData, density: number): void {\n    massData.mass = 0;\n    b2Vec2.MidVV(this.m_vertex1, this.m_vertex2, massData.center);\n    massData.I = 0;\n  }\n\n  SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void {\n    proxy.m_vertices = proxy.m_buffer;\n    proxy.m_vertices[0].Copy(this.m_vertex1);\n    proxy.m_vertices[1].Copy(this.m_vertex2);\n    proxy.m_count = 2;\n    proxy.m_radius = this.m_radius;\n  }\n\n  ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number {\n    c.SetZero();\n    return 0;\n  }\n}\n","/*\n * Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_polygonRadius, b2Assert } from '../../common/b2Settings';\nimport { b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../b2Collision';\nimport { b2DistanceProxy } from '../b2Distance';\nimport { b2MassData, b2Shape, b2ShapeType } from './b2Shape';\nimport { b2EdgeShape } from './b2EdgeShape';\n\n/// A chain shape is a free form sequence of line segments.\n/// The chain has two-sided collision, so you can use inside and outside collision.\n/// Therefore, you may use any winding order.\n/// Since there may be many vertices, they are allocated using b2Alloc.\n/// Connectivity information is used to create smooth collisions.\n/// WARNING: The chain will not collide properly if there are self-intersections.\nexport class b2ChainShape extends b2Shape {\n  m_vertices: b2Vec2[] = [];\n  m_count = 0;\n  readonly m_prevVertex = new b2Vec2();\n  readonly m_nextVertex = new b2Vec2();\n  m_hasPrevVertex = false;\n  m_hasNextVertex = false;\n\n  constructor() {\n    super(b2ShapeType.e_chainShape, b2_polygonRadius);\n  }\n\n  /// Create a loop. This automatically adjusts connectivity.\n  /// @param vertices an array of vertices, these are copied\n  /// @param count the vertex count\n  CreateLoop(vertices: XY[]): b2ChainShape;\n  CreateLoop(vertices: XY[], count: number): b2ChainShape;\n  CreateLoop(vertices: number[]): b2ChainShape;\n  CreateLoop(...args: any[]): b2ChainShape {\n    if (typeof args[0][0] === 'number') {\n      const vertices: number[] = args[0];\n      if (vertices.length % 2 !== 0) {\n        throw new Error();\n      }\n      return this._CreateLoop(\n        (index: number): XY => ({\n          x: vertices[index * 2],\n          y: vertices[index * 2 + 1],\n        }),\n        vertices.length / 2,\n      );\n    } else {\n      const vertices: XY[] = args[0];\n      const count: number = args[1] || vertices.length;\n      return this._CreateLoop((index: number): XY => vertices[index], count);\n    }\n  }\n\n  private _CreateLoop(vertices: (index: number) => XY, count: number): b2ChainShape {\n    !!B2_DEBUG && b2Assert(count >= 3);\n    if (count < 3) {\n      return this;\n    }\n    // DEBUG: for (let i: number = 1; i < count; ++i) {\n    // DEBUG:   const v1 = vertices[start + i - 1];\n    // DEBUG:   const v2 = vertices[start + i];\n    // DEBUG:   // If the code crashes here, it means your vertices are too close together.\n    // DEBUG:   b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\n    // DEBUG: }\n\n    this.m_count = count + 1;\n    this.m_vertices = b2Vec2.MakeArray(this.m_count);\n    for (let i = 0; i < count; ++i) {\n      this.m_vertices[i].Copy(vertices(i));\n    }\n    this.m_vertices[count].Copy(this.m_vertices[0]);\n    this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]);\n    this.m_nextVertex.Copy(this.m_vertices[1]);\n    this.m_hasPrevVertex = true;\n    this.m_hasNextVertex = true;\n    return this;\n  }\n\n  /// Create a chain with isolated end vertices.\n  /// @param vertices an array of vertices, these are copied\n  /// @param count the vertex count\n  CreateChain(vertices: XY[]): b2ChainShape;\n  CreateChain(vertices: XY[], count: number): b2ChainShape;\n  CreateChain(vertices: number[]): b2ChainShape;\n  CreateChain(...args: any[]): b2ChainShape {\n    if (typeof args[0][0] === 'number') {\n      const vertices: number[] = args[0];\n      if (vertices.length % 2 !== 0) {\n        throw new Error();\n      }\n      return this._CreateChain(\n        (index: number): XY => ({\n          x: vertices[index * 2],\n          y: vertices[index * 2 + 1],\n        }),\n        vertices.length / 2,\n      );\n    } else {\n      const vertices: XY[] = args[0];\n      const count: number = args[1] || vertices.length;\n      return this._CreateChain((index: number): XY => vertices[index], count);\n    }\n  }\n\n  private _CreateChain(vertices: (index: number) => XY, count: number): b2ChainShape {\n    !!B2_DEBUG && b2Assert(count >= 2);\n    // DEBUG: for (let i: number = 1; i < count; ++i) {\n    // DEBUG:   const v1 = vertices[start + i - 1];\n    // DEBUG:   const v2 = vertices[start + i];\n    // DEBUG:   // If the code crashes here, it means your vertices are too close together.\n    // DEBUG:   b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\n    // DEBUG: }\n\n    this.m_count = count;\n    this.m_vertices = b2Vec2.MakeArray(count);\n    for (let i = 0; i < count; ++i) {\n      this.m_vertices[i].Copy(vertices(i));\n    }\n    this.m_hasPrevVertex = false;\n    this.m_hasNextVertex = false;\n\n    this.m_prevVertex.SetZero();\n    this.m_nextVertex.SetZero();\n\n    return this;\n  }\n\n  /// Establish connectivity to a vertex that precedes the first vertex.\n  /// Don't call this for loops.\n  SetPrevVertex(prevVertex: XY): b2ChainShape {\n    this.m_prevVertex.Copy(prevVertex);\n    this.m_hasPrevVertex = true;\n    return this;\n  }\n\n  /// Establish connectivity to a vertex that follows the last vertex.\n  /// Don't call this for loops.\n  SetNextVertex(nextVertex: XY): b2ChainShape {\n    this.m_nextVertex.Copy(nextVertex);\n    this.m_hasNextVertex = true;\n    return this;\n  }\n\n  /// Implement b2Shape. Vertices are cloned using b2Alloc.\n  Clone(): b2ChainShape {\n    return new b2ChainShape().Copy(this);\n  }\n\n  Copy(other: b2ChainShape): b2ChainShape {\n    super.Copy(other);\n\n    !!B2_DEBUG && b2Assert(other instanceof b2ChainShape);\n\n    this._CreateChain((index: number): XY => other.m_vertices[index], other.m_count);\n    this.m_prevVertex.Copy(other.m_prevVertex);\n    this.m_nextVertex.Copy(other.m_nextVertex);\n    this.m_hasPrevVertex = other.m_hasPrevVertex;\n    this.m_hasNextVertex = other.m_hasNextVertex;\n\n    return this;\n  }\n\n  /// @see b2Shape::GetChildCount\n  GetChildCount(): number {\n    // edge count = vertex count - 1\n    return this.m_count - 1;\n  }\n\n  /// Get a child edge.\n  GetChildEdge(edge: b2EdgeShape, index: number): void {\n    !!B2_DEBUG && b2Assert(0 <= index && index < this.m_count - 1);\n    edge.m_radius = this.m_radius;\n\n    edge.m_vertex1.Copy(this.m_vertices[index]);\n    edge.m_vertex2.Copy(this.m_vertices[index + 1]);\n\n    if (index > 0) {\n      edge.m_vertex0.Copy(this.m_vertices[index - 1]);\n      edge.m_hasVertex0 = true;\n    } else {\n      edge.m_vertex0.Copy(this.m_prevVertex);\n      edge.m_hasVertex0 = this.m_hasPrevVertex;\n    }\n\n    if (index < this.m_count - 2) {\n      edge.m_vertex3.Copy(this.m_vertices[index + 2]);\n      edge.m_hasVertex3 = true;\n    } else {\n      edge.m_vertex3.Copy(this.m_nextVertex);\n      edge.m_hasVertex3 = this.m_hasNextVertex;\n    }\n  }\n\n  /// This always return false.\n  /// @see b2Shape::TestPoint\n  TestPoint(xf: b2Transform, p: XY): boolean {\n    return false;\n  }\n\n  /// @see b2Shape::ComputeDistance\n  private static ComputeDistance_s_edgeShape = new b2EdgeShape();\n\n  ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    if (B2_ENABLE_PARTICLE) {\n      const edge = b2ChainShape.ComputeDistance_s_edgeShape;\n      this.GetChildEdge(edge, childIndex);\n      return edge.ComputeDistance(xf, p, normal, 0);\n    } else {\n      return 0.0;\n    }\n  }\n\n  // #endif\n\n  /// Implement b2Shape.\n  private static RayCast_s_edgeShape = new b2EdgeShape();\n\n  RayCast(\n    output: b2RayCastOutput,\n    input: b2RayCastInput,\n    xf: b2Transform,\n    childIndex: number,\n  ): boolean {\n    !!B2_DEBUG && b2Assert(childIndex < this.m_count);\n\n    const edgeShape: b2EdgeShape = b2ChainShape.RayCast_s_edgeShape;\n\n    edgeShape.m_vertex1.Copy(this.m_vertices[childIndex]);\n    edgeShape.m_vertex2.Copy(this.m_vertices[(childIndex + 1) % this.m_count]);\n\n    return edgeShape.RayCast(output, input, xf, 0);\n  }\n\n  /// @see b2Shape::ComputeAABB\n  private static ComputeAABB_s_v1 = new b2Vec2();\n  private static ComputeAABB_s_v2 = new b2Vec2();\n\n  ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void {\n    !!B2_DEBUG && b2Assert(childIndex < this.m_count);\n\n    const vertexi1: b2Vec2 = this.m_vertices[childIndex];\n    const vertexi2: b2Vec2 = this.m_vertices[(childIndex + 1) % this.m_count];\n\n    const v1: b2Vec2 = b2Transform.MulXV(xf, vertexi1, b2ChainShape.ComputeAABB_s_v1);\n    const v2: b2Vec2 = b2Transform.MulXV(xf, vertexi2, b2ChainShape.ComputeAABB_s_v2);\n\n    b2Vec2.MinV(v1, v2, aabb.lowerBound);\n    b2Vec2.MaxV(v1, v2, aabb.upperBound);\n  }\n\n  /// Chains have zero mass.\n  /// @see b2Shape::ComputeMass\n  ComputeMass(massData: b2MassData, density: number): void {\n    massData.mass = 0;\n    massData.center.SetZero();\n    massData.I = 0;\n  }\n\n  SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void {\n    !!B2_DEBUG && b2Assert(0 <= index && index < this.m_count);\n\n    proxy.m_vertices = proxy.m_buffer;\n    proxy.m_vertices[0].Copy(this.m_vertices[index]);\n    if (index + 1 < this.m_count) {\n      proxy.m_vertices[1].Copy(this.m_vertices[index + 1]);\n    } else {\n      proxy.m_vertices[1].Copy(this.m_vertices[0]);\n    }\n    proxy.m_count = 2;\n    proxy.m_radius = this.m_radius;\n  }\n\n  ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number {\n    c.SetZero();\n    return 0;\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\nimport { b2Transform, b2Vec2, XY } from '../common/b2Math';\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from '../collision/b2Collision';\nimport { b2TreeNode } from '../collision/b2DynamicTree';\nimport { b2MassData, b2Shape, b2ShapeType } from '../collision/shapes/b2Shape';\nimport { b2Body } from './b2Body';\n\n/// This holds contact filtering data.\nexport interface b2IFilter {\n  /// The collision category bits. Normally you would just set one bit.\n  categoryBits: number;\n\n  /// The collision mask bits. This states the categories that this\n  /// shape would accept for collision.\n  maskBits: number;\n\n  /// Collision groups allow a certain group of objects to never collide (negative)\n  /// or always collide (positive). Zero means no collision group. Non-zero group\n  /// filtering always wins against the mask bits.\n  groupIndex?: number;\n}\n\n/// This holds contact filtering data.\nexport class b2Filter implements b2IFilter {\n  static readonly DEFAULT: Readonly<b2Filter> = new b2Filter();\n\n  /// The collision category bits. Normally you would just set one bit.\n  categoryBits = 0x0001;\n\n  /// The collision mask bits. This states the categories that this\n  /// shape would accept for collision.\n  maskBits = 0xffff;\n\n  /// Collision groups allow a certain group of objects to never collide (negative)\n  /// or always collide (positive). Zero means no collision group. Non-zero group\n  /// filtering always wins against the mask bits.\n  groupIndex = 0;\n\n  Clone(): b2Filter {\n    return new b2Filter().Copy(this);\n  }\n\n  Copy(other: b2IFilter): this {\n    !!B2_DEBUG && b2Assert(this !== other);\n    this.categoryBits = other.categoryBits;\n    this.maskBits = other.maskBits;\n    this.groupIndex = other.groupIndex ?? 0;\n    return this;\n  }\n}\n\n/// A fixture definition is used to create a fixture. This class defines an\n/// abstract fixture definition. You can reuse fixture definitions safely.\nexport interface b2IFixtureDef {\n  /// The shape, this must be set. The shape will be cloned, so you\n  /// can create the shape on the stack.\n  shape: b2Shape;\n\n  /// Use this to store application specific fixture data.\n  userData?: any;\n\n  /// The friction coefficient, usually in the range [0,1].\n  friction?: number;\n\n  /// The restitution (elasticity) usually in the range [0,1].\n  restitution?: number;\n\n  /// The density, usually in kg/m^2.\n  density?: number;\n\n  /// A sensor shape collects contact information but never generates a collision\n  /// response.\n  isSensor?: boolean;\n\n  /// Contact filtering data.\n  filter?: b2IFilter;\n}\n\n/// A fixture definition is used to create a fixture. This class defines an\n/// abstract fixture definition. You can reuse fixture definitions safely.\nexport class b2FixtureDef implements b2IFixtureDef {\n  /// The shape, this must be set. The shape will be cloned, so you\n  /// can create the shape on the stack.\n  shape: b2Shape = (null as unknown) as b2Shape;\n\n  /// Use this to store application specific fixture data.\n  userData: any = null;\n\n  /// The friction coefficient, usually in the range [0,1].\n  friction = NaN;\n\n  /// The restitution (elasticity) usually in the range [0,1].\n  restitution = NaN;\n\n  /// The density, usually in kg/m^2.\n  density = NaN;\n\n  /// A sensor shape collects contact information but never generates a collision\n  /// response.\n  isSensor = false;\n\n  /// Contact filtering data.\n  readonly filter = new b2Filter();\n\n  constructor() {\n    this.friction = 0.2;\n    this.restitution = 0.0;\n    this.density = 0.0;\n  }\n}\n\n/// This proxy is used internally to connect fixtures to the broad-phase.\nexport class b2FixtureProxy {\n  readonly aabb = new b2AABB();\n  readonly fixture: b2Fixture;\n  readonly childIndex: number = 0;\n  treeNode: b2TreeNode<b2FixtureProxy>;\n\n  constructor(fixture: b2Fixture, childIndex: number) {\n    this.fixture = fixture;\n    this.childIndex = childIndex;\n    this.fixture.m_shape.ComputeAABB(this.aabb, this.fixture.m_body.GetTransform(), childIndex);\n    this.treeNode = this.fixture.m_body.m_world.m_contactManager.m_broadPhase.CreateProxy(\n      this.aabb,\n      this,\n    );\n  }\n\n  Reset(): void {\n    this.fixture.m_body.m_world.m_contactManager.m_broadPhase.DestroyProxy(this.treeNode);\n  }\n\n  Touch(): void {\n    this.fixture.m_body.m_world.m_contactManager.m_broadPhase.TouchProxy(this.treeNode);\n  }\n\n  private static Synchronize_s_aabb1 = new b2AABB();\n  private static Synchronize_s_aabb2 = new b2AABB();\n\n  Synchronize(transform1: b2Transform, transform2: b2Transform, displacement: b2Vec2): void {\n    if (transform1 === transform2) {\n      this.fixture.m_shape.ComputeAABB(this.aabb, transform1, this.childIndex);\n      this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(\n        this.treeNode,\n        this.aabb,\n        displacement,\n      );\n    } else {\n      // Compute an AABB that covers the swept shape (may miss some rotation effect).\n      const aabb1: b2AABB = b2FixtureProxy.Synchronize_s_aabb1;\n      const aabb2: b2AABB = b2FixtureProxy.Synchronize_s_aabb2;\n      this.fixture.m_shape.ComputeAABB(aabb1, transform1, this.childIndex);\n      this.fixture.m_shape.ComputeAABB(aabb2, transform2, this.childIndex);\n      this.aabb.Combine2(aabb1, aabb2);\n      this.fixture.m_body.m_world.m_contactManager.m_broadPhase.MoveProxy(\n        this.treeNode,\n        this.aabb,\n        displacement,\n      );\n    }\n  }\n}\n\n/// A fixture is used to attach a shape to a body for collision detection. A fixture\n/// inherits its transform from its parent. Fixtures hold additional non-geometric data\n/// such as friction, collision filters, etc.\n/// Fixtures are created via b2Body::CreateFixture.\n/// @warning you cannot reuse fixtures.\nexport class b2Fixture {\n  m_density = NaN;\n  m_friction = NaN;\n  m_restitution = NaN;\n\n  m_next: b2Fixture | null = null;\n  readonly m_body: b2Body;\n  readonly m_shape: b2Shape;\n  _shapeType: b2ShapeType;\n  _shapeRadius = NaN;\n\n  readonly m_proxies: b2FixtureProxy[] = [];\n\n  get m_proxyCount(): number {\n    return this.m_proxies.length;\n  }\n\n  readonly m_filter: b2Filter = new b2Filter();\n\n  m_isSensor = false;\n\n  m_userData: any = null;\n\n  constructor(body: b2Body, def: b2IFixtureDef) {\n    this.m_density = def.density ?? 0.0;\n    this.m_friction = def.friction ?? 0.2;\n    this.m_restitution = def.restitution ?? 0.0;\n    this.m_body = body;\n    this.m_shape = def.shape.Clone();\n    this._shapeType = def.shape.m_type;\n    // TODO: need to  sync radius if shape is changed by user!\n    this._shapeRadius = def.shape.m_radius;\n    this.m_userData = def.userData ?? null;\n    this.m_filter.Copy(def.filter ?? b2Filter.DEFAULT);\n    this.m_isSensor = def.isSensor ?? false;\n  }\n\n  Reset(): void {\n    // The proxies must be destroyed before calling this.\n    !!B2_DEBUG && b2Assert(this.m_proxyCount === 0);\n  }\n\n  /// Get the type of the child shape. You can use this to down cast to the concrete shape.\n  /// @return the shape type.\n  GetType(): b2ShapeType {\n    return this._shapeType;\n  }\n\n  /// Get the child shape. You can modify the child shape, however you should not change the\n  /// number of vertices because this will crash some collision caching mechanisms.\n  /// Manipulating the shape may lead to non-physical behavior.\n  GetShape(): b2Shape {\n    return this.m_shape;\n  }\n\n  /// Set if this fixture is a sensor.\n  SetSensor(sensor: boolean): void {\n    if (sensor !== this.m_isSensor) {\n      this.m_body.SetAwake(true);\n      this.m_isSensor = sensor;\n    }\n  }\n\n  /// Is this fixture a sensor (non-solid)?\n  /// @return the true if the shape is a sensor.\n  IsSensor(): boolean {\n    return this.m_isSensor;\n  }\n\n  /// Set the contact filtering data. This will not update contacts until the next time\n  /// step when either parent body is active and awake.\n  /// This automatically calls Refilter.\n  SetFilterData(filter: b2Filter): void {\n    this.m_filter.Copy(filter);\n\n    this.Refilter();\n  }\n\n  /// Get the contact filtering data.\n  GetFilterData(): Readonly<b2Filter> {\n    return this.m_filter;\n  }\n\n  /// Call this if you want to establish collision that was previously disabled by b2ContactFilter::ShouldCollide.\n  Refilter(): void {\n    // Flag associated contacts for filtering.\n    let edge = this.m_body.GetContactList();\n\n    while (edge) {\n      const contact = edge.contact;\n      const fixtureA = contact.GetFixtureA();\n      const fixtureB = contact.GetFixtureB();\n      if (fixtureA === this || fixtureB === this) {\n        contact.FlagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n\n    // Touch each proxy so that new pairs may be created\n    this.TouchProxies();\n  }\n\n  /// Get the parent body of this fixture. This is NULL if the fixture is not attached.\n  /// @return the parent body.\n  GetBody(): b2Body {\n    return this.m_body;\n  }\n\n  /// Get the next fixture in the parent body's fixture list.\n  /// @return the next shape.\n  GetNext(): b2Fixture | null {\n    return this.m_next;\n  }\n\n  /// Get the user data that was assigned in the fixture definition. Use this to\n  /// store your application specific data.\n  GetUserData(): any {\n    return this.m_userData;\n  }\n\n  /// Set the user data. Use this to store your application specific data.\n  SetUserData(data: any): void {\n    this.m_userData = data;\n  }\n\n  /// Test a point for containment in this fixture.\n  /// @param p a point in world coordinates.\n  TestPoint(p: XY): boolean {\n    return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\n  }\n\n  ComputeDistance(p: b2Vec2, normal: b2Vec2, childIndex: number): number {\n    if (B2_ENABLE_PARTICLE) {\n      return this.m_shape.ComputeDistance(this.m_body.GetTransform(), p, normal, childIndex);\n    } else {\n      return 0.0;\n    }\n  }\n\n  /// Cast a ray against this shape.\n  /// @param output the ray-cast results.\n  /// @param input the ray-cast input parameters.\n  RayCast(output: b2RayCastOutput, input: b2RayCastInput, childIndex: number): boolean {\n    return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex);\n  }\n\n  /// Get the mass data for this fixture. The mass data is based on the density and\n  /// the shape. The rotational inertia is about the shape's origin. This operation\n  /// may be expensive.\n  GetMassData(massData: b2MassData = new b2MassData()): b2MassData {\n    this.m_shape.ComputeMass(massData, this.m_density);\n\n    return massData;\n  }\n\n  /// Set the density of this fixture. This will _not_ automatically adjust the mass\n  /// of the body. You must call b2Body::ResetMassData to update the body's mass.\n  SetDensity(density: number): void {\n    this.m_density = density;\n  }\n\n  /// Get the density of this fixture.\n  GetDensity(): number {\n    return this.m_density;\n  }\n\n  /// Get the coefficient of friction.\n  GetFriction(): number {\n    return this.m_friction;\n  }\n\n  /// Set the coefficient of friction. This will _not_ change the friction of\n  /// existing contacts.\n  SetFriction(friction: number): void {\n    this.m_friction = friction;\n  }\n\n  /// Get the coefficient of restitution.\n  GetRestitution(): number {\n    return this.m_restitution;\n  }\n\n  /// Set the coefficient of restitution. This will _not_ change the restitution of\n  /// existing contacts.\n  SetRestitution(restitution: number): void {\n    this.m_restitution = restitution;\n  }\n\n  /// Get the fixture's AABB. This AABB may be enlarge and/or stale.\n  /// If you need a more accurate AABB, compute it using the shape and\n  /// the body transform.\n  GetAABB(childIndex: number): Readonly<b2AABB> {\n    !!B2_DEBUG && b2Assert(0 <= childIndex && childIndex < this.m_proxyCount);\n    return this.m_proxies[childIndex].aabb;\n  }\n\n  // These support body activation/deactivation.\n  CreateProxies(): void {\n    if (this.m_proxies.length !== 0) {\n      throw new Error();\n    }\n    // Create proxies in the broad-phase.\n    for (let i = 0; i < this.m_shape.GetChildCount(); ++i) {\n      this.m_proxies[i] = new b2FixtureProxy(this, i);\n    }\n  }\n\n  DestroyProxies(): void {\n    // Destroy proxies in the broad-phase.\n    for (let i = 0; i < this.m_proxies.length; ++i) {\n      this.m_proxies[i].Reset();\n    }\n    this.m_proxies.length = 0;\n  }\n\n  TouchProxies(): void {\n    for (let i = 0; i < this.m_proxies.length; ++i) {\n      this.m_proxies[i].Touch();\n    }\n  }\n\n  SynchronizeProxies(transform1: b2Transform, transform2: b2Transform, displacement: b2Vec2): void {\n    for (let i = 0; i < this.m_proxies.length; ++i) {\n      this.m_proxies[i].Synchronize(transform1, transform2, displacement);\n    }\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\nimport { b2IsValid, b2Rot, b2Sweep, b2Transform, b2Vec2, XY } from '../common/b2Math';\nimport { b2MassData, b2Shape } from '../collision/shapes/b2Shape';\nimport { b2ContactEdge } from './contacts/b2Contact';\nimport { b2JointEdge } from './joints/b2Joint';\nimport { b2Fixture, b2FixtureDef, b2IFixtureDef } from './b2Fixture';\nimport { b2World } from './b2World';\nimport { b2ControllerEdge } from '../controllers/b2Controller';\n\n/// The body type.\n/// static: zero mass, zero velocity, may be manually moved\n/// kinematic: zero mass, non-zero velocity set by user, moved by solver\n/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver\nexport const enum b2BodyType {\n  b2_unknown = -1,\n  b2_staticBody = 0,\n  b2_kinematicBody = 1,\n  b2_dynamicBody = 2,\n\n  // TODO_ERIN\n  // b2_bulletBody = 3\n}\n\nexport interface b2IBodyDef {\n  /// The body type: static, kinematic, or dynamic.\n  /// Note: if a dynamic body would have zero mass, the mass is set to one.\n  type?: b2BodyType;\n\n  /// The world position of the body. Avoid creating bodies at the origin\n  /// since this can lead to many overlapping shapes.\n  position?: XY;\n\n  /// The world angle of the body in radians.\n  angle?: number;\n\n  /// The linear velocity of the body's origin in world co-ordinates.\n  linearVelocity?: XY;\n\n  /// The angular velocity of the body.\n  angularVelocity?: number;\n\n  /// Linear damping is use to reduce the linear velocity. The damping parameter\n  /// can be larger than 1.0f but the damping effect becomes sensitive to the\n  /// time step when the damping parameter is large.\n  /// Units are 1/time\n  linearDamping?: number;\n\n  /// Angular damping is use to reduce the angular velocity. The damping parameter\n  /// can be larger than 1.0f but the damping effect becomes sensitive to the\n  /// time step when the damping parameter is large.\n  /// Units are 1/time\n  angularDamping?: number;\n\n  /// Set this flag to false if this body should never fall asleep. Note that\n  /// this increases CPU usage.\n  allowSleep?: boolean;\n\n  /// Is this body initially awake or sleeping?\n  awake?: boolean;\n\n  /// Should this body be prevented from rotating? Useful for characters.\n  fixedRotation?: boolean;\n\n  /// Is this a fast moving body that should be prevented from tunneling through\n  /// other moving bodies? Note that all bodies are prevented from tunneling through\n  /// kinematic and static bodies. This setting is only considered on dynamic bodies.\n  /// @warning You should use this flag sparingly since it increases processing time.\n  bullet?: boolean;\n\n  /// Does this body start out active?\n  active?: boolean;\n\n  /// Use this to store application specific body data.\n  userData?: any;\n\n  /// Scale the gravity applied to this body.\n  gravityScale?: number;\n}\n\n/// A body definition holds all the data needed to construct a rigid body.\n/// You can safely re-use body definitions. Shapes are added to a body after construction.\nexport class b2BodyDef implements b2IBodyDef {\n  /// The body type: static, kinematic, or dynamic.\n  /// Note: if a dynamic body would have zero mass, the mass is set to one.\n  type: b2BodyType = b2BodyType.b2_staticBody;\n\n  /// The world position of the body. Avoid creating bodies at the origin\n  /// since this can lead to many overlapping shapes.\n  readonly position = new b2Vec2();\n\n  /// The world angle of the body in radians.\n  angle = NaN;\n\n  /// The linear velocity of the body's origin in world co-ordinates.\n  readonly linearVelocity = new b2Vec2();\n\n  /// The angular velocity of the body.\n  angularVelocity = NaN;\n\n  /// Linear damping is use to reduce the linear velocity. The damping parameter\n  /// can be larger than 1.0f but the damping effect becomes sensitive to the\n  /// time step when the damping parameter is large.\n  linearDamping = NaN;\n\n  /// Angular damping is use to reduce the angular velocity. The damping parameter\n  /// can be larger than 1.0f but the damping effect becomes sensitive to the\n  /// time step when the damping parameter is large.\n  angularDamping = NaN;\n\n  /// Set this flag to false if this body should never fall asleep. Note that\n  /// this increases CPU usage.\n  allowSleep = true;\n\n  /// Is this body initially awake or sleeping?\n  awake = true;\n\n  /// Should this body be prevented from rotating? Useful for characters.\n  fixedRotation = false;\n\n  /// Is this a fast moving body that should be prevented from tunneling through\n  /// other moving bodies? Note that all bodies are prevented from tunneling through\n  /// kinematic and static bodies. This setting is only considered on dynamic bodies.\n  /// @warning You should use this flag sparingly since it increases processing time.\n  bullet = false;\n\n  /// Does this body start out active?\n  active = true;\n\n  /// Use this to store application specific body data.\n  userData: any = null;\n\n  /// Scale the gravity applied to this body.\n  gravityScale = NaN; // 1.0\n\n  constructor() {\n    this.angle = 0.0;\n    this.angularVelocity = 0.0;\n    this.linearDamping = 0.0;\n    this.angularDamping = 0.0;\n    this.gravityScale = 1.0;\n  }\n}\n\n/// A rigid body. These are created via b2World::CreateBody.\nexport class b2Body {\n  m_type: b2BodyType;\n\n  m_islandFlag = false;\n  m_awakeFlag = false;\n  m_autoSleepFlag = false;\n  m_bulletFlag = false;\n  m_fixedRotationFlag = false;\n  m_activeFlag = false;\n  m_toiFlag = false;\n\n  m_islandIndex = 0;\n\n  readonly m_xf = new b2Transform(); // the body origin transform\n  // #if B2_ENABLE_PARTICLE\n  readonly m_xf0 = new b2Transform();\n  // #endif\n  readonly m_sweep = new b2Sweep(); // the swept motion for CCD\n\n  readonly m_linearVelocity = new b2Vec2();\n  m_angularVelocity = NaN;\n\n  readonly m_force = new b2Vec2();\n  m_torque = NaN;\n\n  m_world: b2World;\n  m_prev: b2Body | null = null;\n  m_next: b2Body | null = null;\n\n  m_fixtureList: b2Fixture | null = null;\n  m_fixtureCount = 0;\n\n  m_jointList: b2JointEdge | null = null;\n  m_contactList: b2ContactEdge | null = null;\n\n  m_mass = NaN;\n  m_invMass = NaN;\n\n  // Rotational inertia about the center of mass.\n  m_I = NaN;\n  m_invI = NaN;\n\n  m_linearDamping = NaN;\n  m_angularDamping = NaN;\n  m_gravityScale = NaN;\n\n  m_sleepTime = NaN;\n\n  m_userData: any = null;\n\n  // #if B2_ENABLE_CONTROLLER\n  m_controllerList: b2ControllerEdge | null = null;\n  m_controllerCount = 0;\n  // #endif\n\n  constructor(bd: b2IBodyDef, world: b2World) {\n    this.m_bulletFlag = bd.bullet ?? false;\n    this.m_fixedRotationFlag = bd.fixedRotation ?? false;\n    this.m_autoSleepFlag = bd.allowSleep ?? true;\n    this.m_awakeFlag = bd.awake ?? true;\n    this.m_activeFlag = bd.active ?? true;\n\n    this.m_world = world;\n\n    this.m_xf.p.Copy(bd.position ?? b2Vec2.ZERO);\n    !!B2_DEBUG && b2Assert(this.m_xf.p.IsValid());\n    this.m_xf.q.SetAngle(bd.angle ?? 0.0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_xf.q.GetAngle()));\n    if (B2_ENABLE_PARTICLE) {\n      this.m_xf0.Copy(this.m_xf);\n    }\n\n    this.m_sweep.localCenter.SetZero();\n    this.m_sweep.c0.Copy(this.m_xf.p);\n    this.m_sweep.c.Copy(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle();\n    this.m_sweep.alpha0 = 0;\n\n    this.m_linearVelocity.Copy(bd.linearVelocity ?? b2Vec2.ZERO);\n    !!B2_DEBUG && b2Assert(this.m_linearVelocity.IsValid());\n    this.m_angularVelocity = bd.angularVelocity ?? 0;\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_angularVelocity));\n\n    this.m_linearDamping = bd.linearDamping ?? 0.0;\n    this.m_angularDamping = bd.angularDamping ?? 0.0;\n    this.m_gravityScale = bd.gravityScale ?? 1.0;\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_gravityScale) && this.m_gravityScale >= 0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_angularDamping) && this.m_angularDamping >= 0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_linearDamping) && this.m_linearDamping >= 0);\n\n    this.m_force.SetZero();\n    this.m_torque = 0.0;\n\n    this.m_sleepTime = 0.0;\n\n    this.m_type = bd.type ?? b2BodyType.b2_staticBody;\n\n    if (bd.type === b2BodyType.b2_dynamicBody) {\n      this.m_mass = 1.0;\n      this.m_invMass = 1.0;\n    } else {\n      this.m_mass = 0.0;\n      this.m_invMass = 0.0;\n    }\n\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n\n    this.m_userData = bd.userData;\n  }\n\n  CreateFixture(def: b2IFixtureDef): b2Fixture;\n  CreateFixture(shape: b2Shape): b2Fixture;\n  CreateFixture(shape: b2Shape, density: number): b2Fixture;\n  CreateFixture(a: b2IFixtureDef | b2Shape, b = 0): b2Fixture {\n    if (a instanceof b2Shape) {\n      return this.CreateFixtureShapeDensity(a, b);\n    } else {\n      return this.CreateFixtureDef(a);\n    }\n  }\n\n  /// Creates a fixture and attach it to this body. Use this function if you need\n  /// to set some fixture parameters, like friction. Otherwise you can create the\n  /// fixture directly from a shape.\n  /// If the density is non-zero, this function automatically updates the mass of the body.\n  /// Contacts are not created until the next time step.\n  /// @param def the fixture definition.\n  /// @warning This function is locked during callbacks.\n  CreateFixtureDef(def: b2IFixtureDef): b2Fixture {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    const fixture: b2Fixture = new b2Fixture(this, def);\n\n    if (this.m_activeFlag) {\n      fixture.CreateProxies();\n    }\n\n    fixture.m_next = this.m_fixtureList;\n    this.m_fixtureList = fixture;\n    ++this.m_fixtureCount;\n\n    // fixture.m_body = this;\n\n    // Adjust mass properties if needed.\n    if (fixture.m_density > 0) {\n      this.ResetMassData();\n    }\n\n    // Let the world know we have a new fixture. This will cause new contacts\n    // to be created at the beginning of the next time step.\n    this.m_world.m_newFixture = true;\n\n    return fixture;\n  }\n\n  /// Creates a fixture from a shape and attach it to this body.\n  /// This is a convenience function. Use b2FixtureDef if you need to set parameters\n  /// like friction, restitution, user data, or filtering.\n  /// If the density is non-zero, this function automatically updates the mass of the body.\n  /// @param shape the shape to be cloned.\n  /// @param density the shape density (set to zero for static bodies).\n  /// @warning This function is locked during callbacks.\n  private static CreateFixtureShapeDensity_s_def: b2FixtureDef = new b2FixtureDef();\n\n  CreateFixtureShapeDensity(shape: b2Shape, density = 0): b2Fixture {\n    const def: b2FixtureDef = b2Body.CreateFixtureShapeDensity_s_def;\n    def.shape = shape;\n    def.density = density;\n    return this.CreateFixtureDef(def);\n  }\n\n  /// Destroy a fixture. This removes the fixture from the broad-phase and\n  /// destroys all contacts associated with this fixture. This will\n  /// automatically adjust the mass of the body if the body is dynamic and the\n  /// fixture has positive density.\n  /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.\n  /// @param fixture the fixture to be removed.\n  /// @warning This function is locked during callbacks.\n  DestroyFixture(fixture: b2Fixture): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    !!B2_DEBUG && b2Assert(fixture.m_body === this);\n\n    // Remove the fixture from this body's singly linked list.\n    !!B2_DEBUG && b2Assert(this.m_fixtureCount > 0);\n    let node: b2Fixture | null = this.m_fixtureList;\n    let ppF: b2Fixture | null = null;\n    // DEBUG: let found: boolean = false;\n    while (node !== null) {\n      if (node === fixture) {\n        if (ppF) {\n          ppF.m_next = fixture.m_next;\n        } else {\n          this.m_fixtureList = fixture.m_next;\n        }\n        // DEBUG: found = true;\n        break;\n      }\n\n      ppF = node;\n      node = node.m_next;\n    }\n\n    // You tried to remove a shape that is not attached to this body.\n    // TODO: debug\n    //!!B2_DEBUG && b2Assert(found);\n\n    // Destroy any contacts associated with the fixture.\n    let edge: b2ContactEdge | null = this.m_contactList;\n    while (edge) {\n      const c = edge.contact;\n      edge = edge.next;\n\n      const fixtureA: b2Fixture = c.GetFixtureA();\n      const fixtureB: b2Fixture = c.GetFixtureB();\n\n      if (fixture === fixtureA || fixture === fixtureB) {\n        // This destroys the contact and removes it from\n        // this body's contact list.\n        this.m_world.m_contactManager.Destroy(c);\n      }\n    }\n\n    if (this.m_activeFlag) {\n      fixture.DestroyProxies();\n    }\n\n    // fixture.m_body = null;\n    fixture.m_next = null;\n    fixture.Reset();\n\n    --this.m_fixtureCount;\n\n    // Reset the mass data.\n    this.ResetMassData();\n  }\n\n  /// Set the position of the body's origin and rotation.\n  /// This breaks any contacts and wakes the other bodies.\n  /// Manipulating a body's transform may cause non-physical behavior.\n  /// @param position the world position of the body's local origin.\n  /// @param angle the world rotation in radians.\n  SetTransformVec(position: XY, angle: number): void {\n    this.SetTransformXY(position.x, position.y, angle);\n  }\n\n  SetTransformXY(x: number, y: number, angle: number): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    this.m_xf.q.SetAngle(angle);\n    this.m_xf.p.Set(x, y);\n    if (B2_ENABLE_PARTICLE) {\n      this.m_xf0.Copy(this.m_xf);\n    }\n\n    b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n    this.m_sweep.a = angle;\n\n    this.m_sweep.c0.Copy(this.m_sweep.c);\n    this.m_sweep.a0 = angle;\n\n    for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n      f.SynchronizeProxies(this.m_xf, this.m_xf, b2Vec2.ZERO);\n    }\n\n    this.m_world.m_contactManager.FindNewContacts();\n  }\n\n  SetTransform(xf: b2Transform): void {\n    this.SetTransformVec(xf.p, xf.GetAngle());\n  }\n\n  /// Get the body transform for the body's origin.\n  /// @return the world transform of the body's origin.\n  GetTransform(): Readonly<b2Transform> {\n    return this.m_xf;\n  }\n\n  /// Get the world body origin position.\n  /// @return the world position of the body's origin.\n  GetPosition(): Readonly<b2Vec2> {\n    return this.m_xf.p;\n  }\n\n  SetPosition(position: XY): void {\n    this.SetTransformVec(position, this.GetAngle());\n  }\n\n  SetPositionXY(x: number, y: number): void {\n    this.SetTransformXY(x, y, this.GetAngle());\n  }\n\n  /// Get the angle in radians.\n  /// @return the current world rotation angle in radians.\n  GetAngle(): number {\n    return this.m_sweep.a;\n  }\n\n  SetAngle(angle: number): void {\n    this.SetTransformVec(this.GetPosition(), angle);\n  }\n\n  /// Get the world position of the center of mass.\n  GetWorldCenter(): Readonly<b2Vec2> {\n    return this.m_sweep.c;\n  }\n\n  /// Get the local position of the center of mass.\n  GetLocalCenter(): Readonly<b2Vec2> {\n    return this.m_sweep.localCenter;\n  }\n\n  /// Set the linear velocity of the center of mass.\n  /// @param v the new linear velocity of the center of mass.\n  SetLinearVelocity(v: XY): void {\n    this.SetLinearVelocityXY(v.x, v.y);\n  }\n\n  SetLinearVelocityXY(x: number, y: number): void {\n    if (this.m_type === b2BodyType.b2_staticBody) {\n      return;\n    }\n\n    if (x * x + y * y > 0) {\n      this.SetAwake(true);\n    }\n\n    this.m_linearVelocity.Set(x, y);\n  }\n\n  /// Get the linear velocity of the center of mass.\n  /// @return the linear velocity of the center of mass.\n  GetLinearVelocity(): Readonly<b2Vec2> {\n    return this.m_linearVelocity;\n  }\n\n  /// Set the angular velocity.\n  /// @param omega the new angular velocity in radians/second.\n  SetAngularVelocity(w: number): void {\n    if (this.m_type === b2BodyType.b2_staticBody) {\n      return;\n    }\n\n    if (w * w > 0) {\n      this.SetAwake(true);\n    }\n\n    this.m_angularVelocity = w;\n  }\n\n  /// Get the angular velocity.\n  /// @return the angular velocity in radians/second.\n  GetAngularVelocity(): number {\n    return this.m_angularVelocity;\n  }\n\n  GetDefinition(bd: b2BodyDef): b2BodyDef {\n    bd.type = this.GetType();\n    bd.allowSleep = this.m_autoSleepFlag;\n    bd.angle = this.GetAngle();\n    bd.angularDamping = this.m_angularDamping;\n    bd.gravityScale = this.m_gravityScale;\n    bd.angularVelocity = this.m_angularVelocity;\n    bd.fixedRotation = this.m_fixedRotationFlag;\n    bd.bullet = this.m_bulletFlag;\n    bd.awake = this.m_awakeFlag;\n    bd.linearDamping = this.m_linearDamping;\n    bd.linearVelocity.Copy(this.GetLinearVelocity());\n    bd.position.Copy(this.GetPosition());\n    bd.userData = this.GetUserData();\n    return bd;\n  }\n\n  /// Apply a force at a world point. If the force is not\n  /// applied at the center of mass, it will generate a torque and\n  /// affect the angular velocity. This wakes up the body.\n  /// @param force the world force vector, usually in Newtons (N).\n  /// @param point the world position of the point of application.\n  /// @param wake also wake up the body\n  ApplyForce(force: XY, point: XY, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_force.x += force.x;\n      this.m_force.y += force.y;\n      this.m_torque +=\n        (point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x;\n    }\n  }\n\n  /// Apply a force to the center of mass. This wakes up the body.\n  /// @param force the world force vector, usually in Newtons (N).\n  /// @param wake also wake up the body\n  ApplyForceToCenter(force: XY, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_force.x += force.x;\n      this.m_force.y += force.y;\n    }\n  }\n\n  /// Apply a torque. This affects the angular velocity\n  /// without affecting the linear velocity of the center of mass.\n  /// @param torque about the z-axis (out of the screen), usually in N-m.\n  /// @param wake also wake up the body\n  ApplyTorque(torque: number, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_torque += torque;\n    }\n  }\n\n  /// Apply an impulse at a point. This immediately modifies the velocity.\n  /// It also modifies the angular velocity if the point of application\n  /// is not at the center of mass. This wakes up the body.\n  /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\n  /// @param point the world position of the point of application.\n  /// @param wake also wake up the body\n  ApplyLinearImpulse(impulse: XY, point: XY, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_linearVelocity.x += this.m_invMass * impulse.x;\n      this.m_linearVelocity.y += this.m_invMass * impulse.y;\n      this.m_angularVelocity +=\n        this.m_invI *\n        ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\n    }\n  }\n\n  /// Apply an impulse at the center of gravity. This immediately modifies the velocity.\n  /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\n  /// @param wake also wake up the body\n  ApplyLinearImpulseToCenter(impulse: XY, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_linearVelocity.x += this.m_invMass * impulse.x;\n      this.m_linearVelocity.y += this.m_invMass * impulse.y;\n    }\n  }\n\n  /// Apply an angular impulse.\n  /// @param impulse the angular impulse in units of kg*m*m/s\n  /// @param wake also wake up the body\n  ApplyAngularImpulse(impulse: number, wake = true): void {\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    if (wake && !this.m_awakeFlag) {\n      this.SetAwake(true);\n    }\n\n    // Don't accumulate a force if the body is sleeping.\n    if (this.m_awakeFlag) {\n      this.m_angularVelocity += this.m_invI * impulse;\n    }\n  }\n\n  /// Get the total mass of the body.\n  /// @return the mass, usually in kilograms (kg).\n  GetMass(): number {\n    return this.m_mass;\n  }\n\n  /// Get the rotational inertia of the body about the local origin.\n  /// @return the rotational inertia, usually in kg-m^2.\n  GetInertia(): number {\n    return (\n      this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter)\n    );\n  }\n\n  /// Get the mass data of the body.\n  /// @return a struct containing the mass, inertia and center of the body.\n  GetMassData(data: b2MassData): b2MassData {\n    data.mass = this.m_mass;\n    data.I =\n      this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\n    data.center.Copy(this.m_sweep.localCenter);\n    return data;\n  }\n\n  /// Set the mass properties to override the mass properties of the fixtures.\n  /// Note that this changes the center of mass position.\n  /// Note that creating or destroying fixtures can also alter the mass.\n  /// This function has no effect if the body isn't dynamic.\n  /// @param massData the mass properties.\n  private static SetMassData_s_oldCenter: b2Vec2 = new b2Vec2();\n\n  SetMassData(massData: b2MassData): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    if (this.m_type !== b2BodyType.b2_dynamicBody) {\n      return;\n    }\n\n    this.m_invMass = 0;\n    this.m_I = 0;\n    this.m_invI = 0;\n\n    this.m_mass = massData.mass;\n    if (this.m_mass <= 0) {\n      this.m_mass = 1;\n    }\n\n    this.m_invMass = 1 / this.m_mass;\n\n    if (massData.I > 0 && !this.m_fixedRotationFlag) {\n      this.m_I = massData.I - this.m_mass * b2Vec2.DotVV(massData.center, massData.center);\n      !!B2_DEBUG && b2Assert(this.m_I > 0);\n      this.m_invI = 1 / this.m_I;\n    }\n\n    // Move center of mass.\n    const oldCenter: b2Vec2 = b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);\n    this.m_sweep.localCenter.Copy(massData.center);\n    b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n    this.m_sweep.c0.Copy(this.m_sweep.c);\n\n    // Update center of mass velocity.\n    b2Vec2.AddVCrossSV(\n      this.m_linearVelocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0),\n      this.m_linearVelocity,\n    );\n  }\n\n  /// This resets the mass properties to the sum of the mass properties of the fixtures.\n  /// This normally does not need to be called unless you called SetMassData to override\n  /// the mass and you later want to reset the mass.\n  private static ResetMassData_s_localCenter: b2Vec2 = new b2Vec2();\n  private static ResetMassData_s_oldCenter: b2Vec2 = new b2Vec2();\n  private static ResetMassData_s_massData: b2MassData = new b2MassData();\n\n  ResetMassData(): void {\n    // Compute mass data from shapes. Each shape has its own density.\n    this.m_mass = 0;\n    this.m_invMass = 0;\n    this.m_I = 0;\n    this.m_invI = 0;\n    this.m_sweep.localCenter.SetZero();\n\n    // Static and kinematic bodies have zero mass.\n    if (this.m_type === b2BodyType.b2_staticBody || this.m_type === b2BodyType.b2_kinematicBody) {\n      this.m_sweep.c0.Copy(this.m_xf.p);\n      this.m_sweep.c.Copy(this.m_xf.p);\n      this.m_sweep.a0 = this.m_sweep.a;\n      return;\n    }\n\n    !!B2_DEBUG && b2Assert(this.m_type === b2BodyType.b2_dynamicBody);\n\n    // Accumulate mass over all fixtures.\n    const localCenter: b2Vec2 = b2Body.ResetMassData_s_localCenter.SetZero();\n    for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n      if (f.m_density === 0) {\n        continue;\n      }\n\n      const massData: b2MassData = f.GetMassData(b2Body.ResetMassData_s_massData);\n      this.m_mass += massData.mass;\n      localCenter.x += massData.center.x * massData.mass;\n      localCenter.y += massData.center.y * massData.mass;\n      this.m_I += massData.I;\n    }\n\n    // Compute center of mass.\n    if (this.m_mass > 0) {\n      this.m_invMass = 1 / this.m_mass;\n      localCenter.x *= this.m_invMass;\n      localCenter.y *= this.m_invMass;\n    } else {\n      // Force all dynamic bodies to have a positive mass.\n      this.m_mass = 1;\n      this.m_invMass = 1;\n    }\n\n    if (this.m_I > 0 && !this.m_fixedRotationFlag) {\n      // Center the inertia about the center of mass.\n      this.m_I -= this.m_mass * b2Vec2.DotVV(localCenter, localCenter);\n      !!B2_DEBUG && b2Assert(this.m_I > 0);\n      this.m_invI = 1 / this.m_I;\n    } else {\n      this.m_I = 0;\n      this.m_invI = 0;\n    }\n\n    // Move center of mass.\n    const oldCenter: b2Vec2 = b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);\n    this.m_sweep.localCenter.Copy(localCenter);\n    b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\n    this.m_sweep.c0.Copy(this.m_sweep.c);\n\n    // Update center of mass velocity.\n    b2Vec2.AddVCrossSV(\n      this.m_linearVelocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0),\n      this.m_linearVelocity,\n    );\n  }\n\n  /// Get the world coordinates of a point given the local coordinates.\n  /// @param localPoint a point on the body measured relative the the body's origin.\n  /// @return the same point expressed in world coordinates.\n  GetWorldPoint<T extends XY>(localPoint: XY, out: T): T {\n    return b2Transform.MulXV(this.m_xf, localPoint, out);\n  }\n\n  /// Get the world coordinates of a vector given the local coordinates.\n  /// @param localVector a vector fixed in the body.\n  /// @return the same vector expressed in world coordinates.\n  GetWorldVector<T extends XY>(localVector: XY, out: T): T {\n    return b2Rot.MulRV(this.m_xf.q, localVector, out);\n  }\n\n  /// Gets a local point relative to the body's origin given a world point.\n  /// @param a point in world coordinates.\n  /// @return the corresponding local point relative to the body's origin.\n  GetLocalPoint<T extends XY>(worldPoint: XY, out: T): T {\n    return b2Transform.MulTXV(this.m_xf, worldPoint, out);\n  }\n\n  /// Gets a local vector given a world vector.\n  /// @param a vector in world coordinates.\n  /// @return the corresponding local vector.\n  GetLocalVector<T extends XY>(worldVector: XY, out: T): T {\n    return b2Rot.MulTRV(this.m_xf.q, worldVector, out);\n  }\n\n  /// Get the world linear velocity of a world point attached to this body.\n  /// @param a point in world coordinates.\n  /// @return the world velocity of a point.\n  GetLinearVelocityFromWorldPoint<T extends XY>(worldPoint: XY, out: T): T {\n    return b2Vec2.AddVCrossSV(\n      this.m_linearVelocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(worldPoint, this.m_sweep.c, b2Vec2.s_t0),\n      out,\n    );\n  }\n\n  /// Get the world velocity of a local point.\n  /// @param a point in local coordinates.\n  /// @return the world velocity of a point.\n  GetLinearVelocityFromLocalPoint<T extends XY>(localPoint: XY, out: T): T {\n    return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint, out), out);\n  }\n\n  /// Get the linear damping of the body.\n  GetLinearDamping(): number {\n    return this.m_linearDamping;\n  }\n\n  /// Set the linear damping of the body.\n  SetLinearDamping(linearDamping: number): void {\n    this.m_linearDamping = linearDamping;\n  }\n\n  /// Get the angular damping of the body.\n  GetAngularDamping(): number {\n    return this.m_angularDamping;\n  }\n\n  /// Set the angular damping of the body.\n  SetAngularDamping(angularDamping: number): void {\n    this.m_angularDamping = angularDamping;\n  }\n\n  /// Get the gravity scale of the body.\n  GetGravityScale(): number {\n    return this.m_gravityScale;\n  }\n\n  /// Set the gravity scale of the body.\n  SetGravityScale(scale: number): void {\n    this.m_gravityScale = scale;\n  }\n\n  /// Set the type of this body. This may alter the mass and velocity.\n  SetType(type: b2BodyType): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    if (this.m_type === type) {\n      return;\n    }\n\n    this.m_type = type;\n\n    this.ResetMassData();\n\n    if (this.m_type === b2BodyType.b2_staticBody) {\n      this.m_linearVelocity.SetZero();\n      this.m_angularVelocity = 0;\n      this.m_sweep.a0 = this.m_sweep.a;\n      this.m_sweep.c0.Copy(this.m_sweep.c);\n      this.SynchronizeFixtures();\n    }\n\n    this.SetAwake(true);\n\n    this.m_force.SetZero();\n    this.m_torque = 0;\n\n    // Delete the attached contacts.\n    let ce: b2ContactEdge | null = this.m_contactList;\n    while (ce) {\n      const ce0: b2ContactEdge = ce;\n      ce = ce.next;\n      this.m_world.m_contactManager.Destroy(ce0.contact);\n    }\n    this.m_contactList = null;\n\n    // Touch the proxies so that new contacts will be created (when appropriate)\n    for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n      f.TouchProxies();\n    }\n  }\n\n  /// Get the type of this body.\n  GetType(): b2BodyType {\n    return this.m_type;\n  }\n\n  /// Should this body be treated like a bullet for continuous collision detection?\n  SetBullet(flag: boolean): void {\n    this.m_bulletFlag = flag;\n  }\n\n  /// Is this body treated like a bullet for continuous collision detection?\n  IsBullet(): boolean {\n    return this.m_bulletFlag;\n  }\n\n  /// You can disable sleeping on this body. If you disable sleeping, the\n  /// body will be woken.\n  SetSleepingAllowed(flag: boolean): void {\n    this.m_autoSleepFlag = flag;\n    if (!flag) {\n      this.SetAwake(true);\n    }\n  }\n\n  /// Is this body allowed to sleep\n  IsSleepingAllowed(): boolean {\n    return this.m_autoSleepFlag;\n  }\n\n  /// Set the sleep state of the body. A sleeping body has very\n  /// low CPU cost.\n  /// @param flag set to true to wake the body, false to put it to sleep.\n  SetAwake(flag: boolean): void {\n    if (flag) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0;\n    } else {\n      this.m_awakeFlag = false;\n      this.m_sleepTime = 0;\n      this.m_linearVelocity.SetZero();\n      this.m_angularVelocity = 0;\n      this.m_force.SetZero();\n      this.m_torque = 0;\n    }\n  }\n\n  /// Get the sleeping state of this body.\n  /// @return true if the body is sleeping.\n  IsAwake(): boolean {\n    return this.m_awakeFlag;\n  }\n\n  /// Set the active state of the body. An inactive body is not\n  /// simulated and cannot be collided with or woken up.\n  /// If you pass a flag of true, all fixtures will be added to the\n  /// broad-phase.\n  /// If you pass a flag of false, all fixtures will be removed from\n  /// the broad-phase and all contacts will be destroyed.\n  /// Fixtures and joints are otherwise unaffected. You may continue\n  /// to create/destroy fixtures and joints on inactive bodies.\n  /// Fixtures on an inactive body are implicitly inactive and will\n  /// not participate in collisions, ray-casts, or queries.\n  /// Joints connected to an inactive body are implicitly inactive.\n  /// An inactive body is still owned by a b2World object and remains\n  /// in the body list.\n  SetActive(flag: boolean): void {\n    if (this.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    if (flag === this.IsActive()) {\n      return;\n    }\n\n    this.m_activeFlag = flag;\n\n    if (flag) {\n      // Create all proxies.\n      for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n        f.CreateProxies();\n      }\n      // Contacts are created the next time step.\n    } else {\n      // Destroy all proxies.\n      for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n        f.DestroyProxies();\n      }\n      // Destroy the attached contacts.\n      let ce: b2ContactEdge | null = this.m_contactList;\n      while (ce) {\n        const ce0: b2ContactEdge = ce;\n        ce = ce.next;\n        this.m_world.m_contactManager.Destroy(ce0.contact);\n      }\n      this.m_contactList = null;\n    }\n  }\n\n  /// Get the active state of the body.\n  IsActive(): boolean {\n    return this.m_activeFlag;\n  }\n\n  /// Set this body to have fixed rotation. This causes the mass\n  /// to be reset.\n  SetFixedRotation(flag: boolean): void {\n    if (this.m_fixedRotationFlag === flag) {\n      return;\n    }\n\n    this.m_fixedRotationFlag = flag;\n\n    this.m_angularVelocity = 0;\n\n    this.ResetMassData();\n  }\n\n  /// Does this body have fixed rotation?\n  IsFixedRotation(): boolean {\n    return this.m_fixedRotationFlag;\n  }\n\n  /// Get the list of all fixtures attached to this body.\n  GetFixtureList(): b2Fixture | null {\n    return this.m_fixtureList;\n  }\n\n  /// Get the list of all joints attached to this body.\n  GetJointList(): b2JointEdge | null {\n    return this.m_jointList;\n  }\n\n  /// Get the list of all contacts attached to this body.\n  /// @warning this list changes during the time step and you may\n  /// miss some collisions if you don't use b2ContactListener.\n  GetContactList(): b2ContactEdge | null {\n    return this.m_contactList;\n  }\n\n  /// Get the next body in the world's body list.\n  GetNext(): b2Body | null {\n    return this.m_next;\n  }\n\n  /// Get the user data pointer that was provided in the body definition.\n  GetUserData(): any {\n    return this.m_userData;\n  }\n\n  /// Set the user data. Use this to store your application specific data.\n  SetUserData(data: any): void {\n    this.m_userData = data;\n  }\n\n  /// Get the parent world of this body.\n  GetWorld(): b2World {\n    return this.m_world;\n  }\n\n  private static SynchronizeFixtures_s_xf1: b2Transform = new b2Transform();\n  private static SynchronizeFixtures_s_displacement: b2Vec2 = new b2Vec2();\n\n  SynchronizeFixtures(): void {\n    const xf1: b2Transform = b2Body.SynchronizeFixtures_s_xf1;\n    xf1.q.SetAngle(this.m_sweep.a0);\n    b2Rot.MulRV(xf1.q, this.m_sweep.localCenter, xf1.p);\n    b2Vec2.SubVV(this.m_sweep.c0, xf1.p, xf1.p);\n\n    // const displacement: b2Vec2 = b2Vec2.SubVV(this.m_xf.p, xf1.p, b2Body.SynchronizeFixtures_s_displacement);\n    const displacement: b2Vec2 = b2Vec2.SubVV(\n      this.m_sweep.c,\n      this.m_sweep.c0,\n      b2Body.SynchronizeFixtures_s_displacement,\n    );\n\n    for (let f: b2Fixture | null = this.m_fixtureList; f; f = f.m_next) {\n      f.SynchronizeProxies(xf1, this.m_xf, displacement);\n    }\n  }\n\n  SynchronizeTransform(): void {\n    this.m_xf.q.SetAngle(this.m_sweep.a);\n    b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\n    b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\n  }\n\n  // This is used to prevent connected bodies from colliding.\n  // It may lie, depending on the collideConnected flag.\n  ShouldCollide(other: b2Body): boolean {\n    // At least one body should be dynamic or kinematic.\n    if (this.m_type === b2BodyType.b2_staticBody && other.m_type === b2BodyType.b2_staticBody) {\n      return false;\n    }\n    return this.ShouldCollideConnected(other);\n  }\n\n  ShouldCollideConnected(other: b2Body): boolean {\n    // Does a joint prevent collision?\n    for (let jn: b2JointEdge | null = this.m_jointList; jn; jn = jn.next) {\n      if (jn.other === other) {\n        if (!jn.joint.m_collideConnected) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  Advance(alpha: number): void {\n    // Advance to the new safe time. This doesn't sync the broad-phase.\n    this.m_sweep.Advance(alpha);\n    this.m_sweep.c.Copy(this.m_sweep.c0);\n    this.m_sweep.a = this.m_sweep.a0;\n    this.m_xf.q.SetAngle(this.m_sweep.a);\n    b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\n    b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\n  }\n\n  // #if B2_ENABLE_CONTROLLER\n  GetControllerList(): b2ControllerEdge | null {\n    return this.m_controllerList;\n  }\n\n  GetControllerCount(): number {\n    return this.m_controllerCount;\n  }\n  // #endif\n}\n","/*\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2Vec2, XY } from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport const enum b2JointType {\n  e_unknownJoint = 0,\n  e_revoluteJoint = 1,\n  e_prismaticJoint = 2,\n  e_distanceJoint = 3,\n  e_pulleyJoint = 4,\n  e_mouseJoint = 5,\n  e_gearJoint = 6,\n  e_wheelJoint = 7,\n  e_weldJoint = 8,\n  e_frictionJoint = 9,\n  e_ropeJoint = 10,\n  e_motorJoint = 11,\n  e_areaJoint = 12,\n}\n\nexport const enum b2LimitState {\n  e_inactiveLimit = 0,\n  e_atLowerLimit = 1,\n  e_atUpperLimit = 2,\n  e_equalLimits = 3,\n}\n\nexport class b2Jacobian {\n  readonly linear = new b2Vec2();\n  angularA = 0;\n  angularB = 0;\n\n  SetZero(): b2Jacobian {\n    this.linear.SetZero();\n    this.angularA = 0;\n    this.angularB = 0;\n    return this;\n  }\n\n  Set(x: XY, a1: number, a2: number): b2Jacobian {\n    this.linear.Copy(x);\n    this.angularA = a1;\n    this.angularB = a2;\n    return this;\n  }\n}\n\n/// A joint edge is used to connect bodies and joints together\n/// in a joint graph where each body is a node and each joint\n/// is an edge. A joint edge belongs to a doubly linked list\n/// maintained in each attached body. Each joint has two joint\n/// nodes, one for each attached body.\nexport class b2JointEdge {\n  private _other: b2Body | null = null; ///< provides quick access to the other body attached.\n  get other(): b2Body {\n    !!B2_DEBUG && b2Assert(this._other !== null);\n    return this._other!;\n  }\n\n  set other(value: b2Body) {\n    !!B2_DEBUG && b2Assert(this._other === null);\n    this._other = value;\n  }\n\n  readonly joint: b2Joint; ///< the joint\n  prev: b2JointEdge | null = null; ///< the previous joint edge in the body's joint list\n  next: b2JointEdge | null = null; ///< the next joint edge in the body's joint list\n  constructor(joint: b2Joint) {\n    this.joint = joint;\n  }\n\n  Reset(): void {\n    this._other = null;\n    this.prev = null;\n    this.next = null;\n  }\n}\n\n/// Joint definitions are used to construct joints.\nexport interface b2IJointDef {\n  /// The joint type is set automatically for concrete joint types.\n  type: b2JointType;\n\n  /// Use this to attach application specific data to your joints.\n  userData?: any;\n\n  /// The first attached body.\n  bodyA: b2Body;\n\n  /// The second attached body.\n  bodyB: b2Body;\n\n  /// Set this flag to true if the attached bodies should collide.\n  collideConnected?: boolean;\n}\n\n/// Joint definitions are used to construct joints.\nexport abstract class b2JointDef implements b2IJointDef {\n  /// The joint type is set automatically for concrete joint types.\n  readonly type: b2JointType = b2JointType.e_unknownJoint;\n\n  /// Use this to attach application specific data to your joints.\n  userData: any = null;\n\n  /// The first attached body.\n  bodyA!: b2Body;\n\n  /// The second attached body.\n  bodyB!: b2Body;\n\n  /// Set this flag to true if the attached bodies should collide.\n  collideConnected = false;\n\n  constructor(type: b2JointType) {\n    this.type = type;\n  }\n}\n\n/// The base joint class. Joints are used to constraint two bodies together in\n/// various fashions. Some joints also feature limits and motors.\nexport abstract class b2Joint {\n  readonly m_type: b2JointType = b2JointType.e_unknownJoint;\n  m_prev: b2Joint | null = null;\n  m_next: b2Joint | null = null;\n  readonly m_edgeA: b2JointEdge = new b2JointEdge(this);\n  readonly m_edgeB: b2JointEdge = new b2JointEdge(this);\n  m_bodyA: b2Body;\n  m_bodyB: b2Body;\n\n  m_islandFlag = false;\n  m_collideConnected = false;\n\n  m_userData: any = null;\n\n  _logIndex = 0;\n\n  constructor(def: b2IJointDef) {\n    !!B2_DEBUG && b2Assert(def.bodyA !== def.bodyB);\n\n    this.m_type = def.type;\n    this.m_edgeA.other = def.bodyB;\n    this.m_edgeB.other = def.bodyA;\n    this.m_bodyA = def.bodyA;\n    this.m_bodyB = def.bodyB;\n\n    this.m_collideConnected = b2Maybe(def.collideConnected, false);\n\n    this.m_userData = b2Maybe(def.userData, null);\n  }\n\n  /// Get the type of the concrete joint.\n  GetType(): b2JointType {\n    return this.m_type;\n  }\n\n  /// Get the first body attached to this joint.\n  GetBodyA(): b2Body {\n    return this.m_bodyA;\n  }\n\n  /// Get the second body attached to this joint.\n  GetBodyB(): b2Body {\n    return this.m_bodyB;\n  }\n\n  /// Get the anchor point on bodyA in world coordinates.\n  abstract GetAnchorA<T extends XY>(out: T): T;\n\n  /// Get the anchor point on bodyB in world coordinates.\n  abstract GetAnchorB<T extends XY>(out: T): T;\n\n  /// Get the reaction force on bodyB at the joint anchor in Newtons.\n  abstract GetReactionForce<T extends XY>(inv_dt: number, out: T): T;\n\n  /// Get the reaction torque on bodyB in N*m.\n  abstract GetReactionTorque(inv_dt: number): number;\n\n  /// Get the next joint the world joint list.\n  GetNext(): b2Joint | null {\n    return this.m_next;\n  }\n\n  /// Get the user data pointer.\n  GetUserData(): any {\n    return this.m_userData;\n  }\n\n  /// Set the user data pointer.\n  SetUserData(data: any): void {\n    this.m_userData = data;\n  }\n\n  /// Short-cut function to determine if either body is inactive.\n  IsActive(): boolean {\n    return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\n  }\n\n  /// Get collide connected.\n  /// Note: modifying the collide connect flag won't work correctly because\n  /// the flag is only checked when fixture AABBs begin to overlap.\n  GetCollideConnected(): boolean {\n    return this.m_collideConnected;\n  }\n\n  /// Shift the origin for any points stored in world coordinates.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  ShiftOrigin(newOrigin: XY): void {}\n\n  abstract InitVelocityConstraints(data: b2SolverData): void;\n\n  abstract SolveVelocityConstraints(data: b2SolverData): void;\n\n  // This returns true if the position errors are within tolerance.\n  abstract SolvePositionConstraints(data: b2SolverData): boolean;\n}\n","/*\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2_maxLinearCorrection, b2_pi, b2Maybe } from '../../common/b2Settings';\nimport { b2Abs, b2Clamp, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\nimport { b2Body } from '../b2Body';\n\nexport interface b2IDistanceJointDef extends b2IJointDef {\n  localAnchorA: XY;\n  localAnchorB: XY;\n  length: number;\n  frequencyHz?: number;\n  dampingRatio?: number;\n}\n\n/// Distance joint definition. This requires defining an\n/// anchor point on both bodies and the non-zero length of the\n/// distance joint. The definition uses local anchor points\n/// so that the initial configuration can violate the constraint\n/// slightly. This helps when saving and loading a game.\n/// @warning Do not use a zero or short length.\nexport class b2DistanceJointDef extends b2JointDef implements b2IDistanceJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2();\n  readonly localAnchorB: b2Vec2 = new b2Vec2();\n  length = 1;\n  frequencyHz = 0;\n  dampingRatio = 0;\n\n  constructor() {\n    super(b2JointType.e_distanceJoint);\n  }\n\n  Initialize(b1: b2Body, b2: b2Body, anchor1: XY, anchor2: XY): void {\n    this.bodyA = b1;\n    this.bodyB = b2;\n    this.bodyA.GetLocalPoint(anchor1, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor2, this.localAnchorB);\n    this.length = b2Vec2.DistanceVV(anchor1, anchor2);\n    this.frequencyHz = 0;\n    this.dampingRatio = 0;\n  }\n}\n\nexport class b2DistanceJoint extends b2Joint {\n  m_frequencyHz = 0;\n  m_dampingRatio = 0;\n  m_bias = 0;\n\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  m_gamma = 0;\n  m_impulse = 0;\n  m_length = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_u: b2Vec2 = new b2Vec2();\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  m_mass = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IDistanceJointDef) {\n    super(def);\n\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\n\n    this.m_localAnchorA.Copy(def.localAnchorA);\n    this.m_localAnchorB.Copy(def.localAnchorB);\n    this.m_length = def.length;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    out.x = inv_dt * this.m_impulse * this.m_u.x;\n    out.y = inv_dt * this.m_impulse * this.m_u.y;\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return 0;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  SetLength(length: number): void {\n    this.m_length = length;\n  }\n\n  Length() {\n    return this.m_length;\n  }\n\n  SetFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  GetFrequency() {\n    return this.m_frequencyHz;\n  }\n\n  SetDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  GetDampingRatio() {\n    return this.m_dampingRatio;\n  }\n\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // m_u = cB + m_rB - cA - m_rA;\n    this.m_u.x = cB.x + this.m_rB.x - cA.x - this.m_rA.x;\n    this.m_u.y = cB.y + this.m_rB.y - cA.y - this.m_rA.y;\n\n    // Handle singularity.\n    const length: number = this.m_u.Length();\n    if (length > b2_linearSlop) {\n      this.m_u.SelfMul(1 / length);\n    } else {\n      this.m_u.SetZero();\n    }\n\n    // float32 crAu = b2Cross(m_rA, m_u);\n    const crAu: number = b2Vec2.CrossVV(this.m_rA, this.m_u);\n    // float32 crBu = b2Cross(m_rB, m_u);\n    const crBu: number = b2Vec2.CrossVV(this.m_rB, this.m_u);\n    // float32 invMass = m_invMassA + m_invIA * crAu * crAu + m_invMassB + m_invIB * crBu * crBu;\n    let invMass: number =\n      this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu;\n\n    // Compute the effective mass matrix.\n    this.m_mass = invMass !== 0 ? 1 / invMass : 0;\n\n    if (this.m_frequencyHz > 0) {\n      const C: number = length - this.m_length;\n\n      // Frequency\n      const omega: number = 2 * b2_pi * this.m_frequencyHz;\n\n      // Damping coefficient\n      const d: number = 2 * this.m_mass * this.m_dampingRatio * omega;\n\n      // Spring stiffness\n      const k: number = this.m_mass * omega * omega;\n\n      // magic formulas\n      const h: number = data.step.dt;\n      this.m_gamma = h * (d + h * k);\n      this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\n      this.m_bias = C * h * k * this.m_gamma;\n\n      invMass += this.m_gamma;\n      this.m_mass = invMass !== 0 ? 1 / invMass : 0;\n    } else {\n      this.m_gamma = 0;\n      this.m_bias = 0;\n    }\n\n    if (data.step.warmStarting) {\n      // Scale the impulse to support a variable time step.\n      this.m_impulse *= data.step.dtRatio;\n\n      // b2Vec2 P = m_impulse * m_u;\n      const P: b2Vec2 = b2Vec2.MulSV(\n        this.m_impulse,\n        this.m_u,\n        b2DistanceJoint.InitVelocityConstraints_s_P,\n      );\n\n      // vA -= m_invMassA * P;\n      vA.SelfMulSub(this.m_invMassA, P);\n      // wA -= m_invIA * b2Cross(m_rA, P);\n      wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\n      // vB += m_invMassB * P;\n      vB.SelfMulAdd(this.m_invMassB, P);\n      // wB += m_invIB * b2Cross(m_rB, P);\n      wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\n    } else {\n      this.m_impulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_vpA = new b2Vec2();\n  private static SolveVelocityConstraints_s_vpB = new b2Vec2();\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\n    const vpA: b2Vec2 = b2Vec2.AddVCrossSV(\n      vA,\n      wA,\n      this.m_rA,\n      b2DistanceJoint.SolveVelocityConstraints_s_vpA,\n    );\n    // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\n    const vpB: b2Vec2 = b2Vec2.AddVCrossSV(\n      vB,\n      wB,\n      this.m_rB,\n      b2DistanceJoint.SolveVelocityConstraints_s_vpB,\n    );\n    // float32 Cdot = b2Dot(m_u, vpB - vpA);\n    const Cdot: number = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\n\n    const impulse: number = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n    this.m_impulse += impulse;\n\n    // b2Vec2 P = impulse * m_u;\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\n\n    // vA -= m_invMassA * P;\n    vA.SelfMulSub(this.m_invMassA, P);\n    // wA -= m_invIA * b2Cross(m_rA, P);\n    wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\n    // vB += m_invMassB * P;\n    vB.SelfMulAdd(this.m_invMassB, P);\n    // wB += m_invIB * b2Cross(m_rB, P);\n    wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    if (this.m_frequencyHz > 0) {\n      // There is no position correction for soft distance constraints.\n      return true;\n    }\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA); // use m_rA\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB); // use m_rB\n    // b2Vec2 u = cB + rB - cA - rA;\n    const u: b2Vec2 = this.m_u; // use m_u\n    u.x = cB.x + rB.x - cA.x - rA.x;\n    u.y = cB.y + rB.y - cA.y - rA.y;\n\n    // float32 length = u.Normalize();\n    const length: number = this.m_u.Normalize();\n    // float32 C = length - m_length;\n    let C: number = length - this.m_length;\n    C = b2Clamp(C, -b2_maxLinearCorrection, b2_maxLinearCorrection);\n\n    const impulse: number = -this.m_mass * C;\n    // b2Vec2 P = impulse * u;\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, u, b2DistanceJoint.SolvePositionConstraints_s_P);\n\n    // cA -= m_invMassA * P;\n    cA.SelfMulSub(this.m_invMassA, P);\n    // aA -= m_invIA * b2Cross(rA, P);\n    aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\n    // cB += m_invMassB * P;\n    cB.SelfMulAdd(this.m_invMassB, P);\n    // aB += m_invIB * b2Cross(rB, P);\n    aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return b2Abs(C) < b2_linearSlop;\n  }\n}\n","import {\n  b2_epsilon,\n  b2_linearSlop,\n  b2_maxLinearCorrection,\n  b2Assert,\n  b2MakeNumberArray,\n  b2Maybe,\n} from '../../common/b2Settings';\nimport { b2Sq, b2Sqrt, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2DistanceJoint, b2DistanceJointDef } from './b2DistanceJoint';\nimport { b2SolverData } from '../b2TimeStep';\nimport { b2Body } from '../b2Body';\n\nexport interface b2IAreaJointDef extends b2IJointDef {\n  // world: b2World;\n\n  bodies: b2Body[];\n\n  frequencyHz?: number;\n\n  dampingRatio?: number;\n}\n\nexport class b2AreaJointDef extends b2JointDef implements b2IAreaJointDef {\n  bodies: b2Body[] = [];\n\n  frequencyHz = 0;\n\n  dampingRatio = 0;\n\n  constructor() {\n    super(b2JointType.e_areaJoint);\n  }\n\n  AddBody(body: b2Body): void {\n    this.bodies.push(body);\n\n    if (this.bodies.length === 1) {\n      this.bodyA = body;\n    } else if (this.bodies.length === 2) {\n      this.bodyB = body;\n    }\n  }\n}\n\nexport class b2AreaJoint extends b2Joint {\n  m_bodies: b2Body[];\n  m_frequencyHz = 0;\n  m_dampingRatio = 0;\n\n  // Solver shared\n  m_impulse = 0;\n\n  // Solver temp\n  readonly m_targetLengths: number[];\n  m_targetArea = 0;\n  readonly m_normals: b2Vec2[];\n  readonly m_joints: b2DistanceJoint[];\n  readonly m_deltas: b2Vec2[];\n  readonly m_delta: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IAreaJointDef) {\n    super(def);\n\n    !!B2_DEBUG &&\n      b2Assert(\n        def.bodies.length >= 3,\n        'You cannot create an area joint with less than three bodies.',\n      );\n\n    this.m_bodies = def.bodies;\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\n\n    this.m_targetLengths = b2MakeNumberArray(def.bodies.length);\n    this.m_normals = b2Vec2.MakeArray(def.bodies.length);\n    this.m_joints = []; // b2MakeNullArray(def.bodies.length);\n    this.m_deltas = b2Vec2.MakeArray(def.bodies.length);\n\n    const djd: b2DistanceJointDef = new b2DistanceJointDef();\n    djd.frequencyHz = this.m_frequencyHz;\n    djd.dampingRatio = this.m_dampingRatio;\n\n    this.m_targetArea = 0;\n\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body: b2Body = this.m_bodies[i];\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\n\n      const body_c: b2Vec2 = body.GetWorldCenter();\n      const next_c: b2Vec2 = next.GetWorldCenter();\n\n      this.m_targetLengths[i] = b2Vec2.DistanceVV(body_c, next_c);\n\n      this.m_targetArea += b2Vec2.CrossVV(body_c, next_c);\n\n      djd.Initialize(body, next, body_c, next_c);\n      this.m_joints[i] = body.GetWorld().CreateJoint(djd);\n    }\n\n    this.m_targetArea *= 0.5;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return out;\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return out;\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return 0;\n  }\n\n  SetFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n\n    for (let i = 0; i < this.m_joints.length; ++i) {\n      this.m_joints[i].SetFrequency(hz);\n    }\n  }\n\n  GetFrequency() {\n    return this.m_frequencyHz;\n  }\n\n  SetDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n\n    for (let i = 0; i < this.m_joints.length; ++i) {\n      this.m_joints[i].SetDampingRatio(ratio);\n    }\n  }\n\n  GetDampingRatio() {\n    return this.m_dampingRatio;\n  }\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const prev: b2Body = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\n      const prev_c: b2Vec2 = data.positions[prev.m_islandIndex].c;\n      const next_c: b2Vec2 = data.positions[next.m_islandIndex].c;\n      const delta: b2Vec2 = this.m_deltas[i];\n\n      b2Vec2.SubVV(next_c, prev_c, delta);\n    }\n\n    if (data.step.warmStarting) {\n      this.m_impulse *= data.step.dtRatio;\n\n      for (let i = 0; i < this.m_bodies.length; ++i) {\n        const body: b2Body = this.m_bodies[i];\n        const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\n        const delta: b2Vec2 = this.m_deltas[i];\n\n        body_v.x += body.m_invMass * delta.y * 0.5 * this.m_impulse;\n        body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\n      }\n    } else {\n      this.m_impulse = 0;\n    }\n  }\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    let dotMassSum = 0;\n    let crossMassSum = 0;\n\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body: b2Body = this.m_bodies[i];\n      const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\n      const delta: b2Vec2 = this.m_deltas[i];\n\n      dotMassSum += delta.LengthSquared() / body.GetMass();\n      crossMassSum += b2Vec2.CrossVV(body_v, delta);\n    }\n\n    const lambda: number = (-2 * crossMassSum) / dotMassSum;\n    // lambda = b2Clamp(lambda, -b2_maxLinearCorrection, b2_maxLinearCorrection);\n\n    this.m_impulse += lambda;\n\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body: b2Body = this.m_bodies[i];\n      const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\n      const delta: b2Vec2 = this.m_deltas[i];\n\n      body_v.x += body.m_invMass * delta.y * 0.5 * lambda;\n      body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\n    }\n  }\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    let perimeter = 0;\n    let area = 0;\n\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body: b2Body = this.m_bodies[i];\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\n      const body_c: b2Vec2 = data.positions[body.m_islandIndex].c;\n      const next_c: b2Vec2 = data.positions[next.m_islandIndex].c;\n\n      const delta: b2Vec2 = b2Vec2.SubVV(next_c, body_c, this.m_delta);\n\n      let dist: number = delta.Length();\n      if (dist < b2_epsilon) {\n        dist = 1;\n      }\n\n      this.m_normals[i].x = delta.y / dist;\n      this.m_normals[i].y = -delta.x / dist;\n\n      perimeter += dist;\n\n      area += b2Vec2.CrossVV(body_c, next_c);\n    }\n\n    area *= 0.5;\n\n    const deltaArea: number = this.m_targetArea - area;\n    const toExtrude: number = (0.5 * deltaArea) / perimeter;\n    let done = true;\n\n    for (let i = 0; i < this.m_bodies.length; ++i) {\n      const body: b2Body = this.m_bodies[i];\n      const body_c: b2Vec2 = data.positions[body.m_islandIndex].c;\n      const next_i: number = (i + 1) % this.m_bodies.length;\n\n      const delta: b2Vec2 = b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\n      delta.SelfMul(toExtrude);\n\n      const norm_sq: number = delta.LengthSquared();\n      if (norm_sq > b2Sq(b2_maxLinearCorrection)) {\n        delta.SelfMul(b2_maxLinearCorrection / b2Sqrt(norm_sq));\n      }\n      if (norm_sq > b2Sq(b2_linearSlop)) {\n        done = false;\n      }\n\n      body_c.x += delta.x;\n      body_c.y += delta.y;\n    }\n\n    return done;\n  }\n}\n","/*\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Maybe } from '../../common/b2Settings';\nimport { b2Clamp, b2Mat22, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\nimport { b2Body } from '../b2Body';\n\nexport interface b2IFrictionJointDef extends b2IJointDef {\n  localAnchorA: XY;\n\n  localAnchorB: XY;\n\n  maxForce?: number;\n\n  maxTorque?: number;\n}\n\n/// Friction joint definition.\nexport class b2FrictionJointDef extends b2JointDef implements b2IFrictionJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2();\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2();\n\n  maxForce = 0;\n\n  maxTorque = 0;\n\n  constructor() {\n    super(b2JointType.e_frictionJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n  }\n}\n\nexport class b2FrictionJoint extends b2Joint {\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n\n  // Solver shared\n  readonly m_linearImpulse: b2Vec2 = new b2Vec2();\n  m_angularImpulse = 0;\n  m_maxForce = 0;\n  m_maxTorque = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  readonly m_linearMass: b2Mat22 = new b2Mat22();\n  m_angularMass = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_K: b2Mat22 = new b2Mat22();\n\n  constructor(def: b2IFrictionJointDef) {\n    super(def);\n\n    this.m_localAnchorA.Copy(def.localAnchorA);\n    this.m_localAnchorB.Copy(def.localAnchorB);\n\n    this.m_linearImpulse.SetZero();\n    this.m_maxForce = b2Maybe(def.maxForce, 0);\n    this.m_maxTorque = b2Maybe(def.maxTorque, 0);\n\n    this.m_linearMass.SetZero();\n  }\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    // const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    // const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // Compute the effective mass matrix.\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // J = [-I -r1_skew I r2_skew]\n    //     [ 0       -1 0       1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n    //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n    //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const K: b2Mat22 = this.m_K; // new b2Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    K.GetInverse(this.m_linearMass);\n\n    this.m_angularMass = iA + iB;\n    if (this.m_angularMass > 0) {\n      this.m_angularMass = 1 / this.m_angularMass;\n    }\n\n    if (data.step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      // m_linearImpulse *= data.step.dtRatio;\n      this.m_linearImpulse.SelfMul(data.step.dtRatio);\n      this.m_angularImpulse *= data.step.dtRatio;\n\n      // const P: b2Vec2(m_linearImpulse.x, m_linearImpulse.y);\n      const P: b2Vec2 = this.m_linearImpulse;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      // wA -= iA * (b2Cross(m_rA, P) + m_angularImpulse);\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_angularImpulse);\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      // wB += iB * (b2Cross(m_rB, P) + m_angularImpulse);\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_angularImpulse);\n    } else {\n      this.m_linearImpulse.SetZero();\n      this.m_angularImpulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulseV = new b2Vec2();\n  private static SolveVelocityConstraints_s_oldImpulseV = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const h: number = data.step.dt;\n\n    // Solve angular friction\n    {\n      const Cdot: number = wB - wA;\n      let impulse: number = -this.m_angularMass * Cdot;\n\n      const oldImpulse: number = this.m_angularImpulse;\n      const maxImpulse: number = h * this.m_maxTorque;\n      this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n      impulse = this.m_angularImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve linear friction\n    {\n      // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\n      const Cdot_v2: b2Vec2 = b2Vec2.SubVV(\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\n        b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2,\n      );\n\n      // b2Vec2 impulse = -b2Mul(m_linearMass, Cdot);\n      const impulseV: b2Vec2 = b2Mat22\n        .MulMV(this.m_linearMass, Cdot_v2, b2FrictionJoint.SolveVelocityConstraints_s_impulseV)\n        .SelfNeg();\n      // b2Vec2 oldImpulse = m_linearImpulse;\n      const oldImpulseV = b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(\n        this.m_linearImpulse,\n      );\n      // m_linearImpulse += impulse;\n      this.m_linearImpulse.SelfAdd(impulseV);\n\n      const maxImpulse: number = h * this.m_maxForce;\n\n      if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n        this.m_linearImpulse.Normalize();\n        this.m_linearImpulse.SelfMul(maxImpulse);\n      }\n\n      // impulse = m_linearImpulse - oldImpulse;\n      b2Vec2.SubVV(this.m_linearImpulse, oldImpulseV, impulseV);\n\n      // vA -= mA * impulse;\n      vA.SelfMulSub(mA, impulseV);\n      // wA -= iA * b2Cross(m_rA, impulse);\n      wA -= iA * b2Vec2.CrossVV(this.m_rA, impulseV);\n\n      // vB += mB * impulse;\n      vB.SelfMulAdd(mB, impulseV);\n      // wB += iB * b2Cross(m_rB, impulse);\n      wB += iB * b2Vec2.CrossVV(this.m_rB, impulseV);\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    return true;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    out.x = inv_dt * this.m_linearImpulse.x;\n    out.y = inv_dt * this.m_linearImpulse.y;\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_angularImpulse;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  SetMaxForce(force: number): void {\n    this.m_maxForce = force;\n  }\n\n  GetMaxForce(): number {\n    return this.m_maxForce;\n  }\n\n  SetMaxTorque(torque: number): void {\n    this.m_maxTorque = torque;\n  }\n\n  GetMaxTorque(): number {\n    return this.m_maxTorque;\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2IsValid, b2Rot, b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2PrismaticJoint } from './b2PrismaticJoint';\nimport { b2RevoluteJoint } from './b2RevoluteJoint';\nimport { b2SolverData } from '../b2TimeStep';\nimport { b2Body } from '../b2Body';\n\nexport interface b2IGearJointDef extends b2IJointDef {\n  joint1: b2RevoluteJoint | b2PrismaticJoint;\n\n  joint2: b2RevoluteJoint | b2PrismaticJoint;\n\n  ratio?: number;\n}\n\n/// Gear joint definition. This definition requires two existing\n/// revolute or prismatic joints (any combination will work).\nexport class b2GearJointDef extends b2JointDef implements b2IGearJointDef {\n  joint1!: b2RevoluteJoint | b2PrismaticJoint;\n\n  joint2!: b2RevoluteJoint | b2PrismaticJoint;\n\n  ratio = 1;\n\n  constructor() {\n    super(b2JointType.e_gearJoint);\n  }\n}\n\nexport class b2GearJoint extends b2Joint {\n  m_joint1: b2RevoluteJoint | b2PrismaticJoint;\n  m_joint2: b2RevoluteJoint | b2PrismaticJoint;\n\n  m_typeA: b2JointType = b2JointType.e_unknownJoint;\n  m_typeB: b2JointType = b2JointType.e_unknownJoint;\n\n  // Body A is connected to body C\n  // Body B is connected to body D\n  m_bodyC: b2Body;\n  m_bodyD: b2Body;\n\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorC: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorD: b2Vec2 = new b2Vec2();\n\n  readonly m_localAxisC: b2Vec2 = new b2Vec2();\n  readonly m_localAxisD: b2Vec2 = new b2Vec2();\n\n  m_referenceAngleA = 0;\n  m_referenceAngleB = 0;\n\n  m_constant = 0;\n  m_ratio = 0;\n\n  m_impulse = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  m_indexC = 0;\n  m_indexD = 0;\n  readonly m_lcA = new b2Vec2();\n  readonly m_lcB = new b2Vec2();\n  readonly m_lcC = new b2Vec2();\n  readonly m_lcD = new b2Vec2();\n  m_mA = 0;\n  m_mB = 0;\n  m_mC = 0;\n  m_mD = 0;\n  m_iA = 0;\n  m_iB = 0;\n  m_iC = 0;\n  m_iD = 0;\n  readonly m_JvAC = new b2Vec2();\n  readonly m_JvBD = new b2Vec2();\n  m_JwA = 0;\n  m_JwB = 0;\n  m_JwC = 0;\n  m_JwD = 0;\n  m_mass = 0;\n\n  readonly m_qA = new b2Rot();\n  readonly m_qB = new b2Rot();\n  readonly m_qC = new b2Rot();\n  readonly m_qD = new b2Rot();\n  readonly m_lalcA = new b2Vec2();\n  readonly m_lalcB = new b2Vec2();\n  readonly m_lalcC = new b2Vec2();\n  readonly m_lalcD = new b2Vec2();\n\n  constructor(def: b2IGearJointDef) {\n    super(def);\n\n    this.m_joint1 = def.joint1;\n    this.m_joint2 = def.joint2;\n\n    this.m_typeA = this.m_joint1.GetType();\n    this.m_typeB = this.m_joint2.GetType();\n\n    !!B2_DEBUG &&\n      b2Assert(\n        this.m_typeA === b2JointType.e_revoluteJoint ||\n          this.m_typeA === b2JointType.e_prismaticJoint,\n      );\n    !!B2_DEBUG &&\n      b2Assert(\n        this.m_typeB === b2JointType.e_revoluteJoint ||\n          this.m_typeB === b2JointType.e_prismaticJoint,\n      );\n\n    let coordinateA: number, coordinateB: number;\n\n    // TODO_ERIN there might be some problem with the joint edges in b2Joint.\n\n    this.m_bodyC = this.m_joint1.GetBodyA();\n    this.m_bodyA = this.m_joint1.GetBodyB();\n\n    // Get geometry of joint1\n    const xfA = this.m_bodyA.m_xf;\n    const aA = this.m_bodyA.m_sweep.a;\n    const xfC = this.m_bodyC.m_xf;\n    const aC = this.m_bodyC.m_sweep.a;\n\n    if (this.m_typeA === b2JointType.e_revoluteJoint) {\n      const revolute = def.joint1 as b2RevoluteJoint;\n      this.m_localAnchorC.Copy(revolute.m_localAnchorA);\n      this.m_localAnchorA.Copy(revolute.m_localAnchorB);\n      this.m_referenceAngleA = revolute.m_referenceAngle;\n      this.m_localAxisC.SetZero();\n\n      coordinateA = aA - aC - this.m_referenceAngleA;\n    } else {\n      const prismatic = def.joint1 as b2PrismaticJoint;\n      this.m_localAnchorC.Copy(prismatic.m_localAnchorA);\n      this.m_localAnchorA.Copy(prismatic.m_localAnchorB);\n      this.m_referenceAngleA = prismatic.m_referenceAngle;\n      this.m_localAxisC.Copy(prismatic.m_localXAxisA);\n\n      // b2Vec2 pC = m_localAnchorC;\n      const pC = this.m_localAnchorC;\n      // b2Vec2 pA = b2MulT(xfC.q, b2Mul(xfA.q, m_localAnchorA) + (xfA.p - xfC.p));\n      const pA = b2Rot.MulTRV(\n        xfC.q,\n        b2Vec2.AddVV(\n          b2Rot.MulRV(xfA.q, this.m_localAnchorA, b2Vec2.s_t0),\n          b2Vec2.SubVV(xfA.p, xfC.p, b2Vec2.s_t1),\n          b2Vec2.s_t0,\n        ),\n        b2Vec2.s_t0,\n      ); // pA uses s_t0\n      // coordinateA = b2Dot(pA - pC, m_localAxisC);\n      coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\n    }\n\n    this.m_bodyD = this.m_joint2.GetBodyA();\n    this.m_bodyB = this.m_joint2.GetBodyB();\n\n    // Get geometry of joint2\n    const xfB: b2Transform = this.m_bodyB.m_xf;\n    const aB: number = this.m_bodyB.m_sweep.a;\n    const xfD: b2Transform = this.m_bodyD.m_xf;\n    const aD: number = this.m_bodyD.m_sweep.a;\n\n    if (this.m_typeB === b2JointType.e_revoluteJoint) {\n      const revolute = def.joint2 as b2RevoluteJoint;\n      this.m_localAnchorD.Copy(revolute.m_localAnchorA);\n      this.m_localAnchorB.Copy(revolute.m_localAnchorB);\n      this.m_referenceAngleB = revolute.m_referenceAngle;\n      this.m_localAxisD.SetZero();\n\n      coordinateB = aB - aD - this.m_referenceAngleB;\n    } else {\n      const prismatic = def.joint2 as b2PrismaticJoint;\n      this.m_localAnchorD.Copy(prismatic.m_localAnchorA);\n      this.m_localAnchorB.Copy(prismatic.m_localAnchorB);\n      this.m_referenceAngleB = prismatic.m_referenceAngle;\n      this.m_localAxisD.Copy(prismatic.m_localXAxisA);\n\n      // b2Vec2 pD = m_localAnchorD;\n      const pD = this.m_localAnchorD;\n      // b2Vec2 pB = b2MulT(xfD.q, b2Mul(xfB.q, m_localAnchorB) + (xfB.p - xfD.p));\n      const pB: b2Vec2 = b2Rot.MulTRV(\n        xfD.q,\n        b2Vec2.AddVV(\n          b2Rot.MulRV(xfB.q, this.m_localAnchorB, b2Vec2.s_t0),\n          b2Vec2.SubVV(xfB.p, xfD.p, b2Vec2.s_t1),\n          b2Vec2.s_t0,\n        ),\n        b2Vec2.s_t0,\n      ); // pB uses s_t0\n      // coordinateB = b2Dot(pB - pD, m_localAxisD);\n      coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\n    }\n\n    this.m_ratio = b2Maybe(def.ratio, 1);\n\n    this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n    this.m_impulse = 0;\n  }\n\n  private static InitVelocityConstraints_s_u = new b2Vec2();\n  private static InitVelocityConstraints_s_rA = new b2Vec2();\n  private static InitVelocityConstraints_s_rB = new b2Vec2();\n  private static InitVelocityConstraints_s_rC = new b2Vec2();\n  private static InitVelocityConstraints_s_rD = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_indexC = this.m_bodyC.m_islandIndex;\n    this.m_indexD = this.m_bodyD.m_islandIndex;\n    this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);\n    this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);\n    this.m_mA = this.m_bodyA.m_invMass;\n    this.m_mB = this.m_bodyB.m_invMass;\n    this.m_mC = this.m_bodyC.m_invMass;\n    this.m_mD = this.m_bodyD.m_invMass;\n    this.m_iA = this.m_bodyA.m_invI;\n    this.m_iB = this.m_bodyB.m_invI;\n    this.m_iC = this.m_bodyC.m_invI;\n    this.m_iD = this.m_bodyD.m_invI;\n\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const aC: number = data.positions[this.m_indexC].a;\n    const vC: b2Vec2 = data.velocities[this.m_indexC].v;\n    let wC: number = data.velocities[this.m_indexC].w;\n\n    const aD: number = data.positions[this.m_indexD].a;\n    const vD: b2Vec2 = data.velocities[this.m_indexD].v;\n    let wD: number = data.velocities[this.m_indexD].w;\n\n    // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB),\n      qC: b2Rot = this.m_qC.SetAngle(aC),\n      qD: b2Rot = this.m_qD.SetAngle(aD);\n\n    this.m_mass = 0;\n\n    if (this.m_typeA === b2JointType.e_revoluteJoint) {\n      this.m_JvAC.SetZero();\n      this.m_JwA = 1;\n      this.m_JwC = 1;\n      this.m_mass += this.m_iA + this.m_iC;\n    } else {\n      // b2Vec2 u = b2Mul(qC, m_localAxisC);\n      const u: b2Vec2 = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.InitVelocityConstraints_s_u);\n      // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\n      b2Vec2.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);\n      const rC: b2Vec2 = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.InitVelocityConstraints_s_rC);\n      // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\n      b2Vec2.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);\n      const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.InitVelocityConstraints_s_rA);\n      // m_JvAC = u;\n      this.m_JvAC.Copy(u);\n      // m_JwC = b2Cross(rC, u);\n      this.m_JwC = b2Vec2.CrossVV(rC, u);\n      // m_JwA = b2Cross(rA, u);\n      this.m_JwA = b2Vec2.CrossVV(rA, u);\n      this.m_mass +=\n        this.m_mC +\n        this.m_mA +\n        this.m_iC * this.m_JwC * this.m_JwC +\n        this.m_iA * this.m_JwA * this.m_JwA;\n    }\n\n    if (this.m_typeB === b2JointType.e_revoluteJoint) {\n      this.m_JvBD.SetZero();\n      this.m_JwB = this.m_ratio;\n      this.m_JwD = this.m_ratio;\n      this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n    } else {\n      // b2Vec2 u = b2Mul(qD, m_localAxisD);\n      const u: b2Vec2 = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.InitVelocityConstraints_s_u);\n      // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\n      b2Vec2.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);\n      const rD: b2Vec2 = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.InitVelocityConstraints_s_rD);\n      // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\n      b2Vec2.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);\n      const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.InitVelocityConstraints_s_rB);\n      // m_JvBD = m_ratio * u;\n      b2Vec2.MulSV(this.m_ratio, u, this.m_JvBD);\n      // m_JwD = m_ratio * b2Cross(rD, u);\n      this.m_JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\n      // m_JwB = m_ratio * b2Cross(rB, u);\n      this.m_JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\n      this.m_mass +=\n        this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) +\n        this.m_iD * this.m_JwD * this.m_JwD +\n        this.m_iB * this.m_JwB * this.m_JwB;\n    }\n\n    // Compute effective mass.\n    this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\n\n    if (data.step.warmStarting) {\n      // vA += (m_mA * m_impulse) * m_JvAC;\n      vA.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC);\n      wA += this.m_iA * this.m_impulse * this.m_JwA;\n      // vB += (m_mB * m_impulse) * m_JvBD;\n      vB.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD);\n      wB += this.m_iB * this.m_impulse * this.m_JwB;\n      // vC -= (m_mC * m_impulse) * m_JvAC;\n      vC.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC);\n      wC -= this.m_iC * this.m_impulse * this.m_JwC;\n      // vD -= (m_mD * m_impulse) * m_JvBD;\n      vD.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD);\n      wD -= this.m_iD * this.m_impulse * this.m_JwD;\n    } else {\n      this.m_impulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n    // data.velocities[this.m_indexC].v = vC;\n    data.velocities[this.m_indexC].w = wC;\n    // data.velocities[this.m_indexD].v = vD;\n    data.velocities[this.m_indexD].w = wD;\n  }\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n    const vC: b2Vec2 = data.velocities[this.m_indexC].v;\n    let wC: number = data.velocities[this.m_indexC].w;\n    const vD: b2Vec2 = data.velocities[this.m_indexD].v;\n    let wD: number = data.velocities[this.m_indexD].w;\n\n    // float32 Cdot = b2Dot(m_JvAC, vA - vC) + b2Dot(m_JvBD, vB - vD);\n    let Cdot =\n      b2Vec2.DotVV(this.m_JvAC, b2Vec2.SubVV(vA, vC, b2Vec2.s_t0)) +\n      b2Vec2.DotVV(this.m_JvBD, b2Vec2.SubVV(vB, vD, b2Vec2.s_t0));\n    Cdot += this.m_JwA * wA - this.m_JwC * wC + (this.m_JwB * wB - this.m_JwD * wD);\n\n    const impulse: number = -this.m_mass * Cdot;\n    this.m_impulse += impulse;\n\n    // vA += (m_mA * impulse) * m_JvAC;\n    vA.SelfMulAdd(this.m_mA * impulse, this.m_JvAC);\n    wA += this.m_iA * impulse * this.m_JwA;\n    // vB += (m_mB * impulse) * m_JvBD;\n    vB.SelfMulAdd(this.m_mB * impulse, this.m_JvBD);\n    wB += this.m_iB * impulse * this.m_JwB;\n    // vC -= (m_mC * impulse) * m_JvAC;\n    vC.SelfMulSub(this.m_mC * impulse, this.m_JvAC);\n    wC -= this.m_iC * impulse * this.m_JwC;\n    // vD -= (m_mD * impulse) * m_JvBD;\n    vD.SelfMulSub(this.m_mD * impulse, this.m_JvBD);\n    wD -= this.m_iD * impulse * this.m_JwD;\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n    // data.velocities[this.m_indexC].v = vC;\n    data.velocities[this.m_indexC].w = wC;\n    // data.velocities[this.m_indexD].v = vD;\n    data.velocities[this.m_indexD].w = wD;\n  }\n\n  private static SolvePositionConstraints_s_u = new b2Vec2();\n  private static SolvePositionConstraints_s_rA = new b2Vec2();\n  private static SolvePositionConstraints_s_rB = new b2Vec2();\n  private static SolvePositionConstraints_s_rC = new b2Vec2();\n  private static SolvePositionConstraints_s_rD = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n    const cC: b2Vec2 = data.positions[this.m_indexC].c;\n    let aC: number = data.positions[this.m_indexC].a;\n    const cD: b2Vec2 = data.positions[this.m_indexD].c;\n    let aD: number = data.positions[this.m_indexD].a;\n\n    // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB),\n      qC: b2Rot = this.m_qC.SetAngle(aC),\n      qD: b2Rot = this.m_qD.SetAngle(aD);\n\n    const linearError = 0;\n\n    let coordinateA: number, coordinateB: number;\n\n    const JvAC: b2Vec2 = this.m_JvAC,\n      JvBD: b2Vec2 = this.m_JvBD;\n    let JwA: number, JwB: number, JwC: number, JwD: number;\n    let mass = 0;\n\n    if (this.m_typeA === b2JointType.e_revoluteJoint) {\n      JvAC.SetZero();\n      JwA = 1;\n      JwC = 1;\n      mass += this.m_iA + this.m_iC;\n\n      coordinateA = aA - aC - this.m_referenceAngleA;\n    } else {\n      // b2Vec2 u = b2Mul(qC, m_localAxisC);\n      const u: b2Vec2 = b2Rot.MulRV(\n        qC,\n        this.m_localAxisC,\n        b2GearJoint.SolvePositionConstraints_s_u,\n      );\n      // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\n      const rC: b2Vec2 = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.SolvePositionConstraints_s_rC);\n      // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\n      const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.SolvePositionConstraints_s_rA);\n      // JvAC = u;\n      JvAC.Copy(u);\n      // JwC = b2Cross(rC, u);\n      JwC = b2Vec2.CrossVV(rC, u);\n      // JwA = b2Cross(rA, u);\n      JwA = b2Vec2.CrossVV(rA, u);\n      mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n      // b2Vec2 pC = m_localAnchorC - m_lcC;\n      const pC = this.m_lalcC;\n      // b2Vec2 pA = b2MulT(qC, rA + (cA - cC));\n      const pA: b2Vec2 = b2Rot.MulTRV(\n        qC,\n        b2Vec2.AddVV(rA, b2Vec2.SubVV(cA, cC, b2Vec2.s_t0), b2Vec2.s_t0),\n        b2Vec2.s_t0,\n      ); // pA uses s_t0\n      // coordinateA = b2Dot(pA - pC, m_localAxisC);\n      coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\n    }\n\n    if (this.m_typeB === b2JointType.e_revoluteJoint) {\n      JvBD.SetZero();\n      JwB = this.m_ratio;\n      JwD = this.m_ratio;\n      mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n      coordinateB = aB - aD - this.m_referenceAngleB;\n    } else {\n      // b2Vec2 u = b2Mul(qD, m_localAxisD);\n      const u: b2Vec2 = b2Rot.MulRV(\n        qD,\n        this.m_localAxisD,\n        b2GearJoint.SolvePositionConstraints_s_u,\n      );\n      // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\n      const rD: b2Vec2 = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.SolvePositionConstraints_s_rD);\n      // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\n      const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.SolvePositionConstraints_s_rB);\n      // JvBD = m_ratio * u;\n      b2Vec2.MulSV(this.m_ratio, u, JvBD);\n      // JwD = m_ratio * b2Cross(rD, u);\n      JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\n      // JwB = m_ratio * b2Cross(rB, u);\n      JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\n      mass +=\n        this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) +\n        this.m_iD * JwD * JwD +\n        this.m_iB * JwB * JwB;\n\n      // b2Vec2 pD = m_localAnchorD - m_lcD;\n      const pD = this.m_lalcD;\n      // b2Vec2 pB = b2MulT(qD, rB + (cB - cD));\n      const pB: b2Vec2 = b2Rot.MulTRV(\n        qD,\n        b2Vec2.AddVV(rB, b2Vec2.SubVV(cB, cD, b2Vec2.s_t0), b2Vec2.s_t0),\n        b2Vec2.s_t0,\n      ); // pB uses s_t0\n      // coordinateB = b2Dot(pB - pD, m_localAxisD);\n      coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\n    }\n\n    const C: number = coordinateA + this.m_ratio * coordinateB - this.m_constant;\n\n    let impulse = 0;\n    if (mass > 0) {\n      impulse = -C / mass;\n    }\n\n    // cA += m_mA * impulse * JvAC;\n    cA.SelfMulAdd(this.m_mA * impulse, JvAC);\n    aA += this.m_iA * impulse * JwA;\n    // cB += m_mB * impulse * JvBD;\n    cB.SelfMulAdd(this.m_mB * impulse, JvBD);\n    aB += this.m_iB * impulse * JwB;\n    // cC -= m_mC * impulse * JvAC;\n    cC.SelfMulSub(this.m_mC * impulse, JvAC);\n    aC -= this.m_iC * impulse * JwC;\n    // cD -= m_mD * impulse * JvBD;\n    cD.SelfMulSub(this.m_mD * impulse, JvBD);\n    aD -= this.m_iD * impulse * JwD;\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n    // data.positions[this.m_indexC].c = cC;\n    data.positions[this.m_indexC].a = aC;\n    // data.positions[this.m_indexD].c = cD;\n    data.positions[this.m_indexD].a = aD;\n\n    // TODO_ERIN not implemented\n    return linearError < b2_linearSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // b2Vec2 P = m_impulse * m_JvAC;\n    // return inv_dt * P;\n    return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_JvAC, out);\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    // float32 L = m_impulse * m_JwA;\n    // return inv_dt * L;\n    return inv_dt * this.m_impulse * this.m_JwA;\n  }\n\n  GetJoint1() {\n    return this.m_joint1;\n  }\n\n  GetJoint2() {\n    return this.m_joint2;\n  }\n\n  GetRatio() {\n    return this.m_ratio;\n  }\n\n  SetRatio(ratio: number): void {\n    !!B2_DEBUG && b2Assert(b2IsValid(ratio));\n    this.m_ratio = ratio;\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2Clamp, b2IsValid, b2Mat22, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\n// Point-to-point constraint\n// Cdot = v2 - v1\n//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n// J = [-I -r1_skew I r2_skew ]\n// Identity used:\n// w k % (rx i + ry j) = w * (-ry i + rx j)\n//\n// r1 = offset - c1\n// r2 = -c2\n\n// Angle constraint\n// Cdot = w2 - w1\n// J = [0 0 -1 0 0 1]\n// K = invI1 + invI2\n\nexport interface b2IMotorJointDef extends b2IJointDef {\n  linearOffset?: XY;\n\n  angularOffset?: number;\n\n  maxForce?: number;\n\n  maxTorque?: number;\n\n  correctionFactor?: number;\n}\n\nexport class b2MotorJointDef extends b2JointDef implements b2IMotorJointDef {\n  readonly linearOffset: b2Vec2 = new b2Vec2(0, 0);\n\n  angularOffset = 0;\n\n  maxForce = 1;\n\n  maxTorque = 1;\n\n  correctionFactor = 0.3;\n\n  constructor() {\n    super(b2JointType.e_motorJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    // b2Vec2 xB = bodyB->GetPosition();\n    // linearOffset = bodyA->GetLocalPoint(xB);\n    this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);\n\n    const angleA: number = this.bodyA.GetAngle();\n    const angleB: number = this.bodyB.GetAngle();\n    this.angularOffset = angleB - angleA;\n  }\n}\n\nexport class b2MotorJoint extends b2Joint {\n  // Solver shared\n  readonly m_linearOffset: b2Vec2 = new b2Vec2();\n  m_angularOffset = 0;\n  readonly m_linearImpulse: b2Vec2 = new b2Vec2();\n  m_angularImpulse = 0;\n  m_maxForce = 0;\n  m_maxTorque = 0;\n  m_correctionFactor = 0.3;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  readonly m_linearError: b2Vec2 = new b2Vec2();\n  m_angularError = 0;\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  readonly m_linearMass: b2Mat22 = new b2Mat22();\n  m_angularMass = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_K: b2Mat22 = new b2Mat22();\n\n  constructor(def: b2IMotorJointDef) {\n    super(def);\n\n    this.m_linearOffset.Copy(b2Maybe(def.linearOffset, b2Vec2.ZERO));\n    this.m_linearImpulse.SetZero();\n    this.m_maxForce = b2Maybe(def.maxForce, 0);\n    this.m_maxTorque = b2Maybe(def.maxTorque, 0);\n    this.m_correctionFactor = b2Maybe(def.correctionFactor, 0.3);\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    const pos: Readonly<b2Vec2> = this.m_bodyA.GetPosition();\n    out.x = pos.x;\n    out.y = pos.y;\n    return out;\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    const pos: Readonly<b2Vec2> = this.m_bodyB.GetPosition();\n    out.x = pos.x;\n    out.y = pos.y;\n    return out;\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // return inv_dt * m_linearImpulse;\n    return b2Vec2.MulSV(inv_dt, this.m_linearImpulse, out);\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_angularImpulse;\n  }\n\n  SetLinearOffset(linearOffset: b2Vec2): void {\n    if (!b2Vec2.IsEqualToV(linearOffset, this.m_linearOffset)) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_linearOffset.Copy(linearOffset);\n    }\n  }\n\n  GetLinearOffset() {\n    return this.m_linearOffset;\n  }\n\n  SetAngularOffset(angularOffset: number): void {\n    if (angularOffset !== this.m_angularOffset) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_angularOffset = angularOffset;\n    }\n  }\n\n  GetAngularOffset() {\n    return this.m_angularOffset;\n  }\n\n  SetMaxForce(force: number): void {\n    !!B2_DEBUG && b2Assert(b2IsValid(force) && force >= 0);\n    this.m_maxForce = force;\n  }\n\n  GetMaxForce() {\n    return this.m_maxForce;\n  }\n\n  SetMaxTorque(torque: number): void {\n    !!B2_DEBUG && b2Assert(b2IsValid(torque) && torque >= 0);\n    this.m_maxTorque = torque;\n  }\n\n  GetMaxTorque() {\n    return this.m_maxTorque;\n  }\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // Compute the effective mass matrix.\n    // this.m_rA = b2Mul(qA, m_linearOffset - this.m_localCenterA);\n    const rA: b2Vec2 = b2Rot.MulRV(\n      qA,\n      b2Vec2.SubVV(this.m_linearOffset, this.m_localCenterA, b2Vec2.s_t0),\n      this.m_rA,\n    );\n    // this.m_rB = b2Mul(qB, -this.m_localCenterB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, b2Vec2.NegV(this.m_localCenterB, b2Vec2.s_t0), this.m_rB);\n\n    // J = [-I -r1_skew I r2_skew]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n    //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n    //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    // Upper 2 by 2 of K for point to point\n    const K: b2Mat22 = this.m_K;\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    // this.m_linearMass = K.GetInverse();\n    K.GetInverse(this.m_linearMass);\n\n    this.m_angularMass = iA + iB;\n    if (this.m_angularMass > 0) {\n      this.m_angularMass = 1 / this.m_angularMass;\n    }\n\n    // this.m_linearError = cB + rB - cA - rA;\n    b2Vec2.SubVV(\n      b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n      b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n      this.m_linearError,\n    );\n    this.m_angularError = aB - aA - this.m_angularOffset;\n\n    if (data.step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      // this.m_linearImpulse *= data.step.dtRatio;\n      this.m_linearImpulse.SelfMul(data.step.dtRatio);\n      this.m_angularImpulse *= data.step.dtRatio;\n\n      // b2Vec2 P(this.m_linearImpulse.x, this.m_linearImpulse.y);\n      const P: b2Vec2 = this.m_linearImpulse;\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * (b2Vec2.CrossVV(rA, P) + this.m_angularImpulse);\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * (b2Vec2.CrossVV(rB, P) + this.m_angularImpulse);\n    } else {\n      this.m_linearImpulse.SetZero();\n      this.m_angularImpulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA; // vA is a reference\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB; // vB is a reference\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_oldImpulse_v2 = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const h: number = data.step.dt;\n    const inv_h: number = data.step.inv_dt;\n\n    // Solve angular friction\n    {\n      const Cdot: number = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n      let impulse: number = -this.m_angularMass * Cdot;\n\n      const oldImpulse: number = this.m_angularImpulse;\n      const maxImpulse: number = h * this.m_maxTorque;\n      this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n      impulse = this.m_angularImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve linear friction\n    {\n      const rA = this.m_rA;\n      const rB = this.m_rB;\n\n      // b2Vec2 Cdot = vB + b2Vec2.CrossSV(wB, rB) - vA - b2Vec2.CrossSV(wA, rA) + inv_h * this.m_correctionFactor * this.m_linearError;\n      const Cdot_v2 = b2Vec2.AddVV(\n        b2Vec2.SubVV(\n          b2Vec2.AddVV(vB, b2Vec2.CrossSV(wB, rB, b2Vec2.s_t0), b2Vec2.s_t0),\n          b2Vec2.AddVV(vA, b2Vec2.CrossSV(wA, rA, b2Vec2.s_t1), b2Vec2.s_t1),\n          b2Vec2.s_t2,\n        ),\n        b2Vec2.MulSV(inv_h * this.m_correctionFactor, this.m_linearError, b2Vec2.s_t3),\n        b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2,\n      );\n\n      // b2Vec2 impulse = -b2Mul(this.m_linearMass, Cdot);\n      const impulse_v2: b2Vec2 = b2Mat22\n        .MulMV(this.m_linearMass, Cdot_v2, b2MotorJoint.SolveVelocityConstraints_s_impulse_v2)\n        .SelfNeg();\n      // b2Vec2 oldImpulse = this.m_linearImpulse;\n      const oldImpulse_v2 = b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(\n        this.m_linearImpulse,\n      );\n      // this.m_linearImpulse += impulse;\n      this.m_linearImpulse.SelfAdd(impulse_v2);\n\n      const maxImpulse: number = h * this.m_maxForce;\n\n      if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n        this.m_linearImpulse.Normalize();\n        // this.m_linearImpulse *= maxImpulse;\n        this.m_linearImpulse.SelfMul(maxImpulse);\n      }\n\n      // impulse = this.m_linearImpulse - oldImpulse;\n      b2Vec2.SubVV(this.m_linearImpulse, oldImpulse_v2, impulse_v2);\n\n      // vA -= mA * impulse;\n      vA.SelfMulSub(mA, impulse_v2);\n      // wA -= iA * b2Vec2.CrossVV(rA, impulse);\n      wA -= iA * b2Vec2.CrossVV(rA, impulse_v2);\n\n      // vB += mB * impulse;\n      vB.SelfMulAdd(mB, impulse_v2);\n      // wB += iB * b2Vec2.CrossVV(rB, impulse);\n      wB += iB * b2Vec2.CrossVV(rB, impulse_v2);\n    }\n\n    // data.velocities[this.m_indexA].v = vA; // vA is a reference\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB; // vB is a reference\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    return true;\n  }\n}\n","/*\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_epsilon, b2_pi, b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2IsValid, b2Mat22, b2Rot, b2Transform, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport interface b2IMouseJointDef extends b2IJointDef {\n  target?: XY;\n\n  maxForce?: number;\n\n  frequencyHz?: number;\n\n  dampingRatio?: number;\n}\n\n/// Mouse joint definition. This requires a world target point,\n/// tuning parameters, and the time step.\nexport class b2MouseJointDef extends b2JointDef implements b2IMouseJointDef {\n  readonly target: b2Vec2 = new b2Vec2();\n\n  maxForce = 0;\n\n  frequencyHz = 5;\n\n  dampingRatio = 0.7;\n\n  constructor() {\n    super(b2JointType.e_mouseJoint);\n  }\n}\n\nexport class b2MouseJoint extends b2Joint {\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  readonly m_targetA: b2Vec2 = new b2Vec2();\n  m_frequencyHz = 0;\n  m_dampingRatio = 0;\n  m_beta = 0;\n\n  // Solver shared\n  readonly m_impulse: b2Vec2 = new b2Vec2();\n  m_maxForce = 0;\n  m_gamma = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassB = 0;\n  m_invIB = 0;\n  readonly m_mass: b2Mat22 = new b2Mat22();\n  readonly m_C: b2Vec2 = new b2Vec2();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_K: b2Mat22 = new b2Mat22();\n\n  constructor(def: b2IMouseJointDef) {\n    super(def);\n\n    this.m_targetA.Copy(b2Maybe(def.target, b2Vec2.ZERO));\n    !!B2_DEBUG && b2Assert(this.m_targetA.IsValid());\n    b2Transform.MulTXV(this.m_bodyB.GetTransform(), this.m_targetA, this.m_localAnchorB);\n\n    this.m_maxForce = b2Maybe(def.maxForce, 0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_maxForce) && this.m_maxForce >= 0);\n    this.m_impulse.SetZero();\n\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_frequencyHz) && this.m_frequencyHz >= 0);\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\n    !!B2_DEBUG && b2Assert(b2IsValid(this.m_dampingRatio) && this.m_dampingRatio >= 0);\n\n    this.m_beta = 0;\n    this.m_gamma = 0;\n  }\n\n  SetTarget(target: b2Vec2): void {\n    if (!this.m_bodyB.IsAwake()) {\n      this.m_bodyB.SetAwake(true);\n    }\n    this.m_targetA.Copy(target);\n  }\n\n  GetTarget() {\n    return this.m_targetA;\n  }\n\n  SetMaxForce(maxForce: number): void {\n    this.m_maxForce = maxForce;\n  }\n\n  GetMaxForce() {\n    return this.m_maxForce;\n  }\n\n  SetFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  GetFrequency() {\n    return this.m_frequencyHz;\n  }\n\n  SetDampingRatio(ratio: number) {\n    this.m_dampingRatio = ratio;\n  }\n\n  GetDampingRatio() {\n    return this.m_dampingRatio;\n  }\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cB = data.positions[this.m_indexB].c;\n    const aB = data.positions[this.m_indexB].a;\n    const vB = data.velocities[this.m_indexB].v;\n    let wB = data.velocities[this.m_indexB].w;\n\n    const qB = this.m_qB.SetAngle(aB);\n\n    const mass = this.m_bodyB.GetMass();\n\n    // Frequency\n    const omega = 2 * b2_pi * this.m_frequencyHz;\n\n    // Damping coefficient\n    const d = 2 * mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    const k = mass * (omega * omega);\n\n    // magic formulas\n    // gamma has units of inverse mass.\n    // beta has units of inverse time.\n    const h = data.step.dt;\n    !!B2_DEBUG && b2Assert(d + h * k > b2_epsilon);\n    this.m_gamma = h * (d + h * k);\n    if (this.m_gamma !== 0) {\n      this.m_gamma = 1 / this.m_gamma;\n    }\n    this.m_beta = h * k * this.m_gamma;\n\n    // Compute the effective mass matrix.\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]\n    //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]\n    //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]\n    const K = this.m_K;\n    K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\n    K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\n\n    K.GetInverse(this.m_mass);\n\n    // m_C = cB + m_rB - m_targetA;\n    this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\n    this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\n    // m_C *= m_beta;\n    this.m_C.SelfMul(this.m_beta);\n\n    // Cheat with some damping\n    wB *= 0.98;\n\n    if (data.step.warmStarting) {\n      this.m_impulse.SelfMul(data.step.dtRatio);\n      // vB += m_invMassB * m_impulse;\n      vB.x += this.m_invMassB * this.m_impulse.x;\n      vB.y += this.m_invMassB * this.m_impulse.y;\n      wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, this.m_impulse);\n    } else {\n      this.m_impulse.SetZero();\n    }\n\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_Cdot = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse = new b2Vec2();\n  private static SolveVelocityConstraints_s_oldImpulse = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // Cdot = v + cross(w, r)\n    // b2Vec2 Cdot = vB + b2Cross(wB, m_rB);\n    const Cdot: b2Vec2 = b2Vec2.AddVCrossSV(\n      vB,\n      wB,\n      this.m_rB,\n      b2MouseJoint.SolveVelocityConstraints_s_Cdot,\n    );\n    //  b2Vec2 impulse = b2Mul(m_mass, -(Cdot + m_C + m_gamma * m_impulse));\n    const impulse: b2Vec2 = b2Mat22.MulMV(\n      this.m_mass,\n      b2Vec2\n        .AddVV(\n          Cdot,\n          b2Vec2.AddVV(\n            this.m_C,\n            b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Vec2.s_t0),\n            b2Vec2.s_t0,\n          ),\n          b2Vec2.s_t0,\n        )\n        .SelfNeg(),\n      b2MouseJoint.SolveVelocityConstraints_s_impulse,\n    );\n\n    // b2Vec2 oldImpulse = m_impulse;\n    const oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\n    // m_impulse += impulse;\n    this.m_impulse.SelfAdd(impulse);\n    const maxImpulse: number = data.step.dt * this.m_maxForce;\n    if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\n      this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\n    }\n    // impulse = m_impulse - oldImpulse;\n    b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\n\n    // vB += m_invMassB * impulse;\n    vB.SelfMulAdd(this.m_invMassB, impulse);\n    wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, impulse);\n\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    return true;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    out.x = this.m_targetA.x;\n    out.y = this.m_targetA.y;\n    return out;\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    return b2Vec2.MulSV(inv_dt, this.m_impulse, out);\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return 0;\n  }\n\n  ShiftOrigin(newOrigin: b2Vec2) {\n    this.m_targetA.SelfSub(newOrigin);\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_angularSlop,\n  b2_linearSlop,\n  b2_maxLinearCorrection,\n  b2Maybe,\n} from '../../common/b2Settings';\nimport {\n  b2Abs,\n  b2Clamp,\n  b2Mat22,\n  b2Mat33,\n  b2Max,\n  b2Min,\n  b2Rot,\n  b2Vec2,\n  b2Vec3,\n  XY,\n} from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType, b2LimitState } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport interface b2IPrismaticJointDef extends b2IJointDef {\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  localAxisA?: XY;\n\n  referenceAngle?: number;\n\n  enableLimit?: boolean;\n\n  lowerTranslation?: number;\n\n  upperTranslation?: number;\n\n  enableMotor?: boolean;\n\n  maxMotorForce?: number;\n\n  motorSpeed?: number;\n}\n\n/// Prismatic joint definition. This requires defining a line of\n/// motion using an axis and an anchor point. The definition uses local\n/// anchor points and a local axis so that the initial configuration\n/// can violate the constraint slightly. The joint translation is zero\n/// when the local anchor points coincide in world space. Using local\n/// anchors and a local axis helps when saving and loading a game.\nexport class b2PrismaticJointDef extends b2JointDef implements b2IPrismaticJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2();\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2();\n\n  readonly localAxisA: b2Vec2 = new b2Vec2(1, 0);\n\n  referenceAngle = 0;\n\n  enableLimit = false;\n\n  lowerTranslation = 0;\n\n  upperTranslation = 0;\n\n  enableMotor = false;\n\n  maxMotorForce = 0;\n\n  motorSpeed = 0;\n\n  constructor() {\n    super(b2JointType.e_prismaticJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2, axis: b2Vec2): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n    this.bodyA.GetLocalVector(axis, this.localAxisA);\n    this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n  }\n}\n\nexport class b2PrismaticJoint extends b2Joint {\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  readonly m_localXAxisA: b2Vec2 = new b2Vec2();\n  readonly m_localYAxisA: b2Vec2 = new b2Vec2();\n  m_referenceAngle = 0;\n  readonly m_impulse: b2Vec3 = new b2Vec3(0, 0, 0);\n  m_motorImpulse = 0;\n  m_lowerTranslation = 0;\n  m_upperTranslation = 0;\n  m_maxMotorForce = 0;\n  m_motorSpeed = 0;\n  m_enableLimit = false;\n  m_enableMotor = false;\n  m_limitState: b2LimitState = b2LimitState.e_inactiveLimit;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  readonly m_axis: b2Vec2 = new b2Vec2(0, 0);\n  readonly m_perp: b2Vec2 = new b2Vec2(0, 0);\n  m_s1 = 0;\n  m_s2 = 0;\n  m_a1 = 0;\n  m_a2 = 0;\n  readonly m_K: b2Mat33 = new b2Mat33();\n  readonly m_K3: b2Mat33 = new b2Mat33();\n  readonly m_K2: b2Mat22 = new b2Mat22();\n  m_motorMass = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IPrismaticJointDef) {\n    super(def);\n\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\n    this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, new b2Vec2(1, 0))).SelfNormalize();\n    b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\n    this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\n    this.m_lowerTranslation = b2Maybe(def.lowerTranslation, 0);\n    this.m_upperTranslation = b2Maybe(def.upperTranslation, 0);\n    this.m_maxMotorForce = b2Maybe(def.maxMotorForce, 0);\n    this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\n    this.m_enableLimit = b2Maybe(def.enableLimit, false);\n    this.m_enableMotor = b2Maybe(def.enableMotor, false);\n  }\n\n  private static InitVelocityConstraints_s_d = new b2Vec2();\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // Compute the effective masses.\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // b2Vec2 d = (cB - cA) + rB - rA;\n    const d: b2Vec2 = b2Vec2.AddVV(\n      b2Vec2.SubVV(cB, cA, b2Vec2.s_t0),\n      b2Vec2.SubVV(rB, rA, b2Vec2.s_t1),\n      b2PrismaticJoint.InitVelocityConstraints_s_d,\n    );\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    // Compute motor Jacobian and effective mass.\n    {\n      // m_axis = b2Mul(qA, m_localXAxisA);\n      b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\n      // m_a1 = b2Cross(d + rA, m_axis);\n      this.m_a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_axis);\n      // m_a2 = b2Cross(rB, m_axis);\n      this.m_a2 = b2Vec2.CrossVV(rB, this.m_axis);\n\n      this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n      if (this.m_motorMass > 0) {\n        this.m_motorMass = 1 / this.m_motorMass;\n      }\n    }\n\n    // Prismatic constraint.\n    {\n      // m_perp = b2Mul(qA, m_localYAxisA);\n      b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\n\n      // m_s1 = b2Cross(d + rA, m_perp);\n      this.m_s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_perp);\n      // m_s2 = b2Cross(rB, m_perp);\n      this.m_s2 = b2Vec2.CrossVV(rB, this.m_perp);\n\n      // float32 k11 = mA + mB + iA * m_s1 * m_s1 + iB * m_s2 * m_s2;\n      this.m_K.ex.x = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n      // float32 k12 = iA * m_s1 + iB * m_s2;\n      this.m_K.ex.y = iA * this.m_s1 + iB * this.m_s2;\n      // float32 k13 = iA * m_s1 * m_a1 + iB * m_s2 * m_a2;\n      this.m_K.ex.z = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n      this.m_K.ey.x = this.m_K.ex.y;\n      // float32 k22 = iA + iB;\n      this.m_K.ey.y = iA + iB;\n      if (this.m_K.ey.y === 0) {\n        // For bodies with fixed rotation.\n        this.m_K.ey.y = 1;\n      }\n      // float32 k23 = iA * m_a1 + iB * m_a2;\n      this.m_K.ey.z = iA * this.m_a1 + iB * this.m_a2;\n      this.m_K.ez.x = this.m_K.ex.z;\n      this.m_K.ez.y = this.m_K.ey.z;\n      // float32 k33 = mA + mB + iA * m_a1 * m_a1 + iB * m_a2 * m_a2;\n      this.m_K.ez.z = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n      // m_K.ex.Set(k11, k12, k13);\n      // m_K.ey.Set(k12, k22, k23);\n      // m_K.ez.Set(k13, k23, k33);\n    }\n\n    // Compute motor and limit terms.\n    if (this.m_enableLimit) {\n      // float32 jointTranslation = b2Dot(m_axis, d);\n      const jointTranslation: number = b2Vec2.DotVV(this.m_axis, d);\n      if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\n        this.m_limitState = b2LimitState.e_equalLimits;\n      } else if (jointTranslation <= this.m_lowerTranslation) {\n        if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\n          this.m_limitState = b2LimitState.e_atLowerLimit;\n          this.m_impulse.z = 0;\n        }\n      } else if (jointTranslation >= this.m_upperTranslation) {\n        if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\n          this.m_limitState = b2LimitState.e_atUpperLimit;\n          this.m_impulse.z = 0;\n        }\n      } else {\n        this.m_limitState = b2LimitState.e_inactiveLimit;\n        this.m_impulse.z = 0;\n      }\n    } else {\n      this.m_limitState = b2LimitState.e_inactiveLimit;\n      this.m_impulse.z = 0;\n    }\n\n    if (!this.m_enableMotor) {\n      this.m_motorImpulse = 0;\n    }\n\n    if (data.step.warmStarting) {\n      // Account for variable time step.\n      // m_impulse *= data.step.dtRatio;\n      this.m_impulse.SelfMul(data.step.dtRatio);\n      this.m_motorImpulse *= data.step.dtRatio;\n\n      // b2Vec2 P = m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis;\n      const P: b2Vec2 = b2Vec2.AddVV(\n        b2Vec2.MulSV(this.m_impulse.x, this.m_perp, b2Vec2.s_t0),\n        b2Vec2.MulSV(this.m_motorImpulse + this.m_impulse.z, this.m_axis, b2Vec2.s_t1),\n        b2PrismaticJoint.InitVelocityConstraints_s_P,\n      );\n      // float32 LA = m_impulse.x * m_s1 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a1;\n      const LA =\n        this.m_impulse.x * this.m_s1 +\n        this.m_impulse.y +\n        (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n      // float32 LB = m_impulse.x * m_s2 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a2;\n      const LB =\n        this.m_impulse.x * this.m_s2 +\n        this.m_impulse.y +\n        (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    } else {\n      this.m_impulse.SetZero();\n      this.m_motorImpulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n  private static SolveVelocityConstraints_s_f2r = new b2Vec2();\n  private static SolveVelocityConstraints_s_f1 = new b2Vec3();\n  private static SolveVelocityConstraints_s_df3 = new b2Vec3();\n  private static SolveVelocityConstraints_s_df2 = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    // Solve linear motor constraint.\n    if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits) {\n      // float32 Cdot = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\n      const Cdot: number =\n        b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) +\n        this.m_a2 * wB -\n        this.m_a1 * wA;\n      let impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n      const oldImpulse = this.m_motorImpulse;\n      const maxImpulse = data.step.dt * this.m_maxMotorForce;\n      this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      // b2Vec2 P = impulse * m_axis;\n      const P: b2Vec2 = b2Vec2.MulSV(\n        impulse,\n        this.m_axis,\n        b2PrismaticJoint.SolveVelocityConstraints_s_P,\n      );\n      const LA = impulse * this.m_a1;\n      const LB = impulse * this.m_a2;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    }\n\n    // b2Vec2 Cdot1;\n    // Cdot1.x = b2Dot(m_perp, vB - vA) + m_s2 * wB - m_s1 * wA;\n    const Cdot1_x: number =\n      b2Vec2.DotVV(this.m_perp, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) +\n      this.m_s2 * wB -\n      this.m_s1 * wA;\n    // Cdot1.y = wB - wA;\n    const Cdot1_y = wB - wA;\n\n    if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit) {\n      // Solve prismatic and limit constraint in block form.\n      // float32 Cdot2;\n      // Cdot2 = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\n      const Cdot2: number =\n        b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) +\n        this.m_a2 * wB -\n        this.m_a1 * wA;\n      // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\n\n      // b2Vec3 f1 = m_impulse;\n      const f1 = b2PrismaticJoint.SolveVelocityConstraints_s_f1.Copy(this.m_impulse);\n      // b2Vec3 df =  m_K.Solve33(-Cdot);\n      const df3 = this.m_K.Solve33(\n        -Cdot1_x,\n        -Cdot1_y,\n        -Cdot2,\n        b2PrismaticJoint.SolveVelocityConstraints_s_df3,\n      );\n      // m_impulse += df;\n      this.m_impulse.SelfAdd(df3);\n\n      if (this.m_limitState === b2LimitState.e_atLowerLimit) {\n        this.m_impulse.z = b2Max(this.m_impulse.z, 0);\n      } else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\n        this.m_impulse.z = b2Min(this.m_impulse.z, 0);\n      }\n\n      // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) + f1(1:2)\n      // b2Vec2 b = -Cdot1 - (m_impulse.z - f1.z) * b2Vec2(m_K.ez.x, m_K.ez.y);\n      const b_x = -Cdot1_x - (this.m_impulse.z - f1.z) * this.m_K.ez.x;\n      const b_y = -Cdot1_y - (this.m_impulse.z - f1.z) * this.m_K.ez.y;\n      // b2Vec2 f2r = m_K.Solve22(b) + b2Vec2(f1.x, f1.y);\n      const f2r = this.m_K.Solve22(b_x, b_y, b2PrismaticJoint.SolveVelocityConstraints_s_f2r);\n      f2r.x += f1.x;\n      f2r.y += f1.y;\n      // m_impulse.x = f2r.x;\n      this.m_impulse.x = f2r.x;\n      // m_impulse.y = f2r.y;\n      this.m_impulse.y = f2r.y;\n\n      // df = m_impulse - f1;\n      df3.x = this.m_impulse.x - f1.x;\n      df3.y = this.m_impulse.y - f1.y;\n      df3.z = this.m_impulse.z - f1.z;\n\n      // b2Vec2 P = df.x * m_perp + df.z * m_axis;\n      const P: b2Vec2 = b2Vec2.AddVV(\n        b2Vec2.MulSV(df3.x, this.m_perp, b2Vec2.s_t0),\n        b2Vec2.MulSV(df3.z, this.m_axis, b2Vec2.s_t1),\n        b2PrismaticJoint.SolveVelocityConstraints_s_P,\n      );\n      // float32 LA = df.x * m_s1 + df.y + df.z * m_a1;\n      const LA = df3.x * this.m_s1 + df3.y + df3.z * this.m_a1;\n      // float32 LB = df.x * m_s2 + df.y + df.z * m_a2;\n      const LB = df3.x * this.m_s2 + df3.y + df3.z * this.m_a2;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    } else {\n      // Limit is inactive, just solve the prismatic constraint in block form.\n      // b2Vec2 df = m_K.Solve22(-Cdot1);\n      const df2 = this.m_K.Solve22(\n        -Cdot1_x,\n        -Cdot1_y,\n        b2PrismaticJoint.SolveVelocityConstraints_s_df2,\n      );\n      this.m_impulse.x += df2.x;\n      this.m_impulse.y += df2.y;\n\n      // b2Vec2 P = df.x * m_perp;\n      const P: b2Vec2 = b2Vec2.MulSV(\n        df2.x,\n        this.m_perp,\n        b2PrismaticJoint.SolveVelocityConstraints_s_P,\n      );\n      // float32 LA = df.x * m_s1 + df.y;\n      const LA = df2.x * this.m_s1 + df2.y;\n      // float32 LB = df.x * m_s2 + df.y;\n      const LB = df2.x * this.m_s2 + df2.y;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  // A velocity based solver computes reaction forces(impulses) using the velocity constraint solver.Under this context,\n  // the position solver is not there to resolve forces.It is only there to cope with integration error.\n  //\n  // Therefore, the pseudo impulses in the position solver do not have any physical meaning.Thus it is okay if they suck.\n  //\n  // We could take the active state from the velocity solver.However, the joint might push past the limit when the velocity\n  // solver indicates the limit is inactive.\n  private static SolvePositionConstraints_s_d = new b2Vec2();\n  private static SolvePositionConstraints_s_impulse = new b2Vec3();\n  private static SolvePositionConstraints_s_impulse1 = new b2Vec2();\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // b2Vec2 d = cB + rB - cA - rA;\n    const d: b2Vec2 = b2Vec2.SubVV(\n      b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n      b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n      b2PrismaticJoint.SolvePositionConstraints_s_d,\n    );\n\n    // b2Vec2 axis = b2Mul(qA, m_localXAxisA);\n    const axis: b2Vec2 = b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\n    // float32 a1 = b2Cross(d + rA, axis);\n    const a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), axis);\n    // float32 a2 = b2Cross(rB, axis);\n    const a2 = b2Vec2.CrossVV(rB, axis);\n    // b2Vec2 perp = b2Mul(qA, m_localYAxisA);\n    const perp: b2Vec2 = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\n\n    // float32 s1 = b2Cross(d + rA, perp);\n    const s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), perp);\n    // float32 s2 = b2Cross(rB, perp);\n    const s2 = b2Vec2.CrossVV(rB, perp);\n\n    // b2Vec3 impulse;\n    let impulse = b2PrismaticJoint.SolvePositionConstraints_s_impulse;\n    // b2Vec2 C1;\n    // C1.x = b2Dot(perp, d);\n    const C1_x: number = b2Vec2.DotVV(perp, d);\n    // C1.y = aB - aA - m_referenceAngle;\n    const C1_y = aB - aA - this.m_referenceAngle;\n\n    let linearError = b2Abs(C1_x);\n    const angularError = b2Abs(C1_y);\n\n    let active = false;\n    let C2 = 0;\n    if (this.m_enableLimit) {\n      // float32 translation = b2Dot(axis, d);\n      const translation: number = b2Vec2.DotVV(axis, d);\n      if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\n        // Prevent large angular corrections\n        C2 = b2Clamp(translation, -b2_maxLinearCorrection, b2_maxLinearCorrection);\n        linearError = b2Max(linearError, b2Abs(translation));\n        active = true;\n      } else if (translation <= this.m_lowerTranslation) {\n        // Prevent large linear corrections and allow some slop.\n        C2 = b2Clamp(\n          translation - this.m_lowerTranslation + b2_linearSlop,\n          -b2_maxLinearCorrection,\n          0,\n        );\n        linearError = b2Max(linearError, this.m_lowerTranslation - translation);\n        active = true;\n      } else if (translation >= this.m_upperTranslation) {\n        // Prevent large linear corrections and allow some slop.\n        C2 = b2Clamp(\n          translation - this.m_upperTranslation - b2_linearSlop,\n          0,\n          b2_maxLinearCorrection,\n        );\n        linearError = b2Max(linearError, translation - this.m_upperTranslation);\n        active = true;\n      }\n    }\n\n    if (active) {\n      // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n      const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n      // float32 k12 = iA * s1 + iB * s2;\n      const k12 = iA * s1 + iB * s2;\n      // float32 k13 = iA * s1 * a1 + iB * s2 * a2;\n      const k13 = iA * s1 * a1 + iB * s2 * a2;\n      // float32 k22 = iA + iB;\n      let k22 = iA + iB;\n      if (k22 === 0) {\n        // For fixed rotation\n        k22 = 1;\n      }\n      // float32 k23 = iA * a1 + iB * a2;\n      const k23 = iA * a1 + iB * a2;\n      // float32 k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\n      const k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\n\n      // b2Mat33 K;\n      const K = this.m_K3;\n      // K.ex.Set(k11, k12, k13);\n      K.ex.SetXYZ(k11, k12, k13);\n      // K.ey.Set(k12, k22, k23);\n      K.ey.SetXYZ(k12, k22, k23);\n      // K.ez.Set(k13, k23, k33);\n      K.ez.SetXYZ(k13, k23, k33);\n\n      // b2Vec3 C;\n      // C.x = C1.x;\n      // C.y = C1.y;\n      // C.z = C2;\n\n      // impulse = K.Solve33(-C);\n      impulse = K.Solve33(-C1_x, -C1_y, -C2, impulse);\n    } else {\n      // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n      const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\n      // float32 k12 = iA * s1 + iB * s2;\n      const k12 = iA * s1 + iB * s2;\n      // float32 k22 = iA + iB;\n      let k22 = iA + iB;\n      if (k22 === 0) {\n        k22 = 1;\n      }\n\n      // b2Mat22 K;\n      const K2 = this.m_K2;\n      // K.ex.Set(k11, k12);\n      K2.ex.Set(k11, k12);\n      // K.ey.Set(k12, k22);\n      K2.ey.Set(k12, k22);\n\n      // b2Vec2 impulse1 = K.Solve(-C1);\n      const impulse1 = K2.Solve(-C1_x, -C1_y, b2PrismaticJoint.SolvePositionConstraints_s_impulse1);\n      impulse.x = impulse1.x;\n      impulse.y = impulse1.y;\n      impulse.z = 0;\n    }\n\n    // b2Vec2 P = impulse.x * perp + impulse.z * axis;\n    const P: b2Vec2 = b2Vec2.AddVV(\n      b2Vec2.MulSV(impulse.x, perp, b2Vec2.s_t0),\n      b2Vec2.MulSV(impulse.z, axis, b2Vec2.s_t1),\n      b2PrismaticJoint.SolvePositionConstraints_s_P,\n    );\n    // float32 LA = impulse.x * s1 + impulse.y + impulse.z * a1;\n    const LA = impulse.x * s1 + impulse.y + impulse.z * a1;\n    // float32 LB = impulse.x * s2 + impulse.y + impulse.z * a2;\n    const LB = impulse.x * s2 + impulse.y + impulse.z * a2;\n\n    // cA -= mA * P;\n    cA.SelfMulSub(mA, P);\n    aA -= iA * LA;\n    // cB += mB * P;\n    cB.SelfMulAdd(mB, P);\n    aB += iB * LB;\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return linearError <= b2_linearSlop && angularError <= b2_angularSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // return inv_dt * (m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis);\n    out.x =\n      inv_dt *\n      (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x);\n    out.y =\n      inv_dt *\n      (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y);\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.y;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  GetLocalAxisA(): Readonly<b2Vec2> {\n    return this.m_localXAxisA;\n  }\n\n  GetReferenceAngle() {\n    return this.m_referenceAngle;\n  }\n\n  private static GetJointTranslation_s_pA = new b2Vec2();\n  private static GetJointTranslation_s_pB = new b2Vec2();\n  private static GetJointTranslation_s_d = new b2Vec2();\n  private static GetJointTranslation_s_axis = new b2Vec2();\n\n  GetJointTranslation(): number {\n    // b2Vec2 pA = m_bodyA.GetWorldPoint(m_localAnchorA);\n    const pA = this.m_bodyA.GetWorldPoint(\n      this.m_localAnchorA,\n      b2PrismaticJoint.GetJointTranslation_s_pA,\n    );\n    // b2Vec2 pB = m_bodyB.GetWorldPoint(m_localAnchorB);\n    const pB = this.m_bodyB.GetWorldPoint(\n      this.m_localAnchorB,\n      b2PrismaticJoint.GetJointTranslation_s_pB,\n    );\n    // b2Vec2 d = pB - pA;\n    const d: b2Vec2 = b2Vec2.SubVV(pB, pA, b2PrismaticJoint.GetJointTranslation_s_d);\n    // b2Vec2 axis = m_bodyA.GetWorldVector(m_localXAxisA);\n    const axis = this.m_bodyA.GetWorldVector(\n      this.m_localXAxisA,\n      b2PrismaticJoint.GetJointTranslation_s_axis,\n    );\n\n    // float32 translation = b2Dot(d, axis);\n    const translation: number = b2Vec2.DotVV(d, axis);\n    return translation;\n  }\n\n  GetJointSpeed(): number {\n    const bA: b2Body = this.m_bodyA;\n    const bB: b2Body = this.m_bodyB;\n\n    // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\n    b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\n    b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\n    // b2Vec2 pA = bA->m_sweep.c + rA;\n    const pA: b2Vec2 = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\n    // b2Vec2 pB = bB->m_sweep.c + rB;\n    const pB: b2Vec2 = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\n    // b2Vec2 d = pB - pA;\n    const d: b2Vec2 = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\n    // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\n    const axis = bA.GetWorldVector(this.m_localXAxisA, this.m_axis);\n\n    const vA = bA.m_linearVelocity;\n    const vB = bB.m_linearVelocity;\n    const wA = bA.m_angularVelocity;\n    const wB = bB.m_angularVelocity;\n\n    // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\n    const speed =\n      b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\n      b2Vec2.DotVV(\n        axis,\n        b2Vec2.SubVV(\n          b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0),\n          b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1),\n          b2Vec2.s_t0,\n        ),\n      );\n    return speed;\n  }\n\n  IsLimitEnabled() {\n    return this.m_enableLimit;\n  }\n\n  EnableLimit(flag: boolean) {\n    if (flag !== this.m_enableLimit) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableLimit = flag;\n      this.m_impulse.z = 0;\n    }\n  }\n\n  GetLowerLimit() {\n    return this.m_lowerTranslation;\n  }\n\n  GetUpperLimit() {\n    return this.m_upperTranslation;\n  }\n\n  SetLimits(lower: number, upper: number): void {\n    if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_lowerTranslation = lower;\n      this.m_upperTranslation = upper;\n      this.m_impulse.z = 0;\n    }\n  }\n\n  IsMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  EnableMotor(flag: boolean): void {\n    if (flag !== this.m_enableMotor) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableMotor = flag;\n    }\n  }\n\n  SetMotorSpeed(speed: number): void {\n    if (speed !== this.m_motorSpeed) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n    }\n  }\n\n  GetMotorSpeed() {\n    return this.m_motorSpeed;\n  }\n\n  SetMaxMotorForce(force: number): void {\n    if (force !== this.m_maxMotorForce) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_maxMotorForce = force;\n    }\n  }\n\n  GetMaxMotorForce(): number {\n    return this.m_maxMotorForce;\n  }\n\n  GetMotorForce(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_epsilon, b2_linearSlop, b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2Abs, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport const b2_minPulleyLength = 2;\n\nexport interface b2IPulleyJointDef extends b2IJointDef {\n  groundAnchorA?: XY;\n\n  groundAnchorB?: XY;\n\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  lengthA?: number;\n\n  lengthB?: number;\n\n  ratio?: number;\n}\n\n/// Pulley joint definition. This requires two ground anchors,\n/// two dynamic body anchor points, and a pulley ratio.\nexport class b2PulleyJointDef extends b2JointDef implements b2IPulleyJointDef {\n  readonly groundAnchorA: b2Vec2 = new b2Vec2(-1, 1);\n\n  readonly groundAnchorB: b2Vec2 = new b2Vec2(1, 1);\n\n  readonly localAnchorA: b2Vec2 = new b2Vec2(-1, 0);\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2(1, 0);\n\n  lengthA = 0;\n\n  lengthB = 0;\n\n  ratio = 1;\n\n  constructor() {\n    super(b2JointType.e_pulleyJoint);\n    this.collideConnected = true;\n  }\n\n  Initialize(\n    bA: b2Body,\n    bB: b2Body,\n    groundA: b2Vec2,\n    groundB: b2Vec2,\n    anchorA: b2Vec2,\n    anchorB: b2Vec2,\n    r: number,\n  ): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.groundAnchorA.Copy(groundA);\n    this.groundAnchorB.Copy(groundB);\n    this.bodyA.GetLocalPoint(anchorA, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchorB, this.localAnchorB);\n    this.lengthA = b2Vec2.DistanceVV(anchorA, groundA);\n    this.lengthB = b2Vec2.DistanceVV(anchorB, groundB);\n    this.ratio = r;\n    !!B2_DEBUG && b2Assert(this.ratio > b2_epsilon);\n  }\n}\n\nexport class b2PulleyJoint extends b2Joint {\n  readonly m_groundAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_groundAnchorB: b2Vec2 = new b2Vec2();\n\n  m_lengthA = 0;\n  m_lengthB = 0;\n\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n\n  m_constant = 0;\n  m_ratio = 0;\n  m_impulse = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_uA: b2Vec2 = new b2Vec2();\n  readonly m_uB: b2Vec2 = new b2Vec2();\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  m_mass = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IPulleyJointDef) {\n    super(def);\n\n    this.m_groundAnchorA.Copy(b2Maybe(def.groundAnchorA, new b2Vec2(-1, 1)));\n    this.m_groundAnchorB.Copy(b2Maybe(def.groundAnchorB, new b2Vec2(1, 0)));\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));\n\n    this.m_lengthA = b2Maybe(def.lengthA, 0);\n    this.m_lengthB = b2Maybe(def.lengthB, 0);\n\n    !!B2_DEBUG && b2Assert(b2Maybe(def.ratio, 1) !== 0);\n    this.m_ratio = b2Maybe(def.ratio, 1);\n\n    this.m_constant = b2Maybe(def.lengthA, 0) + this.m_ratio * b2Maybe(def.lengthB, 0);\n\n    this.m_impulse = 0;\n  }\n\n  private static InitVelocityConstraints_s_PA = new b2Vec2();\n  private static InitVelocityConstraints_s_PB = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // b2Rot qA(aA), qB(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // Get the pulley axes.\n    // m_uA = cA + m_rA - m_groundAnchorA;\n    this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);\n    // m_uB = cB + m_rB - m_groundAnchorB;\n    this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);\n\n    const lengthA: number = this.m_uA.Length();\n    const lengthB: number = this.m_uB.Length();\n\n    if (lengthA > 10 * b2_linearSlop) {\n      this.m_uA.SelfMul(1 / lengthA);\n    } else {\n      this.m_uA.SetZero();\n    }\n\n    if (lengthB > 10 * b2_linearSlop) {\n      this.m_uB.SelfMul(1 / lengthB);\n    } else {\n      this.m_uB.SetZero();\n    }\n\n    // Compute effective mass.\n    const ruA: number = b2Vec2.CrossVV(this.m_rA, this.m_uA);\n    const ruB: number = b2Vec2.CrossVV(this.m_rB, this.m_uB);\n\n    const mA: number = this.m_invMassA + this.m_invIA * ruA * ruA;\n    const mB: number = this.m_invMassB + this.m_invIB * ruB * ruB;\n\n    this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n    if (this.m_mass > 0) {\n      this.m_mass = 1 / this.m_mass;\n    }\n\n    if (data.step.warmStarting) {\n      // Scale impulses to support variable time steps.\n      this.m_impulse *= data.step.dtRatio;\n\n      // Warm starting.\n      // b2Vec2 PA = -(m_impulse) * m_uA;\n      const PA: b2Vec2 = b2Vec2.MulSV(\n        -this.m_impulse,\n        this.m_uA,\n        b2PulleyJoint.InitVelocityConstraints_s_PA,\n      );\n      // b2Vec2 PB = (-m_ratio * m_impulse) * m_uB;\n      const PB: b2Vec2 = b2Vec2.MulSV(\n        -this.m_ratio * this.m_impulse,\n        this.m_uB,\n        b2PulleyJoint.InitVelocityConstraints_s_PB,\n      );\n\n      // vA += m_invMassA * PA;\n      vA.SelfMulAdd(this.m_invMassA, PA);\n      wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\n      // vB += m_invMassB * PB;\n      vB.SelfMulAdd(this.m_invMassB, PB);\n      wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\n    } else {\n      this.m_impulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_vpA = new b2Vec2();\n  private static SolveVelocityConstraints_s_vpB = new b2Vec2();\n  private static SolveVelocityConstraints_s_PA = new b2Vec2();\n  private static SolveVelocityConstraints_s_PB = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\n    const vpA: b2Vec2 = b2Vec2.AddVCrossSV(\n      vA,\n      wA,\n      this.m_rA,\n      b2PulleyJoint.SolveVelocityConstraints_s_vpA,\n    );\n    // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\n    const vpB: b2Vec2 = b2Vec2.AddVCrossSV(\n      vB,\n      wB,\n      this.m_rB,\n      b2PulleyJoint.SolveVelocityConstraints_s_vpB,\n    );\n\n    const Cdot: number =\n      -b2Vec2.DotVV(this.m_uA, vpA) - this.m_ratio * b2Vec2.DotVV(this.m_uB, vpB);\n    const impulse: number = -this.m_mass * Cdot;\n    this.m_impulse += impulse;\n\n    // b2Vec2 PA = -impulse * m_uA;\n    const PA: b2Vec2 = b2Vec2.MulSV(\n      -impulse,\n      this.m_uA,\n      b2PulleyJoint.SolveVelocityConstraints_s_PA,\n    );\n    // b2Vec2 PB = -m_ratio * impulse * m_uB;\n    const PB: b2Vec2 = b2Vec2.MulSV(\n      -this.m_ratio * impulse,\n      this.m_uB,\n      b2PulleyJoint.SolveVelocityConstraints_s_PB,\n    );\n    // vA += m_invMassA * PA;\n    vA.SelfMulAdd(this.m_invMassA, PA);\n    wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\n    // vB += m_invMassB * PB;\n    vB.SelfMulAdd(this.m_invMassB, PB);\n    wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_PA = new b2Vec2();\n  private static SolvePositionConstraints_s_PB = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    // b2Rot qA(aA), qB(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // Get the pulley axes.\n    // b2Vec2 uA = cA + rA - m_groundAnchorA;\n    const uA = this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);\n    // b2Vec2 uB = cB + rB - m_groundAnchorB;\n    const uB = this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);\n\n    const lengthA: number = uA.Length();\n    const lengthB: number = uB.Length();\n\n    if (lengthA > 10 * b2_linearSlop) {\n      uA.SelfMul(1 / lengthA);\n    } else {\n      uA.SetZero();\n    }\n\n    if (lengthB > 10 * b2_linearSlop) {\n      uB.SelfMul(1 / lengthB);\n    } else {\n      uB.SetZero();\n    }\n\n    // Compute effective mass.\n    const ruA: number = b2Vec2.CrossVV(rA, uA);\n    const ruB: number = b2Vec2.CrossVV(rB, uB);\n\n    const mA: number = this.m_invMassA + this.m_invIA * ruA * ruA;\n    const mB: number = this.m_invMassB + this.m_invIB * ruB * ruB;\n\n    let mass: number = mA + this.m_ratio * this.m_ratio * mB;\n\n    if (mass > 0) {\n      mass = 1 / mass;\n    }\n\n    const C: number = this.m_constant - lengthA - this.m_ratio * lengthB;\n    const linearError: number = b2Abs(C);\n\n    const impulse: number = -mass * C;\n\n    // b2Vec2 PA = -impulse * uA;\n    const PA: b2Vec2 = b2Vec2.MulSV(-impulse, uA, b2PulleyJoint.SolvePositionConstraints_s_PA);\n    // b2Vec2 PB = -m_ratio * impulse * uB;\n    const PB: b2Vec2 = b2Vec2.MulSV(\n      -this.m_ratio * impulse,\n      uB,\n      b2PulleyJoint.SolvePositionConstraints_s_PB,\n    );\n\n    // cA += m_invMassA * PA;\n    cA.SelfMulAdd(this.m_invMassA, PA);\n    aA += this.m_invIA * b2Vec2.CrossVV(rA, PA);\n    // cB += m_invMassB * PB;\n    cB.SelfMulAdd(this.m_invMassB, PB);\n    aB += this.m_invIB * b2Vec2.CrossVV(rB, PB);\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return linearError < b2_linearSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // b2Vec2 P = m_impulse * m_uB;\n    // return inv_dt * P;\n    out.x = inv_dt * this.m_impulse * this.m_uB.x;\n    out.y = inv_dt * this.m_impulse * this.m_uB.y;\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return 0;\n  }\n\n  GetGroundAnchorA() {\n    return this.m_groundAnchorA;\n  }\n\n  GetGroundAnchorB() {\n    return this.m_groundAnchorB;\n  }\n\n  GetLengthA() {\n    return this.m_lengthA;\n  }\n\n  GetLengthB() {\n    return this.m_lengthB;\n  }\n\n  GetRatio() {\n    return this.m_ratio;\n  }\n\n  private static GetCurrentLengthA_s_p = new b2Vec2();\n\n  GetCurrentLengthA() {\n    // b2Vec2 p = m_bodyA->GetWorldPoint(m_localAnchorA);\n    // b2Vec2 s = m_groundAnchorA;\n    // b2Vec2 d = p - s;\n    // return d.Length();\n    const p = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PulleyJoint.GetCurrentLengthA_s_p);\n    const s = this.m_groundAnchorA;\n    return b2Vec2.DistanceVV(p, s);\n  }\n\n  private static GetCurrentLengthB_s_p = new b2Vec2();\n\n  GetCurrentLengthB() {\n    // b2Vec2 p = m_bodyB->GetWorldPoint(m_localAnchorB);\n    // b2Vec2 s = m_groundAnchorB;\n    // b2Vec2 d = p - s;\n    // return d.Length();\n    const p = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PulleyJoint.GetCurrentLengthB_s_p);\n    const s = this.m_groundAnchorB;\n    return b2Vec2.DistanceVV(p, s);\n  }\n\n  ShiftOrigin(newOrigin: b2Vec2) {\n    this.m_groundAnchorA.SelfSub(newOrigin);\n    this.m_groundAnchorB.SelfSub(newOrigin);\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_angularSlop,\n  b2_linearSlop,\n  b2_maxAngularCorrection,\n  b2Maybe,\n} from '../../common/b2Settings';\nimport { b2Abs, b2Clamp, b2Mat22, b2Mat33, b2Rot, b2Vec2, b2Vec3, XY } from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType, b2LimitState } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport interface b2IRevoluteJointDef extends b2IJointDef {\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  referenceAngle?: number;\n\n  enableLimit?: boolean;\n\n  lowerAngle?: number;\n\n  upperAngle?: number;\n\n  enableMotor?: boolean;\n\n  motorSpeed?: number;\n\n  maxMotorTorque?: number;\n}\n\n/// Revolute joint definition. This requires defining an\n/// anchor point where the bodies are joined. The definition\n/// uses local anchor points so that the initial configuration\n/// can violate the constraint slightly. You also need to\n/// specify the initial relative angle for joint limits. This\n/// helps when saving and loading a game.\n/// The local anchor points are measured from the body's origin\n/// rather than the center of mass because:\n/// 1. you might not know where the center of mass will be.\n/// 2. if you add/remove shapes from a body and recompute the mass,\n///    the joints will be broken.\nexport class b2RevoluteJointDef extends b2JointDef implements b2IRevoluteJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2(0, 0);\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2(0, 0);\n\n  referenceAngle = 0;\n\n  enableLimit = false;\n\n  lowerAngle = 0;\n\n  upperAngle = 0;\n\n  enableMotor = false;\n\n  motorSpeed = 0;\n\n  maxMotorTorque = 0;\n\n  constructor() {\n    super(b2JointType.e_revoluteJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body, anchor: XY): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n    this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n  }\n}\n\nexport class b2RevoluteJoint extends b2Joint {\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  readonly m_impulse: b2Vec3 = new b2Vec3();\n  m_motorImpulse = 0;\n\n  m_enableMotor = false;\n  m_maxMotorTorque = 0;\n  m_motorSpeed = 0;\n\n  m_enableLimit = false;\n  m_referenceAngle = 0;\n  m_lowerAngle = 0;\n  m_upperAngle = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  readonly m_mass: b2Mat33 = new b2Mat33(); // effective mass for point-to-point constraint.\n  m_motorMass = 0; // effective mass for motor/limit angular constraint.\n  m_limitState: b2LimitState = b2LimitState.e_inactiveLimit;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_K: b2Mat22 = new b2Mat22();\n\n  constructor(def: b2IRevoluteJointDef) {\n    super(def);\n\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\n    this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\n\n    this.m_impulse.SetZero();\n    this.m_motorImpulse = 0;\n\n    this.m_lowerAngle = b2Maybe(def.lowerAngle, 0);\n    this.m_upperAngle = b2Maybe(def.upperAngle, 0);\n    this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);\n    this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\n    this.m_enableLimit = b2Maybe(def.enableLimit, false);\n    this.m_enableMotor = b2Maybe(def.enableMotor, false);\n    this.m_limitState = b2LimitState.e_inactiveLimit;\n  }\n\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // b2Rot qA(aA), qB(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // J = [-I -r1_skew I r2_skew]\n    //     [ 0       -1 0       1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n    //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n    //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const fixedRotation: boolean = iA + iB === 0;\n\n    this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\n    this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n    this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n    this.m_mass.ex.y = this.m_mass.ey.x;\n    this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\n    this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n    this.m_mass.ex.z = this.m_mass.ez.x;\n    this.m_mass.ey.z = this.m_mass.ez.y;\n    this.m_mass.ez.z = iA + iB;\n\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0) {\n      this.m_motorMass = 1 / this.m_motorMass;\n    }\n\n    if (!this.m_enableMotor || fixedRotation) {\n      this.m_motorImpulse = 0;\n    }\n\n    if (this.m_enableLimit && !fixedRotation) {\n      const jointAngle: number = aB - aA - this.m_referenceAngle;\n      if (b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b2_angularSlop) {\n        this.m_limitState = b2LimitState.e_equalLimits;\n      } else if (jointAngle <= this.m_lowerAngle) {\n        if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\n          this.m_impulse.z = 0;\n        }\n        this.m_limitState = b2LimitState.e_atLowerLimit;\n      } else if (jointAngle >= this.m_upperAngle) {\n        if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\n          this.m_impulse.z = 0;\n        }\n        this.m_limitState = b2LimitState.e_atUpperLimit;\n      } else {\n        this.m_limitState = b2LimitState.e_inactiveLimit;\n        this.m_impulse.z = 0;\n      }\n    } else {\n      this.m_limitState = b2LimitState.e_inactiveLimit;\n    }\n\n    if (data.step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_impulse.SelfMul(data.step.dtRatio);\n      this.m_motorImpulse *= data.step.dtRatio;\n\n      // b2Vec2 P(m_impulse.x, m_impulse.y);\n      const P: b2Vec2 = b2RevoluteJoint.InitVelocityConstraints_s_P.Set(\n        this.m_impulse.x,\n        this.m_impulse.y,\n      );\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n    } else {\n      this.m_impulse.SetZero();\n      this.m_motorImpulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_P: b2Vec2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_Cdot_v2: b2Vec2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_Cdot1: b2Vec2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse_v3: b2Vec3 = new b2Vec3();\n  private static SolveVelocityConstraints_s_reduced_v2: b2Vec2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse_v2: b2Vec2 = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const fixedRotation: boolean = iA + iB === 0;\n\n    // Solve motor constraint.\n    if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits && !fixedRotation) {\n      const Cdot: number = wB - wA - this.m_motorSpeed;\n      let impulse: number = -this.m_motorMass * Cdot;\n      const oldImpulse: number = this.m_motorImpulse;\n      const maxImpulse: number = data.step.dt * this.m_maxMotorTorque;\n      this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve limit constraint.\n    if (\n      this.m_enableLimit &&\n      this.m_limitState !== b2LimitState.e_inactiveLimit &&\n      !fixedRotation\n    ) {\n      // b2Vec2 Cdot1 = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\n      const Cdot1: b2Vec2 = b2Vec2.SubVV(\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\n        b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1,\n      );\n      const Cdot2: number = wB - wA;\n      // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\n\n      // b2Vec3 impulse = -this.m_mass.Solve33(Cdot);\n      const impulse_v3: b2Vec3 = this.m_mass\n        .Solve33(Cdot1.x, Cdot1.y, Cdot2, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3)\n        .SelfNeg();\n\n      if (this.m_limitState === b2LimitState.e_equalLimits) {\n        this.m_impulse.SelfAdd(impulse_v3);\n      } else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\n        const newImpulse: number = this.m_impulse.z + impulse_v3.z;\n        if (newImpulse < 0) {\n          // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\n          const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\n          const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\n          const reduced_v2: b2Vec2 = this.m_mass.Solve22(\n            rhs_x,\n            rhs_y,\n            b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2,\n          );\n          impulse_v3.x = reduced_v2.x;\n          impulse_v3.y = reduced_v2.y;\n          impulse_v3.z = -this.m_impulse.z;\n          this.m_impulse.x += reduced_v2.x;\n          this.m_impulse.y += reduced_v2.y;\n          this.m_impulse.z = 0;\n        } else {\n          this.m_impulse.SelfAdd(impulse_v3);\n        }\n      } else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\n        const newImpulse: number = this.m_impulse.z + impulse_v3.z;\n        if (newImpulse > 0) {\n          // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\n          const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\n          const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\n          const reduced_v2: b2Vec2 = this.m_mass.Solve22(\n            rhs_x,\n            rhs_y,\n            b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2,\n          );\n          impulse_v3.x = reduced_v2.x;\n          impulse_v3.y = reduced_v2.y;\n          impulse_v3.z = -this.m_impulse.z;\n          this.m_impulse.x += reduced_v2.x;\n          this.m_impulse.y += reduced_v2.y;\n          this.m_impulse.z = 0;\n        } else {\n          this.m_impulse.SelfAdd(impulse_v3);\n        }\n      }\n\n      // b2Vec2 P(impulse.x, impulse.y);\n      const P: b2Vec2 = b2RevoluteJoint.SolveVelocityConstraints_s_P.Set(\n        impulse_v3.x,\n        impulse_v3.y,\n      );\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse_v3.z);\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse_v3.z);\n    } else {\n      // Solve point-to-point constraint\n      // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\n      const Cdot_v2: b2Vec2 = b2Vec2.SubVV(\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\n        b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2,\n      );\n      // b2Vec2 impulse = m_mass.Solve22(-Cdot);\n      const impulse_v2: b2Vec2 = this.m_mass.Solve22(\n        -Cdot_v2.x,\n        -Cdot_v2.y,\n        b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2,\n      );\n\n      this.m_impulse.x += impulse_v2.x;\n      this.m_impulse.y += impulse_v2.y;\n\n      // vA -= mA * impulse;\n      vA.SelfMulSub(mA, impulse_v2);\n      wA -= iA * b2Vec2.CrossVV(this.m_rA, impulse_v2);\n\n      // vB += mB * impulse;\n      vB.SelfMulAdd(mB, impulse_v2);\n      wB += iB * b2Vec2.CrossVV(this.m_rB, impulse_v2);\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_C_v2 = new b2Vec2();\n  private static SolvePositionConstraints_s_impulse = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    // b2Rot qA(aA), qB(aB);\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    let angularError = 0;\n    let positionError = 0;\n\n    const fixedRotation: boolean = this.m_invIA + this.m_invIB === 0;\n\n    // Solve angular limit constraint.\n    if (\n      this.m_enableLimit &&\n      this.m_limitState !== b2LimitState.e_inactiveLimit &&\n      !fixedRotation\n    ) {\n      const angle: number = aB - aA - this.m_referenceAngle;\n      let limitImpulse = 0;\n\n      if (this.m_limitState === b2LimitState.e_equalLimits) {\n        // Prevent large angular corrections\n        const C: number = b2Clamp(\n          angle - this.m_lowerAngle,\n          -b2_maxAngularCorrection,\n          b2_maxAngularCorrection,\n        );\n        limitImpulse = -this.m_motorMass * C;\n        angularError = b2Abs(C);\n      } else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\n        let C: number = angle - this.m_lowerAngle;\n        angularError = -C;\n\n        // Prevent large angular corrections and allow some slop.\n        C = b2Clamp(C + b2_angularSlop, -b2_maxAngularCorrection, 0);\n        limitImpulse = -this.m_motorMass * C;\n      } else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\n        let C: number = angle - this.m_upperAngle;\n        angularError = C;\n\n        // Prevent large angular corrections and allow some slop.\n        C = b2Clamp(C - b2_angularSlop, 0, b2_maxAngularCorrection);\n        limitImpulse = -this.m_motorMass * C;\n      }\n\n      aA -= this.m_invIA * limitImpulse;\n      aB += this.m_invIB * limitImpulse;\n    }\n\n    // Solve point-to-point constraint.\n    {\n      qA.SetAngle(aA);\n      qB.SetAngle(aB);\n      // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n      b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n      const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n      // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n      b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n      const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n      // b2Vec2 C = cB + rB - cA - rA;\n      const C_v2 = b2Vec2.SubVV(\n        b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n        b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n        b2RevoluteJoint.SolvePositionConstraints_s_C_v2,\n      );\n      // positionError = C.Length();\n      positionError = C_v2.Length();\n\n      const mA: number = this.m_invMassA,\n        mB: number = this.m_invMassB;\n      const iA: number = this.m_invIA,\n        iB: number = this.m_invIB;\n\n      const K: b2Mat22 = this.m_K;\n      K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n      K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n      K.ey.x = K.ex.y;\n      K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n      // b2Vec2 impulse = -K.Solve(C);\n      const impulse: b2Vec2 = K.Solve(\n        C_v2.x,\n        C_v2.y,\n        b2RevoluteJoint.SolvePositionConstraints_s_impulse,\n      ).SelfNeg();\n\n      // cA -= mA * impulse;\n      cA.SelfMulSub(mA, impulse);\n      aA -= iA * b2Vec2.CrossVV(rA, impulse);\n\n      // cB += mB * impulse;\n      cB.SelfMulAdd(mB, impulse);\n      aB += iB * b2Vec2.CrossVV(rB, impulse);\n    }\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\n    // return inv_dt * P;\n    out.x = inv_dt * this.m_impulse.x;\n    out.y = inv_dt * this.m_impulse.y;\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.z;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  GetReferenceAngle(): number {\n    return this.m_referenceAngle;\n  }\n\n  GetJointAngle(): number {\n    // b2Body* bA = this.m_bodyA;\n    // b2Body* bB = this.m_bodyB;\n    // return bB->this.m_sweep.a - bA->this.m_sweep.a - this.m_referenceAngle;\n    return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\n  }\n\n  GetJointSpeed(): number {\n    // b2Body* bA = this.m_bodyA;\n    // b2Body* bB = this.m_bodyB;\n    // return bB->this.m_angularVelocity - bA->this.m_angularVelocity;\n    return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\n  }\n\n  IsMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  EnableMotor(flag: boolean): void {\n    if (flag !== this.m_enableMotor) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableMotor = flag;\n    }\n  }\n\n  GetMotorTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  GetMotorSpeed(): number {\n    return this.m_motorSpeed;\n  }\n\n  SetMaxMotorTorque(torque: number): void {\n    if (torque !== this.m_maxMotorTorque) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_maxMotorTorque = torque;\n    }\n  }\n\n  GetMaxMotorTorque(): number {\n    return this.m_maxMotorTorque;\n  }\n\n  IsLimitEnabled(): boolean {\n    return this.m_enableLimit;\n  }\n\n  EnableLimit(flag: boolean): void {\n    if (flag !== this.m_enableLimit) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableLimit = flag;\n      this.m_impulse.z = 0;\n    }\n  }\n\n  GetLowerLimit(): number {\n    return this.m_lowerAngle;\n  }\n\n  GetUpperLimit(): number {\n    return this.m_upperAngle;\n  }\n\n  SetLimits(lower: number, upper: number): void {\n    if (lower !== this.m_lowerAngle || upper !== this.m_upperAngle) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_impulse.z = 0;\n      this.m_lowerAngle = lower;\n      this.m_upperAngle = upper;\n    }\n  }\n\n  SetMotorSpeed(speed: number): void {\n    if (speed !== this.m_motorSpeed) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n    }\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2_maxLinearCorrection, b2Maybe } from '../../common/b2Settings';\nimport { b2Clamp, b2Min, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType, b2LimitState } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport interface b2IRopeJointDef extends b2IJointDef {\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  maxLength?: number;\n}\n\n/// Rope joint definition. This requires two body anchor points and\n/// a maximum lengths.\n/// Note: by default the connected objects will not collide.\n/// see collideConnected in b2JointDef.\nexport class b2RopeJointDef extends b2JointDef implements b2IRopeJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2(-1, 0);\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2(1, 0);\n\n  maxLength = 0;\n\n  constructor() {\n    super(b2JointType.e_ropeJoint);\n  }\n}\n\nexport class b2RopeJoint extends b2Joint {\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  m_maxLength = 0;\n  m_length = 0;\n  m_impulse = 0;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_u: b2Vec2 = new b2Vec2();\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  m_mass = 0;\n  m_state = b2LimitState.e_inactiveLimit;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IRopeJointDef) {\n    super(def);\n\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));\n    this.m_maxLength = b2Maybe(def.maxLength, 0);\n  }\n\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // this.m_u = cB + this.m_rB - cA - this.m_rA;\n    this.m_u.Copy(cB).SelfAdd(this.m_rB).SelfSub(cA).SelfSub(this.m_rA);\n\n    this.m_length = this.m_u.Length();\n\n    const C: number = this.m_length - this.m_maxLength;\n    if (C > 0) {\n      this.m_state = b2LimitState.e_atUpperLimit;\n    } else {\n      this.m_state = b2LimitState.e_inactiveLimit;\n    }\n\n    if (this.m_length > b2_linearSlop) {\n      this.m_u.SelfMul(1 / this.m_length);\n    } else {\n      this.m_u.SetZero();\n      this.m_mass = 0;\n      this.m_impulse = 0;\n      return;\n    }\n\n    // Compute effective mass.\n    const crA: number = b2Vec2.CrossVV(this.m_rA, this.m_u);\n    const crB: number = b2Vec2.CrossVV(this.m_rB, this.m_u);\n    const invMass: number =\n      this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB + this.m_invIB * crB * crB;\n\n    this.m_mass = invMass !== 0 ? 1 / invMass : 0;\n\n    if (data.step.warmStarting) {\n      // Scale the impulse to support a variable time step.\n      this.m_impulse *= data.step.dtRatio;\n\n      // b2Vec2 P = m_impulse * m_u;\n      const P: b2Vec2 = b2Vec2.MulSV(\n        this.m_impulse,\n        this.m_u,\n        b2RopeJoint.InitVelocityConstraints_s_P,\n      );\n      // vA -= m_invMassA * P;\n      vA.SelfMulSub(this.m_invMassA, P);\n      wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\n      // vB += m_invMassB * P;\n      vB.SelfMulAdd(this.m_invMassB, P);\n      wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\n    } else {\n      this.m_impulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_vpA = new b2Vec2();\n  private static SolveVelocityConstraints_s_vpB = new b2Vec2();\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // Cdot = dot(u, v + cross(w, r))\n    // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\n    const vpA: b2Vec2 = b2Vec2.AddVCrossSV(\n      vA,\n      wA,\n      this.m_rA,\n      b2RopeJoint.SolveVelocityConstraints_s_vpA,\n    );\n    // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\n    const vpB: b2Vec2 = b2Vec2.AddVCrossSV(\n      vB,\n      wB,\n      this.m_rB,\n      b2RopeJoint.SolveVelocityConstraints_s_vpB,\n    );\n    // float32 C = m_length - m_maxLength;\n    const C: number = this.m_length - this.m_maxLength;\n    // float32 Cdot = b2Dot(m_u, vpB - vpA);\n    let Cdot: number = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\n\n    // Predictive constraint.\n    if (C < 0) {\n      Cdot += data.step.inv_dt * C;\n    }\n\n    let impulse: number = -this.m_mass * Cdot;\n    const oldImpulse: number = this.m_impulse;\n    this.m_impulse = b2Min(0, this.m_impulse + impulse);\n    impulse = this.m_impulse - oldImpulse;\n\n    // b2Vec2 P = impulse * m_u;\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_u, b2RopeJoint.SolveVelocityConstraints_s_P);\n    // vA -= m_invMassA * P;\n    vA.SelfMulSub(this.m_invMassA, P);\n    wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\n    // vB += m_invMassB * P;\n    vB.SelfMulAdd(this.m_invMassB, P);\n    wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // b2Vec2 rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // b2Vec2 u = cB + rB - cA - rA;\n    const u: b2Vec2 = this.m_u.Copy(cB).SelfAdd(rB).SelfSub(cA).SelfSub(rA);\n\n    const length: number = u.Normalize();\n    let C: number = length - this.m_maxLength;\n\n    C = b2Clamp(C, 0, b2_maxLinearCorrection);\n\n    const impulse: number = -this.m_mass * C;\n    // b2Vec2 P = impulse * u;\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, u, b2RopeJoint.SolvePositionConstraints_s_P);\n\n    // cA -= m_invMassA * P;\n    cA.SelfMulSub(this.m_invMassA, P);\n    aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\n    // cB += m_invMassB * P;\n    cB.SelfMulAdd(this.m_invMassB, P);\n    aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return length - this.m_maxLength < b2_linearSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // return out.Set(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\n    return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_u, out);\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return 0;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  SetMaxLength(length: number): void {\n    this.m_maxLength = length;\n  }\n\n  GetMaxLength(): number {\n    return this.m_maxLength;\n  }\n\n  GetLimitState(): b2LimitState {\n    return this.m_state;\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_angularSlop, b2_linearSlop, b2_pi, b2Maybe } from '../../common/b2Settings';\nimport { b2Abs, b2Mat33, b2Rot, b2Vec2, b2Vec3, XY } from '../../common/b2Math';\nimport { b2Body } from '../b2Body';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\n\nexport interface b2IWeldJointDef extends b2IJointDef {\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  referenceAngle?: number;\n\n  frequencyHz?: number;\n\n  dampingRatio?: number;\n}\n\n/// Weld joint definition. You need to specify local anchor points\n/// where they are attached and the relative body angle. The position\n/// of the anchor points is important for computing the reaction torque.\nexport class b2WeldJointDef extends b2JointDef implements b2IWeldJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2();\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2();\n\n  referenceAngle = 0;\n\n  frequencyHz = 0;\n\n  dampingRatio = 0;\n\n  constructor() {\n    super(b2JointType.e_weldJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n    this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n  }\n}\n\nexport class b2WeldJoint extends b2Joint {\n  m_frequencyHz = 0;\n  m_dampingRatio = 0;\n  m_bias = 0;\n\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  m_referenceAngle = 0;\n  m_gamma = 0;\n  readonly m_impulse: b2Vec3 = new b2Vec3(0, 0, 0);\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n  readonly m_mass: b2Mat33 = new b2Mat33();\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_K: b2Mat33 = new b2Mat33();\n\n  constructor(def: b2IWeldJointDef) {\n    super(def);\n\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\n\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\n    this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\n    this.m_impulse.SetZero();\n  }\n\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    // J = [-I -r1_skew I r2_skew]\n    //     [ 0       -1 0       1]\n    // r_skew = [-ry; rx]\n\n    // Matlab\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n    //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n    //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const K: b2Mat33 = this.m_K;\n    K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\n    K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n    K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n    K.ex.y = K.ey.x;\n    K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\n    K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n    K.ex.z = K.ez.x;\n    K.ey.z = K.ez.y;\n    K.ez.z = iA + iB;\n\n    if (this.m_frequencyHz > 0) {\n      K.GetInverse22(this.m_mass);\n\n      let invM: number = iA + iB;\n      const m: number = invM > 0 ? 1 / invM : 0;\n\n      const C: number = aB - aA - this.m_referenceAngle;\n\n      // Frequency\n      const omega: number = 2 * b2_pi * this.m_frequencyHz;\n\n      // Damping coefficient\n      const d: number = 2 * m * this.m_dampingRatio * omega;\n\n      // Spring stiffness\n      const k: number = m * omega * omega;\n\n      // magic formulas\n      const h: number = data.step.dt;\n      this.m_gamma = h * (d + h * k);\n      this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\n      this.m_bias = C * h * k * this.m_gamma;\n\n      invM += this.m_gamma;\n      this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\n    } else {\n      K.GetSymInverse33(this.m_mass);\n      this.m_gamma = 0;\n      this.m_bias = 0;\n    }\n\n    if (data.step.warmStarting) {\n      // Scale impulses to support a variable time step.\n      this.m_impulse.SelfMul(data.step.dtRatio);\n\n      // b2Vec2 P(m_impulse.x, m_impulse.y);\n      const P: b2Vec2 = b2WeldJoint.InitVelocityConstraints_s_P.Set(\n        this.m_impulse.x,\n        this.m_impulse.y,\n      );\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\n    } else {\n      this.m_impulse.SetZero();\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse1 = new b2Vec2();\n  private static SolveVelocityConstraints_s_impulse = new b2Vec3();\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    if (this.m_frequencyHz > 0) {\n      const Cdot2: number = wB - wA;\n\n      const impulse2: number =\n        -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\n      this.m_impulse.z += impulse2;\n\n      wA -= iA * impulse2;\n      wB += iB * impulse2;\n\n      // b2Vec2 Cdot1 = vB + b2Vec2.CrossSV(wB, this.m_rB) - vA - b2Vec2.CrossSV(wA, this.m_rA);\n      const Cdot1: b2Vec2 = b2Vec2.SubVV(\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\n        b2WeldJoint.SolveVelocityConstraints_s_Cdot1,\n      );\n\n      // b2Vec2 impulse1 = -b2Mul22(m_mass, Cdot1);\n      const impulse1: b2Vec2 = b2Mat33\n        .MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1)\n        .SelfNeg();\n      this.m_impulse.x += impulse1.x;\n      this.m_impulse.y += impulse1.y;\n\n      // b2Vec2 P = impulse1;\n      const P: b2Vec2 = impulse1;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      // wA -= iA * b2Cross(m_rA, P);\n      wA -= iA * b2Vec2.CrossVV(this.m_rA, P);\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      // wB += iB * b2Cross(m_rB, P);\n      wB += iB * b2Vec2.CrossVV(this.m_rB, P);\n    } else {\n      // b2Vec2 Cdot1 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA);\n      const Cdot1: b2Vec2 = b2Vec2.SubVV(\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\n        b2WeldJoint.SolveVelocityConstraints_s_Cdot1,\n      );\n      const Cdot2: number = wB - wA;\n      // b2Vec3 const Cdot(Cdot1.x, Cdot1.y, Cdot2);\n\n      // b2Vec3 impulse = -b2Mul(m_mass, Cdot);\n      const impulse: b2Vec3 = b2Mat33\n        .MulM33XYZ(\n          this.m_mass,\n          Cdot1.x,\n          Cdot1.y,\n          Cdot2,\n          b2WeldJoint.SolveVelocityConstraints_s_impulse,\n        )\n        .SelfNeg();\n      this.m_impulse.SelfAdd(impulse);\n\n      // b2Vec2 P(impulse.x, impulse.y);\n      const P: b2Vec2 = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_C1 = new b2Vec2();\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n  private static SolvePositionConstraints_s_impulse = new b2Vec3();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n\n    let positionError: number, angularError: number;\n\n    const K: b2Mat33 = this.m_K;\n    K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n    K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n    K.ez.x = -rA.y * iA - rB.y * iB;\n    K.ex.y = K.ey.x;\n    K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n    K.ez.y = rA.x * iA + rB.x * iB;\n    K.ex.z = K.ez.x;\n    K.ey.z = K.ez.y;\n    K.ez.z = iA + iB;\n\n    if (this.m_frequencyHz > 0) {\n      // b2Vec2 C1 =  cB + rB - cA - rA;\n      const C1 = b2Vec2.SubVV(\n        b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n        b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n        b2WeldJoint.SolvePositionConstraints_s_C1,\n      );\n      positionError = C1.Length();\n      angularError = 0;\n\n      // b2Vec2 P = -K.Solve22(C1);\n      const P: b2Vec2 = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\n\n      // cA -= mA * P;\n      cA.SelfMulSub(mA, P);\n      aA -= iA * b2Vec2.CrossVV(rA, P);\n\n      // cB += mB * P;\n      cB.SelfMulAdd(mB, P);\n      aB += iB * b2Vec2.CrossVV(rB, P);\n    } else {\n      // b2Vec2 C1 =  cB + rB - cA - rA;\n      const C1 = b2Vec2.SubVV(\n        b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n        b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n        b2WeldJoint.SolvePositionConstraints_s_C1,\n      );\n      const C2: number = aB - aA - this.m_referenceAngle;\n\n      positionError = C1.Length();\n      angularError = b2Abs(C2);\n\n      // b2Vec3 C(C1.x, C1.y, C2);\n\n      // b2Vec3 impulse = -K.Solve33(C);\n      const impulse: b2Vec3 = K.Solve33(\n        C1.x,\n        C1.y,\n        C2,\n        b2WeldJoint.SolvePositionConstraints_s_impulse,\n      ).SelfNeg();\n\n      // b2Vec2 P(impulse.x, impulse.y);\n      const P: b2Vec2 = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\n\n      // cA -= mA * P;\n      cA.SelfMulSub(mA, P);\n      aA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\n\n      // cB += mB * P;\n      cB.SelfMulAdd(mB, P);\n      aB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\n    }\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\n    // return inv_dt * P;\n    out.x = inv_dt * this.m_impulse.x;\n    out.y = inv_dt * this.m_impulse.y;\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_impulse.z;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  GetReferenceAngle(): number {\n    return this.m_referenceAngle;\n  }\n\n  SetFrequency(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  GetFrequency(): number {\n    return this.m_frequencyHz;\n  }\n\n  SetDampingRatio(ratio: number) {\n    this.m_dampingRatio = ratio;\n  }\n\n  GetDampingRatio() {\n    return this.m_dampingRatio;\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_linearSlop, b2_pi, b2Assert, b2Maybe } from '../../common/b2Settings';\nimport { b2Abs, b2Clamp, b2Rot, b2Vec2, XY } from '../../common/b2Math';\nimport { b2IJointDef, b2Joint, b2JointDef, b2JointType } from './b2Joint';\nimport { b2SolverData } from '../b2TimeStep';\nimport { b2Body } from '../b2Body';\n\nexport interface b2IWheelJointDef extends b2IJointDef {\n  localAnchorA?: XY;\n\n  localAnchorB?: XY;\n\n  localAxisA?: XY;\n\n  enableMotor?: boolean;\n\n  maxMotorTorque?: number;\n\n  motorSpeed?: number;\n\n  frequencyHz?: number;\n\n  dampingRatio?: number;\n}\n\n/// Wheel joint definition. This requires defining a line of\n/// motion using an axis and an anchor point. The definition uses local\n/// anchor points and a local axis so that the initial configuration\n/// can violate the constraint slightly. The joint translation is zero\n/// when the local anchor points coincide in world space. Using local\n/// anchors and a local axis helps when saving and loading a game.\nexport class b2WheelJointDef extends b2JointDef implements b2IWheelJointDef {\n  readonly localAnchorA: b2Vec2 = new b2Vec2(0, 0);\n\n  readonly localAnchorB: b2Vec2 = new b2Vec2(0, 0);\n\n  readonly localAxisA: b2Vec2 = new b2Vec2(1, 0);\n\n  enableMotor = false;\n\n  maxMotorTorque = 0;\n\n  motorSpeed = 0;\n\n  frequencyHz = 2;\n\n  dampingRatio = 0.7;\n\n  constructor() {\n    super(b2JointType.e_wheelJoint);\n  }\n\n  Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2, axis: b2Vec2): void {\n    this.bodyA = bA;\n    this.bodyB = bB;\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\n    this.bodyA.GetLocalVector(axis, this.localAxisA);\n  }\n}\n\nexport class b2WheelJoint extends b2Joint {\n  m_frequencyHz = 0;\n  m_dampingRatio = 0;\n\n  // Solver shared\n  readonly m_localAnchorA: b2Vec2 = new b2Vec2();\n  readonly m_localAnchorB: b2Vec2 = new b2Vec2();\n  readonly m_localXAxisA: b2Vec2 = new b2Vec2();\n  readonly m_localYAxisA: b2Vec2 = new b2Vec2();\n\n  m_impulse = 0;\n  m_motorImpulse = 0;\n  m_springImpulse = 0;\n\n  m_maxMotorTorque = 0;\n  m_motorSpeed = 0;\n  m_enableMotor = false;\n\n  // Solver temp\n  m_indexA = 0;\n  m_indexB = 0;\n  readonly m_localCenterA: b2Vec2 = new b2Vec2();\n  readonly m_localCenterB: b2Vec2 = new b2Vec2();\n  m_invMassA = 0;\n  m_invMassB = 0;\n  m_invIA = 0;\n  m_invIB = 0;\n\n  readonly m_ax: b2Vec2 = new b2Vec2();\n  readonly m_ay: b2Vec2 = new b2Vec2();\n  m_sAx = 0;\n  m_sBx = 0;\n  m_sAy = 0;\n  m_sBy = 0;\n\n  m_mass = 0;\n  m_motorMass = 0;\n  m_springMass = 0;\n\n  m_bias = 0;\n  m_gamma = 0;\n\n  readonly m_qA: b2Rot = new b2Rot();\n  readonly m_qB: b2Rot = new b2Rot();\n  readonly m_lalcA: b2Vec2 = new b2Vec2();\n  readonly m_lalcB: b2Vec2 = new b2Vec2();\n  readonly m_rA: b2Vec2 = new b2Vec2();\n  readonly m_rB: b2Vec2 = new b2Vec2();\n\n  constructor(def: b2IWheelJointDef) {\n    super(def);\n\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 2);\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0.7);\n\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\n    this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, b2Vec2.UNITX));\n    b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\n\n    this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);\n    this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\n    this.m_enableMotor = b2Maybe(def.enableMotor, false);\n\n    this.m_ax.SetZero();\n    this.m_ay.SetZero();\n  }\n\n  GetMotorSpeed(): number {\n    return this.m_motorSpeed;\n  }\n\n  GetMaxMotorTorque(): number {\n    return this.m_maxMotorTorque;\n  }\n\n  SetSpringFrequencyHz(hz: number): void {\n    this.m_frequencyHz = hz;\n  }\n\n  GetSpringFrequencyHz(): number {\n    return this.m_frequencyHz;\n  }\n\n  SetSpringDampingRatio(ratio: number): void {\n    this.m_dampingRatio = ratio;\n  }\n\n  GetSpringDampingRatio(): number {\n    return this.m_dampingRatio;\n  }\n\n  private static InitVelocityConstraints_s_d = new b2Vec2();\n  private static InitVelocityConstraints_s_P = new b2Vec2();\n\n  InitVelocityConstraints(data: b2SolverData): void {\n    this.m_indexA = this.m_bodyA.m_islandIndex;\n    this.m_indexB = this.m_bodyB.m_islandIndex;\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\n    this.m_invMassA = this.m_bodyA.m_invMass;\n    this.m_invMassB = this.m_bodyB.m_invMass;\n    this.m_invIA = this.m_bodyA.m_invI;\n    this.m_invIB = this.m_bodyB.m_invI;\n\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    const aA: number = data.positions[this.m_indexA].a;\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    const aB: number = data.positions[this.m_indexB].a;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // Compute the effective masses.\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // b2Vec2 d = cB + rB - cA - rA;\n    const d: b2Vec2 = b2Vec2.SubVV(\n      b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\n      b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\n      b2WheelJoint.InitVelocityConstraints_s_d,\n    );\n\n    // Point to line constraint\n    {\n      // m_ay = b2Mul(qA, m_localYAxisA);\n      b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\n      // m_sAy = b2Cross(d + rA, m_ay);\n      this.m_sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ay);\n      // m_sBy = b2Cross(rB, m_ay);\n      this.m_sBy = b2Vec2.CrossVV(rB, this.m_ay);\n\n      this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\n\n      if (this.m_mass > 0) {\n        this.m_mass = 1 / this.m_mass;\n      }\n    }\n\n    // Spring constraint\n    this.m_springMass = 0;\n    this.m_bias = 0;\n    this.m_gamma = 0;\n    if (this.m_frequencyHz > 0) {\n      // m_ax = b2Mul(qA, m_localXAxisA);\n      b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\n      // m_sAx = b2Cross(d + rA, m_ax);\n      this.m_sAx = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ax);\n      // m_sBx = b2Cross(rB, m_ax);\n      this.m_sBx = b2Vec2.CrossVV(rB, this.m_ax);\n\n      const invMass: number = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\n\n      if (invMass > 0) {\n        this.m_springMass = 1 / invMass;\n\n        const C: number = b2Vec2.DotVV(d, this.m_ax);\n\n        // Frequency\n        const omega: number = 2 * b2_pi * this.m_frequencyHz;\n\n        // Damping coefficient\n        const damp: number = 2 * this.m_springMass * this.m_dampingRatio * omega;\n\n        // Spring stiffness\n        const k: number = this.m_springMass * omega * omega;\n\n        // magic formulas\n        const h: number = data.step.dt;\n        this.m_gamma = h * (damp + h * k);\n        if (this.m_gamma > 0) {\n          this.m_gamma = 1 / this.m_gamma;\n        }\n\n        this.m_bias = C * h * k * this.m_gamma;\n\n        this.m_springMass = invMass + this.m_gamma;\n        if (this.m_springMass > 0) {\n          this.m_springMass = 1 / this.m_springMass;\n        }\n      }\n    } else {\n      this.m_springImpulse = 0;\n    }\n\n    // Rotational motor\n    if (this.m_enableMotor) {\n      this.m_motorMass = iA + iB;\n      if (this.m_motorMass > 0) {\n        this.m_motorMass = 1 / this.m_motorMass;\n      }\n    } else {\n      this.m_motorMass = 0;\n      this.m_motorImpulse = 0;\n    }\n\n    if (data.step.warmStarting) {\n      // Account for variable time step.\n      this.m_impulse *= data.step.dtRatio;\n      this.m_springImpulse *= data.step.dtRatio;\n      this.m_motorImpulse *= data.step.dtRatio;\n\n      // b2Vec2 P = m_impulse * m_ay + m_springImpulse * m_ax;\n      const P: b2Vec2 = b2Vec2.AddVV(\n        b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Vec2.s_t0),\n        b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Vec2.s_t1),\n        b2WheelJoint.InitVelocityConstraints_s_P,\n      );\n      // float32 LA = m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;\n      const LA: number =\n        this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n      // float32 LB = m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;\n      const LB: number =\n        this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n      // vA -= m_invMassA * P;\n      vA.SelfMulSub(this.m_invMassA, P);\n      wA -= this.m_invIA * LA;\n\n      // vB += m_invMassB * P;\n      vB.SelfMulAdd(this.m_invMassB, P);\n      wB += this.m_invIB * LB;\n    } else {\n      this.m_impulse = 0;\n      this.m_springImpulse = 0;\n      this.m_motorImpulse = 0;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n\n  SolveVelocityConstraints(data: b2SolverData): void {\n    const mA: number = this.m_invMassA,\n      mB: number = this.m_invMassB;\n    const iA: number = this.m_invIA,\n      iB: number = this.m_invIB;\n\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\n    let wA: number = data.velocities[this.m_indexA].w;\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\n    let wB: number = data.velocities[this.m_indexB].w;\n\n    // Solve spring constraint\n    {\n      const Cdot: number =\n        b2Vec2.DotVV(this.m_ax, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) +\n        this.m_sBx * wB -\n        this.m_sAx * wA;\n      const impulse: number =\n        -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\n      this.m_springImpulse += impulse;\n\n      // b2Vec2 P = impulse * m_ax;\n      const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\n      const LA: number = impulse * this.m_sAx;\n      const LB: number = impulse * this.m_sBx;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    }\n\n    // Solve rotational motor constraint\n    {\n      const Cdot: number = wB - wA - this.m_motorSpeed;\n      let impulse: number = -this.m_motorMass * Cdot;\n\n      const oldImpulse: number = this.m_motorImpulse;\n      const maxImpulse: number = data.step.dt * this.m_maxMotorTorque;\n      this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n      impulse = this.m_motorImpulse - oldImpulse;\n\n      wA -= iA * impulse;\n      wB += iB * impulse;\n    }\n\n    // Solve point to line constraint\n    {\n      const Cdot: number =\n        b2Vec2.DotVV(this.m_ay, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) +\n        this.m_sBy * wB -\n        this.m_sAy * wA;\n      const impulse: number = -this.m_mass * Cdot;\n      this.m_impulse += impulse;\n\n      // b2Vec2 P = impulse * m_ay;\n      const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\n      const LA: number = impulse * this.m_sAy;\n      const LB: number = impulse * this.m_sBy;\n\n      // vA -= mA * P;\n      vA.SelfMulSub(mA, P);\n      wA -= iA * LA;\n\n      // vB += mB * P;\n      vB.SelfMulAdd(mB, P);\n      wB += iB * LB;\n    }\n\n    // data.velocities[this.m_indexA].v = vA;\n    data.velocities[this.m_indexA].w = wA;\n    // data.velocities[this.m_indexB].v = vB;\n    data.velocities[this.m_indexB].w = wB;\n  }\n\n  private static SolvePositionConstraints_s_d = new b2Vec2();\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n\n  SolvePositionConstraints(data: b2SolverData): boolean {\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\n    let aA: number = data.positions[this.m_indexA].a;\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\n    let aB: number = data.positions[this.m_indexB].a;\n\n    const qA: b2Rot = this.m_qA.SetAngle(aA),\n      qB: b2Rot = this.m_qB.SetAngle(aB);\n\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\n    // b2Vec2 d = (cB - cA) + rB - rA;\n    const d: b2Vec2 = b2Vec2.AddVV(\n      b2Vec2.SubVV(cB, cA, b2Vec2.s_t0),\n      b2Vec2.SubVV(rB, rA, b2Vec2.s_t1),\n      b2WheelJoint.SolvePositionConstraints_s_d,\n    );\n\n    // b2Vec2 ay = b2Mul(qA, m_localYAxisA);\n    const ay: b2Vec2 = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\n\n    // float32 sAy = b2Cross(d + rA, ay);\n    const sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), ay);\n    // float32 sBy = b2Cross(rB, ay);\n    const sBy = b2Vec2.CrossVV(rB, ay);\n\n    // float32 C = b2Dot(d, ay);\n    const C: number = b2Vec2.DotVV(d, this.m_ay);\n\n    const k: number =\n      this.m_invMassA +\n      this.m_invMassB +\n      this.m_invIA * this.m_sAy * this.m_sAy +\n      this.m_invIB * this.m_sBy * this.m_sBy;\n\n    let impulse: number;\n    if (k !== 0) {\n      impulse = -C / k;\n    } else {\n      impulse = 0;\n    }\n\n    // b2Vec2 P = impulse * ay;\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\n    const LA: number = impulse * sAy;\n    const LB: number = impulse * sBy;\n\n    // cA -= m_invMassA * P;\n    cA.SelfMulSub(this.m_invMassA, P);\n    aA -= this.m_invIA * LA;\n    // cB += m_invMassB * P;\n    cB.SelfMulAdd(this.m_invMassB, P);\n    aB += this.m_invIB * LB;\n\n    // data.positions[this.m_indexA].c = cA;\n    data.positions[this.m_indexA].a = aA;\n    // data.positions[this.m_indexB].c = cB;\n    data.positions[this.m_indexB].a = aB;\n\n    return b2Abs(C) <= b2_linearSlop;\n  }\n\n  GetDefinition(def: b2WheelJointDef): b2WheelJointDef {\n    !!B2_DEBUG && b2Assert(false); // TODO\n    return def;\n  }\n\n  GetAnchorA<T extends XY>(out: T): T {\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\n  }\n\n  GetAnchorB<T extends XY>(out: T): T {\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\n  }\n\n  GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\n    // return inv_dt * (m_impulse * m_ay + m_springImpulse * m_ax);\n    out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);\n    out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);\n    return out;\n  }\n\n  GetReactionTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n\n  GetLocalAnchorA(): Readonly<b2Vec2> {\n    return this.m_localAnchorA;\n  }\n\n  GetLocalAnchorB(): Readonly<b2Vec2> {\n    return this.m_localAnchorB;\n  }\n\n  GetLocalAxisA(): Readonly<b2Vec2> {\n    return this.m_localXAxisA;\n  }\n\n  GetJointTranslation(): number {\n    return this.GetPrismaticJointTranslation();\n  }\n\n  GetJointLinearSpeed(): number {\n    return this.GetPrismaticJointSpeed();\n  }\n\n  GetJointAngle(): number {\n    return this.GetRevoluteJointAngle();\n  }\n\n  GetJointAngularSpeed(): number {\n    return this.GetRevoluteJointSpeed();\n  }\n\n  GetPrismaticJointTranslation(): number {\n    const bA: b2Body = this.m_bodyA;\n    const bB: b2Body = this.m_bodyB;\n\n    const pA: b2Vec2 = bA.GetWorldPoint(this.m_localAnchorA, new b2Vec2());\n    const pB: b2Vec2 = bB.GetWorldPoint(this.m_localAnchorB, new b2Vec2());\n    const d: b2Vec2 = b2Vec2.SubVV(pB, pA, new b2Vec2());\n    const axis: b2Vec2 = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\n\n    const translation: number = b2Vec2.DotVV(d, axis);\n    return translation;\n  }\n\n  GetPrismaticJointSpeed(): number {\n    const bA: b2Body = this.m_bodyA;\n    const bB: b2Body = this.m_bodyB;\n\n    // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\n    b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\n    const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\n    // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\n    b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\n    const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\n    // b2Vec2 pA = bA->m_sweep.c + rA;\n    const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\n    // b2Vec2 pB = bB->m_sweep.c + rB;\n    const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\n    // b2Vec2 d = pB - pA;\n    const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\n    // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\n    const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\n\n    const vA = bA.m_linearVelocity;\n    const vB = bB.m_linearVelocity;\n    const wA = bA.m_angularVelocity;\n    const wB = bB.m_angularVelocity;\n\n    // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\n    const speed =\n      b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\n      b2Vec2.DotVV(\n        axis,\n        b2Vec2.SubVV(\n          b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0),\n          b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1),\n          b2Vec2.s_t0,\n        ),\n      );\n    return speed;\n  }\n\n  GetRevoluteJointAngle(): number {\n    // b2Body* bA = this.m_bodyA;\n    // b2Body* bB = this.m_bodyB;\n    // return bB->this.m_sweep.a - bA->this.m_sweep.a;\n    return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\n  }\n\n  GetRevoluteJointSpeed(): number {\n    const wA: number = this.m_bodyA.m_angularVelocity;\n    const wB: number = this.m_bodyB.m_angularVelocity;\n    return wB - wA;\n  }\n\n  IsMotorEnabled(): boolean {\n    return this.m_enableMotor;\n  }\n\n  EnableMotor(flag: boolean): void {\n    if (flag !== this.m_enableMotor) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableMotor = flag;\n    }\n  }\n\n  SetMotorSpeed(speed: number): void {\n    if (speed !== this.m_motorSpeed) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n    }\n  }\n\n  SetMaxMotorTorque(force: number): void {\n    if (force !== this.m_maxMotorTorque) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_maxMotorTorque = force;\n    }\n  }\n\n  GetMotorTorque(inv_dt: number): number {\n    return inv_dt * this.m_motorImpulse;\n  }\n}\n","import { b2ShapeType } from '../../collision/shapes/b2Shape';\nimport { b2Contact } from './b2Contact';\nimport { b2Fixture } from '../b2Fixture';\nimport { b2Assert } from '../../common/b2Settings';\n\nexport class b2ContactFactory {\n  readonly m_registers: number[] = [];\n  pool: b2Contact[] = [];\n\n  constructor() {\n    this.InitializeRegisters();\n  }\n\n  private createFromPool() {\n    return this.pool.pop() ?? new b2Contact();\n  }\n\n  private destroyToPool(contact: b2Contact): void {\n    this.pool.push(contact);\n  }\n\n  private AddType(typeA: b2ShapeType, typeB: b2ShapeType): void {\n    this.m_registers[(typeA << 2) | typeB] = 2;\n    if (typeA !== typeB) {\n      this.m_registers[(typeB << 2) | typeA] = 1;\n    }\n  }\n\n  private InitializeRegisters(): void {\n    for (let i = 0; i < b2ShapeType.e_shapeTypeCount; ++i) {\n      for (let j = 0; j < b2ShapeType.e_shapeTypeCount; ++j) {\n        this.m_registers[(i << 2) | j] = 0;\n      }\n    }\n\n    this.AddType(b2ShapeType.e_circleShape, b2ShapeType.e_circleShape);\n    this.AddType(b2ShapeType.e_polygonShape, b2ShapeType.e_circleShape);\n    this.AddType(b2ShapeType.e_polygonShape, b2ShapeType.e_polygonShape);\n    this.AddType(b2ShapeType.e_edgeShape, b2ShapeType.e_circleShape);\n    this.AddType(b2ShapeType.e_edgeShape, b2ShapeType.e_polygonShape);\n    this.AddType(b2ShapeType.e_chainShape, b2ShapeType.e_circleShape);\n    this.AddType(b2ShapeType.e_chainShape, b2ShapeType.e_polygonShape);\n  }\n\n  Create(\n    fixtureA: b2Fixture,\n    indexA: number,\n    fixtureB: b2Fixture,\n    indexB: number,\n  ): b2Contact | null {\n    const typeA: b2ShapeType = fixtureA.GetType();\n    const typeB: b2ShapeType = fixtureB.GetType();\n\n    !!B2_DEBUG && b2Assert(0 <= typeA && typeA < b2ShapeType.e_shapeTypeCount);\n    !!B2_DEBUG && b2Assert(0 <= typeB && typeB < b2ShapeType.e_shapeTypeCount);\n\n    const reg = this.m_registers[(typeA << 2) | typeB];\n\n    if (reg === 0) {\n      return null;\n    }\n    const c = this.createFromPool();\n    if (reg === 2) {\n      c.Reset(fixtureA, indexA, fixtureB, indexB);\n    } else if (reg === 1) {\n      c.Reset(fixtureB, indexB, fixtureA, indexA);\n    }\n\n    return c;\n  }\n\n  Destroy(contact: b2Contact): void {\n    if (B2_DEBUG) {\n      const typeA = contact.m_fixtureA.GetType();\n      const typeB = contact.m_fixtureB.GetType();\n      b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\n      b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\n    }\n\n    this.destroyToPool(contact);\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { b2_maxManifoldPoints, b2MakeNumberArray } from '../common/b2Settings';\nimport { b2Vec2 } from '../common/b2Math';\nimport { b2Manifold } from '../collision/b2Collision';\nimport { b2Contact } from './contacts/b2Contact';\nimport { b2BodyType } from './b2Body';\nimport { b2Joint } from './joints/b2Joint';\nimport { b2Filter, b2Fixture } from './b2Fixture';\nimport { b2ParticleGroup } from '../particle/b2ParticleGroup';\nimport {\n  b2ParticleBodyContact,\n  b2ParticleContact,\n  b2ParticleSystem,\n} from '../particle/b2ParticleSystem';\n\n/// Joints and fixtures are destroyed when their associated\n/// body is destroyed. Implement this listener so that you\n/// may nullify references to these joints and shapes.\nexport class b2DestructionListener {\n  /// Called when any joint is about to be destroyed due\n  /// to the destruction of one of its attached bodies.\n  SayGoodbyeJoint(joint: b2Joint): void {}\n\n  /// Called when any fixture is about to be destroyed due\n  /// to the destruction of its parent body.\n  SayGoodbyeFixture(fixture: b2Fixture): void {}\n\n  // #if B2_ENABLE_PARTICLE\n  /// Called when any particle group is about to be destroyed.\n  SayGoodbyeParticleGroup(group: b2ParticleGroup): void {}\n\n  /// Called when a particle is about to be destroyed.\n  /// The index can be used in conjunction with\n  /// b2ParticleSystem::GetUserDataBuffer() or\n  /// b2ParticleSystem::GetParticleHandleFromIndex() to determine which\n  /// particle has been destroyed.\n  SayGoodbyeParticle(system: b2ParticleSystem, index: number): void {}\n\n  // #endif\n}\n\n/// Implement this class to provide collision filtering. In other words, you can implement\n/// this class if you want finer control over contact creation.\nexport class b2ContactFilter {\n  /// Return true if contact calculations should be performed between these two shapes.\n  /// @warning for performance reasons this is only called when the AABBs begin to overlap.\n  ShouldCollide(fixtureA: b2Fixture, fixtureB: b2Fixture): boolean {\n    const bodyA = fixtureA.GetBody();\n    const bodyB = fixtureB.GetBody();\n\n    // At least one body should be dynamic or kinematic.\n    if (\n      bodyB.GetType() === b2BodyType.b2_staticBody &&\n      bodyA.GetType() === b2BodyType.b2_staticBody\n    ) {\n      return false;\n    }\n\n    // Does a joint prevent collision?\n    if (!bodyB.ShouldCollideConnected(bodyA)) {\n      return false;\n    }\n\n    const filter1: b2Filter = fixtureA.GetFilterData();\n    const filter2: b2Filter = fixtureB.GetFilterData();\n\n    if (filter1.groupIndex === filter2.groupIndex && filter1.groupIndex !== 0) {\n      return filter1.groupIndex > 0;\n    }\n\n    const collide: boolean =\n      (filter1.maskBits & filter2.categoryBits) !== 0 &&\n      (filter1.categoryBits & filter2.maskBits) !== 0;\n    return collide;\n  }\n\n  // #if B2_ENABLE_PARTICLE\n  ShouldCollideFixtureParticle(\n    fixture: b2Fixture,\n    system: b2ParticleSystem,\n    index: number,\n  ): boolean {\n    return true;\n  }\n\n  ShouldCollideParticleParticle(system: b2ParticleSystem, indexA: number, indexB: number): boolean {\n    return true;\n  }\n\n  // #endif\n\n  static readonly b2_defaultFilter: b2ContactFilter = new b2ContactFilter();\n}\n\n/// Contact impulses for reporting. Impulses are used instead of forces because\n/// sub-step forces may approach infinity for rigid body collisions. These\n/// match up one-to-one with the contact points in b2Manifold.\nexport class b2ContactImpulse {\n  normalImpulses: number[] = b2MakeNumberArray(b2_maxManifoldPoints);\n  tangentImpulses: number[] = b2MakeNumberArray(b2_maxManifoldPoints);\n  count = 0;\n}\n\n/// Implement this class to get contact information. You can use these results for\n/// things like sounds and game logic. You can also get contact results by\n/// traversing the contact lists after the time step. However, you might miss\n/// some contacts because continuous physics leads to sub-stepping.\n/// Additionally you may receive multiple callbacks for the same contact in a\n/// single time step.\n/// You should strive to make your callbacks efficient because there may be\n/// many callbacks per time step.\n/// @warning You cannot create/destroy Box2D entities inside these callbacks.\nexport class b2ContactListener {\n  /// Called when two fixtures begin to touch.\n  BeginContact(contact: b2Contact): void {}\n\n  /// Called when two fixtures cease to touch.\n  EndContact(contact: b2Contact): void {}\n\n  // #if B2_ENABLE_PARTICLE\n  BeginContactFixtureParticle(system: b2ParticleSystem, contact: b2ParticleBodyContact): void {}\n\n  EndContactFixtureParticle(system: b2ParticleSystem, contact: b2ParticleBodyContact): void {}\n\n  BeginContactParticleParticle(system: b2ParticleSystem, contact: b2ParticleContact): void {}\n\n  EndContactParticleParticle(system: b2ParticleSystem, contact: b2ParticleContact): void {}\n\n  // #endif\n\n  /// This is called after a contact is updated. This allows you to inspect a\n  /// contact before it goes to the solver. If you are careful, you can modify the\n  /// contact manifold (e.g. disable contact).\n  /// A copy of the old manifold is provided so that you can detect changes.\n  /// Note: this is called only for awake bodies.\n  /// Note: this is called even when the number of contact points is zero.\n  /// Note: this is not called for sensors.\n  /// Note: if you set the number of contact points to zero, you will not\n  /// get an EndContact callback. However, you may get a BeginContact callback\n  /// the next step.\n  PreSolve(contact: b2Contact, oldManifold: b2Manifold): void {}\n\n  /// This lets you inspect a contact after the solver is finished. This is useful\n  /// for inspecting impulses.\n  /// Note: the contact manifold does not include time of impact impulses, which can be\n  /// arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly\n  /// in a separate data structure.\n  /// Note: this is only called for contacts that are touching, solid, and awake.\n  PostSolve(contact: b2Contact, impulse: b2ContactImpulse): void {}\n\n  static readonly b2_defaultListener: b2ContactListener = new b2ContactListener();\n}\n\n/// Callback class for AABB queries.\n/// See b2World::Query\nexport class b2QueryCallback {\n  /// Called for each fixture found in the query AABB.\n  /// @return false to terminate the query.\n  ReportFixture(fixture: b2Fixture): boolean {\n    return true;\n  }\n\n  // #if B2_ENABLE_PARTICLE\n  ReportParticle(system: b2ParticleSystem, index: number): boolean {\n    return false;\n  }\n\n  ShouldQueryParticleSystem(system: b2ParticleSystem): boolean {\n    return true;\n  }\n\n  // #endif\n}\n\nexport type b2QueryCallbackFunction = (fixture: b2Fixture) => boolean;\n\n/// Callback class for ray casts.\n/// See b2World::RayCast\nexport class b2RayCastCallback {\n  /// Called for each fixture found in the query. You control how the ray cast\n  /// proceeds by returning a float:\n  /// return -1: ignore this fixture and continue\n  /// return 0: terminate the ray cast\n  /// return fraction: clip the ray to this point\n  /// return 1: don't clip the ray and continue\n  /// @param fixture the fixture hit by the ray\n  /// @param point the point of initial intersection\n  /// @param normal the normal vector at the point of intersection\n  /// @return -1 to filter, 0 to terminate, fraction to clip the ray for\n  /// closest hit, 1 to continue\n  ReportFixture(fixture: b2Fixture, point: b2Vec2, normal: b2Vec2, fraction: number): number {\n    return fraction;\n  }\n\n  // #if B2_ENABLE_PARTICLE\n  ReportParticle(\n    system: b2ParticleSystem,\n    index: number,\n    point: b2Vec2,\n    normal: b2Vec2,\n    fraction: number,\n  ): number {\n    return 0;\n  }\n\n  ShouldQueryParticleSystem(system: b2ParticleSystem): boolean {\n    return true;\n  }\n\n  // #endif\n}\n\nexport type b2RayCastCallbackFunction = (\n  fixture: b2Fixture,\n  point: b2Vec2,\n  normal: b2Vec2,\n  fraction: number,\n) => number;\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\nimport { b2BroadPhase } from '../collision/b2BroadPhase';\nimport { b2TreeNode } from '../collision/b2DynamicTree';\nimport { b2TestOverlapAABB } from '../collision/b2Collision';\nimport { b2Contact, b2ContactEdge } from './contacts/b2Contact';\nimport { b2ContactFactory } from './contacts/b2ContactFactory';\nimport { b2Body, b2BodyType } from './b2Body';\nimport { b2Fixture, b2FixtureProxy } from './b2Fixture';\nimport { b2ContactFilter, b2ContactListener } from './b2WorldCallbacks';\n\n// Delegate of b2World.\nexport class b2ContactManager {\n  readonly m_broadPhase: b2BroadPhase<b2FixtureProxy> = new b2BroadPhase<b2FixtureProxy>();\n  m_contactList: b2Contact | null = null;\n  m_contactCount = 0;\n  m_contactFilter: b2ContactFilter = b2ContactFilter.b2_defaultFilter;\n  m_contactListener: b2ContactListener = b2ContactListener.b2_defaultListener;\n\n  readonly m_contactFactory: b2ContactFactory = new b2ContactFactory();\n\n  // Broad-phase callback.\n  AddPair(proxyA: b2FixtureProxy, proxyB: b2FixtureProxy): void {\n    !!B2_DEBUG && b2Assert(proxyA instanceof b2FixtureProxy);\n    !!B2_DEBUG && b2Assert(proxyB instanceof b2FixtureProxy);\n\n    let fixtureA = proxyA.fixture;\n    let fixtureB = proxyB.fixture;\n\n    const indexA = proxyA.childIndex;\n    const indexB = proxyB.childIndex;\n\n    let bodyA = fixtureA.GetBody();\n    let bodyB = fixtureB.GetBody();\n\n    // Are the fixtures on the same body?\n    if (bodyA === bodyB) {\n      return;\n    }\n\n    // TODO_ERIN use a hash table to remove a potential bottleneck when both\n    // bodies have a lot of contacts.\n    // Does a contact already exist?\n    let edge: b2ContactEdge | null = bodyB.GetContactList();\n    while (edge !== null) {\n      if (edge.other === bodyA) {\n        const fA = edge.contact.GetFixtureA();\n        const fB = edge.contact.GetFixtureB();\n        const iA = edge.contact.GetChildIndexA();\n        const iB = edge.contact.GetChildIndexB();\n\n        if (fA === fixtureA && fB === fixtureB && iA === indexA && iB === indexB) {\n          // A contact already exists.\n          return;\n        }\n\n        if (fA === fixtureB && fB === fixtureA && iA === indexB && iB === indexA) {\n          // A contact already exists.\n          return;\n        }\n      }\n\n      edge = edge.next;\n    }\n\n    // Does a joint override collision? Is at least one body dynamic?\n    if (!bodyB.ShouldCollide(bodyA)) {\n      return;\n    }\n\n    // Check user filtering.\n    if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\n      return;\n    }\n\n    // Call the factory.\n    const c: b2Contact | null = this.m_contactFactory.Create(fixtureA, indexA, fixtureB, indexB);\n    if (c === null) {\n      return;\n    }\n\n    // Contact creation may swap fixtures.\n    fixtureA = c.GetFixtureA();\n    fixtureB = c.GetFixtureB();\n    //indexA = c.GetChildIndexA();\n    //indexB = c.GetChildIndexB();\n    bodyA = fixtureA.m_body;\n    bodyB = fixtureB.m_body;\n\n    // Insert into the world.\n    c.m_prev = null;\n    c.m_next = this.m_contactList;\n    if (this.m_contactList !== null) {\n      this.m_contactList.m_prev = c;\n    }\n    this.m_contactList = c;\n\n    // Connect to island graph.\n\n    // Connect to body A\n    c.m_nodeA.other = bodyB;\n\n    c.m_nodeA.prev = null;\n    c.m_nodeA.next = bodyA.m_contactList;\n    if (bodyA.m_contactList !== null) {\n      bodyA.m_contactList.prev = c.m_nodeA;\n    }\n    bodyA.m_contactList = c.m_nodeA;\n\n    // Connect to body B\n    c.m_nodeB.other = bodyA;\n\n    c.m_nodeB.prev = null;\n    c.m_nodeB.next = bodyB.m_contactList;\n    if (bodyB.m_contactList !== null) {\n      bodyB.m_contactList.prev = c.m_nodeB;\n    }\n    bodyB.m_contactList = c.m_nodeB;\n\n    // Wake up the bodies\n    if (!fixtureA.IsSensor() && !fixtureB.IsSensor()) {\n      bodyA.SetAwake(true);\n      bodyB.SetAwake(true);\n    }\n\n    ++this.m_contactCount;\n  }\n\n  static s_updatePairs_proxyA: b2FixtureProxy[] = [];\n  static s_updatePairs_proxyB: b2FixtureProxy[] = [];\n\n  FindNewContacts(): void {\n    const listA = b2ContactManager.s_updatePairs_proxyA;\n    const listB = b2ContactManager.s_updatePairs_proxyB;\n    listA.length = 0;\n    listB.length = 0;\n    this.m_broadPhase.UpdatePairs_(listA, listB);\n\n    for (let i = 0; i < listA.length; ++i) {\n      this.AddPair(listA[i], listB[i]);\n    }\n  }\n\n  Destroy(c: b2Contact): void {\n    const fixtureA: b2Fixture = c.GetFixtureA();\n    const fixtureB: b2Fixture = c.GetFixtureB();\n    const bodyA: b2Body = fixtureA.GetBody();\n    const bodyB: b2Body = fixtureB.GetBody();\n\n    if (this.m_contactListener && c.IsTouching()) {\n      this.m_contactListener.EndContact(c);\n    }\n\n    // Remove from the world.\n    if (c.m_prev) {\n      c.m_prev.m_next = c.m_next;\n    }\n\n    if (c.m_next) {\n      c.m_next.m_prev = c.m_prev;\n    }\n\n    if (c === this.m_contactList) {\n      this.m_contactList = c.m_next;\n    }\n\n    // Remove from body 1\n    if (c.m_nodeA.prev) {\n      c.m_nodeA.prev.next = c.m_nodeA.next;\n    }\n\n    if (c.m_nodeA.next) {\n      c.m_nodeA.next.prev = c.m_nodeA.prev;\n    }\n\n    if (c.m_nodeA === bodyA.m_contactList) {\n      bodyA.m_contactList = c.m_nodeA.next;\n    }\n\n    // Remove from body 2\n    if (c.m_nodeB.prev) {\n      c.m_nodeB.prev.next = c.m_nodeB.next;\n    }\n\n    if (c.m_nodeB.next) {\n      c.m_nodeB.next.prev = c.m_nodeB.prev;\n    }\n\n    if (c.m_nodeB === bodyB.m_contactList) {\n      bodyB.m_contactList = c.m_nodeB.next;\n    }\n\n    // moved this from b2ContactFactory:Destroy\n    if (c.m_manifold.pointCount > 0 && !fixtureA.IsSensor() && !fixtureB.IsSensor()) {\n      fixtureA.GetBody().SetAwake(true);\n      fixtureB.GetBody().SetAwake(true);\n    }\n\n    // Call the factory.\n    this.m_contactFactory.Destroy(c);\n    --this.m_contactCount;\n  }\n\n  // This is the top level collision call for the time step. Here\n  // all the narrow phase collision is processed for the world\n  // contact list.\n  Collide(): void {\n    // Update awake contacts.\n    let c: b2Contact | null = this.m_contactList;\n    while (c) {\n      const fixtureA: b2Fixture = c.GetFixtureA();\n      const fixtureB: b2Fixture = c.GetFixtureB();\n      const indexA: number = c.GetChildIndexA();\n      const indexB: number = c.GetChildIndexB();\n      const bodyA: b2Body = fixtureA.GetBody();\n      const bodyB: b2Body = fixtureB.GetBody();\n\n      // Is this contact flagged for filtering?\n      if (c.m_filterFlag) {\n        // Check user filtering.\n        if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\n          const cNuke: b2Contact = c;\n          c = cNuke.m_next;\n          this.Destroy(cNuke);\n          continue;\n        }\n\n        // Clear the filtering flag.\n        c.m_filterFlag = false;\n      }\n\n      const activeA: boolean = bodyA.IsAwake() && bodyA.m_type !== b2BodyType.b2_staticBody;\n      const activeB: boolean = bodyB.IsAwake() && bodyB.m_type !== b2BodyType.b2_staticBody;\n\n      // At least one body must be awake and it must be dynamic or kinematic.\n      if (!activeA && !activeB) {\n        c = c.m_next;\n        continue;\n      }\n\n      const treeNodeA: b2TreeNode<b2FixtureProxy> = fixtureA.m_proxies[indexA].treeNode;\n      const treeNodeB: b2TreeNode<b2FixtureProxy> = fixtureB.m_proxies[indexB].treeNode;\n      const overlap: boolean = b2TestOverlapAABB(treeNodeA.aabb, treeNodeB.aabb);\n\n      // Here we destroy contacts that cease to overlap in the broad-phase.\n      if (!overlap) {\n        const cNuke: b2Contact = c;\n        c = cNuke.m_next;\n        this.Destroy(cNuke);\n        continue;\n      }\n\n      // The contact persists.\n      c.Update(this.m_contactListener);\n      c = c.m_next;\n    }\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Vec2 } from '../common/b2Math';\n\n/// Profiling data. Times are in milliseconds.\nexport class b2Profile {\n  step = NaN;\n  collide = NaN;\n  solve = NaN;\n  solveInit = NaN;\n  solveVelocity = NaN;\n  solvePosition = NaN;\n  broadphase = NaN;\n  solveTOI = NaN;\n\n  constructor() {\n    this.step = 0.0;\n    this.collide = 0.0;\n    this.solve = 0.0;\n    this.solveInit = 0.0;\n    this.solveVelocity = 0.0;\n    this.solvePosition = 0.0;\n    this.broadphase = 0.0;\n    this.solveTOI = 0.0;\n  }\n\n  Reset() {\n    this.step = 0;\n    this.collide = 0;\n    this.solve = 0;\n    this.solveInit = 0;\n    this.solveVelocity = 0;\n    this.solvePosition = 0;\n    this.broadphase = 0;\n    this.solveTOI = 0;\n    return this;\n  }\n}\n\n/// This is an internal structure.\nexport class b2TimeStep {\n  dt = NaN; // time step\n  inv_dt = NaN; // inverse time step (0 if dt == 0).\n  dtRatio = NaN; // dt * inv_dt0\n  velocityIterations = 0;\n  positionIterations = 0;\n  // #if B2_ENABLE_PARTICLE\n  particleIterations = 0;\n  // #endif\n  warmStarting = false;\n\n  constructor() {\n    this.dt = 0.0;\n    this.inv_dt = 0.0;\n    this.dtRatio = 0.0;\n  }\n\n  Copy(step: b2TimeStep): b2TimeStep {\n    this.dt = step.dt;\n    this.inv_dt = step.inv_dt;\n    this.dtRatio = step.dtRatio;\n    this.positionIterations = step.positionIterations;\n    this.velocityIterations = step.velocityIterations;\n    if (B2_ENABLE_PARTICLE) {\n      this.particleIterations = step.particleIterations;\n    }\n    this.warmStarting = step.warmStarting;\n    return this;\n  }\n}\n\nexport class b2Position {\n  readonly c = new b2Vec2();\n  a = NaN;\n\n  constructor() {\n    this.a = 0.0;\n  }\n\n  static MakeArray(length: number): b2Position[] {\n    const arr = [];\n    for (let i = 0; i < length; ++i) {\n      arr.push(new b2Position());\n    }\n    return arr;\n  }\n}\n\nexport class b2Velocity {\n  readonly v = new b2Vec2();\n  w = NaN;\n\n  constructor() {\n    this.w = 0.0;\n  }\n\n  static MakeArray(length: number): b2Velocity[] {\n    const arr = [];\n    for (let i = 0; i < length; ++i) {\n      arr.push(new b2Velocity());\n    }\n    return arr;\n  }\n}\n\nexport class b2SolverData {\n  readonly step = new b2TimeStep();\n  positions: b2Position[] = ([null] as unknown) as b2Position[];\n  velocities: b2Velocity[] = ([null] as unknown) as b2Velocity[];\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_baumgarte,\n  b2_linearSlop,\n  b2_maxLinearCorrection,\n  b2_maxManifoldPoints,\n  b2_toiBaumgarte,\n  b2_velocityThreshold,\n  b2Assert,\n  b2MakeArray,\n} from '../../common/b2Settings';\nimport {\n  b2Clamp,\n  b2Mat22,\n  b2Max,\n  b2MaxInt,\n  b2Min,\n  b2Rot,\n  b2Transform,\n  b2Vec2,\n} from '../../common/b2Math';\nimport {\n  b2Manifold,\n  b2ManifoldPoint,\n  b2ManifoldType,\n  b2WorldManifold,\n} from '../../collision/b2Collision';\nimport { b2Contact } from './b2Contact';\nimport { b2Body } from '../b2Body';\nimport { b2Fixture } from '../b2Fixture';\nimport { b2Position, b2TimeStep, b2Velocity } from '../b2TimeStep';\n\n// Solver debugging is normally disabled because the block solver sometimes has to deal with a poorly conditioned effective mass matrix.\n// #define B2_DEBUG_SOLVER 0\n\nconst g_blockSolve = false;\n\nexport class b2VelocityConstraintPoint {\n  readonly rA = new b2Vec2();\n  readonly rB = new b2Vec2();\n  normalImpulse = NaN;\n  tangentImpulse = NaN;\n  normalMass = NaN;\n  tangentMass = NaN;\n  velocityBias = NaN;\n\n  constructor() {\n    this.normalImpulse = 0.0;\n    this.tangentImpulse = 0.0;\n    this.normalMass = 0.0;\n    this.tangentMass = 0.0;\n    this.velocityBias = 0.0;\n  }\n\n  static MakeArray(length: number): b2VelocityConstraintPoint[] {\n    return b2MakeArray(length, (i: number) => new b2VelocityConstraintPoint());\n  }\n}\n\nexport class b2ContactVelocityConstraint {\n  readonly points: b2VelocityConstraintPoint[] = b2VelocityConstraintPoint.MakeArray(\n    b2_maxManifoldPoints,\n  );\n  readonly normal: b2Vec2 = new b2Vec2();\n  readonly tangent: b2Vec2 = new b2Vec2();\n  readonly normalMass: b2Mat22 = new b2Mat22();\n  readonly K: b2Mat22 = new b2Mat22();\n  indexA = 0;\n  indexB = 0;\n  invMassA = NaN;\n  invMassB = NaN;\n  invIA = NaN;\n  invIB = NaN;\n  friction = NaN;\n  restitution = NaN;\n  tangentSpeed = NaN;\n  pointCount = 0;\n  contactIndex = 0;\n\n  constructor() {\n    // this.invMassA = 0.0;\n    // this.invMassB = 0.0;\n    // this.invIA = 0.0;\n    // this.invIB = 0.0;\n    // this.friction = 0.0;\n    // this.restitution = 0.0;\n    // this.tangentSpeed = 0.0;\n  }\n\n  static MakeArray(length: number): b2ContactVelocityConstraint[] {\n    return b2MakeArray(length, (i: number) => new b2ContactVelocityConstraint());\n  }\n}\n\nexport class b2ContactPositionConstraint {\n  readonly localPoints: b2Vec2[] = b2Vec2.MakeArray(b2_maxManifoldPoints);\n  readonly localNormal: b2Vec2 = new b2Vec2();\n  readonly localPoint: b2Vec2 = new b2Vec2();\n  indexA = 0;\n  indexB = 0;\n  invMassA = NaN;\n  invMassB = NaN;\n  readonly localCenterA = new b2Vec2();\n  readonly localCenterB = new b2Vec2();\n  invIA = NaN;\n  invIB = NaN;\n  type = b2ManifoldType.e_unknown;\n  radiusA = NaN;\n  radiusB = NaN;\n  pointCount = 0;\n\n  constructor() {\n    // TODO: maybe it for write first -read\n    // this.invMassA = 0.0;\n    // this.invMassB = 0.0;\n    // this.invIA = 0.0;\n    // this.invIB = 0.0;\n    // this.radiusA = 0.0;\n    // this.radiusB = 0.0;\n  }\n\n  static MakeArray(length: number): b2ContactPositionConstraint[] {\n    return b2MakeArray(length, (i: number) => new b2ContactPositionConstraint());\n  }\n}\n\nexport class b2ContactSolverDef {\n  readonly step: b2TimeStep = new b2TimeStep();\n  contacts: b2Contact[] = ([null] as unknown) as b2Contact[];\n  count = 0;\n  positions: b2Position[] = ([null] as unknown) as b2Position[];\n  velocities: b2Velocity[] = ([null] as unknown) as b2Velocity[];\n}\n\nexport class b2PositionSolverManifold {\n  readonly normal: b2Vec2 = new b2Vec2();\n  readonly point: b2Vec2 = new b2Vec2();\n  separation = NaN;\n\n  private static Initialize_s_pointA = new b2Vec2();\n  private static Initialize_s_pointB = new b2Vec2();\n  private static Initialize_s_planePoint = new b2Vec2();\n  private static Initialize_s_clipPoint = new b2Vec2();\n\n  Initialize(\n    pc: b2ContactPositionConstraint,\n    xfA: b2Transform,\n    xfB: b2Transform,\n    index: number,\n  ): void {\n    const pointA: b2Vec2 = b2PositionSolverManifold.Initialize_s_pointA;\n    const pointB: b2Vec2 = b2PositionSolverManifold.Initialize_s_pointB;\n    const planePoint: b2Vec2 = b2PositionSolverManifold.Initialize_s_planePoint;\n    const clipPoint: b2Vec2 = b2PositionSolverManifold.Initialize_s_clipPoint;\n\n    !!B2_DEBUG && b2Assert(pc.pointCount > 0);\n\n    if (pc.type === b2ManifoldType.e_circles) {\n      // b2Vec2 pointA = b2Mul(xfA, pc->localPoint);\n      b2Transform.MulXV(xfA, pc.localPoint, pointA);\n      // b2Vec2 pointB = b2Mul(xfB, pc->localPoints[0]);\n      b2Transform.MulXV(xfB, pc.localPoints[0], pointB);\n      // normal = pointB - pointA;\n      // normal.Normalize();\n      b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\n      // point = 0.5f * (pointA + pointB);\n      b2Vec2.MidVV(pointA, pointB, this.point);\n      // separation = b2Dot(pointB - pointA, normal) - pc->radius;\n      this.separation =\n        b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.normal) -\n        pc.radiusA -\n        pc.radiusB;\n    } else if (pc.type === b2ManifoldType.e_faceA) {\n      // normal = b2Mul(xfA.q, pc->localNormal);\n      b2Rot.MulRV(xfA.q, pc.localNormal, this.normal);\n      // b2Vec2 planePoint = b2Mul(xfA, pc->localPoint);\n      b2Transform.MulXV(xfA, pc.localPoint, planePoint);\n\n      // b2Vec2 clipPoint = b2Mul(xfB, pc->localPoints[index]);\n      b2Transform.MulXV(xfB, pc.localPoints[index], clipPoint);\n      // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\n      this.separation =\n        b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) -\n        pc.radiusA -\n        pc.radiusB;\n      // point = clipPoint;\n      this.point.Copy(clipPoint);\n    } else if (pc.type === b2ManifoldType.e_faceB) {\n      // normal = b2Mul(xfB.q, pc->localNormal);\n      b2Rot.MulRV(xfB.q, pc.localNormal, this.normal);\n      // b2Vec2 planePoint = b2Mul(xfB, pc->localPoint);\n      b2Transform.MulXV(xfB, pc.localPoint, planePoint);\n\n      // b2Vec2 clipPoint = b2Mul(xfA, pc->localPoints[index]);\n      b2Transform.MulXV(xfA, pc.localPoints[index], clipPoint);\n      // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\n      this.separation =\n        b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) -\n        pc.radiusA -\n        pc.radiusB;\n      // point = clipPoint;\n      this.point.Copy(clipPoint);\n\n      // Ensure normal points from A to B\n      // normal = -normal;\n      this.normal.SelfNeg();\n    }\n  }\n}\n\nexport class b2ContactSolver {\n  readonly m_step: b2TimeStep = new b2TimeStep();\n  m_positions: b2Position[] = ([null] as unknown) as b2Position[];\n  m_velocities: b2Velocity[] = ([null] as unknown) as b2Velocity[];\n  readonly m_positionConstraints: b2ContactPositionConstraint[] = b2ContactPositionConstraint.MakeArray(\n    1024,\n  ); // TODO: b2Settings\n  readonly m_velocityConstraints: b2ContactVelocityConstraint[] = b2ContactVelocityConstraint.MakeArray(\n    1024,\n  ); // TODO: b2Settings\n  m_contacts: b2Contact[] = ([null] as unknown) as b2Contact[];\n  m_count = 0;\n\n  Initialize(def: b2ContactSolverDef): b2ContactSolver {\n    this.m_step.Copy(def.step);\n    this.m_count = def.count;\n    // TODO:\n    if (this.m_positionConstraints.length < this.m_count) {\n      const new_length: number = b2MaxInt(this.m_positionConstraints.length << 1, this.m_count);\n      while (this.m_positionConstraints.length < new_length) {\n        this.m_positionConstraints.push(new b2ContactPositionConstraint());\n      }\n    }\n    // TODO:\n    if (this.m_velocityConstraints.length < this.m_count) {\n      const new_length: number = b2MaxInt(this.m_velocityConstraints.length << 1, this.m_count);\n      while (this.m_velocityConstraints.length < new_length) {\n        this.m_velocityConstraints.push(new b2ContactVelocityConstraint());\n      }\n    }\n    this.m_positions = def.positions;\n    this.m_velocities = def.velocities;\n    this.m_contacts = def.contacts;\n\n    this.Initialize2();\n\n    return this;\n  }\n\n  Initialize2() {\n    // Initialize position independent portions of the constraints.\n    for (let i = 0; i < this.m_count; ++i) {\n      const contact: b2Contact = this.m_contacts[i];\n\n      const fixtureA: b2Fixture = contact.m_fixtureA;\n      const fixtureB: b2Fixture = contact.m_fixtureB;\n      const radiusA: number = fixtureA._shapeRadius;\n      const radiusB: number = fixtureB._shapeRadius;\n      const bodyA: b2Body = fixtureA.GetBody();\n      const bodyB: b2Body = fixtureB.GetBody();\n      const manifold: b2Manifold = contact.GetManifold();\n\n      const pointCount: number = manifold.pointCount;\n      !!B2_DEBUG && b2Assert(pointCount > 0);\n\n      const vc: b2ContactVelocityConstraint = this.m_velocityConstraints[i];\n      vc.friction = contact.m_friction;\n      vc.restitution = contact.m_restitution;\n      vc.tangentSpeed = contact.m_tangentSpeed;\n      vc.indexA = bodyA.m_islandIndex;\n      vc.indexB = bodyB.m_islandIndex;\n      vc.invMassA = bodyA.m_invMass;\n      vc.invMassB = bodyB.m_invMass;\n      vc.invIA = bodyA.m_invI;\n      vc.invIB = bodyB.m_invI;\n      vc.contactIndex = i;\n      vc.pointCount = pointCount;\n      vc.K.SetZero();\n      vc.normalMass.SetZero();\n\n      const pc: b2ContactPositionConstraint = this.m_positionConstraints[i];\n      pc.indexA = bodyA.m_islandIndex;\n      pc.indexB = bodyB.m_islandIndex;\n      pc.invMassA = bodyA.m_invMass;\n      pc.invMassB = bodyB.m_invMass;\n      pc.localCenterA.Copy(bodyA.m_sweep.localCenter);\n      pc.localCenterB.Copy(bodyB.m_sweep.localCenter);\n      pc.invIA = bodyA.m_invI;\n      pc.invIB = bodyB.m_invI;\n      pc.localNormal.Copy(manifold.localNormal);\n      pc.localPoint.Copy(manifold.localPoint);\n      pc.pointCount = pointCount;\n      pc.radiusA = radiusA;\n      pc.radiusB = radiusB;\n      pc.type = manifold.type;\n\n      for (let j = 0; j < pointCount; ++j) {\n        const cp: b2ManifoldPoint = manifold.points[j];\n        const vcp: b2VelocityConstraintPoint = vc.points[j];\n\n        if (this.m_step.warmStarting) {\n          vcp.normalImpulse = this.m_step.dtRatio * cp.normalImpulse;\n          vcp.tangentImpulse = this.m_step.dtRatio * cp.tangentImpulse;\n        } else {\n          vcp.normalImpulse = 0.0;\n          vcp.tangentImpulse = 0.0;\n        }\n\n        vcp.rA.SetZero();\n        vcp.rB.SetZero();\n        vcp.normalMass = 0.0;\n        vcp.tangentMass = 0.0;\n        vcp.velocityBias = 0.0;\n\n        pc.localPoints[j].Copy(cp.localPoint);\n      }\n    }\n  }\n\n  private static InitializeVelocityConstraints_s_xfA = new b2Transform();\n  private static InitializeVelocityConstraints_s_xfB = new b2Transform();\n  private static InitializeVelocityConstraints_s_worldManifold = new b2WorldManifold();\n\n  InitializeVelocityConstraints(): void {\n    const xfA = b2ContactSolver.InitializeVelocityConstraints_s_xfA;\n    const xfB = b2ContactSolver.InitializeVelocityConstraints_s_xfB;\n    const worldManifold = b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;\n\n    const k_maxConditionNumber = 1000.0;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const vc: b2ContactVelocityConstraint = this.m_velocityConstraints[i];\n      const pc: b2ContactPositionConstraint = this.m_positionConstraints[i];\n\n      const radiusA: number = pc.radiusA;\n      const radiusB: number = pc.radiusB;\n      const manifold: b2Manifold = this.m_contacts[vc.contactIndex].GetManifold();\n\n      const indexA: number = vc.indexA;\n      const indexB: number = vc.indexB;\n\n      const mA: number = vc.invMassA;\n      const mB: number = vc.invMassB;\n      const iA: number = vc.invIA;\n      const iB: number = vc.invIB;\n      const localCenterA: b2Vec2 = pc.localCenterA;\n      const localCenterB: b2Vec2 = pc.localCenterB;\n\n      const cA: b2Vec2 = this.m_positions[indexA].c;\n      const aA: number = this.m_positions[indexA].a;\n      const vA: b2Vec2 = this.m_velocities[indexA].v;\n      const wA: number = this.m_velocities[indexA].w;\n\n      const cB: b2Vec2 = this.m_positions[indexB].c;\n      const aB: number = this.m_positions[indexB].a;\n      const vB: b2Vec2 = this.m_velocities[indexB].v;\n      const wB: number = this.m_velocities[indexB].w;\n\n      !!B2_DEBUG && b2Assert(manifold.pointCount > 0);\n\n      xfA.q.SetAngle(aA);\n      xfB.q.SetAngle(aB);\n      b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\n      b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\n\n      worldManifold.Initialize(manifold, xfA, radiusA, xfB, radiusB);\n\n      vc.normal.Copy(worldManifold.normal);\n      b2Vec2.CrossVOne(vc.normal, vc.tangent); // compute from normal\n\n      const pointCount: number = vc.pointCount;\n      for (let j = 0; j < pointCount; ++j) {\n        const vcp: b2VelocityConstraintPoint = vc.points[j];\n\n        // vcp->rA = worldManifold.points[j] - cA;\n        b2Vec2.SubVV(worldManifold.points[j], cA, vcp.rA);\n        // vcp->rB = worldManifold.points[j] - cB;\n        b2Vec2.SubVV(worldManifold.points[j], cB, vcp.rB);\n\n        const rnA: number = b2Vec2.CrossVV(vcp.rA, vc.normal);\n        const rnB: number = b2Vec2.CrossVV(vcp.rB, vc.normal);\n\n        const kNormal: number = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n        vcp.normalMass = kNormal > 0 ? 1 / kNormal : 0;\n\n        // b2Vec2 tangent = b2Cross(vc->normal, 1.0f);\n        const tangent: b2Vec2 = vc.tangent; // precomputed from normal\n\n        const rtA: number = b2Vec2.CrossVV(vcp.rA, tangent);\n        const rtB: number = b2Vec2.CrossVV(vcp.rB, tangent);\n\n        const kTangent: number = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n        vcp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;\n\n        // Setup a velocity bias for restitution.\n        vcp.velocityBias = 0;\n        // float32 vRel = b2Dot(vc->normal, vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA));\n        const vRel: number = b2Vec2.DotVV(\n          vc.normal,\n          b2Vec2.SubVV(\n            b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0),\n            b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1),\n            b2Vec2.s_t0,\n          ),\n        );\n        if (vRel < -b2_velocityThreshold) {\n          vcp.velocityBias += -vc.restitution * vRel;\n        }\n      }\n\n      // If we have two points, then prepare the block solver.\n      if (vc.pointCount === 2 && g_blockSolve) {\n        const vcp1: b2VelocityConstraintPoint = vc.points[0];\n        const vcp2: b2VelocityConstraintPoint = vc.points[1];\n\n        const rn1A: number = b2Vec2.CrossVV(vcp1.rA, vc.normal);\n        const rn1B: number = b2Vec2.CrossVV(vcp1.rB, vc.normal);\n        const rn2A: number = b2Vec2.CrossVV(vcp2.rA, vc.normal);\n        const rn2B: number = b2Vec2.CrossVV(vcp2.rB, vc.normal);\n\n        const k11: number = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n        const k22: number = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n        const k12: number = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n        // Ensure a reasonable condition number.\n        // float32 k_maxConditionNumber = 1000.0f;\n        if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n          // K is safe to invert.\n          vc.K.ex.Set(k11, k12);\n          vc.K.ey.Set(k12, k22);\n          vc.K.GetInverse(vc.normalMass);\n        } else {\n          // The constraints are redundant, just use one.\n          // TODO_ERIN use deepest?\n          vc.pointCount = 1;\n        }\n      }\n    }\n  }\n\n  private static WarmStart_s_P = new b2Vec2();\n\n  WarmStart(): void {\n    const P: b2Vec2 = b2ContactSolver.WarmStart_s_P;\n\n    // Warm start.\n    for (let i = 0; i < this.m_count; ++i) {\n      const vc: b2ContactVelocityConstraint = this.m_velocityConstraints[i];\n\n      const indexA: number = vc.indexA;\n      const indexB: number = vc.indexB;\n      const mA: number = vc.invMassA;\n      const iA: number = vc.invIA;\n      const mB: number = vc.invMassB;\n      const iB: number = vc.invIB;\n      const pointCount: number = vc.pointCount;\n\n      const vA: b2Vec2 = this.m_velocities[indexA].v;\n      let wA: number = this.m_velocities[indexA].w;\n      const vB: b2Vec2 = this.m_velocities[indexB].v;\n      let wB: number = this.m_velocities[indexB].w;\n\n      const normal: b2Vec2 = vc.normal;\n      // b2Vec2 tangent = b2Cross(normal, 1.0f);\n      const tangent: b2Vec2 = vc.tangent; // precomputed from normal\n\n      for (let j = 0; j < pointCount; ++j) {\n        const vcp: b2VelocityConstraintPoint = vc.points[j];\n        // b2Vec2 P = vcp->normalImpulse * normal + vcp->tangentImpulse * tangent;\n        b2Vec2.AddVV(\n          b2Vec2.MulSV(vcp.normalImpulse, normal, b2Vec2.s_t0),\n          b2Vec2.MulSV(vcp.tangentImpulse, tangent, b2Vec2.s_t1),\n          P,\n        );\n        // wA -= iA * b2Cross(vcp->rA, P);\n        wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\n        // vA -= mA * P;\n        vA.SelfMulSub(mA, P);\n        // wB += iB * b2Cross(vcp->rB, P);\n        wB += iB * b2Vec2.CrossVV(vcp.rB, P);\n        // vB += mB * P;\n        vB.SelfMulAdd(mB, P);\n      }\n\n      // this.m_velocities[indexA].v = vA;\n      this.m_velocities[indexA].w = wA;\n      // this.m_velocities[indexB].v = vB;\n      this.m_velocities[indexB].w = wB;\n    }\n  }\n\n  private static SolveVelocityConstraints_s_dv = new b2Vec2();\n  private static SolveVelocityConstraints_s_dv1 = new b2Vec2();\n  private static SolveVelocityConstraints_s_dv2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\n  private static SolveVelocityConstraints_s_a = new b2Vec2();\n  private static SolveVelocityConstraints_s_b = new b2Vec2();\n  private static SolveVelocityConstraints_s_x = new b2Vec2();\n  private static SolveVelocityConstraints_s_d = new b2Vec2();\n  private static SolveVelocityConstraints_s_P1 = new b2Vec2();\n  private static SolveVelocityConstraints_s_P2 = new b2Vec2();\n  private static SolveVelocityConstraints_s_P1P2 = new b2Vec2();\n\n  SolveVelocityConstraints(): void {\n    const dv: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_dv;\n    const dv1: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_dv1;\n    const dv2: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_dv2;\n    const P: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_P;\n    const a: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_a;\n    const b: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_b;\n    const x: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_x;\n    const d: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_d;\n    const P1: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_P1;\n    const P2: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_P2;\n    const P1P2: b2Vec2 = b2ContactSolver.SolveVelocityConstraints_s_P1P2;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const vc: b2ContactVelocityConstraint = this.m_velocityConstraints[i];\n\n      const indexA: number = vc.indexA;\n      const indexB: number = vc.indexB;\n      const mA: number = vc.invMassA;\n      const iA: number = vc.invIA;\n      const mB: number = vc.invMassB;\n      const iB: number = vc.invIB;\n      const pointCount: number = vc.pointCount;\n\n      const vA: b2Vec2 = this.m_velocities[indexA].v;\n      let wA: number = this.m_velocities[indexA].w;\n      const vB: b2Vec2 = this.m_velocities[indexB].v;\n      let wB: number = this.m_velocities[indexB].w;\n\n      // b2Vec2 normal = vc->normal;\n      const normal: b2Vec2 = vc.normal;\n      // b2Vec2 tangent = b2Cross(normal, 1.0f);\n      const tangent: b2Vec2 = vc.tangent; // precomputed from normal\n      const friction: number = vc.friction;\n\n      !!B2_DEBUG && b2Assert(pointCount === 1 || pointCount === 2);\n\n      // Solve tangent constraints first because non-penetration is more important\n      // than friction.\n      for (let j = 0; j < pointCount; ++j) {\n        const vcp: b2VelocityConstraintPoint = vc.points[j];\n\n        // Relative velocity at contact\n        // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\n        b2Vec2.SubVV(\n          b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0),\n          b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1),\n          dv,\n        );\n\n        // Compute tangent force\n        // float32 vt = b2Dot(dv, tangent) - vc->tangentSpeed;\n        const vt: number = b2Vec2.DotVV(dv, tangent) - vc.tangentSpeed;\n        let lambda: number = vcp.tangentMass * -vt;\n\n        // b2Clamp the accumulated force\n        const maxFriction: number = friction * vcp.normalImpulse;\n        const newImpulse: number = b2Clamp(vcp.tangentImpulse + lambda, -maxFriction, maxFriction);\n        lambda = newImpulse - vcp.tangentImpulse;\n        vcp.tangentImpulse = newImpulse;\n\n        // Apply contact impulse\n        // b2Vec2 P = lambda * tangent;\n        b2Vec2.MulSV(lambda, tangent, P);\n\n        // vA -= mA * P;\n        vA.SelfMulSub(mA, P);\n        // wA -= iA * b2Cross(vcp->rA, P);\n        wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\n\n        // vB += mB * P;\n        vB.SelfMulAdd(mB, P);\n        // wB += iB * b2Cross(vcp->rB, P);\n        wB += iB * b2Vec2.CrossVV(vcp.rB, P);\n      }\n\n      // Solve normal constraints\n      if (vc.pointCount === 1 || g_blockSolve === false) {\n        for (let j = 0; j < pointCount; ++j) {\n          const vcp: b2VelocityConstraintPoint = vc.points[j];\n\n          // Relative velocity at contact\n          // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\n          b2Vec2.SubVV(\n            b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0),\n            b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1),\n            dv,\n          );\n\n          // Compute normal impulse\n          // float32 vn = b2Dot(dv, normal);\n          const vn: number = b2Vec2.DotVV(dv, normal);\n          let lambda: number = -vcp.normalMass * (vn - vcp.velocityBias);\n\n          // b2Clamp the accumulated impulse\n          // float32 newImpulse = b2Max(vcp->normalImpulse + lambda, 0.0f);\n          const newImpulse: number = b2Max(vcp.normalImpulse + lambda, 0);\n          lambda = newImpulse - vcp.normalImpulse;\n          vcp.normalImpulse = newImpulse;\n\n          // Apply contact impulse\n          // b2Vec2 P = lambda * normal;\n          b2Vec2.MulSV(lambda, normal, P);\n          // vA -= mA * P;\n          vA.SelfMulSub(mA, P);\n          // wA -= iA * b2Cross(vcp->rA, P);\n          wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\n\n          // vB += mB * P;\n          vB.SelfMulAdd(mB, P);\n          // wB += iB * b2Cross(vcp->rB, P);\n          wB += iB * b2Vec2.CrossVV(vcp.rB, P);\n        }\n      } else {\n        // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on Box2D_Lite).\n        // Build the mini LCP for this contact patch\n        //\n        // vn = A * x + b, vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2\n        //\n        // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n        // b = vn0 - velocityBias\n        //\n        // The system is solved using the \"Total enumeration method\" (s. Murty). The complementary constraint vn_i * x_i\n        // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D contact problem the cases\n        // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be tested. The first valid\n        // solution that satisfies the problem is chosen.\n        //\n        // In order to account of the accumulated impulse 'a' (because of the iterative nature of the solver which only requires\n        // that the accumulated impulse is clamped and not the incremental impulse) we change the impulse variable (x_i).\n        //\n        // Substitute:\n        //\n        // x = a + d\n        //\n        // a := old total impulse\n        // x := new total impulse\n        // d := incremental impulse\n        //\n        // For the current iteration we extend the formula for the incremental impulse\n        // to compute the new total impulse:\n        //\n        // vn = A * d + b\n        //    = A * (x - a) + b\n        //    = A * x + b - A * a\n        //    = A * x + b'\n        // b' = b - A * a;\n\n        const cp1: b2VelocityConstraintPoint = vc.points[0];\n        const cp2: b2VelocityConstraintPoint = vc.points[1];\n\n        // b2Vec2 a(cp1->normalImpulse, cp2->normalImpulse);\n        a.Set(cp1.normalImpulse, cp2.normalImpulse);\n        !!B2_DEBUG && b2Assert(a.x >= 0 && a.y >= 0);\n\n        // Relative velocity at contact\n        // b2Vec2 dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\n        b2Vec2.SubVV(\n          b2Vec2.AddVCrossSV(vB, wB, cp1.rB, b2Vec2.s_t0),\n          b2Vec2.AddVCrossSV(vA, wA, cp1.rA, b2Vec2.s_t1),\n          dv1,\n        );\n        // b2Vec2 dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\n        b2Vec2.SubVV(\n          b2Vec2.AddVCrossSV(vB, wB, cp2.rB, b2Vec2.s_t0),\n          b2Vec2.AddVCrossSV(vA, wA, cp2.rA, b2Vec2.s_t1),\n          dv2,\n        );\n\n        // Compute normal velocity\n        // float32 vn1 = b2Dot(dv1, normal);\n        let vn1: number = b2Vec2.DotVV(dv1, normal);\n        // float32 vn2 = b2Dot(dv2, normal);\n        let vn2: number = b2Vec2.DotVV(dv2, normal);\n\n        // b2Vec2 b;\n        b.x = vn1 - cp1.velocityBias;\n        b.y = vn2 - cp2.velocityBias;\n\n        // Compute b'\n        // b -= b2Mul(vc->K, a);\n        b.SelfSub(b2Mat22.MulMV(vc.K, a, b2Vec2.s_t0));\n\n        /*\n                #if B2_DEBUG_SOLVER === 1\n                const k_errorTol: number = 0.001;\n                #endif\n                */\n\n        for (;;) {\n          //\n          // Case 1: vn = 0\n          //\n          // 0 = A * x + b'\n          //\n          // Solve for x:\n          //\n          // x = - inv(A) * b'\n          //\n          // b2Vec2 x = - b2Mul(vc->normalMass, b);\n          b2Mat22.MulMV(vc.normalMass, b, x).SelfNeg();\n\n          if (x.x >= 0 && x.y >= 0) {\n            // Get the incremental impulse\n            // b2Vec2 d = x - a;\n            b2Vec2.SubVV(x, a, d);\n\n            // Apply incremental impulse\n            // b2Vec2 P1 = d.x * normal;\n            b2Vec2.MulSV(d.x, normal, P1);\n            // b2Vec2 P2 = d.y * normal;\n            b2Vec2.MulSV(d.y, normal, P2);\n            b2Vec2.AddVV(P1, P2, P1P2);\n            // vA -= mA * (P1 + P2);\n            vA.SelfMulSub(mA, P1P2);\n            // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\n            wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\n\n            // vB += mB * (P1 + P2);\n            vB.SelfMulAdd(mB, P1P2);\n            // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\n            wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\n\n            // Accumulate\n            cp1.normalImpulse = x.x;\n            cp2.normalImpulse = x.y;\n\n            /*\n                        #if B2_DEBUG_SOLVER === 1\n                        // Postconditions\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\n\n                        // Compute normal velocity\n                        vn1 = b2Dot(dv1, normal);\n                        vn2 = b2Dot(dv2, normal);\n\n                        b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\n                        b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\n                        #endif\n                        */\n            break;\n          }\n\n          //\n          // Case 2: vn1 = 0 and x2 = 0\n          //\n          //   0 = a11 * x1 + a12 * 0 + b1'\n          // vn2 = a21 * x1 + a22 * 0 + b2'\n          //\n          x.x = -cp1.normalMass * b.x;\n          x.y = 0;\n          vn1 = 0;\n          vn2 = vc.K.ex.y * x.x + b.y;\n\n          if (x.x >= 0 && vn2 >= 0) {\n            // Get the incremental impulse\n            // b2Vec2 d = x - a;\n            b2Vec2.SubVV(x, a, d);\n\n            // Apply incremental impulse\n            // b2Vec2 P1 = d.x * normal;\n            b2Vec2.MulSV(d.x, normal, P1);\n            // b2Vec2 P2 = d.y * normal;\n            b2Vec2.MulSV(d.y, normal, P2);\n            b2Vec2.AddVV(P1, P2, P1P2);\n            // vA -= mA * (P1 + P2);\n            vA.SelfMulSub(mA, P1P2);\n            // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\n            wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\n\n            // vB += mB * (P1 + P2);\n            vB.SelfMulAdd(mB, P1P2);\n            // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\n            wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\n\n            // Accumulate\n            cp1.normalImpulse = x.x;\n            cp2.normalImpulse = x.y;\n\n            /*\n                        #if B2_DEBUG_SOLVER === 1\n                        // Postconditions\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\n\n                        // Compute normal velocity\n                        vn1 = b2Dot(dv1, normal);\n\n                        b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\n                        #endif\n                        */\n            break;\n          }\n\n          //\n          // Case 3: vn2 = 0 and x1 = 0\n          //\n          // vn1 = a11 * 0 + a12 * x2 + b1'\n          //   0 = a21 * 0 + a22 * x2 + b2'\n          //\n          x.x = 0;\n          x.y = -cp2.normalMass * b.y;\n          vn1 = vc.K.ey.x * x.y + b.x;\n          vn2 = 0;\n\n          if (x.y >= 0 && vn1 >= 0) {\n            // Resubstitute for the incremental impulse\n            // b2Vec2 d = x - a;\n            b2Vec2.SubVV(x, a, d);\n\n            // Apply incremental impulse\n            // b2Vec2 P1 = d.x * normal;\n            b2Vec2.MulSV(d.x, normal, P1);\n            // b2Vec2 P2 = d.y * normal;\n            b2Vec2.MulSV(d.y, normal, P2);\n            b2Vec2.AddVV(P1, P2, P1P2);\n            // vA -= mA * (P1 + P2);\n            vA.SelfMulSub(mA, P1P2);\n            // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\n            wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\n\n            // vB += mB * (P1 + P2);\n            vB.SelfMulAdd(mB, P1P2);\n            // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\n            wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\n\n            // Accumulate\n            cp1.normalImpulse = x.x;\n            cp2.normalImpulse = x.y;\n\n            /*\n                        #if B2_DEBUG_SOLVER === 1\n                        // Postconditions\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\n\n                        // Compute normal velocity\n                        vn2 = b2Dot(dv2, normal);\n\n                        b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\n                        #endif\n                        */\n            break;\n          }\n\n          //\n          // Case 4: x1 = 0 and x2 = 0\n          //\n          // vn1 = b1\n          // vn2 = b2;\n          x.x = 0;\n          x.y = 0;\n          vn1 = b.x;\n          vn2 = b.y;\n\n          if (vn1 >= 0 && vn2 >= 0) {\n            // Resubstitute for the incremental impulse\n            // b2Vec2 d = x - a;\n            b2Vec2.SubVV(x, a, d);\n\n            // Apply incremental impulse\n            // b2Vec2 P1 = d.x * normal;\n            b2Vec2.MulSV(d.x, normal, P1);\n            // b2Vec2 P2 = d.y * normal;\n            b2Vec2.MulSV(d.y, normal, P2);\n            b2Vec2.AddVV(P1, P2, P1P2);\n            // vA -= mA * (P1 + P2);\n            vA.SelfMulSub(mA, P1P2);\n            // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\n            wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\n\n            // vB += mB * (P1 + P2);\n            vB.SelfMulAdd(mB, P1P2);\n            // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\n            wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\n\n            // Accumulate\n            cp1.normalImpulse = x.x;\n            cp2.normalImpulse = x.y;\n\n            break;\n          }\n\n          // No solution, give up. This is hit sometimes, but it doesn't seem to matter.\n          break;\n        }\n      }\n\n      // this.m_velocities[indexA].v = vA;\n      this.m_velocities[indexA].w = wA;\n      // this.m_velocities[indexB].v = vB;\n      this.m_velocities[indexB].w = wB;\n    }\n  }\n\n  StoreImpulses(): void {\n    for (let i = 0; i < this.m_count; ++i) {\n      const vc: b2ContactVelocityConstraint = this.m_velocityConstraints[i];\n      const manifold: b2Manifold = this.m_contacts[vc.contactIndex].GetManifold();\n\n      for (let j = 0; j < vc.pointCount; ++j) {\n        manifold.points[j].normalImpulse = vc.points[j].normalImpulse;\n        manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse;\n      }\n    }\n  }\n\n  private static SolvePositionConstraints_s_xfA = new b2Transform();\n  private static SolvePositionConstraints_s_xfB = new b2Transform();\n  private static SolvePositionConstraints_s_psm = new b2PositionSolverManifold();\n  private static SolvePositionConstraints_s_rA = new b2Vec2();\n  private static SolvePositionConstraints_s_rB = new b2Vec2();\n  private static SolvePositionConstraints_s_P = new b2Vec2();\n\n  SolvePositionConstraints(): boolean {\n    const xfA: b2Transform = b2ContactSolver.SolvePositionConstraints_s_xfA;\n    const xfB: b2Transform = b2ContactSolver.SolvePositionConstraints_s_xfB;\n    const psm: b2PositionSolverManifold = b2ContactSolver.SolvePositionConstraints_s_psm;\n    const rA: b2Vec2 = b2ContactSolver.SolvePositionConstraints_s_rA;\n    const rB: b2Vec2 = b2ContactSolver.SolvePositionConstraints_s_rB;\n    const P: b2Vec2 = b2ContactSolver.SolvePositionConstraints_s_P;\n\n    let minSeparation = 0;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const pc: b2ContactPositionConstraint = this.m_positionConstraints[i];\n\n      const indexA: number = pc.indexA;\n      const indexB: number = pc.indexB;\n      const localCenterA: b2Vec2 = pc.localCenterA;\n      const mA: number = pc.invMassA;\n      const iA: number = pc.invIA;\n      const localCenterB: b2Vec2 = pc.localCenterB;\n      const mB: number = pc.invMassB;\n      const iB: number = pc.invIB;\n      const pointCount: number = pc.pointCount;\n\n      const cA: b2Vec2 = this.m_positions[indexA].c;\n      let aA: number = this.m_positions[indexA].a;\n\n      const cB: b2Vec2 = this.m_positions[indexB].c;\n      let aB: number = this.m_positions[indexB].a;\n\n      // Solve normal constraints\n      for (let j = 0; j < pointCount; ++j) {\n        xfA.q.SetAngle(aA);\n        xfB.q.SetAngle(aB);\n        b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\n        b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\n\n        psm.Initialize(pc, xfA, xfB, j);\n        const normal: b2Vec2 = psm.normal;\n\n        const point: b2Vec2 = psm.point;\n        const separation: number = psm.separation;\n\n        // b2Vec2 rA = point - cA;\n        b2Vec2.SubVV(point, cA, rA);\n        // b2Vec2 rB = point - cB;\n        b2Vec2.SubVV(point, cB, rB);\n\n        // Track max constraint error.\n        minSeparation = b2Min(minSeparation, separation);\n\n        // Prevent large corrections and allow slop.\n        const C: number = b2Clamp(\n          b2_baumgarte * (separation + b2_linearSlop),\n          -b2_maxLinearCorrection,\n          0,\n        );\n\n        // Compute the effective mass.\n        // float32 rnA = b2Cross(rA, normal);\n        const rnA: number = b2Vec2.CrossVV(rA, normal);\n        // float32 rnB = b2Cross(rB, normal);\n        const rnB: number = b2Vec2.CrossVV(rB, normal);\n        // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n        const K: number = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n        // Compute normal impulse\n        const impulse: number = K > 0 ? -C / K : 0;\n\n        // b2Vec2 P = impulse * normal;\n        b2Vec2.MulSV(impulse, normal, P);\n\n        // cA -= mA * P;\n        cA.SelfMulSub(mA, P);\n        // aA -= iA * b2Cross(rA, P);\n        aA -= iA * b2Vec2.CrossVV(rA, P);\n\n        // cB += mB * P;\n        cB.SelfMulAdd(mB, P);\n        // aB += iB * b2Cross(rB, P);\n        aB += iB * b2Vec2.CrossVV(rB, P);\n      }\n\n      // this.m_positions[indexA].c = cA;\n      this.m_positions[indexA].a = aA;\n\n      // this.m_positions[indexB].c = cB;\n      this.m_positions[indexB].a = aB;\n    }\n\n    // We can't expect minSpeparation >= -b2_linearSlop because we don't\n    // push the separation above -b2_linearSlop.\n    return minSeparation > -3 * b2_linearSlop;\n  }\n\n  private static SolveTOIPositionConstraints_s_xfA = new b2Transform();\n  private static SolveTOIPositionConstraints_s_xfB = new b2Transform();\n  private static SolveTOIPositionConstraints_s_psm = new b2PositionSolverManifold();\n  private static SolveTOIPositionConstraints_s_rA = new b2Vec2();\n  private static SolveTOIPositionConstraints_s_rB = new b2Vec2();\n  private static SolveTOIPositionConstraints_s_P = new b2Vec2();\n\n  SolveTOIPositionConstraints(toiIndexA: number, toiIndexB: number): boolean {\n    const xfA: b2Transform = b2ContactSolver.SolveTOIPositionConstraints_s_xfA;\n    const xfB: b2Transform = b2ContactSolver.SolveTOIPositionConstraints_s_xfB;\n    const psm: b2PositionSolverManifold = b2ContactSolver.SolveTOIPositionConstraints_s_psm;\n    const rA: b2Vec2 = b2ContactSolver.SolveTOIPositionConstraints_s_rA;\n    const rB: b2Vec2 = b2ContactSolver.SolveTOIPositionConstraints_s_rB;\n    const P: b2Vec2 = b2ContactSolver.SolveTOIPositionConstraints_s_P;\n\n    let minSeparation = 0;\n\n    for (let i = 0; i < this.m_count; ++i) {\n      const pc: b2ContactPositionConstraint = this.m_positionConstraints[i];\n\n      const indexA: number = pc.indexA;\n      const indexB: number = pc.indexB;\n      const localCenterA: b2Vec2 = pc.localCenterA;\n      const localCenterB: b2Vec2 = pc.localCenterB;\n      const pointCount: number = pc.pointCount;\n\n      let mA = 0;\n      let iA = 0;\n      if (indexA === toiIndexA || indexA === toiIndexB) {\n        mA = pc.invMassA;\n        iA = pc.invIA;\n      }\n\n      let mB = 0;\n      let iB = 0;\n      if (indexB === toiIndexA || indexB === toiIndexB) {\n        mB = pc.invMassB;\n        iB = pc.invIB;\n      }\n\n      const cA: b2Vec2 = this.m_positions[indexA].c;\n      let aA: number = this.m_positions[indexA].a;\n\n      const cB: b2Vec2 = this.m_positions[indexB].c;\n      let aB: number = this.m_positions[indexB].a;\n\n      // Solve normal constraints\n      for (let j = 0; j < pointCount; ++j) {\n        xfA.q.SetAngle(aA);\n        xfB.q.SetAngle(aB);\n        b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\n        b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\n\n        psm.Initialize(pc, xfA, xfB, j);\n        const normal: b2Vec2 = psm.normal;\n\n        const point: b2Vec2 = psm.point;\n        const separation: number = psm.separation;\n\n        // b2Vec2 rA = point - cA;\n        b2Vec2.SubVV(point, cA, rA);\n        // b2Vec2 rB = point - cB;\n        b2Vec2.SubVV(point, cB, rB);\n\n        // Track max constraint error.\n        minSeparation = b2Min(minSeparation, separation);\n\n        // Prevent large corrections and allow slop.\n        const C: number = b2Clamp(\n          b2_toiBaumgarte * (separation + b2_linearSlop),\n          -b2_maxLinearCorrection,\n          0,\n        );\n\n        // Compute the effective mass.\n        // float32 rnA = b2Cross(rA, normal);\n        const rnA: number = b2Vec2.CrossVV(rA, normal);\n        // float32 rnB = b2Cross(rB, normal);\n        const rnB: number = b2Vec2.CrossVV(rB, normal);\n        // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n        const K: number = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n        // Compute normal impulse\n        const impulse: number = K > 0 ? -C / K : 0;\n\n        // b2Vec2 P = impulse * normal;\n        b2Vec2.MulSV(impulse, normal, P);\n\n        // cA -= mA * P;\n        cA.SelfMulSub(mA, P);\n        // aA -= iA * b2Cross(rA, P);\n        aA -= iA * b2Vec2.CrossVV(rA, P);\n\n        // cB += mB * P;\n        cB.SelfMulAdd(mB, P);\n        // aB += iB * b2Cross(rB, P);\n        aB += iB * b2Vec2.CrossVV(rB, P);\n      }\n\n      // this.m_positions[indexA].c = cA;\n      this.m_positions[indexA].a = aA;\n\n      // this.m_positions[indexB].c = cB;\n      this.m_positions[indexB].a = aB;\n    }\n\n    // We can't expect minSpeparation >= -b2_linearSlop because we don't\n    // push the separation above -b2_linearSlop.\n    return minSeparation >= -1.5 * b2_linearSlop;\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Assert,\n  b2_angularSleepTolerance,\n  b2_linearSleepTolerance,\n  b2_maxFloat,\n  b2_maxRotation,\n  b2_maxRotationSquared,\n  b2_maxTranslation,\n  b2_maxTranslationSquared,\n  b2_timeToSleep,\n} from '../common/b2Settings';\nimport { b2Abs, b2MaxInt, b2Min, b2Vec2 } from '../common/b2Math';\nimport { b2Timer } from '../common/b2Timer';\nimport { b2Contact } from './contacts/b2Contact';\nimport {\n  b2ContactSolver,\n  b2ContactSolverDef,\n  b2ContactVelocityConstraint,\n} from './contacts/b2ContactSolver';\nimport { b2Joint } from './joints/b2Joint';\nimport { b2Body, b2BodyType } from './b2Body';\nimport { b2Position, b2Profile, b2SolverData, b2TimeStep, b2Velocity } from './b2TimeStep';\nimport { b2ContactImpulse, b2ContactListener } from './b2WorldCallbacks';\n\n/*\nPosition Correction Notes\n=========================\nI tried the several algorithms for position correction of the 2D revolute joint.\nI looked at these systems:\n- simple pendulum (1m diameter sphere on massless 5m stick) with initial angular velocity of 100 rad/s.\n- suspension bridge with 30 1m long planks of length 1m.\n- multi-link chain with 30 1m long links.\n\nHere are the algorithms:\n\nBaumgarte - A fraction of the position error is added to the velocity error. There is no\nseparate position solver.\n\nPseudo Velocities - After the velocity solver and position integration,\nthe position error, Jacobian, and effective mass are recomputed. Then\nthe velocity constraints are solved with pseudo velocities and a fraction\nof the position error is added to the pseudo velocity error. The pseudo\nvelocities are initialized to zero and there is no warm-starting. After\nthe position solver, the pseudo velocities are added to the positions.\nThis is also called the First Order World method or the Position LCP method.\n\nModified Nonlinear Gauss-Seidel (NGS) - Like Pseudo Velocities except the\nposition error is re-computed for each constraint and the positions are updated\nafter the constraint is solved. The radius vectors (aka Jacobians) are\nre-computed too (otherwise the algorithm has horrible instability). The pseudo\nvelocity states are not needed because they are effectively zero at the beginning\nof each iteration. Since we have the current position error, we allow the\niterations to terminate early if the error becomes smaller than b2_linearSlop.\n\nFull NGS or just NGS - Like Modified NGS except the effective mass are re-computed\neach time a constraint is solved.\n\nHere are the results:\nBaumgarte - this is the cheapest algorithm but it has some stability problems,\nespecially with the bridge. The chain links separate easily close to the root\nand they jitter as they struggle to pull together. This is one of the most common\nmethods in the field. The big drawback is that the position correction artificially\naffects the momentum, thus leading to instabilities and false bounce. I used a\nbias factor of 0.2. A larger bias factor makes the bridge less stable, a smaller\nfactor makes joints and contacts more spongy.\n\nPseudo Velocities - the is more stable than the Baumgarte method. The bridge is\nstable. However, joints still separate with large angular velocities. Drag the\nsimple pendulum in a circle quickly and the joint will separate. The chain separates\neasily and does not recover. I used a bias factor of 0.2. A larger value lead to\nthe bridge collapsing when a heavy cube drops on it.\n\nModified NGS - this algorithm is better in some ways than Baumgarte and Pseudo\nVelocities, but in other ways it is worse. The bridge and chain are much more\nstable, but the simple pendulum goes unstable at high angular velocities.\n\nFull NGS - stable in all tests. The joints display good stiffness. The bridge\nstill sags, but this is better than infinite forces.\n\nRecommendations\nPseudo Velocities are not really worthwhile because the bridge and chain cannot\nrecover from joint separation. In other cases the benefit over Baumgarte is small.\n\nModified NGS is not a robust method for the revolute joint due to the violent\ninstability seen in the simple pendulum. Perhaps it is viable with other constraint\ntypes, especially scalar constraints where the effective mass is a scalar.\n\nThis leaves Baumgarte and Full NGS. Baumgarte has small, but manageable instabilities\nand is very fast. I don't think we can escape Baumgarte, especially in highly\ndemanding cases where high constraint fidelity is not needed.\n\nFull NGS is robust and easy on the eyes. I recommend this as an option for\nhigher fidelity simulation and certainly for suspension bridges and long chains.\nFull NGS might be a good choice for ragdolls, especially motorized ragdolls where\njoint separation can be problematic. The number of NGS iterations can be reduced\nfor better performance without harming robustness much.\n\nEach joint in a can be handled differently in the position solver. So I recommend\na system where the user can select the algorithm on a per joint basis. I would\nprobably default to the slower Full NGS and let the user select the faster\nBaumgarte method in performance critical scenarios.\n*/\n\nconst s_timer = new b2Timer();\nconst s_solverData = new b2SolverData();\nconst s_contactSolverDef = new b2ContactSolverDef();\nconst s_contactSolver = new b2ContactSolver();\nconst s_translation = new b2Vec2();\n\n/*\nCache Performance\n\nThe Box2D solvers are dominated by cache misses. Data structures are designed\nto increase the number of cache hits. Much of misses are due to random access\nto body data. The constraint structures are iterated over linearly, which leads\nto few cache misses.\n\nThe bodies are not accessed during iteration. Instead read only data, such as\nthe mass values are stored with the constraints. The mutable data are the constraint\nimpulses and the bodies velocities/positions. The impulses are held inside the\nconstraint structures. The body velocities/positions are held in compact, temporary\narrays to increase the number of cache hits. Linear and angular velocity are\nstored in a single array since multiple arrays lead to multiple misses.\n*/\n\n/*\n2D Rotation\n\nR = [cos(theta) -sin(theta)]\n    [sin(theta) cos(theta) ]\n\nthetaDot = omega\n\nLet q1 = cos(theta), q2 = sin(theta).\nR = [q1 -q2]\n    [q2  q1]\n\nq1Dot = -thetaDot * q2\nq2Dot = thetaDot * q1\n\nq1_new = q1_old - dt * w * q2\nq2_new = q2_old + dt * w * q1\nthen normalize.\n\nThis might be faster than computing sin+cos.\nHowever, we can compute sin+cos of the same angle fast.\n*/\n\nexport class b2Island {\n  m_listener = b2ContactListener.b2_defaultListener;\n\n  readonly m_bodies: b2Body[] = /*1024*/ ([null] as unknown) as b2Body[]; // TODO: b2Settings\n  readonly m_contacts: b2Contact[] = /*1024*/ ([null] as unknown) as b2Contact[]; // TODO: b2Settings\n  readonly m_joints: b2Joint[] = /*1024*/ ([null] as unknown) as b2Joint[]; // TODO: b2Settings\n\n  readonly m_positions: b2Position[] = b2Position.MakeArray(1024); // TODO: b2Settings\n  readonly m_velocities: b2Velocity[] = b2Velocity.MakeArray(1024); // TODO: b2Settings\n\n  m_bodyCount = 0;\n  m_jointCount = 0;\n  m_contactCount = 0;\n\n  m_bodyCapacity = 0;\n  m_contactCapacity = 0;\n  m_jointCapacity = 0;\n\n  Initialize(\n    bodyCapacity: number,\n    contactCapacity: number,\n    jointCapacity: number,\n    listener: b2ContactListener,\n  ): void {\n    this.m_bodyCapacity = bodyCapacity | 0;\n    this.m_contactCapacity = contactCapacity | 0;\n    this.m_jointCapacity = jointCapacity | 0;\n    this.m_bodyCount = 0;\n    this.m_contactCount = 0;\n    this.m_jointCount = 0;\n\n    this.m_listener = listener;\n\n    // TODO:\n    while (this.m_bodies.length < bodyCapacity) {\n      this.m_bodies[this.m_bodies.length] = (null as unknown) as b2Body;\n    }\n    // TODO:\n    while (this.m_contacts.length < contactCapacity) {\n      this.m_contacts[this.m_contacts.length] = (null as unknown) as b2Contact;\n    }\n    // TODO:\n    while (this.m_joints.length < jointCapacity) {\n      this.m_joints[this.m_joints.length] = (null as unknown) as b2Joint;\n    }\n\n    // TODO:\n    if (this.m_positions.length < bodyCapacity) {\n      const new_length = b2MaxInt(this.m_positions.length << 1, bodyCapacity);\n      while (this.m_positions.length < new_length) {\n        this.m_positions[this.m_positions.length] = new b2Position();\n      }\n    }\n    // TODO:\n    if (this.m_velocities.length < bodyCapacity) {\n      const new_length = b2MaxInt(this.m_velocities.length << 1, bodyCapacity);\n      while (this.m_velocities.length < new_length) {\n        this.m_velocities[this.m_velocities.length] = new b2Velocity();\n      }\n    }\n  }\n\n  Clear(): void {\n    this.m_bodyCount = 0;\n    this.m_contactCount = 0;\n    this.m_jointCount = 0;\n  }\n\n  AddBody(body: b2Body): void {\n    !!B2_DEBUG && b2Assert(this.m_bodyCount < this.m_bodyCapacity);\n    body.m_islandIndex = this.m_bodyCount;\n    this.m_bodies[this.m_bodyCount++] = body;\n  }\n\n  AddContact(contact: b2Contact): void {\n    !!B2_DEBUG && b2Assert(this.m_contactCount < this.m_contactCapacity);\n    this.m_contacts[this.m_contactCount++] = contact;\n  }\n\n  AddJoint(joint: b2Joint): void {\n    !!B2_DEBUG && b2Assert(this.m_jointCount < this.m_jointCapacity);\n    this.m_joints[this.m_jointCount++] = joint;\n  }\n\n  Solve(profile: b2Profile, step: b2TimeStep, gravity: b2Vec2, allowSleep: boolean): number {\n    const timer = s_timer.Reset();\n\n    const bodyCount = this.m_bodyCount;\n    const m_bodies = this.m_bodies;\n    const m_positions = this.m_positions;\n    const m_velocities = this.m_velocities;\n    let flags = 0;\n\n    const h = step.dt;\n\n    // Integrate velocities and apply damping. Initialize the body state.\n    for (let i = 0; i < bodyCount; ++i) {\n      const b = m_bodies[i];\n\n      // const c: b2Vec2 =\n      m_positions[i].c.Copy(b.m_sweep.c);\n      const a: number = b.m_sweep.a;\n      const v: b2Vec2 = m_velocities[i].v.Copy(b.m_linearVelocity);\n      let w: number = b.m_angularVelocity;\n\n      // Store positions for continuous collision.\n      b.m_sweep.c0.Copy(b.m_sweep.c);\n      b.m_sweep.a0 = b.m_sweep.a;\n\n      if (b.m_type === b2BodyType.b2_dynamicBody) {\n        // Integrate velocities.\n        v.x += h * (b.m_gravityScale * gravity.x + b.m_invMass * b.m_force.x);\n        v.y += h * (b.m_gravityScale * gravity.y + b.m_invMass * b.m_force.y);\n        w += h * b.m_invI * b.m_torque;\n\n        // Apply damping.\n        // ODE: dv/dt + c * v = 0\n        // Solution: v(t) = v0 * exp(-c * t)\n        // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n        // v2 = exp(-c * dt) * v1\n        // Pade approximation:\n        // v2 = v1 * 1 / (1 + c * dt)\n        v.SelfMul(1.0 / (1.0 + h * b.m_linearDamping));\n        w *= 1.0 / (1.0 + h * b.m_angularDamping);\n      }\n\n      // this.m_positions[i].c = c;\n      m_positions[i].a = a;\n      // this.m_velocities[i].v = v;\n      m_velocities[i].w = w;\n    }\n\n    timer.Reset();\n\n    // Solver data\n    const solverData = s_solverData;\n    solverData.step.Copy(step);\n    solverData.positions = this.m_positions;\n    solverData.velocities = this.m_velocities;\n\n    // Initialize velocity constraints.\n    const contactSolverDef = s_contactSolverDef;\n    contactSolverDef.step.Copy(step);\n    contactSolverDef.contacts = this.m_contacts;\n    contactSolverDef.count = this.m_contactCount;\n    contactSolverDef.positions = this.m_positions;\n    contactSolverDef.velocities = this.m_velocities;\n\n    const contactSolver = s_contactSolver.Initialize(contactSolverDef);\n    contactSolver.InitializeVelocityConstraints();\n\n    if (step.warmStarting) {\n      contactSolver.WarmStart();\n    }\n\n    this._SolveInitJoints(solverData);\n\n    profile.solveInit += timer.GetMilliseconds();\n\n    // Solve velocity constraints.\n    timer.Reset();\n    for (let i = 0; i < step.velocityIterations; ++i) {\n      for (let j = 0; j < this.m_jointCount; ++j) {\n        this.m_joints[j].SolveVelocityConstraints(solverData);\n      }\n\n      contactSolver.SolveVelocityConstraints();\n    }\n\n    // Store impulses for warm starting\n    contactSolver.StoreImpulses();\n    profile.solveVelocity += timer.GetMilliseconds();\n\n    // Integrate positions.\n    for (let i = 0; i < bodyCount; ++i) {\n      const c = m_positions[i].c;\n      let a = m_positions[i].a;\n      const v = m_velocities[i].v;\n      let w = m_velocities[i].w;\n\n      // Check for large velocities\n      const translation = b2Vec2.MulSV(h, v, s_translation);\n      if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\n        const ratio: number = b2_maxTranslation / translation.Length();\n        v.SelfMul(ratio);\n      }\n\n      const rotation: number = h * w;\n      if (rotation * rotation > b2_maxRotationSquared) {\n        const ratio: number = b2_maxRotation / b2Abs(rotation);\n        w *= ratio;\n      }\n\n      // Integrate\n      c.x += h * v.x;\n      c.y += h * v.y;\n      a += h * w;\n\n      // this.m_positions[i].c = c;\n      m_positions[i].a = a;\n      // this.m_velocities[i].v = v;\n      m_velocities[i].w = w;\n    }\n\n    // Solve position constraints\n    timer.Reset();\n    flags |= this._SolvePositionsConstraits(step.positionIterations, contactSolver, solverData)\n      ? 1\n      : 0;\n\n    // Copy state buffers back to the bodies\n    for (let i = 0; i < bodyCount; ++i) {\n      const body: b2Body = m_bodies[i];\n      body.m_sweep.c.Copy(m_positions[i].c);\n      body.m_sweep.a = m_positions[i].a;\n      body.m_linearVelocity.Copy(m_velocities[i].v);\n      body.m_angularVelocity = m_velocities[i].w;\n      body.SynchronizeTransform();\n    }\n\n    profile.solvePosition += timer.GetMilliseconds();\n\n    this.Report(contactSolver.m_velocityConstraints);\n\n    flags |= allowSleep && this._UpdateSleepTime(h) ? 2 : 0;\n    return flags;\n  }\n\n  private _SolvePositionsConstraits(\n    iterations: number,\n    contactSolver: b2ContactSolver,\n    solverData: b2SolverData,\n  ): boolean {\n    const jointsCount = this.m_jointCount;\n    const joints = this.m_joints;\n    for (let i = 0; i < iterations; ++i) {\n      const contactsOkay: boolean = contactSolver.SolvePositionConstraints();\n\n      let jointsOkay = true;\n      for (let j = 0; j < jointsCount; ++j) {\n        const jointOkay: boolean = joints[j].SolvePositionConstraints(solverData);\n        jointsOkay = jointsOkay && jointOkay;\n      }\n\n      if (contactsOkay && jointsOkay) {\n        // Exit early if the position errors are small.\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _SolveInitJoints(solverData: b2SolverData) {\n    const count = this.m_jointCount;\n    const list = this.m_joints;\n    for (let i = 0; i < count; ++i) {\n      list[i].InitVelocityConstraints(solverData);\n    }\n  }\n\n  private _UpdateSleepTime(h: number) {\n    let minSleepTime = b2_maxFloat;\n\n    const linTolSqr = b2_linearSleepTolerance * b2_linearSleepTolerance;\n    const angTolSqr = b2_angularSleepTolerance * b2_angularSleepTolerance;\n\n    const count = this.m_bodyCount;\n    const list = this.m_bodies;\n\n    for (let i = 0; i < count; ++i) {\n      const b: b2Body = list[i];\n      if (b.GetType() === b2BodyType.b2_staticBody) {\n        continue;\n      }\n\n      if (\n        !b.m_autoSleepFlag ||\n        b.m_angularVelocity * b.m_angularVelocity > angTolSqr ||\n        b2Vec2.DotVV(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr\n      ) {\n        b.m_sleepTime = 0;\n        minSleepTime = 0;\n      } else {\n        b.m_sleepTime += h;\n        minSleepTime = b2Min(minSleepTime, b.m_sleepTime);\n      }\n    }\n\n    return minSleepTime >= b2_timeToSleep;\n  }\n\n  SleepAll() {\n    for (let i = 0; i < this.m_bodyCount; ++i) {\n      this.m_bodies[i].SetAwake(false);\n    }\n  }\n\n  SolveTOI(subStep: b2TimeStep, toiIndexA: number, toiIndexB: number): void {\n    !!B2_DEBUG && b2Assert(toiIndexA < this.m_bodyCount);\n    !!B2_DEBUG && b2Assert(toiIndexB < this.m_bodyCount);\n\n    // Initialize the body state.\n    for (let i = 0; i < this.m_bodyCount; ++i) {\n      const b: b2Body = this.m_bodies[i];\n      this.m_positions[i].c.Copy(b.m_sweep.c);\n      this.m_positions[i].a = b.m_sweep.a;\n      this.m_velocities[i].v.Copy(b.m_linearVelocity);\n      this.m_velocities[i].w = b.m_angularVelocity;\n    }\n\n    const contactSolverDef = s_contactSolverDef;\n    contactSolverDef.contacts = this.m_contacts;\n    contactSolverDef.count = this.m_contactCount;\n    contactSolverDef.step.Copy(subStep);\n    contactSolverDef.positions = this.m_positions;\n    contactSolverDef.velocities = this.m_velocities;\n    const contactSolver = s_contactSolver.Initialize(contactSolverDef);\n\n    // Solve position constraints.\n    for (let i = 0; i < subStep.positionIterations; ++i) {\n      const contactsOkay: boolean = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB);\n      if (contactsOkay) {\n        break;\n      }\n    }\n\n    /*\n        #if 0\n          // Is the new position really safe?\n          for (int32 i = 0; i < this.m_contactCount; ++i) {\n            b2Contact* c = this.m_contacts[i];\n            b2Fixture* fA = c.GetFixtureA();\n            b2Fixture* fB = c.GetFixtureB();\n\n            b2Body* bA = fA.GetBody();\n            b2Body* bB = fB.GetBody();\n\n            int32 indexA = c.GetChildIndexA();\n            int32 indexB = c.GetChildIndexB();\n\n            b2DistanceInput input;\n            input.proxyA.Set(fA.GetShape(), indexA);\n            input.proxyB.Set(fB.GetShape(), indexB);\n            input.transformA = bA.GetTransform();\n            input.transformB = bB.GetTransform();\n            input.useRadii = false;\n\n            b2DistanceOutput output;\n            b2SimplexCache cache;\n            cache.count = 0;\n            b2Distance(&output, &cache, &input);\n\n            if (output.distance === 0 || cache.count === 3) {\n              cache.count += 0;\n            }\n          }\n        #endif\n        */\n\n    // Leap of faith to new safe state.\n    this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);\n    this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a;\n    this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);\n    this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a;\n\n    // No warm starting is needed for TOI events because warm\n    // starting impulses were applied in the discrete solver.\n    contactSolver.InitializeVelocityConstraints();\n\n    // Solve velocity constraints.\n    for (let i = 0; i < subStep.velocityIterations; ++i) {\n      contactSolver.SolveVelocityConstraints();\n    }\n\n    // Don't store the TOI contact forces for warm starting\n    // because they can be quite large.\n\n    const h: number = subStep.dt;\n\n    // Integrate positions\n    for (let i = 0; i < this.m_bodyCount; ++i) {\n      const c = this.m_positions[i].c;\n      let a = this.m_positions[i].a;\n      const v = this.m_velocities[i].v;\n      let w = this.m_velocities[i].w;\n\n      // Check for large velocities\n      const translation = b2Vec2.MulSV(h, v, s_translation);\n      if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\n        const ratio: number = b2_maxTranslation / translation.Length();\n        v.SelfMul(ratio);\n      }\n\n      const rotation: number = h * w;\n      if (rotation * rotation > b2_maxRotationSquared) {\n        const ratio: number = b2_maxRotation / b2Abs(rotation);\n        w *= ratio;\n      }\n\n      // Integrate\n      c.SelfMulAdd(h, v);\n      a += h * w;\n\n      // this.m_positions[i].c = c;\n      this.m_positions[i].a = a;\n      // this.m_velocities[i].v = v;\n      this.m_velocities[i].w = w;\n\n      // Sync bodies\n      const body: b2Body = this.m_bodies[i];\n      body.m_sweep.c.Copy(c);\n      body.m_sweep.a = a;\n      body.m_linearVelocity.Copy(v);\n      body.m_angularVelocity = w;\n      body.SynchronizeTransform();\n    }\n\n    this.Report(contactSolver.m_velocityConstraints);\n  }\n\n  private static s_impulse = new b2ContactImpulse();\n\n  Report(constraints: b2ContactVelocityConstraint[]): void {\n    for (let i = 0; i < this.m_contactCount; ++i) {\n      const c: b2Contact = this.m_contacts[i];\n\n      if (!c) {\n        continue;\n      }\n\n      const vc = constraints[i];\n\n      const impulse = b2Island.s_impulse;\n      impulse.count = vc.pointCount;\n      for (let j = 0; j < vc.pointCount; ++j) {\n        impulse.normalImpulses[j] = vc.points[j].normalImpulse;\n        impulse.tangentImpulses[j] = vc.points[j].tangentImpulse;\n      }\n\n      this.m_listener.PostSolve(c, impulse);\n    }\n  }\n}\n","// Particle\n\n/// A symbolic constant that stands for particle allocation error.\nexport const b2_invalidParticleIndex = -1;\n\nexport const b2_maxParticleIndex = 0x7fffffff;\n\n/// The default distance between particles, multiplied by the particle diameter.\nexport const b2_particleStride = 0.75;\n\n/// The minimum particle weight that produces pressure.\nexport const b2_minParticleWeight = 1.0;\n\n/// The upper limit for particle pressure.\nexport const b2_maxParticlePressure = 0.25;\n\n/// The upper limit for force between particles.\nexport const b2_maxParticleForce = 0.5;\n\n/// The maximum distance between particles in a triad, multiplied by the particle diameter.\nexport const b2_maxTriadDistance = 2.0;\nexport const b2_maxTriadDistanceSquared: number = b2_maxTriadDistance * b2_maxTriadDistance;\n\n/// The initial size of particle data buffers.\nexport const b2_minParticleSystemBufferCapacity = 256;\n\n/// The time into the future that collisions against barrier particles will be detected.\nexport const b2_barrierCollisionTime = 2.5;\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\nimport { b2Transform, b2Vec2, XY } from '../common/b2Math';\nimport { b2Color, RGBA } from '../common/b2Draw';\nimport { b2Shape } from '../collision/shapes/b2Shape';\nimport { b2ParticleFlag } from './b2Particle';\nimport { b2ParticleSystem } from './b2ParticleSystem';\n\nexport const enum b2ParticleGroupFlag {\n  none = 0,\n\n  /// Prevents overlapping or leaking.\n  b2_solidParticleGroup = 1 << 0,\n  /// Keeps its shape.\n  b2_rigidParticleGroup = 1 << 1,\n  /// Won't be destroyed if it gets empty.\n  b2_particleGroupCanBeEmpty = 1 << 2,\n  /// Will be destroyed on next simulation step.\n  b2_particleGroupWillBeDestroyed = 1 << 3,\n  /// Updates depth data on next simulation step.\n  b2_particleGroupNeedsUpdateDepth = 1 << 4,\n\n  b2_particleGroupInternalMask = b2_particleGroupWillBeDestroyed | b2_particleGroupNeedsUpdateDepth,\n}\n\nexport interface b2IParticleGroupDef {\n  flags?: b2ParticleFlag;\n  groupFlags?: b2ParticleGroupFlag;\n  position?: XY;\n  angle?: number;\n  linearVelocity?: XY;\n  angularVelocity?: number;\n  color?: RGBA;\n  strength?: number;\n  shape?: b2Shape;\n  shapes?: b2Shape[];\n  shapeCount?: number;\n  stride?: number;\n  particleCount?: number;\n  positionData?: XY[];\n  lifetime?: number;\n  userData?: any;\n  group?: b2ParticleGroup | null;\n}\n\nexport class b2ParticleGroupDef implements b2IParticleGroupDef {\n  flags: b2ParticleFlag = 0;\n  groupFlags: b2ParticleGroupFlag = 0;\n  readonly position: b2Vec2 = new b2Vec2();\n  angle = 0.0;\n  readonly linearVelocity: b2Vec2 = new b2Vec2();\n  angularVelocity = 0.0;\n  readonly color: b2Color = new b2Color();\n  strength = 1.0;\n  shape?: b2Shape;\n  shapes?: b2Shape[];\n  shapeCount = 0;\n  stride = 0;\n  particleCount = 0;\n  positionData?: b2Vec2[];\n  lifetime = 0;\n  userData: any = null;\n  group: b2ParticleGroup | null = null;\n}\n\nexport class b2ParticleGroup {\n  readonly m_system: b2ParticleSystem;\n  m_firstIndex = 0;\n  m_lastIndex = 0;\n  m_groupFlags: b2ParticleGroupFlag = 0;\n  m_strength = 1.0;\n  m_prev: b2ParticleGroup | null = null;\n  m_next: b2ParticleGroup | null = null;\n  m_timestamp = -1;\n  m_mass = 0.0;\n  m_inertia = 0.0;\n  readonly m_center: b2Vec2 = new b2Vec2();\n  readonly m_linearVelocity: b2Vec2 = new b2Vec2();\n  m_angularVelocity = 0.0;\n  readonly m_transform: b2Transform = new b2Transform();\n  ///m_transform.SetIdentity();\n  m_userData: any = null;\n\n  constructor(system: b2ParticleSystem) {\n    this.m_system = system;\n  }\n\n  GetNext(): b2ParticleGroup | null {\n    return this.m_next;\n  }\n\n  GetParticleSystem(): b2ParticleSystem {\n    return this.m_system;\n  }\n\n  GetParticleCount(): number {\n    return this.m_lastIndex - this.m_firstIndex;\n  }\n\n  GetBufferIndex(): number {\n    return this.m_firstIndex;\n  }\n\n  ContainsParticle(index: number): boolean {\n    return this.m_firstIndex <= index && index < this.m_lastIndex;\n  }\n\n  GetAllParticleFlags(): b2ParticleFlag {\n    if (!this.m_system.m_flagsBuffer.data) {\n      throw new Error();\n    }\n    let flags = 0;\n    for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n      flags |= this.m_system.m_flagsBuffer.data[i];\n    }\n    return flags;\n  }\n\n  GetGroupFlags(): b2ParticleGroupFlag {\n    return this.m_groupFlags;\n  }\n\n  SetGroupFlags(flags: number): void {\n    !!B2_DEBUG && b2Assert((flags & b2ParticleGroupFlag.b2_particleGroupInternalMask) === 0);\n    flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\n    this.m_system.SetGroupFlags(this, flags);\n  }\n\n  GetMass(): number {\n    this.UpdateStatistics();\n    return this.m_mass;\n  }\n\n  GetInertia(): number {\n    this.UpdateStatistics();\n    return this.m_inertia;\n  }\n\n  GetCenter(): Readonly<b2Vec2> {\n    this.UpdateStatistics();\n    return this.m_center;\n  }\n\n  GetLinearVelocity(): Readonly<b2Vec2> {\n    this.UpdateStatistics();\n    return this.m_linearVelocity;\n  }\n\n  GetAngularVelocity(): number {\n    this.UpdateStatistics();\n    return this.m_angularVelocity;\n  }\n\n  GetTransform(): Readonly<b2Transform> {\n    return this.m_transform;\n  }\n\n  GetPosition(): Readonly<b2Vec2> {\n    return this.m_transform.p;\n  }\n\n  GetAngle(): number {\n    return this.m_transform.q.GetAngle();\n  }\n\n  GetLinearVelocityFromWorldPoint<T extends XY>(worldPoint: XY, out: T): T {\n    const s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\n    this.UpdateStatistics();\n    ///  return m_linearVelocity + b2Cross(m_angularVelocity, worldPoint - m_center);\n    return b2Vec2.AddVCrossSV(\n      this.m_linearVelocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(worldPoint, this.m_center, s_t0),\n      out,\n    );\n  }\n\n  static readonly GetLinearVelocityFromWorldPoint_s_t0 = new b2Vec2();\n\n  GetUserData(): void {\n    return this.m_userData;\n  }\n\n  SetUserData(data: any): void {\n    this.m_userData = data;\n  }\n\n  ApplyForce(force: XY): void {\n    this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\n  }\n\n  ApplyLinearImpulse(impulse: XY): void {\n    this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\n  }\n\n  DestroyParticles(callDestructionListener: boolean): void {\n    if (this.m_system.m_world.IsLocked()) {\n      throw new Error();\n    }\n\n    for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n      this.m_system.DestroyParticle(i, callDestructionListener);\n    }\n  }\n\n  UpdateStatistics(): void {\n    if (!this.m_system.m_positionBuffer.data) {\n      throw new Error();\n    }\n    if (!this.m_system.m_velocityBuffer.data) {\n      throw new Error();\n    }\n    const p = new b2Vec2();\n    const v = new b2Vec2();\n    if (this.m_timestamp !== this.m_system.m_timestamp) {\n      const m = this.m_system.GetParticleMass();\n      ///  this.m_mass = 0;\n      this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\n      this.m_center.SetZero();\n      this.m_linearVelocity.SetZero();\n      for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n        ///  this.m_mass += m;\n        ///  this.m_center += m * this.m_system.m_positionBuffer.data[i];\n        this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\n        ///  this.m_linearVelocity += m * this.m_system.m_velocityBuffer.data[i];\n        this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\n      }\n      if (this.m_mass > 0) {\n        const inv_mass = 1 / this.m_mass;\n        ///this.m_center *= 1 / this.m_mass;\n        this.m_center.SelfMul(inv_mass);\n        ///this.m_linearVelocity *= 1 / this.m_mass;\n        this.m_linearVelocity.SelfMul(inv_mass);\n      }\n      this.m_inertia = 0;\n      this.m_angularVelocity = 0;\n      for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\n        ///b2Vec2 p = this.m_system.m_positionBuffer.data[i] - this.m_center;\n        b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\n        ///b2Vec2 v = this.m_system.m_velocityBuffer.data[i] - this.m_linearVelocity;\n        b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\n        this.m_inertia += m * b2Vec2.DotVV(p, p);\n        this.m_angularVelocity += m * b2Vec2.CrossVV(p, v);\n      }\n      if (this.m_inertia > 0) {\n        this.m_angularVelocity *= 1 / this.m_inertia;\n      }\n      this.m_timestamp = this.m_system.m_timestamp;\n    }\n  }\n}\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Assert } from '../common/b2Settings';\n\nexport class b2StackQueue<T> {\n  readonly m_buffer: Array<T | null> = [];\n  m_front = 0;\n  m_back = 0;\n\n  get m_capacity(): number {\n    return this.m_buffer.length;\n  }\n\n  constructor(capacity: number) {\n    this.m_buffer.fill(null, 0, capacity);\n  }\n\n  Push(item: T): void {\n    if (this.m_back >= this.m_capacity) {\n      for (let i = this.m_front; i < this.m_back; i++) {\n        this.m_buffer[i - this.m_front] = this.m_buffer[i];\n      }\n      this.m_back -= this.m_front;\n      this.m_front = 0;\n    }\n    this.m_buffer[this.m_back] = item;\n    this.m_back++;\n  }\n\n  Pop(): void {\n    !!B2_DEBUG && b2Assert(this.m_front < this.m_back);\n    this.m_buffer[this.m_front] = null;\n    this.m_front++;\n  }\n\n  Empty(): boolean {\n    !!B2_DEBUG && b2Assert(this.m_front <= this.m_back);\n    return this.m_front === this.m_back;\n  }\n\n  Front(): T {\n    const item = this.m_buffer[this.m_front];\n    if (!item) {\n      throw new Error();\n    }\n    return item;\n  }\n}\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_maxFloat, b2Assert, b2MakeArray } from '../common/b2Settings';\nimport { b2Vec2 } from '../common/b2Math';\nimport { b2StackQueue } from './b2StackQueue';\n\n/**\n * A field representing the nearest generator from each point.\n */\nexport class b2VoronoiDiagram {\n  m_generatorBuffer: b2VoronoiDiagram_Generator[];\n  m_generatorCapacity = 0;\n  m_generatorCount = 0;\n  m_countX = 0;\n  m_countY = 0;\n  m_diagram: b2VoronoiDiagram_Generator[] = [];\n\n  constructor(generatorCapacity: number) {\n    this.m_generatorBuffer = b2MakeArray(\n      generatorCapacity,\n      (index) => new b2VoronoiDiagram_Generator(),\n    );\n    this.m_generatorCapacity = generatorCapacity;\n  }\n\n  /**\n   * Add a generator.\n   *\n   * @param center the position of the generator.\n   * @param tag a tag used to identify the generator in callback functions.\n   * @param necessary whether to callback for nodes associated with the generator.\n   */\n  AddGenerator(center: b2Vec2, tag: number, necessary: boolean): void {\n    !!B2_DEBUG && b2Assert(this.m_generatorCount < this.m_generatorCapacity);\n    const g = this.m_generatorBuffer[this.m_generatorCount++];\n    g.center.Copy(center);\n    g.tag = tag;\n    g.necessary = necessary;\n  }\n\n  /**\n   * Generate the Voronoi diagram. It is rasterized with a given\n   * interval in the same range as the necessary generators exist.\n   *\n   * @param radius the interval of the diagram.\n   * @param margin margin for which the range of the diagram is extended.\n   */\n  Generate(radius: number, margin: number): void {\n    const inverseRadius = 1 / radius;\n    const lower = new b2Vec2(+b2_maxFloat, +b2_maxFloat);\n    const upper = new b2Vec2(-b2_maxFloat, -b2_maxFloat);\n    let necessary_count = 0;\n    for (let k = 0; k < this.m_generatorCount; k++) {\n      const g = this.m_generatorBuffer[k];\n      if (g.necessary) {\n        b2Vec2.MinV(lower, g.center, lower);\n        b2Vec2.MaxV(upper, g.center, upper);\n        ++necessary_count;\n      }\n    }\n    if (necessary_count === 0) {\n      ///debugger;\n      this.m_countX = 0;\n      this.m_countY = 0;\n      return;\n    }\n    lower.x -= margin;\n    lower.y -= margin;\n    upper.x += margin;\n    upper.y += margin;\n    this.m_countX = 1 + Math.floor(inverseRadius * (upper.x - lower.x));\n    this.m_countY = 1 + Math.floor(inverseRadius * (upper.y - lower.y));\n    this.m_diagram = []; // b2MakeArray(this.m_countX * this.m_countY, (index) => null);\n\n    // (4 * m_countX * m_countY) is the queue capacity that is experimentally\n    // known to be necessary and sufficient for general particle distributions.\n    const queue = new b2StackQueue<b2VoronoiDiagram_Task>(4 * this.m_countX * this.m_countY);\n    for (let k = 0; k < this.m_generatorCount; k++) {\n      const g = this.m_generatorBuffer[k];\n      ///  g.center = inverseRadius * (g.center - lower);\n      g.center.SelfSub(lower).SelfMul(inverseRadius);\n      const x = Math.floor(g.center.x);\n      const y = Math.floor(g.center.y);\n      if (x >= 0 && y >= 0 && x < this.m_countX && y < this.m_countY) {\n        queue.Push(new b2VoronoiDiagram_Task(x, y, x + y * this.m_countX, g));\n      }\n    }\n    while (!queue.Empty()) {\n      const task = queue.Front();\n      const x = task.m_x;\n      const y = task.m_y;\n      const i = task.m_i;\n      const g = task.m_generator;\n      queue.Pop();\n      if (!this.m_diagram[i]) {\n        this.m_diagram[i] = g;\n        if (x > 0) {\n          queue.Push(new b2VoronoiDiagram_Task(x - 1, y, i - 1, g));\n        }\n        if (y > 0) {\n          queue.Push(new b2VoronoiDiagram_Task(x, y - 1, i - this.m_countX, g));\n        }\n        if (x < this.m_countX - 1) {\n          queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, g));\n        }\n        if (y < this.m_countY - 1) {\n          queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, g));\n        }\n      }\n    }\n    for (let y = 0; y < this.m_countY; y++) {\n      for (let x = 0; x < this.m_countX - 1; x++) {\n        const i = x + y * this.m_countX;\n        const a = this.m_diagram[i];\n        const b = this.m_diagram[i + 1];\n        if (a !== b) {\n          queue.Push(new b2VoronoiDiagram_Task(x, y, i, b));\n          queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, a));\n        }\n      }\n    }\n    for (let y = 0; y < this.m_countY - 1; y++) {\n      for (let x = 0; x < this.m_countX; x++) {\n        const i = x + y * this.m_countX;\n        const a = this.m_diagram[i];\n        const b = this.m_diagram[i + this.m_countX];\n        if (a !== b) {\n          queue.Push(new b2VoronoiDiagram_Task(x, y, i, b));\n          queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, a));\n        }\n      }\n    }\n    while (!queue.Empty()) {\n      const task = queue.Front();\n      const x = task.m_x;\n      const y = task.m_y;\n      const i = task.m_i;\n      const k = task.m_generator;\n      queue.Pop();\n      const a = this.m_diagram[i];\n      const b = k;\n      if (a !== b) {\n        const ax = a.center.x - x;\n        const ay = a.center.y - y;\n        const bx = b.center.x - x;\n        const by = b.center.y - y;\n        const a2 = ax * ax + ay * ay;\n        const b2 = bx * bx + by * by;\n        if (a2 > b2) {\n          this.m_diagram[i] = b;\n          if (x > 0) {\n            queue.Push(new b2VoronoiDiagram_Task(x - 1, y, i - 1, b));\n          }\n          if (y > 0) {\n            queue.Push(new b2VoronoiDiagram_Task(x, y - 1, i - this.m_countX, b));\n          }\n          if (x < this.m_countX - 1) {\n            queue.Push(new b2VoronoiDiagram_Task(x + 1, y, i + 1, b));\n          }\n          if (y < this.m_countY - 1) {\n            queue.Push(new b2VoronoiDiagram_Task(x, y + 1, i + this.m_countX, b));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Enumerate all nodes that contain at least one necessary\n   * generator.\n   */\n  GetNodes(callback: b2VoronoiDiagram_NodeCallback): void {\n    for (let y = 0; y < this.m_countY - 1; y++) {\n      for (let x = 0; x < this.m_countX - 1; x++) {\n        const i = x + y * this.m_countX;\n        const a = this.m_diagram[i];\n        const b = this.m_diagram[i + 1];\n        const c = this.m_diagram[i + this.m_countX];\n        const d = this.m_diagram[i + 1 + this.m_countX];\n        if (b !== c) {\n          if (a !== b && a !== c && (a.necessary || b.necessary || c.necessary)) {\n            callback(a.tag, b.tag, c.tag);\n          }\n          if (d !== b && d !== c && (a.necessary || b.necessary || c.necessary)) {\n            callback(b.tag, d.tag, c.tag);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback used by GetNodes().\n *\n * Receive tags for generators associated with a node.\n */\nexport type b2VoronoiDiagram_NodeCallback = (a: number, b: number, c: number) => void;\n\nexport class b2VoronoiDiagram_Generator {\n  center = new b2Vec2();\n  tag = 0;\n  necessary = false;\n}\n\nexport class b2VoronoiDiagram_Task {\n  m_x: number; // int\n  m_y: number; // int\n  m_i: number; // int\n  m_generator: b2VoronoiDiagram_Generator;\n\n  constructor(x: number, y: number, i: number, g: b2VoronoiDiagram_Generator) {\n    this.m_x = x;\n    this.m_y = y;\n    this.m_i = i;\n    this.m_generator = g;\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_epsilon,\n  b2_maxFloat,\n  b2_maxSubSteps,\n  b2_maxTOIContacts,\n  b2Assert,\n} from '../common/b2Settings';\nimport { b2Min, b2Sweep, b2Transform, b2Vec2, XY } from '../common/b2Math';\nimport { b2Timer } from '../common/b2Timer';\nimport {\n  b2AABB,\n  b2RayCastInput,\n  b2RayCastOutput,\n  b2TestOverlapShape,\n} from '../collision/b2Collision';\nimport { b2TreeNode } from '../collision/b2DynamicTree';\nimport {\n  b2TimeOfImpact,\n  b2TOIInput,\n  b2TOIOutput,\n  b2TOIOutputState,\n} from '../collision/b2TimeOfImpact';\nimport { b2Shape } from '../collision/shapes/b2Shape';\nimport { b2Contact, b2ContactEdge } from './contacts/b2Contact';\nimport { b2IJointDef, b2Joint, b2JointEdge, b2JointType } from './joints/b2Joint';\nimport { b2AreaJoint, b2IAreaJointDef } from './joints/b2AreaJoint';\nimport { b2DistanceJoint, b2IDistanceJointDef } from './joints/b2DistanceJoint';\nimport { b2FrictionJoint, b2IFrictionJointDef } from './joints/b2FrictionJoint';\nimport { b2GearJoint, b2IGearJointDef } from './joints/b2GearJoint';\nimport { b2IMotorJointDef, b2MotorJoint } from './joints/b2MotorJoint';\nimport { b2IMouseJointDef, b2MouseJoint } from './joints/b2MouseJoint';\nimport { b2IPrismaticJointDef, b2PrismaticJoint } from './joints/b2PrismaticJoint';\nimport { b2IPulleyJointDef, b2PulleyJoint } from './joints/b2PulleyJoint';\nimport { b2IRevoluteJointDef, b2RevoluteJoint } from './joints/b2RevoluteJoint';\nimport { b2IRopeJointDef, b2RopeJoint } from './joints/b2RopeJoint';\nimport { b2IWeldJointDef, b2WeldJoint } from './joints/b2WeldJoint';\nimport { b2IWheelJointDef, b2WheelJoint } from './joints/b2WheelJoint';\nimport { b2Body, b2BodyType, b2IBodyDef } from './b2Body';\nimport { b2ContactManager } from './b2ContactManager';\nimport { b2Fixture, b2FixtureProxy } from './b2Fixture';\nimport { b2Island } from './b2Island';\nimport { b2Profile, b2TimeStep } from './b2TimeStep';\nimport {\n  b2ContactFilter,\n  b2ContactListener,\n  b2DestructionListener,\n  b2QueryCallback,\n  b2QueryCallbackFunction,\n  b2RayCastCallback,\n  b2RayCastCallbackFunction,\n} from './b2WorldCallbacks';\nimport { b2CalculateParticleIterations } from '../particle/b2Particle';\nimport { b2ParticleSystem, b2ParticleSystemDef } from '../particle/b2ParticleSystem';\nimport { b2Controller, b2ControllerEdge } from '../controllers/b2Controller';\n\nconst SolveTOI_s_subStep = new b2TimeStep();\nconst SolveTOI_s_backup = new b2Sweep();\nconst SolveTOI_s_backup1 = new b2Sweep();\nconst SolveTOI_s_backup2 = new b2Sweep();\nconst SolveTOI_s_toi_input = new b2TOIInput();\nconst SolveTOI_s_toi_output = new b2TOIOutput();\n\n/// Take a time step. This performs collision detection, integration,\n/// and constraint solution.\n/// @param timeStep the amount of time to simulate, this should not vary.\n/// @param velocityIterations for the velocity constraint solver.\n/// @param positionIterations for the position constraint solver.\nconst Step_s_step = new b2TimeStep();\nconst Step_s_stepTimer = new b2Timer();\nconst Step_s_timer = new b2Timer();\nconst Step_s_broadphaseTimer = new b2Timer();\n\n/// The world class manages all physics entities, dynamic simulation,\n/// and asynchronous queries. The world also contains efficient memory\n/// management facilities.\nexport class b2World {\n  m_newFixture = false;\n  m_locked = false;\n  m_clearForces = true;\n\n  readonly m_contactManager = new b2ContactManager();\n\n  m_bodyList: b2Body | null = null;\n  m_jointList: b2Joint | null = null;\n\n  // #if B2_ENABLE_PARTICLE\n  m_particleSystemList: b2ParticleSystem | null = null;\n  // #endif\n\n  m_bodyCount = 0;\n  m_jointCount = 0;\n\n  readonly m_gravity = new b2Vec2();\n  m_allowSleep = true;\n\n  m_destructionListener: b2DestructionListener | null = null;\n\n  // This is used to compute the time step ratio to\n  // support a variable time step.\n  m_inv_dt0 = NaN;\n\n  // These are for debugging the solver.\n  m_warmStarting = true;\n  m_continuousPhysics = true;\n  m_subStepping = false;\n\n  m_stepComplete = true;\n\n  readonly m_profile = new b2Profile();\n  readonly m_island = new b2Island();\n  readonly s_stack: Array<b2Body | null> = [null];\n\n  // #if B2_ENABLE_CONTROLLER\n  m_controllerList: b2Controller | null = null;\n  m_controllerCount = 0;\n  // #endif\n\n  /// Construct a world object.\n  /// @param gravity the world gravity vector.\n  constructor(gravity: XY) {\n    this.m_inv_dt0 = 0.0;\n    this.m_gravity.Copy(gravity);\n  }\n\n  /// Register a destruction listener. The listener is owned by you and must\n  /// remain in scope.\n  SetDestructionListener(listener: b2DestructionListener | null): void {\n    this.m_destructionListener = listener;\n  }\n\n  /// Register a contact filter to provide specific control over collision.\n  /// Otherwise the default filter is used (b2_defaultFilter). The listener is\n  /// owned by you and must remain in scope.\n  SetContactFilter(filter: b2ContactFilter): void {\n    this.m_contactManager.m_contactFilter = filter;\n  }\n\n  /// Register a contact event listener. The listener is owned by you and must\n  /// remain in scope.\n  SetContactListener(listener: b2ContactListener): void {\n    this.m_contactManager.m_contactListener = listener;\n  }\n\n  /// Create a rigid body given a definition. No reference to the definition\n  /// is retained.\n  /// @warning This function is locked during callbacks.\n  CreateBody(def: b2IBodyDef = {}): b2Body {\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    const b: b2Body = new b2Body(def, this);\n\n    // Add to world doubly linked list.\n    b.m_prev = null;\n    b.m_next = this.m_bodyList;\n    if (this.m_bodyList) {\n      this.m_bodyList.m_prev = b;\n    }\n    this.m_bodyList = b;\n    ++this.m_bodyCount;\n\n    return b;\n  }\n\n  /// Destroy a rigid body given a definition. No reference to the definition\n  /// is retained. This function is locked during callbacks.\n  /// @warning This automatically deletes all associated shapes and joints.\n  /// @warning This function is locked during callbacks.\n  DestroyBody(b: b2Body): void {\n    !!B2_DEBUG && b2Assert(this.m_bodyCount > 0);\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    // Delete the attached joints.\n    let je: b2JointEdge | null = b.m_jointList;\n    while (je) {\n      const je0: b2JointEdge = je;\n      je = je.next;\n\n      if (this.m_destructionListener) {\n        this.m_destructionListener.SayGoodbyeJoint(je0.joint);\n      }\n\n      this.DestroyJoint(je0.joint);\n\n      b.m_jointList = je;\n    }\n    b.m_jointList = null;\n\n    if (B2_ENABLE_CONTROLLER) {\n      // @see b2Controller list\n      let coe: b2ControllerEdge | null = b.m_controllerList;\n      while (coe) {\n        const coe0: b2ControllerEdge = coe;\n        coe = coe.nextController;\n        coe0.controller.RemoveBody(b);\n      }\n    }\n\n    // Delete the attached contacts.\n    let ce: b2ContactEdge | null = b.m_contactList;\n    while (ce) {\n      const ce0: b2ContactEdge = ce;\n      ce = ce.next;\n      this.m_contactManager.Destroy(ce0.contact);\n    }\n    b.m_contactList = null;\n\n    // Delete the attached fixtures. This destroys broad-phase proxies.\n    let f: b2Fixture | null = b.m_fixtureList;\n    while (f) {\n      const f0: b2Fixture = f;\n      f = f.m_next;\n\n      if (this.m_destructionListener) {\n        this.m_destructionListener.SayGoodbyeFixture(f0);\n      }\n\n      f0.DestroyProxies();\n      f0.Reset();\n\n      b.m_fixtureList = f;\n      b.m_fixtureCount -= 1;\n    }\n    b.m_fixtureList = null;\n    b.m_fixtureCount = 0;\n\n    // Remove world body list.\n    if (b.m_prev) {\n      b.m_prev.m_next = b.m_next;\n    }\n\n    if (b.m_next) {\n      b.m_next.m_prev = b.m_prev;\n    }\n\n    if (b === this.m_bodyList) {\n      this.m_bodyList = b.m_next;\n    }\n\n    --this.m_bodyCount;\n  }\n\n  private static _Joint_Create(def: b2IJointDef): b2Joint {\n    switch (def.type) {\n      case b2JointType.e_distanceJoint:\n        return new b2DistanceJoint(def as b2IDistanceJointDef);\n      case b2JointType.e_mouseJoint:\n        return new b2MouseJoint(def as b2IMouseJointDef);\n      case b2JointType.e_prismaticJoint:\n        return new b2PrismaticJoint(def as b2IPrismaticJointDef);\n      case b2JointType.e_revoluteJoint:\n        return new b2RevoluteJoint(def as b2IRevoluteJointDef);\n      case b2JointType.e_pulleyJoint:\n        return new b2PulleyJoint(def as b2IPulleyJointDef);\n      case b2JointType.e_gearJoint:\n        return new b2GearJoint(def as b2IGearJointDef);\n      case b2JointType.e_wheelJoint:\n        return new b2WheelJoint(def as b2IWheelJointDef);\n      case b2JointType.e_weldJoint:\n        return new b2WeldJoint(def as b2IWeldJointDef);\n      case b2JointType.e_frictionJoint:\n        return new b2FrictionJoint(def as b2IFrictionJointDef);\n      case b2JointType.e_ropeJoint:\n        return new b2RopeJoint(def as b2IRopeJointDef);\n      case b2JointType.e_motorJoint:\n        return new b2MotorJoint(def as b2IMotorJointDef);\n      case b2JointType.e_areaJoint:\n        return new b2AreaJoint(def as b2IAreaJointDef);\n    }\n    throw new Error();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private static _Joint_Destroy(joint: b2Joint): void {}\n\n  /// Create a joint to constrain bodies together. No reference to the definition\n  /// is retained. This may cause the connected bodies to cease colliding.\n  /// @warning This function is locked during callbacks.\n  CreateJoint(def: b2IAreaJointDef): b2AreaJoint;\n  CreateJoint(def: b2IDistanceJointDef): b2DistanceJoint;\n  CreateJoint(def: b2IFrictionJointDef): b2FrictionJoint;\n  CreateJoint(def: b2IGearJointDef): b2GearJoint;\n  CreateJoint(def: b2IMotorJointDef): b2MotorJoint;\n  CreateJoint(def: b2IMouseJointDef): b2MouseJoint;\n  CreateJoint(def: b2IPrismaticJointDef): b2PrismaticJoint;\n  CreateJoint(def: b2IPulleyJointDef): b2PulleyJoint;\n  CreateJoint(def: b2IRevoluteJointDef): b2RevoluteJoint;\n  CreateJoint(def: b2IRopeJointDef): b2RopeJoint;\n  CreateJoint(def: b2IWeldJointDef): b2WeldJoint;\n  CreateJoint(def: b2IWheelJointDef): b2WheelJoint;\n  CreateJoint(def: b2IJointDef): b2Joint {\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    const j: b2Joint = b2World._Joint_Create(def);\n\n    // Connect to the world list.\n    j.m_prev = null;\n    j.m_next = this.m_jointList;\n    if (this.m_jointList) {\n      this.m_jointList.m_prev = j;\n    }\n    this.m_jointList = j;\n    ++this.m_jointCount;\n\n    // Connect to the bodies' doubly linked lists.\n    // j.m_edgeA.other = j.m_bodyB; // done in b2Joint constructor\n    j.m_edgeA.prev = null;\n    j.m_edgeA.next = j.m_bodyA.m_jointList;\n    if (j.m_bodyA.m_jointList) {\n      j.m_bodyA.m_jointList.prev = j.m_edgeA;\n    }\n    j.m_bodyA.m_jointList = j.m_edgeA;\n\n    // j.m_edgeB.other = j.m_bodyA; // done in b2Joint constructor\n    j.m_edgeB.prev = null;\n    j.m_edgeB.next = j.m_bodyB.m_jointList;\n    if (j.m_bodyB.m_jointList) {\n      j.m_bodyB.m_jointList.prev = j.m_edgeB;\n    }\n    j.m_bodyB.m_jointList = j.m_edgeB;\n\n    const bodyA: b2Body = j.m_bodyA;\n    const bodyB: b2Body = j.m_bodyB;\n    const collideConnected: boolean = j.m_collideConnected;\n\n    // If the joint prevents collisions, then flag any contacts for filtering.\n    if (!collideConnected) {\n      let edge: b2ContactEdge | null = bodyB.GetContactList();\n      while (edge) {\n        if (edge.other === bodyA) {\n          // Flag the contact for filtering at the next time step (where either\n          // body is awake).\n          edge.contact.FlagForFiltering();\n        }\n\n        edge = edge.next;\n      }\n    }\n\n    // Note: creating a joint doesn't wake the bodies.\n\n    return j;\n  }\n\n  /// Destroy a joint. This may cause the connected bodies to begin colliding.\n  /// @warning This function is locked during callbacks.\n  DestroyJoint(j: b2Joint): void {\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    // Remove from the doubly linked list.\n    if (j.m_prev) {\n      j.m_prev.m_next = j.m_next;\n    }\n\n    if (j.m_next) {\n      j.m_next.m_prev = j.m_prev;\n    }\n\n    if (j === this.m_jointList) {\n      this.m_jointList = j.m_next;\n    }\n\n    // Disconnect from island graph.\n    const bodyA: b2Body = j.m_bodyA;\n    const bodyB: b2Body = j.m_bodyB;\n    const collideConnected: boolean = j.m_collideConnected;\n\n    // Wake up connected bodies.\n    bodyA.SetAwake(true);\n    bodyB.SetAwake(true);\n\n    // Remove from body 1.\n    if (j.m_edgeA.prev) {\n      j.m_edgeA.prev.next = j.m_edgeA.next;\n    }\n\n    if (j.m_edgeA.next) {\n      j.m_edgeA.next.prev = j.m_edgeA.prev;\n    }\n\n    if (j.m_edgeA === bodyA.m_jointList) {\n      bodyA.m_jointList = j.m_edgeA.next;\n    }\n\n    j.m_edgeA.Reset();\n\n    // Remove from body 2\n    if (j.m_edgeB.prev) {\n      j.m_edgeB.prev.next = j.m_edgeB.next;\n    }\n\n    if (j.m_edgeB.next) {\n      j.m_edgeB.next.prev = j.m_edgeB.prev;\n    }\n\n    if (j.m_edgeB === bodyB.m_jointList) {\n      bodyB.m_jointList = j.m_edgeB.next;\n    }\n\n    j.m_edgeB.Reset();\n\n    b2World._Joint_Destroy(j);\n\n    !!B2_DEBUG && b2Assert(this.m_jointCount > 0);\n    --this.m_jointCount;\n\n    // If the joint prevents collisions, then flag any contacts for filtering.\n    if (!collideConnected) {\n      let edge: b2ContactEdge | null = bodyB.GetContactList();\n      while (edge) {\n        if (edge.other === bodyA) {\n          // Flag the contact for filtering at the next time step (where either\n          // body is awake).\n          edge.contact.FlagForFiltering();\n        }\n\n        edge = edge.next;\n      }\n    }\n  }\n\n  CreateParticleSystem(def: b2ParticleSystemDef): b2ParticleSystem {\n    if (!B2_ENABLE_PARTICLE) {\n      throw new Error();\n    }\n\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    const p = new b2ParticleSystem(def, this);\n\n    // Add to world doubly linked list.\n    p.m_prev = null;\n    p.m_next = this.m_particleSystemList;\n    if (this.m_particleSystemList) {\n      this.m_particleSystemList.m_prev = p;\n    }\n    this.m_particleSystemList = p;\n\n    return p;\n  }\n\n  DestroyParticleSystem(p: b2ParticleSystem): void {\n    if (!B2_ENABLE_PARTICLE) {\n      throw new Error();\n    }\n\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    // Remove world particleSystem list.\n    if (p.m_prev) {\n      p.m_prev.m_next = p.m_next;\n    }\n\n    if (p.m_next) {\n      p.m_next.m_prev = p.m_prev;\n    }\n\n    if (p === this.m_particleSystemList) {\n      this.m_particleSystemList = p.m_next;\n    }\n  }\n\n  CalculateReasonableParticleIterations(timeStep: number): number {\n    if (!B2_ENABLE_PARTICLE || this.m_particleSystemList === null) {\n      return 1;\n    }\n\n    // todo:\n    function GetSmallestRadius(world: b2World): number {\n      let smallestRadius = b2_maxFloat;\n      for (let system = world.GetParticleSystemList(); system !== null; system = system.m_next) {\n        smallestRadius = b2Min(smallestRadius, system.GetRadius());\n      }\n      return smallestRadius;\n    }\n\n    // Use the smallest radius, since that represents the worst-case.\n    return b2CalculateParticleIterations(\n      this.m_gravity.Length(),\n      GetSmallestRadius(this),\n      timeStep,\n    );\n  }\n\n  Step(\n    dt: number,\n    velocityIterations: number,\n    positionIterations: number,\n    particleIterations: number = this.CalculateReasonableParticleIterations(dt),\n  ): void {\n    const stepTimer = Step_s_stepTimer.Reset();\n\n    // If new fixtures were added, we need to find the new contacts.\n    if (this.m_newFixture) {\n      this.m_contactManager.FindNewContacts();\n      this.m_newFixture = false;\n    }\n\n    this.m_locked = true;\n\n    const step = Step_s_step;\n    step.dt = dt;\n    step.velocityIterations = velocityIterations;\n    step.positionIterations = positionIterations;\n    if (B2_ENABLE_PARTICLE) {\n      step.particleIterations = particleIterations;\n    }\n    if (dt > 0) {\n      step.inv_dt = 1 / dt;\n    } else {\n      step.inv_dt = 0;\n    }\n\n    step.dtRatio = this.m_inv_dt0 * dt;\n\n    step.warmStarting = this.m_warmStarting;\n\n    // Update contacts. This is where some contacts are destroyed.\n    const timer = Step_s_timer.Reset();\n    this.m_contactManager.Collide();\n    this.m_profile.collide = timer.GetMilliseconds();\n\n    // Integrate velocities, solve velocity constraints, and integrate positions.\n    if (this.m_stepComplete && step.dt > 0) {\n      const timer = Step_s_timer.Reset();\n      if (B2_ENABLE_PARTICLE) {\n        for (let p = this.m_particleSystemList; p; p = p.m_next) {\n          p.Solve(step); // Particle Simulation\n        }\n      }\n      this.Solve(step);\n      this.m_profile.solve = timer.GetMilliseconds();\n    }\n\n    // Handle TOI events.\n    if (this.m_continuousPhysics && step.dt > 0) {\n      const timer = Step_s_timer.Reset();\n      this.SolveTOI(step);\n      this.m_profile.solveTOI = timer.GetMilliseconds();\n    }\n\n    if (step.dt > 0) {\n      this.m_inv_dt0 = step.inv_dt;\n    }\n\n    if (this.m_clearForces) {\n      this.ClearForces();\n    }\n\n    this.m_locked = false;\n\n    this.m_profile.step = stepTimer.GetMilliseconds();\n  }\n\n  /// Manually clear the force buffer on all bodies. By default, forces are cleared automatically\n  /// after each call to Step. The default behavior is modified by calling SetAutoClearForces.\n  /// The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain\n  /// a fixed sized time step under a variable frame-rate.\n  /// When you perform sub-stepping you will disable auto clearing of forces and instead call\n  /// ClearForces after all sub-steps are complete in one pass of your game loop.\n  /// @see SetAutoClearForces\n  ClearForces(): void {\n    for (let body = this.m_bodyList; body; body = body.m_next) {\n      body.m_force.SetZero();\n      body.m_torque = 0;\n    }\n  }\n\n  /// Query the world for all fixtures that potentially overlap the\n  /// provided AABB.\n  /// @param callback a user implemented callback class.\n  /// @param aabb the query box.\n  QueryAABB(callback: b2QueryCallback, aabb: b2AABB): void;\n  QueryAABB(aabb: b2AABB, fn: b2QueryCallbackFunction): void;\n  QueryAABB(...args: any[]): void {\n    if (args[0] instanceof b2QueryCallback) {\n      this._QueryAABB(args[0], args[1]);\n    } else {\n      this._QueryAABB(null, args[0], args[1]);\n    }\n  }\n\n  private _QueryAABB(\n    callback: b2QueryCallback | null,\n    aabb: b2AABB,\n    fn?: b2QueryCallbackFunction,\n  ): void {\n    this.m_contactManager.m_broadPhase.Query(aabb, (proxy: b2TreeNode<b2FixtureProxy>): boolean => {\n      const fixture_proxy: b2FixtureProxy = proxy.userData;\n      !!B2_DEBUG && b2Assert(fixture_proxy instanceof b2FixtureProxy);\n      const fixture: b2Fixture = fixture_proxy.fixture;\n      if (callback) {\n        return callback.ReportFixture(fixture);\n      } else if (fn) {\n        return fn(fixture);\n      }\n      return true;\n    });\n    if (B2_ENABLE_PARTICLE && callback instanceof b2QueryCallback) {\n      for (let p = this.m_particleSystemList; p; p = p.m_next) {\n        if (callback.ShouldQueryParticleSystem(p)) {\n          p.QueryAABB(callback, aabb);\n        }\n      }\n    }\n  }\n\n  QueryAllAABB(aabb: b2AABB, out: b2Fixture[] = []): b2Fixture[] {\n    this.QueryAABB(aabb, (fixture: b2Fixture): boolean => {\n      out.push(fixture);\n      return true;\n    });\n    return out;\n  }\n\n  /// Query the world for all fixtures that potentially overlap the\n  /// provided point.\n  /// @param callback a user implemented callback class.\n  /// @param point the query point.\n  QueryPointAABB(callback: b2QueryCallback, point: XY): void;\n  QueryPointAABB(point: XY, fn: b2QueryCallbackFunction): void;\n  QueryPointAABB(...args: any[]): void {\n    if (args[0] instanceof b2QueryCallback) {\n      this._QueryPointAABB(args[0], args[1]);\n    } else {\n      this._QueryPointAABB(null, args[0], args[1]);\n    }\n  }\n\n  private _QueryPointAABB(\n    callback: b2QueryCallback | null,\n    point: XY,\n    fn?: b2QueryCallbackFunction,\n  ): void {\n    this.m_contactManager.m_broadPhase.QueryPoint(\n      point,\n      (proxy: b2TreeNode<b2FixtureProxy>): boolean => {\n        const fixture_proxy: b2FixtureProxy = proxy.userData;\n        !!B2_DEBUG && b2Assert(fixture_proxy instanceof b2FixtureProxy);\n        const fixture: b2Fixture = fixture_proxy.fixture;\n        if (callback) {\n          return callback.ReportFixture(fixture);\n        } else if (fn) {\n          return fn(fixture);\n        }\n        return true;\n      },\n    );\n    if (B2_ENABLE_PARTICLE && callback instanceof b2QueryCallback) {\n      for (let p = this.m_particleSystemList; p; p = p.m_next) {\n        if (callback.ShouldQueryParticleSystem(p)) {\n          p.QueryPointAABB(callback, point);\n        }\n      }\n    }\n  }\n\n  QueryAllPointAABB(point: XY, out: b2Fixture[] = []): b2Fixture[] {\n    this.QueryPointAABB(point, (fixture: b2Fixture): boolean => {\n      out.push(fixture);\n      return true;\n    });\n    return out;\n  }\n\n  QueryFixtureShape(\n    callback: b2QueryCallback,\n    shape: b2Shape,\n    index: number,\n    transform: b2Transform,\n  ): void;\n  QueryFixtureShape(\n    shape: b2Shape,\n    index: number,\n    transform: b2Transform,\n    fn: b2QueryCallbackFunction,\n  ): void;\n  QueryFixtureShape(...args: any[]): void {\n    if (args[0] instanceof b2QueryCallback) {\n      this._QueryFixtureShape(args[0], args[1], args[2], args[3]);\n    } else {\n      this._QueryFixtureShape(null, args[0], args[1], args[2], args[3]);\n    }\n  }\n\n  private static QueryFixtureShape_s_aabb = new b2AABB();\n\n  private _QueryFixtureShape(\n    callback: b2QueryCallback | null,\n    shape: b2Shape,\n    index: number,\n    transform: b2Transform,\n    fn?: b2QueryCallbackFunction,\n  ): void {\n    const aabb: b2AABB = b2World.QueryFixtureShape_s_aabb;\n    shape.ComputeAABB(aabb, transform, index);\n    this.m_contactManager.m_broadPhase.Query(aabb, (proxy: b2TreeNode<b2FixtureProxy>): boolean => {\n      const fixture_proxy: b2FixtureProxy = proxy.userData;\n      !!B2_DEBUG && b2Assert(fixture_proxy instanceof b2FixtureProxy);\n      const fixture: b2Fixture = fixture_proxy.fixture;\n      if (\n        b2TestOverlapShape(\n          shape,\n          index,\n          fixture.GetShape(),\n          fixture_proxy.childIndex,\n          transform,\n          fixture.GetBody().GetTransform(),\n        )\n      ) {\n        if (callback) {\n          return callback.ReportFixture(fixture);\n        } else if (fn) {\n          return fn(fixture);\n        }\n      }\n      return true;\n    });\n    if (B2_ENABLE_PARTICLE && callback instanceof b2QueryCallback) {\n      for (let p = this.m_particleSystemList; p; p = p.m_next) {\n        if (callback.ShouldQueryParticleSystem(p)) {\n          p.QueryAABB(callback, aabb);\n        }\n      }\n    }\n  }\n\n  QueryAllFixtureShape(\n    shape: b2Shape,\n    index: number,\n    transform: b2Transform,\n    out: b2Fixture[] = [],\n  ): b2Fixture[] {\n    this.QueryFixtureShape(shape, index, transform, (fixture: b2Fixture): boolean => {\n      out.push(fixture);\n      return true;\n    });\n    return out;\n  }\n\n  QueryFixturePoint(callback: b2QueryCallback, point: XY): void;\n  QueryFixturePoint(point: XY, fn: b2QueryCallbackFunction): void;\n  QueryFixturePoint(...args: any[]): void {\n    if (args[0] instanceof b2QueryCallback) {\n      this._QueryFixturePoint(args[0], args[1]);\n    } else {\n      this._QueryFixturePoint(null, args[0], args[1]);\n    }\n  }\n\n  private _QueryFixturePoint(\n    callback: b2QueryCallback | null,\n    point: XY,\n    fn?: b2QueryCallbackFunction,\n  ): void {\n    this.m_contactManager.m_broadPhase.QueryPoint(\n      point,\n      (proxy: b2TreeNode<b2FixtureProxy>): boolean => {\n        const fixture_proxy: b2FixtureProxy = proxy.userData;\n        !!B2_DEBUG && b2Assert(fixture_proxy instanceof b2FixtureProxy);\n        const fixture: b2Fixture = fixture_proxy.fixture;\n        if (fixture.TestPoint(point)) {\n          if (callback) {\n            return callback.ReportFixture(fixture);\n          } else if (fn) {\n            return fn(fixture);\n          }\n        }\n        return true;\n      },\n    );\n    if (B2_ENABLE_PARTICLE && callback) {\n      for (let p = this.m_particleSystemList; p; p = p.m_next) {\n        if (callback.ShouldQueryParticleSystem(p)) {\n          p.QueryPointAABB(callback, point);\n        }\n      }\n    }\n  }\n\n  QueryAllFixturePoint(point: XY, out: b2Fixture[] = []): b2Fixture[] {\n    this.QueryFixturePoint(point, (fixture: b2Fixture): boolean => {\n      out.push(fixture);\n      return true;\n    });\n    return out;\n  }\n\n  /// Ray-cast the world for all fixtures in the path of the ray. Your callback\n  /// controls whether you get the closest point, any point, or n-points.\n  /// The ray-cast ignores shapes that contain the starting point.\n  /// @param callback a user implemented callback class.\n  /// @param point1 the ray starting point\n  /// @param point2 the ray ending point\n  RayCast(callback: b2RayCastCallback, point1: XY, point2: XY): void;\n  RayCast(point1: XY, point2: XY, fn: b2RayCastCallbackFunction): void;\n  RayCast(...args: any[]): void {\n    if (args[0] instanceof b2RayCastCallback) {\n      this._RayCast(args[0], args[1], args[2]);\n    } else {\n      this._RayCast(null, args[0], args[1], args[2]);\n    }\n  }\n\n  private static RayCast_s_input = new b2RayCastInput();\n  private static RayCast_s_output = new b2RayCastOutput();\n  private static RayCast_s_point = new b2Vec2();\n\n  private _RayCast(\n    callback: b2RayCastCallback | null,\n    point1: XY,\n    point2: XY,\n    fn?: b2RayCastCallbackFunction,\n  ): void {\n    const input: b2RayCastInput = b2World.RayCast_s_input;\n    input.maxFraction = 1;\n    input.p1.Copy(point1);\n    input.p2.Copy(point2);\n    this.m_contactManager.m_broadPhase.RayCast(\n      input,\n      (input: b2RayCastInput, proxy: b2TreeNode<b2FixtureProxy>): number => {\n        const fixture_proxy: b2FixtureProxy = proxy.userData;\n        !!B2_DEBUG && b2Assert(fixture_proxy instanceof b2FixtureProxy);\n        const fixture: b2Fixture = fixture_proxy.fixture;\n        const index: number = fixture_proxy.childIndex;\n        const output: b2RayCastOutput = b2World.RayCast_s_output;\n        const hit: boolean = fixture.RayCast(output, input, index);\n        if (hit) {\n          const fraction: number = output.fraction;\n          const point: b2Vec2 = b2World.RayCast_s_point;\n          point.Set(\n            (1 - fraction) * point1.x + fraction * point2.x,\n            (1 - fraction) * point1.y + fraction * point2.y,\n          );\n          if (callback) {\n            return callback.ReportFixture(fixture, point, output.normal, fraction);\n          } else if (fn) {\n            return fn(fixture, point, output.normal, fraction);\n          }\n        }\n        return input.maxFraction;\n      },\n    );\n    if (B2_ENABLE_PARTICLE && callback) {\n      for (let p = this.m_particleSystemList; p; p = p.m_next) {\n        if (callback.ShouldQueryParticleSystem(p)) {\n          p.RayCast(callback, point1, point2);\n        }\n      }\n    }\n  }\n\n  RayCastOne(point1: XY, point2: XY): b2Fixture | null {\n    let result: b2Fixture | null = null;\n    let min_fraction = 1;\n    this.RayCast(\n      point1,\n      point2,\n      (fixture: b2Fixture, point: b2Vec2, normal: b2Vec2, fraction: number): number => {\n        if (fraction < min_fraction) {\n          min_fraction = fraction;\n          result = fixture;\n        }\n        return min_fraction;\n      },\n    );\n    return result;\n  }\n\n  RayCastAll(point1: XY, point2: XY, out: b2Fixture[] = []): b2Fixture[] {\n    this.RayCast(\n      point1,\n      point2,\n      (fixture: b2Fixture, point: b2Vec2, normal: b2Vec2, fraction: number): number => {\n        out.push(fixture);\n        return 1;\n      },\n    );\n    return out;\n  }\n\n  /// Get the world body list. With the returned body, use b2Body::GetNext to get\n  /// the next body in the world list. A NULL body indicates the end of the list.\n  /// @return the head of the world body list.\n  GetBodyList(): b2Body | null {\n    return this.m_bodyList;\n  }\n\n  /// Get the world joint list. With the returned joint, use b2Joint::GetNext to get\n  /// the next joint in the world list. A NULL joint indicates the end of the list.\n  /// @return the head of the world joint list.\n  GetJointList(): b2Joint | null {\n    return this.m_jointList;\n  }\n\n  GetParticleSystemList(): b2ParticleSystem | null {\n    return this.m_particleSystemList;\n  }\n\n  /// Get the world contact list. With the returned contact, use b2Contact::GetNext to get\n  /// the next contact in the world list. A NULL contact indicates the end of the list.\n  /// @return the head of the world contact list.\n  /// @warning contacts are created and destroyed in the middle of a time step.\n  /// Use b2ContactListener to avoid missing contacts.\n  GetContactList(): b2Contact | null {\n    return this.m_contactManager.m_contactList;\n  }\n\n  /// Enable/disable sleep.\n  SetAllowSleeping(flag: boolean): void {\n    if (flag === this.m_allowSleep) {\n      return;\n    }\n\n    this.m_allowSleep = flag;\n    if (!this.m_allowSleep) {\n      for (let b = this.m_bodyList; b; b = b.m_next) {\n        b.SetAwake(true);\n      }\n    }\n  }\n\n  GetAllowSleeping(): boolean {\n    return this.m_allowSleep;\n  }\n\n  /// Enable/disable warm starting. For testing.\n  SetWarmStarting(flag: boolean): void {\n    this.m_warmStarting = flag;\n  }\n\n  GetWarmStarting(): boolean {\n    return this.m_warmStarting;\n  }\n\n  /// Enable/disable continuous physics. For testing.\n  SetContinuousPhysics(flag: boolean): void {\n    this.m_continuousPhysics = flag;\n  }\n\n  GetContinuousPhysics(): boolean {\n    return this.m_continuousPhysics;\n  }\n\n  /// Enable/disable single stepped continuous physics. For testing.\n  SetSubStepping(flag: boolean): void {\n    this.m_subStepping = flag;\n  }\n\n  GetSubStepping(): boolean {\n    return this.m_subStepping;\n  }\n\n  /// Get the number of broad-phase proxies.\n  GetProxyCount(): number {\n    return this.m_contactManager.m_broadPhase.GetProxyCount();\n  }\n\n  /// Get the number of bodies.\n  GetBodyCount(): number {\n    return this.m_bodyCount;\n  }\n\n  /// Get the number of joints.\n  GetJointCount(): number {\n    return this.m_jointCount;\n  }\n\n  /// Get the number of contacts (each may have 0 or more contact points).\n  GetContactCount(): number {\n    return this.m_contactManager.m_contactCount;\n  }\n\n  /// Get the height of the dynamic tree.\n  GetTreeHeight(): number {\n    return this.m_contactManager.m_broadPhase.GetTreeHeight();\n  }\n\n  /// Get the balance of the dynamic tree.\n  GetTreeBalance(): number {\n    return this.m_contactManager.m_broadPhase.GetTreeBalance();\n  }\n\n  /// Get the quality metric of the dynamic tree. The smaller the better.\n  /// The minimum is 1.\n  GetTreeQuality(): number {\n    return this.m_contactManager.m_broadPhase.GetTreeQuality();\n  }\n\n  /// Change the global gravity vector.\n  SetGravity(gravity: XY, wake = true) {\n    if (!b2Vec2.IsEqualToV(this.m_gravity, gravity)) {\n      this.m_gravity.Copy(gravity);\n\n      if (wake) {\n        for (let b: b2Body | null = this.m_bodyList; b; b = b.m_next) {\n          b.SetAwake(true);\n        }\n      }\n    }\n  }\n\n  /// Get the global gravity vector.\n  GetGravity(): Readonly<b2Vec2> {\n    return this.m_gravity;\n  }\n\n  /// Is the world locked (in the middle of a time step).\n  IsLocked(): boolean {\n    return this.m_locked;\n  }\n\n  /// Set flag to control automatic clearing of forces after each time step.\n  SetAutoClearForces(flag: boolean): void {\n    this.m_clearForces = flag;\n  }\n\n  /// Get the flag that controls automatic clearing of forces after each time step.\n  GetAutoClearForces(): boolean {\n    return this.m_clearForces;\n  }\n\n  /// Shift the world origin. Useful for large worlds.\n  /// The body shift formula is: position -= newOrigin\n  /// @param newOrigin the new origin with respect to the old origin\n  ShiftOrigin(newOrigin: XY): void {\n    if (this.IsLocked()) {\n      throw new Error();\n    }\n\n    for (let b: b2Body | null = this.m_bodyList; b; b = b.m_next) {\n      b.m_xf.p.SelfSub(newOrigin);\n      b.m_sweep.c0.SelfSub(newOrigin);\n      b.m_sweep.c.SelfSub(newOrigin);\n    }\n\n    for (let j: b2Joint | null = this.m_jointList; j; j = j.m_next) {\n      j.ShiftOrigin(newOrigin);\n    }\n\n    this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);\n  }\n\n  /// Get the contact manager for testing.\n  GetContactManager(): b2ContactManager {\n    return this.m_contactManager;\n  }\n\n  /// Get the current profile.\n  GetProfile(): b2Profile {\n    return this.m_profile;\n  }\n\n  Solve(step: b2TimeStep): void {\n    if (B2_ENABLE_PARTICLE) {\n      // update previous transforms\n      for (let b = this.m_bodyList; b; b = b.m_next) {\n        b.m_xf0.Copy(b.m_xf);\n      }\n    }\n\n    if (B2_ENABLE_CONTROLLER) {\n      // @see b2Controller list\n      for (let controller = this.m_controllerList; controller; controller = controller.m_next) {\n        controller.Step(step);\n      }\n    }\n\n    this.m_profile.solveInit = 0;\n    this.m_profile.solveVelocity = 0;\n    this.m_profile.solvePosition = 0;\n\n    // Size the island for the worst case.\n    const island = this.m_island;\n    island.Initialize(\n      this.m_bodyCount,\n      this.m_contactManager.m_contactCount,\n      this.m_jointCount,\n      this.m_contactManager.m_contactListener,\n    );\n\n    // Clear all the island flags.\n    for (let b = this.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n    }\n    for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n      c.m_islandFlag = false;\n    }\n    for (let j = this.m_jointList; j; j = j.m_next) {\n      j.m_islandFlag = false;\n    }\n\n    // Build and simulate all awake islands.\n    const stackSize = this.m_bodyCount; // DEBUG\n    const stack = this.s_stack;\n    for (let seed = this.m_bodyList; seed; seed = seed.m_next) {\n      if (seed.m_islandFlag) {\n        continue;\n      }\n\n      if (!seed.IsAwake() || !seed.IsActive()) {\n        continue;\n      }\n\n      // The seed can be dynamic or kinematic.\n      if (seed.GetType() === b2BodyType.b2_staticBody) {\n        continue;\n      }\n\n      // Reset island and stack.\n      island.Clear();\n      let stackCount = 0;\n      stack[stackCount++] = seed;\n      seed.m_islandFlag = true;\n\n      // Perform a depth first search (DFS) on the constraint graph.\n      while (stackCount > 0) {\n        // Grab the next body off the stack and add it to the island.\n        const b: b2Body | null = stack[--stackCount];\n        if (!b) {\n          throw new Error();\n        }\n        !!B2_DEBUG && b2Assert(b.IsActive());\n        island.AddBody(b);\n\n        // Make sure the body is awake. (without resetting sleep timer).\n        b.m_awakeFlag = true;\n\n        // To keep islands as small as possible, we don't\n        // propagate islands across static bodies.\n        if (b.GetType() === b2BodyType.b2_staticBody) {\n          continue;\n        }\n\n        // Search all contacts connected to this body.\n        for (let ce = b.m_contactList; ce; ce = ce.next) {\n          const contact = ce.contact;\n\n          // Has this contact already been added to an island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Is this contact solid and touching?\n          if (!contact.IsEnabled() || !contact.IsTouching()) {\n            continue;\n          }\n\n          // Skip sensors.\n          const sensorA = contact.m_fixtureA.m_isSensor;\n          const sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          island.AddContact(contact);\n          contact.m_islandFlag = true;\n\n          const other = ce.other;\n\n          // Was the other body already added to this island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          !!B2_DEBUG && b2Assert(stackCount < stackSize);\n          stack[stackCount++] = other;\n          other.m_islandFlag = true;\n        }\n\n        // Search all joints connect to this body.\n        for (let je = b.m_jointList; je; je = je.next) {\n          if (je.joint.m_islandFlag) {\n            continue;\n          }\n\n          const other = je.other;\n\n          // Don't simulate joints connected to inactive bodies.\n          if (!other.IsActive()) {\n            continue;\n          }\n\n          island.AddJoint(je.joint);\n          je.joint.m_islandFlag = true;\n\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          !!B2_DEBUG && b2Assert(stackCount < stackSize);\n          stack[stackCount++] = other;\n          other.m_islandFlag = true;\n        }\n      }\n\n      if ((island.Solve(this.m_profile, step, this.m_gravity, this.m_allowSleep) & 3) === 3) {\n        island.SleepAll();\n      }\n\n      // Post solve cleanup.\n      for (let i = 0; i < island.m_bodyCount; ++i) {\n        // Allow static bodies to participate in other islands.\n        const b = island.m_bodies[i];\n        if (b.GetType() === b2BodyType.b2_staticBody) {\n          b.m_islandFlag = false;\n        }\n      }\n    }\n\n    for (let i = 0; i < stack.length; ++i) {\n      if (!stack[i]) {\n        break;\n      }\n      stack[i] = null;\n    }\n\n    const timer = Step_s_broadphaseTimer.Reset();\n\n    // Synchronize fixtures, check for out of range bodies.\n    this._SynchronizeFixturesCheck();\n\n    // Look for new contacts.\n    this.m_contactManager.FindNewContacts();\n    this.m_profile.broadphase = timer.GetMilliseconds();\n  }\n\n  _SynchronizeFixturesCheck() {\n    // Synchronize fixtures, check for out of range bodies.\n    for (let b = this.m_bodyList; b; b = b.m_next) {\n      // If a body was not in an island then it did not move.\n      if (!b.m_islandFlag) {\n        continue;\n      }\n\n      if (b.GetType() === b2BodyType.b2_staticBody) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.SynchronizeFixtures();\n    }\n  }\n\n  SolveTOI(step: b2TimeStep): void {\n    const island: b2Island = this.m_island;\n    island.Initialize(\n      b2_maxTOIContacts << 1,\n      b2_maxTOIContacts,\n      0,\n      this.m_contactManager.m_contactListener,\n    );\n\n    if (this.m_stepComplete) {\n      for (let b: b2Body | null = this.m_bodyList; b; b = b.m_next) {\n        b.m_islandFlag = false;\n        b.m_sweep.alpha0 = 0;\n      }\n\n      for (let c: b2Contact | null = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Invalidate TOI\n        c.m_toiFlag = false;\n        c.m_islandFlag = false;\n        c.m_toiCount = 0;\n        c.m_toi = 1.0;\n      }\n    }\n\n    // Find TOI events and solve them.\n    for (;;) {\n      // Find the first TOI.\n      let minContact: b2Contact | null = null;\n      let minAlpha = 1.0;\n\n      for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Is this contact disabled?\n        if (!c.IsEnabled()) {\n          continue;\n        }\n\n        // Prevent excessive sub-stepping.\n        if (c.m_toiCount > b2_maxSubSteps) {\n          continue;\n        }\n\n        let alpha = 1;\n        if (c.m_toiFlag) {\n          // This contact has a valid cached TOI.\n          alpha = c.m_toi;\n        } else {\n          const fA: b2Fixture = c.GetFixtureA();\n          const fB: b2Fixture = c.GetFixtureB();\n\n          // Is there a sensor?\n          if (fA.IsSensor() || fB.IsSensor()) {\n            continue;\n          }\n\n          const bA: b2Body = fA.GetBody();\n          const bB: b2Body = fB.GetBody();\n\n          const typeA: b2BodyType = bA.m_type;\n          const typeB: b2BodyType = bB.m_type;\n          !!B2_DEBUG &&\n            b2Assert(typeA !== b2BodyType.b2_staticBody || typeB !== b2BodyType.b2_staticBody);\n\n          const activeA: boolean = bA.IsAwake() && typeA !== b2BodyType.b2_staticBody;\n          const activeB: boolean = bB.IsAwake() && typeB !== b2BodyType.b2_staticBody;\n\n          // Is at least one body active (awake and dynamic or kinematic)?\n          if (!activeA && !activeB) {\n            continue;\n          }\n\n          const collideA: boolean = bA.IsBullet() || typeA !== b2BodyType.b2_dynamicBody;\n          const collideB: boolean = bB.IsBullet() || typeB !== b2BodyType.b2_dynamicBody;\n\n          // Are these two non-bullet dynamic bodies?\n          if (!collideA && !collideB) {\n            continue;\n          }\n\n          // Compute the TOI for this contact.\n          // Put the sweeps onto the same time interval.\n          let alpha0: number = bA.m_sweep.alpha0;\n\n          if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n            alpha0 = bB.m_sweep.alpha0;\n            bA.m_sweep.Advance(alpha0);\n          } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n            alpha0 = bA.m_sweep.alpha0;\n            bB.m_sweep.Advance(alpha0);\n          }\n\n          !!B2_DEBUG && b2Assert(alpha0 < 1);\n\n          const indexA: number = c.GetChildIndexA();\n          const indexB: number = c.GetChildIndexB();\n\n          // Compute the time of impact in interval [0, minTOI]\n          const input: b2TOIInput = SolveTOI_s_toi_input;\n          input.proxyA.SetShape(fA.GetShape(), indexA);\n          input.proxyB.SetShape(fB.GetShape(), indexB);\n          input.sweepA.Copy(bA.m_sweep);\n          input.sweepB.Copy(bB.m_sweep);\n          input.tMax = 1;\n\n          const output: b2TOIOutput = SolveTOI_s_toi_output;\n          b2TimeOfImpact(output, input);\n\n          // Beta is the fraction of the remaining portion of the .\n          const beta: number = output.t;\n          if (output.state === b2TOIOutputState.e_touching) {\n            alpha = b2Min(alpha0 + (1 - alpha0) * beta, 1);\n          } else {\n            alpha = 1;\n          }\n\n          c.m_toi = alpha;\n          c.m_toiFlag = true;\n        }\n\n        if (alpha < minAlpha) {\n          // This is the minimum TOI found so far.\n          minContact = c;\n          minAlpha = alpha;\n        }\n      }\n\n      if (minContact === null || 1 - 10 * b2_epsilon < minAlpha) {\n        // No more TOI events. Done!\n        this.m_stepComplete = true;\n        break;\n      }\n\n      // Advance the bodies to the TOI.\n      const fA: b2Fixture = minContact.GetFixtureA();\n      const fB: b2Fixture = minContact.GetFixtureB();\n      const bA: b2Body = fA.GetBody();\n      const bB: b2Body = fB.GetBody();\n\n      const backup1 = SolveTOI_s_backup1.Copy(bA.m_sweep);\n      const backup2 = SolveTOI_s_backup2.Copy(bB.m_sweep);\n\n      bA.Advance(minAlpha);\n      bB.Advance(minAlpha);\n\n      // The TOI contact likely has some new contact points.\n      minContact.Update(this.m_contactManager.m_contactListener);\n      minContact.m_toiFlag = false;\n      ++minContact.m_toiCount;\n\n      // Is the contact solid?\n      if (!minContact.IsEnabled() || !minContact.IsTouching()) {\n        // Restore the sweeps.\n        minContact.SetEnabled(false);\n        bA.m_sweep.Copy(backup1);\n        bB.m_sweep.Copy(backup2);\n        bA.SynchronizeTransform();\n        bB.SynchronizeTransform();\n        continue;\n      }\n\n      bA.SetAwake(true);\n      bB.SetAwake(true);\n\n      // Build the island\n      island.Clear();\n      island.AddBody(bA);\n      island.AddBody(bB);\n      island.AddContact(minContact);\n\n      bA.m_islandFlag = true;\n      bB.m_islandFlag = true;\n      minContact.m_islandFlag = true;\n\n      // Get contacts on bodyA and bodyB.\n      // const bodies: b2Body[] = [bA, bB];\n      for (let i = 0; i < 2; ++i) {\n        const body: b2Body = i === 0 ? bA : bB; // bodies[i];\n        if (body.m_type === b2BodyType.b2_dynamicBody) {\n          for (let ce: b2ContactEdge | null = body.m_contactList; ce; ce = ce.next) {\n            if (island.m_bodyCount === island.m_bodyCapacity) {\n              break;\n            }\n\n            if (island.m_contactCount === island.m_contactCapacity) {\n              break;\n            }\n\n            const contact: b2Contact = ce.contact;\n\n            // Has this contact already been added to the island?\n            if (contact.m_islandFlag) {\n              continue;\n            }\n\n            // Only add static, kinematic, or bullet bodies.\n            const other = ce.other;\n            if (\n              other.m_type === b2BodyType.b2_dynamicBody &&\n              !body.IsBullet() &&\n              !other.IsBullet()\n            ) {\n              continue;\n            }\n\n            // Skip sensors.\n            const sensorA = contact.m_fixtureA.m_isSensor;\n            const sensorB = contact.m_fixtureB.m_isSensor;\n            if (sensorA || sensorB) {\n              continue;\n            }\n\n            // Tentatively advance the body to the TOI.\n            const backup = SolveTOI_s_backup.Copy(other.m_sweep);\n            if (!other.m_islandFlag) {\n              other.Advance(minAlpha);\n            }\n\n            // Update the contact points\n            contact.Update(this.m_contactManager.m_contactListener);\n\n            // Was the contact disabled by the user?\n            if (!contact.IsEnabled()) {\n              other.m_sweep.Copy(backup);\n              other.SynchronizeTransform();\n              continue;\n            }\n\n            // Are there contact points?\n            if (!contact.IsTouching()) {\n              other.m_sweep.Copy(backup);\n              other.SynchronizeTransform();\n              continue;\n            }\n\n            // Add the contact to the island\n            contact.m_islandFlag = true;\n            island.AddContact(contact);\n\n            // Has the other body already been added to the island?\n            if (other.m_islandFlag) {\n              continue;\n            }\n\n            // Add the other body to the island.\n            other.m_islandFlag = true;\n\n            if (other.m_type !== b2BodyType.b2_staticBody) {\n              other.SetAwake(true);\n            }\n\n            island.AddBody(other);\n          }\n        }\n      }\n\n      const subStep = SolveTOI_s_subStep;\n      subStep.dt = (1 - minAlpha) * step.dt;\n      subStep.inv_dt = 1 / subStep.dt;\n      subStep.dtRatio = 1;\n      subStep.positionIterations = 20;\n      subStep.velocityIterations = step.velocityIterations;\n      if (B2_ENABLE_PARTICLE) {\n        subStep.particleIterations = step.particleIterations;\n      }\n      subStep.warmStarting = false;\n      island.SolveTOI(subStep, bA.m_islandIndex, bB.m_islandIndex);\n\n      // Reset island flags and synchronize broad-phase proxies.\n      for (let i = 0; i < island.m_bodyCount; ++i) {\n        const body: b2Body = island.m_bodies[i];\n        body.m_islandFlag = false;\n\n        if (body.m_type !== b2BodyType.b2_dynamicBody) {\n          continue;\n        }\n\n        body.SynchronizeFixtures();\n\n        // Invalidate all contact TOIs on this displaced body.\n        for (let ce: b2ContactEdge | null = body.m_contactList; ce; ce = ce.next) {\n          ce.contact.m_toiFlag = false;\n          ce.contact.m_islandFlag = false;\n        }\n      }\n\n      // Commit fixture proxy movements to the broad-phase so that new contacts are created.\n      // Also, some contacts can be destroyed.\n      this.m_contactManager.FindNewContacts();\n\n      if (this.m_subStepping) {\n        this.m_stepComplete = false;\n        break;\n      }\n    }\n  }\n\n  AddController(controller: b2Controller): b2Controller {\n    if (!B2_ENABLE_CONTROLLER) {\n      return controller;\n    }\n    // b2Assert(controller.m_world === null, \"Controller can only be a member of one world\");\n    // controller.m_world = this;\n    controller.m_next = this.m_controllerList;\n    controller.m_prev = null;\n    if (this.m_controllerList) {\n      this.m_controllerList.m_prev = controller;\n    }\n    this.m_controllerList = controller;\n    ++this.m_controllerCount;\n    return controller;\n  }\n\n  RemoveController(controller: b2Controller): b2Controller {\n    if (!B2_ENABLE_CONTROLLER) {\n      return controller;\n    }\n    // b2Assert(controller.m_world === this, \"Controller is not a member of this world\");\n    if (controller.m_prev) {\n      controller.m_prev.m_next = controller.m_next;\n    }\n    if (controller.m_next) {\n      controller.m_next.m_prev = controller.m_prev;\n    }\n    if (this.m_controllerList === controller) {\n      this.m_controllerList = controller.m_next;\n    }\n    --this.m_controllerCount;\n    controller.m_prev = null;\n    controller.m_next = null;\n    // delete controller.m_world; // = null;\n    return controller;\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_CONTROLLER\n\nimport { b2Body } from '../dynamics/b2Body';\nimport { b2TimeStep } from '../dynamics/b2TimeStep';\nimport { b2Draw } from '../common/b2Draw';\n\n/**\n * A controller edge is used to connect bodies and controllers\n * together in a bipartite graph.\n */\nexport class b2ControllerEdge {\n  readonly controller: b2Controller; ///< provides quick access to other end of this edge.\n  readonly body: b2Body; ///< the body\n  prevBody: b2ControllerEdge | null = null; ///< the previous controller edge in the controllers's joint list\n  nextBody: b2ControllerEdge | null = null; ///< the next controller edge in the controllers's joint list\n  prevController: b2ControllerEdge | null = null; ///< the previous controller edge in the body's joint list\n  nextController: b2ControllerEdge | null = null; ///< the next controller edge in the body's joint list\n  constructor(controller: b2Controller, body: b2Body) {\n    this.controller = controller;\n    this.body = body;\n  }\n}\n\n/**\n * Base class for controllers. Controllers are a convience for\n * encapsulating common per-step functionality.\n */\nexport abstract class b2Controller {\n  // m_world: b2World;\n  m_bodyList: b2ControllerEdge | null = null;\n  m_bodyCount = 0;\n  m_prev: b2Controller | null = null;\n  m_next: b2Controller | null = null;\n\n  /**\n   * Controllers override this to implement per-step functionality.\n   */\n  abstract Step(step: b2TimeStep): void;\n\n  /**\n   * Controllers override this to provide debug drawing.\n   */\n  abstract Draw(debugDraw: b2Draw): void;\n\n  /**\n   * Get the next controller in the world's body list.\n   */\n  GetNext(): b2Controller | null {\n    return this.m_next;\n  }\n\n  /**\n   * Get the previous controller in the world's body list.\n   */\n  GetPrev(): b2Controller | null {\n    return this.m_prev;\n  }\n\n  /**\n   * Get the parent world of this body.\n   */\n  // GetWorld() {\n  //   return this.m_world;\n  // }\n\n  /**\n   * Get the attached body list\n   */\n  GetBodyList(): b2ControllerEdge | null {\n    return this.m_bodyList;\n  }\n\n  /**\n   * Adds a body to the controller list.\n   */\n  AddBody(body: b2Body): void {\n    const edge = new b2ControllerEdge(this, body);\n\n    //Add edge to controller list\n    edge.nextBody = this.m_bodyList;\n    edge.prevBody = null;\n    if (this.m_bodyList) {\n      this.m_bodyList.prevBody = edge;\n    }\n    this.m_bodyList = edge;\n    ++this.m_bodyCount;\n\n    //Add edge to body list\n    edge.nextController = body.m_controllerList;\n    edge.prevController = null;\n    if (body.m_controllerList) {\n      body.m_controllerList.prevController = edge;\n    }\n    body.m_controllerList = edge;\n    ++body.m_controllerCount;\n  }\n\n  /**\n   * Removes a body from the controller list.\n   */\n  RemoveBody(body: b2Body): void {\n    //Assert that the controller is not empty\n    if (this.m_bodyCount <= 0) {\n      throw new Error();\n    }\n\n    //Find the corresponding edge\n    /*b2ControllerEdge*/\n    let edge = this.m_bodyList;\n    while (edge && edge.body !== body) {\n      edge = edge.nextBody;\n    }\n\n    //Assert that we are removing a body that is currently attached to the controller\n    if (edge === null) {\n      throw new Error();\n    }\n\n    //Remove edge from controller list\n    if (edge.prevBody) {\n      edge.prevBody.nextBody = edge.nextBody;\n    }\n    if (edge.nextBody) {\n      edge.nextBody.prevBody = edge.prevBody;\n    }\n    if (this.m_bodyList === edge) {\n      this.m_bodyList = edge.nextBody;\n    }\n    --this.m_bodyCount;\n\n    //Remove edge from body list\n    if (edge.nextController) {\n      edge.nextController.prevController = edge.prevController;\n    }\n    if (edge.prevController) {\n      edge.prevController.nextController = edge.nextController;\n    }\n    if (body.m_controllerList === edge) {\n      body.m_controllerList = edge.nextController;\n    }\n    --body.m_controllerCount;\n  }\n\n  /**\n   * Removes all bodies from the controller list.\n   */\n  Clear(): void {\n    while (this.m_bodyList) {\n      this.RemoveBody(this.m_bodyList.body);\n    }\n\n    this.m_bodyCount = 0;\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_CONTROLLER\n\nimport { b2Controller, b2ControllerEdge } from './b2Controller';\nimport { b2Vec2 } from '../common/b2Math';\nimport { b2TimeStep } from '../dynamics/b2TimeStep';\nimport { b2_epsilon } from '../common/b2Settings';\nimport { b2Color, b2Draw } from '../common/b2Draw';\n\n/**\n * Calculates buoyancy forces for fluids in the form of a half\n * plane.\n */\nexport class b2BuoyancyController extends b2Controller {\n  /**\n   * The outer surface normal\n   */\n  readonly normal = new b2Vec2(0, 1);\n  /**\n   * The height of the fluid surface along the normal\n   */\n  offset = 0;\n  /**\n   * The fluid density\n   */\n  density = 0;\n  /**\n   * Fluid velocity, for drag calculations\n   */\n  readonly velocity = new b2Vec2(0, 0);\n  /**\n   * Linear drag co-efficient\n   */\n  linearDrag = 0;\n  /**\n   * Angular drag co-efficient\n   */\n  angularDrag = 0;\n  /**\n   * If false, bodies are assumed to be uniformly dense, otherwise\n   * use the shapes densities\n   */\n  useDensity = false; //False by default to prevent a gotcha\n  /**\n   * If true, gravity is taken from the world instead of the\n   */\n  useWorldGravity = true;\n  /**\n   * Gravity vector, if the world's gravity is not used\n   */\n  readonly gravity = new b2Vec2(0, 0);\n\n  Step(step: b2TimeStep) {\n    if (!this.m_bodyList) {\n      return;\n    }\n    if (this.useWorldGravity) {\n      this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());\n    }\n    for (let i: b2ControllerEdge | null = this.m_bodyList; i; i = i.nextBody) {\n      const body = i.body;\n      if (!body.IsAwake()) {\n        //Buoyancy force is just a function of position,\n        //so unlike most forces, it is safe to ignore sleeping bodes\n        continue;\n      }\n      const areac = new b2Vec2();\n      const massc = new b2Vec2();\n      let area = 0;\n      let mass = 0;\n      for (let fixture = body.GetFixtureList(); fixture; fixture = fixture.m_next) {\n        const sc = new b2Vec2();\n        const sarea = fixture\n          .GetShape()\n          .ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);\n        area += sarea;\n        areac.x += sarea * sc.x;\n        areac.y += sarea * sc.y;\n        let shapeDensity = 0;\n        if (this.useDensity) {\n          //TODO: Expose density publicly\n          shapeDensity = fixture.GetDensity();\n        } else {\n          shapeDensity = 1;\n        }\n        mass += sarea * shapeDensity;\n        massc.x += sarea * sc.x * shapeDensity;\n        massc.y += sarea * sc.y * shapeDensity;\n      }\n      areac.x /= area;\n      areac.y /= area;\n      //    b2Vec2 localCentroid = b2MulT(body->GetXForm(),areac);\n      massc.x /= mass;\n      massc.y /= mass;\n      if (area < b2_epsilon) {\n        continue;\n      }\n      //Buoyancy\n      const buoyancyForce = this.gravity.Clone().SelfNeg();\n      buoyancyForce.SelfMul(this.density * area);\n      body.ApplyForce(buoyancyForce, massc);\n      //Linear drag\n      const dragForce = body.GetLinearVelocityFromWorldPoint(areac, new b2Vec2());\n      dragForce.SelfSub(this.velocity);\n      dragForce.SelfMul(-this.linearDrag * area);\n      body.ApplyForce(dragForce, areac);\n      //Angular drag\n      //TODO: Something that makes more physical sense?\n      body.ApplyTorque(\n        (-body.GetInertia() / body.GetMass()) * area * body.GetAngularVelocity() * this.angularDrag,\n      );\n    }\n  }\n\n  Draw(debugDraw: b2Draw) {\n    const r = 100;\n    const p1 = new b2Vec2();\n    const p2 = new b2Vec2();\n    p1.x = this.normal.x * this.offset + this.normal.y * r;\n    p1.y = this.normal.y * this.offset - this.normal.x * r;\n    p2.x = this.normal.x * this.offset - this.normal.y * r;\n    p2.y = this.normal.y * this.offset + this.normal.x * r;\n\n    const color = new b2Color(0, 0, 0.8);\n\n    debugDraw.DrawSegment(p1, p2, color);\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2011 Erin Catto http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_pi, b2Assert, b2MakeNumberArray } from '../common/b2Settings';\nimport { b2Atan2, b2Vec2 } from '../common/b2Math';\nimport { b2Color, b2Draw } from '../common/b2Draw';\n\n///\nexport class b2RopeDef {\n  ///\n  vertices: b2Vec2[] = [];\n\n  ///\n  count = 0;\n\n  ///\n  masses: number[] = [];\n\n  ///\n  readonly gravity: b2Vec2 = new b2Vec2(0, 0);\n\n  ///\n  damping = 0.1;\n\n  /// Stretching stiffness\n  k2 = 0.9;\n\n  /// Bending stiffness. Values above 0.5 can make the simulation blow up.\n  k3 = 0.1;\n}\n\n///\nexport class b2Rope {\n  m_count = 0;\n  m_ps: b2Vec2[] = [];\n  m_p0s: b2Vec2[] = [];\n  m_vs: b2Vec2[] = [];\n\n  m_ims: number[] = [];\n\n  m_Ls: number[] = [];\n  m_as: number[] = [];\n\n  readonly m_gravity: b2Vec2 = new b2Vec2();\n  m_damping = 0;\n\n  m_k2 = 1;\n  m_k3 = 0.1;\n\n  GetVertexCount(): number {\n    return this.m_count;\n  }\n\n  GetVertices(): b2Vec2[] {\n    return this.m_ps;\n  }\n\n  ///\n  Initialize(def: b2RopeDef): void {\n    !!B2_DEBUG && b2Assert(def.count >= 3);\n    this.m_count = def.count;\n    // this.m_ps = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\n    this.m_ps = b2Vec2.MakeArray(this.m_count);\n    // this.m_p0s = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\n    this.m_p0s = b2Vec2.MakeArray(this.m_count);\n    // this.m_vs = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\n    this.m_vs = b2Vec2.MakeArray(this.m_count);\n    // this.m_ims = (float32*)b2Alloc(this.m_count * sizeof(float32));\n    this.m_ims = b2MakeNumberArray(this.m_count);\n\n    for (let i = 0; i < this.m_count; ++i) {\n      this.m_ps[i].Copy(def.vertices[i]);\n      this.m_p0s[i].Copy(def.vertices[i]);\n      this.m_vs[i].SetZero();\n\n      const m: number = def.masses[i];\n      if (m > 0) {\n        this.m_ims[i] = 1 / m;\n      } else {\n        this.m_ims[i] = 0;\n      }\n    }\n\n    const count2: number = this.m_count - 1;\n    const count3: number = this.m_count - 2;\n    // this.m_Ls = (float32*)be2Alloc(count2 * sizeof(float32));\n    this.m_Ls = b2MakeNumberArray(count2);\n    // this.m_as = (float32*)b2Alloc(count3 * sizeof(float32));\n    this.m_as = b2MakeNumberArray(count3);\n\n    for (let i = 0; i < count2; ++i) {\n      const p1: b2Vec2 = this.m_ps[i];\n      const p2: b2Vec2 = this.m_ps[i + 1];\n      this.m_Ls[i] = b2Vec2.DistanceVV(p1, p2);\n    }\n\n    for (let i = 0; i < count3; ++i) {\n      const p1: b2Vec2 = this.m_ps[i];\n      const p2: b2Vec2 = this.m_ps[i + 1];\n      const p3: b2Vec2 = this.m_ps[i + 2];\n\n      const d1: b2Vec2 = b2Vec2.SubVV(p2, p1, b2Vec2.s_t0);\n      const d2: b2Vec2 = b2Vec2.SubVV(p3, p2, b2Vec2.s_t1);\n\n      const a: number = b2Vec2.CrossVV(d1, d2);\n      const b: number = b2Vec2.DotVV(d1, d2);\n\n      this.m_as[i] = b2Atan2(a, b);\n    }\n\n    this.m_gravity.Copy(def.gravity);\n    this.m_damping = def.damping;\n    this.m_k2 = def.k2;\n    this.m_k3 = def.k3;\n  }\n\n  ///\n  Step(h: number, iterations: number): void {\n    if (h === 0) {\n      return;\n    }\n\n    const d: number = Math.exp(-h * this.m_damping);\n\n    for (let i = 0; i < this.m_count; ++i) {\n      this.m_p0s[i].Copy(this.m_ps[i]);\n      if (this.m_ims[i] > 0) {\n        this.m_vs[i].SelfMulAdd(h, this.m_gravity);\n      }\n      this.m_vs[i].SelfMul(d);\n      this.m_ps[i].SelfMulAdd(h, this.m_vs[i]);\n    }\n\n    for (let i = 0; i < iterations; ++i) {\n      this.SolveC2();\n      this.SolveC3();\n      this.SolveC2();\n    }\n\n    const inv_h: number = 1 / h;\n    for (let i = 0; i < this.m_count; ++i) {\n      b2Vec2.MulSV(inv_h, b2Vec2.SubVV(this.m_ps[i], this.m_p0s[i], b2Vec2.s_t0), this.m_vs[i]);\n    }\n  }\n\n  ///\n  private static s_d = new b2Vec2();\n\n  SolveC2(): void {\n    const count2: number = this.m_count - 1;\n\n    for (let i = 0; i < count2; ++i) {\n      const p1: b2Vec2 = this.m_ps[i];\n      const p2: b2Vec2 = this.m_ps[i + 1];\n\n      const d: b2Vec2 = b2Vec2.SubVV(p2, p1, b2Rope.s_d);\n      const L: number = d.Normalize();\n\n      const im1: number = this.m_ims[i];\n      const im2: number = this.m_ims[i + 1];\n\n      if (im1 + im2 === 0) {\n        continue;\n      }\n\n      const s1: number = im1 / (im1 + im2);\n      const s2: number = im2 / (im1 + im2);\n\n      p1.SelfMulSub(this.m_k2 * s1 * (this.m_Ls[i] - L), d);\n      p2.SelfMulAdd(this.m_k2 * s2 * (this.m_Ls[i] - L), d);\n\n      // this.m_ps[i] = p1;\n      // this.m_ps[i + 1] = p2;\n    }\n  }\n\n  SetAngle(angle: number): void {\n    const count3: number = this.m_count - 2;\n    for (let i = 0; i < count3; ++i) {\n      this.m_as[i] = angle;\n    }\n  }\n\n  private static s_d1 = new b2Vec2();\n  private static s_d2 = new b2Vec2();\n  private static s_Jd1 = new b2Vec2();\n  private static s_Jd2 = new b2Vec2();\n  private static s_J1 = new b2Vec2();\n  private static s_J2 = new b2Vec2();\n\n  SolveC3(): void {\n    const count3: number = this.m_count - 2;\n\n    for (let i = 0; i < count3; ++i) {\n      const p1: b2Vec2 = this.m_ps[i];\n      const p2: b2Vec2 = this.m_ps[i + 1];\n      const p3: b2Vec2 = this.m_ps[i + 2];\n\n      const m1: number = this.m_ims[i];\n      const m2: number = this.m_ims[i + 1];\n      const m3: number = this.m_ims[i + 2];\n\n      const d1: b2Vec2 = b2Vec2.SubVV(p2, p1, b2Rope.s_d1);\n      const d2: b2Vec2 = b2Vec2.SubVV(p3, p2, b2Rope.s_d2);\n\n      const L1sqr: number = d1.LengthSquared();\n      const L2sqr: number = d2.LengthSquared();\n\n      if (L1sqr * L2sqr === 0) {\n        continue;\n      }\n\n      const a: number = b2Vec2.CrossVV(d1, d2);\n      const b: number = b2Vec2.DotVV(d1, d2);\n\n      let angle: number = b2Atan2(a, b);\n\n      const Jd1: b2Vec2 = b2Vec2.MulSV(-1 / L1sqr, d1.SelfSkew(), b2Rope.s_Jd1);\n      const Jd2: b2Vec2 = b2Vec2.MulSV(1 / L2sqr, d2.SelfSkew(), b2Rope.s_Jd2);\n\n      const J1: b2Vec2 = b2Vec2.NegV(Jd1, b2Rope.s_J1);\n      const J2: b2Vec2 = b2Vec2.SubVV(Jd1, Jd2, b2Rope.s_J2);\n      const J3: b2Vec2 = Jd2;\n\n      let mass: number =\n        m1 * b2Vec2.DotVV(J1, J1) + m2 * b2Vec2.DotVV(J2, J2) + m3 * b2Vec2.DotVV(J3, J3);\n      if (mass === 0) {\n        continue;\n      }\n\n      mass = 1 / mass;\n\n      let C: number = angle - this.m_as[i];\n\n      while (C > b2_pi) {\n        angle -= 2 * b2_pi;\n        C = angle - this.m_as[i];\n      }\n\n      while (C < -b2_pi) {\n        angle += 2 * b2_pi;\n        C = angle - this.m_as[i];\n      }\n\n      const impulse: number = -this.m_k3 * mass * C;\n\n      p1.SelfMulAdd(m1 * impulse, J1);\n      p2.SelfMulAdd(m2 * impulse, J2);\n      p3.SelfMulAdd(m3 * impulse, J3);\n\n      // this.m_ps[i] = p1;\n      // this.m_ps[i + 1] = p2;\n      // this.m_ps[i + 2] = p3;\n    }\n  }\n\n  Draw(draw: b2Draw): void {\n    const c: b2Color = new b2Color(0.4, 0.5, 0.7);\n\n    for (let i = 0; i < this.m_count - 1; ++i) {\n      draw.DrawSegment(this.m_ps[i], this.m_ps[i + 1], c);\n    }\n  }\n}\n","/*\n * Copyright (c) 2006-2007 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n//import * as box2d from \"@highduck/box2d\";\n\nimport { b2_pi, b2AABB, b2Color, b2Draw, b2Transform, b2Vec2 } from '@highduck/box2d';\n\nexport class Camera {\n  public readonly m_center: b2Vec2 = new b2Vec2(0, 20);\n  ///public readonly m_roll: b2Rot = new b2Rot(b2DegToRad(0));\n  public m_extent = 25;\n  public m_zoom = 1;\n  public m_width = 1280;\n  public m_height = 800;\n\n  public ConvertScreenToWorld(screenPoint: b2Vec2, out: b2Vec2): b2Vec2 {\n    return this.ConvertElementToWorld(screenPoint, out);\n  }\n\n  public ConvertWorldToScreen(worldPoint: b2Vec2, out: b2Vec2): b2Vec2 {\n    return this.ConvertWorldToElement(worldPoint, out);\n  }\n\n  public ConvertViewportToElement(viewport: b2Vec2, out: b2Vec2): b2Vec2 {\n    // 0,0 at center of canvas, x right and y up\n    const element_x: number = viewport.x + 0.5 * this.m_width;\n    const element_y: number = 0.5 * this.m_height - viewport.y;\n    return out.Set(element_x, element_y);\n  }\n\n  public ConvertElementToViewport(element: b2Vec2, out: b2Vec2): b2Vec2 {\n    // 0,0 at center of canvas, x right and y up\n    const viewport_x: number = element.x - 0.5 * this.m_width;\n    const viewport_y: number = 0.5 * this.m_height - element.y;\n    return out.Set(viewport_x, viewport_y);\n  }\n\n  public ConvertProjectionToViewport(projection: b2Vec2, out: b2Vec2): b2Vec2 {\n    const viewport: b2Vec2 = out.Copy(projection);\n    b2Vec2.MulSV(1 / this.m_zoom, viewport, viewport);\n    ///b2Vec2.MulSV(this.m_extent, viewport, viewport);\n    b2Vec2.MulSV((0.5 * this.m_height) / this.m_extent, projection, projection);\n    return viewport;\n  }\n\n  public ConvertViewportToProjection(viewport: b2Vec2, out: b2Vec2): b2Vec2 {\n    const projection: b2Vec2 = out.Copy(viewport);\n    ///b2Vec2.MulSV(1 / this.m_extent, projection, projection);\n    b2Vec2.MulSV((2 * this.m_extent) / this.m_height, projection, projection);\n    b2Vec2.MulSV(this.m_zoom, projection, projection);\n    return projection;\n  }\n\n  public ConvertWorldToProjection(world: b2Vec2, out: b2Vec2): b2Vec2 {\n    const projection: b2Vec2 = out.Copy(world);\n    b2Vec2.SubVV(projection, this.m_center, projection);\n    ///b2Rot.MulTRV(this.m_roll, projection, projection);\n    return projection;\n  }\n\n  public ConvertProjectionToWorld(projection: b2Vec2, out: b2Vec2): b2Vec2 {\n    const world: b2Vec2 = out.Copy(projection);\n    ///b2Rot.MulRV(this.m_roll, world, world);\n    b2Vec2.AddVV(this.m_center, world, world);\n    return world;\n  }\n\n  public ConvertElementToWorld(element: b2Vec2, out: b2Vec2): b2Vec2 {\n    const viewport: b2Vec2 = this.ConvertElementToViewport(element, out);\n    const projection: b2Vec2 = this.ConvertViewportToProjection(viewport, out);\n    return this.ConvertProjectionToWorld(projection, out);\n  }\n\n  public ConvertWorldToElement(world: b2Vec2, out: b2Vec2): b2Vec2 {\n    const projection: b2Vec2 = this.ConvertWorldToProjection(world, out);\n    const viewport: b2Vec2 = this.ConvertProjectionToViewport(projection, out);\n    return this.ConvertViewportToElement(viewport, out);\n  }\n\n  public ConvertElementToProjection(element: b2Vec2, out: b2Vec2): b2Vec2 {\n    const viewport: b2Vec2 = this.ConvertElementToViewport(element, out);\n    return this.ConvertViewportToProjection(viewport, out);\n  }\n}\n\n// This class implements debug drawing callbacks that are invoked\n// inside b2World::Step.\nexport class DebugDraw extends b2Draw {\n  public m_ctx: CanvasRenderingContext2D | null = null;\n\n  constructor() {\n    super();\n  }\n\n  public PushTransform(xf: b2Transform): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.save();\n      ctx.translate(xf.p.x, xf.p.y);\n      ctx.rotate(xf.q.GetAngle());\n    }\n  }\n\n  public PopTransform(xf: b2Transform): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.restore();\n    }\n  }\n\n  public DrawPolygon(vertices: b2Vec2[], vertexCount: number, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(vertices[0].x, vertices[0].y);\n      for (let i = 1; i < vertexCount; i++) {\n        ctx.lineTo(vertices[i].x, vertices[i].y);\n      }\n      ctx.closePath();\n      ctx.strokeStyle = color.MakeStyleString(1);\n      ctx.stroke();\n    }\n  }\n\n  public DrawSolidPolygon(vertices: b2Vec2[], vertexCount: number, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(vertices[0].x, vertices[0].y);\n      for (let i = 1; i < vertexCount; i++) {\n        ctx.lineTo(vertices[i].x, vertices[i].y);\n      }\n      ctx.closePath();\n      ctx.fillStyle = color.MakeStyleString(0.5);\n      ctx.fill();\n      ctx.strokeStyle = color.MakeStyleString(1);\n      ctx.stroke();\n    }\n  }\n\n  public DrawCircle(center: b2Vec2, radius: number, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.beginPath();\n      ctx.arc(center.x, center.y, radius, 0, b2_pi * 2, true);\n      ctx.strokeStyle = color.MakeStyleString(1);\n      ctx.stroke();\n    }\n  }\n\n  public DrawSolidCircle(center: b2Vec2, radius: number, axis: b2Vec2, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      const cx: number = center.x;\n      const cy: number = center.y;\n      ctx.beginPath();\n      ctx.arc(cx, cy, radius, 0, b2_pi * 2, true);\n      ctx.moveTo(cx, cy);\n      ctx.lineTo(cx + axis.x * radius, cy + axis.y * radius);\n      ctx.fillStyle = color.MakeStyleString(0.5);\n      ctx.fill();\n      ctx.strokeStyle = color.MakeStyleString(1);\n      ctx.stroke();\n    }\n  }\n\n  // #if B2_ENABLE_PARTICLE\n  public DrawParticles(centers: b2Vec2[], radius: number, colors: b2Color[] | null, count: number) {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      if (colors !== null) {\n        for (let i = 0; i < count; ++i) {\n          const center = centers[i];\n          const color = colors[i];\n          ctx.fillStyle = color.MakeStyleString();\n          // ctx.fillRect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\n          ctx.beginPath();\n          ctx.arc(center.x, center.y, radius, 0, b2_pi * 2, true);\n          ctx.fill();\n        }\n      } else {\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\n        // ctx.beginPath();\n        for (let i = 0; i < count; ++i) {\n          const center = centers[i];\n          // ctx.rect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\n          ctx.beginPath();\n          ctx.arc(center.x, center.y, radius, 0, b2_pi * 2, true);\n          ctx.fill();\n        }\n        // ctx.fill();\n      }\n    }\n  }\n\n  // #endif\n\n  public DrawSegment(p1: b2Vec2, p2: b2Vec2, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.strokeStyle = color.MakeStyleString(1);\n      ctx.stroke();\n    }\n  }\n\n  public DrawTransform(xf: b2Transform): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      this.PushTransform(xf);\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(1, 0);\n      ctx.strokeStyle = b2Color.RED.MakeStyleString(1);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(0, 1);\n      ctx.strokeStyle = b2Color.GREEN.MakeStyleString(1);\n      ctx.stroke();\n\n      this.PopTransform(xf);\n    }\n  }\n\n  public DrawPoint(p: b2Vec2, size: number, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.fillStyle = color.MakeStyleString();\n      size *= g_camera.m_zoom;\n      size /= g_camera.m_extent;\n      const hsize: number = size / 2;\n      ctx.fillRect(p.x - hsize, p.y - hsize, size, size);\n    }\n  }\n\n  private static DrawString_s_color: b2Color = new b2Color(0.9, 0.6, 0.6);\n\n  public DrawString(x: number, y: number, message: string): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.font = '15px DroidSans';\n      const color: b2Color = DebugDraw.DrawString_s_color;\n      ctx.fillStyle = color.MakeStyleString();\n      ctx.fillText(message, x, y);\n      ctx.restore();\n    }\n  }\n\n  private static DrawStringWorld_s_p: b2Vec2 = new b2Vec2();\n  private static DrawStringWorld_s_cc: b2Vec2 = new b2Vec2();\n  private static DrawStringWorld_s_color: b2Color = new b2Color(0.5, 0.9, 0.5);\n\n  public DrawStringWorld(x: number, y: number, message: string): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      const p: b2Vec2 = DebugDraw.DrawStringWorld_s_p.Set(x, y);\n\n      // world -> viewport\n      const vt: b2Vec2 = g_camera.m_center;\n      b2Vec2.SubVV(p, vt, p);\n      ///const vr = g_camera.m_roll;\n      ///b2Rot.MulTRV(vr, p, p);\n      const vs: number = g_camera.m_zoom;\n      b2Vec2.MulSV(1 / vs, p, p);\n\n      // viewport -> canvas\n      const cs: number = (0.5 * g_camera.m_height) / g_camera.m_extent;\n      b2Vec2.MulSV(cs, p, p);\n      p.y *= -1;\n      const cc: b2Vec2 = DebugDraw.DrawStringWorld_s_cc.Set(\n        0.5 * ctx.canvas.width,\n        0.5 * ctx.canvas.height,\n      );\n      b2Vec2.AddVV(p, cc, p);\n\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.font = '15px DroidSans';\n      const color: b2Color = DebugDraw.DrawStringWorld_s_color;\n      ctx.fillStyle = color.MakeStyleString();\n      ctx.fillText(message, p.x, p.y);\n      ctx.restore();\n    }\n  }\n\n  public DrawAABB(aabb: b2AABB, color: b2Color): void {\n    const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n    if (ctx) {\n      ctx.strokeStyle = color.MakeStyleString();\n      const x: number = aabb.lowerBound.x;\n      const y: number = aabb.lowerBound.y;\n      const w: number = aabb.upperBound.x - aabb.lowerBound.x;\n      const h: number = aabb.upperBound.y - aabb.lowerBound.y;\n      ctx.strokeRect(x, y, w, h);\n    }\n  }\n}\n\nexport const g_debugDraw: DebugDraw = new DebugDraw();\nexport const g_camera: Camera = new Camera();\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport { b2ParticleFlag } from '@highduck/box2d';\n\nexport enum ParticleParameterOptions {\n  OptionStrictContacts = 1 << 0,\n  OptionDrawShapes = 1 << 1,\n  OptionDrawParticles = 1 << 2,\n  OptionDrawJoints = 1 << 3,\n  OptionDrawAABBs = 1 << 4,\n  OptionDrawContactPoints = 1 << 5,\n  OptionDrawContactNormals = 1 << 6,\n  OptionDrawContactImpulse = 1 << 7,\n  OptionDrawFrictionImpulse = 1 << 8,\n  OptionDrawCOMs = 1 << 9,\n  OptionDrawStats = 1 << 10,\n  OptionDrawProfile = 1 << 11,\n}\n\nexport class ParticleParameterValue {\n  /**\n   * ParticleParameterValue of a particle parameter.\n   */\n  constructor(value: ParticleParameterValue);\n  constructor(value: number, options: ParticleParameterOptions, name: string);\n  constructor(...args: any[]) {\n    if (args[0] instanceof ParticleParameterValue) {\n      this.Copy(args[0]);\n    } else {\n      this.value = args[0];\n      this.options = args[1];\n      this.name = args[2];\n    }\n  }\n\n  /**\n   * ParticleParameterValue associated with the parameter.\n   */\n  public value = 0;\n\n  /**\n   * Any global (non particle-specific) options associated with\n   * this parameter\n   */\n  public options: ParticleParameterOptions = 0;\n\n  /**\n   * Name to display when this parameter is selected.\n   */\n  public name = '';\n\n  public Copy(other: ParticleParameterValue): this {\n    this.value = other.value;\n    this.options = other.options;\n    this.name = other.name;\n    return this;\n  }\n}\n\nexport class ParticleParameterDefinition {\n  /**\n   * Particle parameter definition.\n   */\n  constructor(values: ParticleParameterValue[], numValues: number = values.length) {\n    this.values = values;\n    this.numValues = numValues;\n  }\n\n  public values: ParticleParameterValue[];\n  public numValues = 0;\n\n  public CalculateValueMask(): number {\n    let mask = 0;\n    for (let i = 0; i < this.numValues; i++) {\n      mask |= this.values[i].value;\n    }\n    return mask;\n  }\n}\n\nexport class ParticleParameter {\n  public static readonly k_DefaultOptions: ParticleParameterOptions =\n    ParticleParameterOptions.OptionDrawShapes | ParticleParameterOptions.OptionDrawParticles;\n  public static readonly k_particleTypes: ParticleParameterValue[] = [\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions,\n      'water',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions | ParticleParameterOptions.OptionStrictContacts,\n      'water (strict)',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_springParticle,\n      ParticleParameter.k_DefaultOptions,\n      'spring',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_elasticParticle,\n      ParticleParameter.k_DefaultOptions,\n      'elastic',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle,\n      ParticleParameter.k_DefaultOptions,\n      'viscous',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_tensileParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_colorMixingParticle,\n      ParticleParameter.k_DefaultOptions,\n      'color mixing',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_wallParticle,\n      ParticleParameter.k_DefaultOptions,\n      'wall',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_wallParticle,\n      ParticleParameter.k_DefaultOptions,\n      'barrier',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_staticPressureParticle,\n      ParticleParameter.k_DefaultOptions,\n      'static pressure',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions | ParticleParameterOptions.OptionDrawAABBs,\n      'water (bounding boxes)',\n    ),\n  ];\n  public static readonly k_defaultDefinition: ParticleParameterDefinition[] = [\n    new ParticleParameterDefinition(ParticleParameter.k_particleTypes),\n  ];\n\n  public m_index = 0;\n  public m_changed = false;\n  public m_restartOnChange = false;\n  public m_value: ParticleParameterValue | null = null;\n  public m_definition: ParticleParameterDefinition[] = ParticleParameter.k_defaultDefinition;\n  public m_definitionCount = 0;\n  public m_valueCount = 0;\n\n  constructor() {\n    this.Reset();\n  }\n\n  public Reset() {\n    this.m_restartOnChange = true;\n    this.m_index = 0;\n    this.SetDefinition(ParticleParameter.k_defaultDefinition);\n    this.Set(0);\n  }\n\n  public SetDefinition(\n    definition: ParticleParameterDefinition[],\n    definitionCount: number = definition.length,\n  ): void {\n    this.m_definition = definition;\n    this.m_definitionCount = definitionCount;\n    this.m_valueCount = 0;\n    for (let i = 0; i < this.m_definitionCount; ++i) {\n      this.m_valueCount += this.m_definition[i].numValues;\n    }\n    // Refresh the selected value.\n    this.Set(this.Get());\n  }\n\n  public Get(): number {\n    return this.m_index;\n  }\n\n  public Set(index: number): void {\n    this.m_changed = this.m_index !== index;\n    this.m_index = this.m_valueCount ? index % this.m_valueCount : index;\n    this.m_value = this.FindParticleParameterValue();\n    // DEBUG: b2Assert(this.m_value !== null);\n  }\n\n  public Increment(): void {\n    const index = this.Get();\n    this.Set(index >= this.m_valueCount ? 0 : index + 1);\n  }\n\n  public Decrement(): void {\n    const index = this.Get();\n    this.Set(index === 0 ? this.m_valueCount - 1 : index - 1);\n  }\n\n  public Changed(restart: boolean[]): boolean {\n    const changed = this.m_changed;\n    this.m_changed = false;\n    if (restart) {\n      restart[0] = changed && this.GetRestartOnChange();\n    }\n    return changed;\n  }\n\n  public GetValue(): number {\n    if (this.m_value === null) {\n      throw new Error();\n    }\n    return this.m_value.value;\n  }\n\n  public GetName(): string {\n    if (this.m_value === null) {\n      throw new Error();\n    }\n    return this.m_value.name;\n  }\n\n  public GetOptions(): ParticleParameterOptions {\n    if (this.m_value === null) {\n      throw new Error();\n    }\n    return this.m_value.options;\n  }\n\n  public SetRestartOnChange(enable: boolean): void {\n    this.m_restartOnChange = enable;\n  }\n\n  public GetRestartOnChange(): boolean {\n    return this.m_restartOnChange;\n  }\n\n  public FindIndexByValue(value: number): number {\n    let index = 0;\n    for (let i = 0; i < this.m_definitionCount; ++i) {\n      const definition = this.m_definition[i];\n      const numValues = definition.numValues;\n      for (let j = 0; j < numValues; ++j, ++index) {\n        if (definition.values[j].value === value) {\n          return index;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public FindParticleParameterValue(): ParticleParameterValue | null {\n    let start = 0;\n    const index = this.Get();\n    for (let i = 0; i < this.m_definitionCount; ++i) {\n      const definition = this.m_definition[i];\n      const end = start + definition.numValues;\n      if (index >= start && index < end) {\n        return definition.values[index - start];\n      }\n      start = end;\n    }\n    return null;\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\n/**\n * Handles drawing and selection of full screen UI.\n */\nexport class FullScreenUI {\n  constructor() {\n    this.Reset();\n  }\n\n  /**\n   * Whether particle parameters are enabled.\n   */\n  public m_particleParameterSelectionEnabled = false;\n\n  /**\n   * Reset the UI to it's initial state.\n   */\n  public Reset(): void {\n    this.m_particleParameterSelectionEnabled = false;\n  }\n\n  /**\n   * Enable / disable particle parameter selection.\n   */\n  public SetParticleParameterSelectionEnabled(enable: boolean): void {\n    this.m_particleParameterSelectionEnabled = enable;\n  }\n\n  /**\n   * Get whether particle parameter selection is enabled.\n   */\n  public GetParticleParameterSelectionEnabled(): boolean {\n    return this.m_particleParameterSelectionEnabled;\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2_pi,\n  b2Color,\n  b2ParticleDef,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupFlag,\n  b2ParticleSystem,\n  b2Vec2,\n} from '@highduck/box2d';\n\nexport class EmittedParticleCallback {\n  /**\n   * Called for each created particle.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public ParticleCreated(system: b2ParticleSystem, particleIndex: number): void {}\n}\n\n/**\n * Emit particles from a circular region.\n */\nexport class RadialEmitter {\n  /**\n   * Pointer to global world\n   */\n  public m_particleSystem: b2ParticleSystem | null = null;\n  /**\n   * Called for each created particle.\n   */\n  public m_callback: EmittedParticleCallback | null = null;\n  /**\n   * Center of particle emitter\n   */\n  public m_origin: b2Vec2 = new b2Vec2();\n  /**\n   * Launch direction.\n   */\n  public m_startingVelocity: b2Vec2 = new b2Vec2();\n  /**\n   * Speed particles are emitted\n   */\n  public m_speed = 0.0;\n  /**\n   * Half width / height of particle emitter\n   */\n  public m_halfSize: b2Vec2 = new b2Vec2();\n  /**\n   * Particles per second\n   */\n  public m_emitRate = 1.0;\n  /**\n   * Initial color of particle emitted.\n   */\n  public m_color: b2Color = new b2Color();\n  /**\n   * Number particles to emit on the next frame\n   */\n  public m_emitRemainder = 0.0;\n  /**\n   * Flags for created particles, see b2ParticleFlag.\n   */\n  public m_flags: b2ParticleFlag = b2ParticleFlag.b2_waterParticle;\n  /**\n   * Group to put newly created particles in.\n   */\n  public m_group: b2ParticleGroup | null = null;\n\n  /**\n   * Calculate a random number 0.0..1.0.\n   */\n  public static Random(): number {\n    return Math.random();\n  }\n\n  public __dtor__(): void {\n    this.SetGroup(null);\n  }\n\n  /**\n   * Set the center of the emitter.\n   */\n  public SetPosition(origin: b2Vec2): void {\n    this.m_origin.Copy(origin);\n  }\n\n  /**\n   * Get the center of the emitter.\n   */\n  public GetPosition(out: b2Vec2): b2Vec2 {\n    return out.Copy(this.m_origin);\n  }\n\n  /**\n   * Set the size of the circle which emits particles.\n   */\n  public SetSize(size: b2Vec2): void {\n    this.m_halfSize.Copy(size).SelfMul(0.5);\n  }\n\n  /**\n   * Get the size of the circle which emits particles.\n   */\n  public GetSize(out: b2Vec2): b2Vec2 {\n    return out.Copy(this.m_halfSize).SelfMul(2.0);\n  }\n\n  /**\n   * Set the starting velocity of emitted particles.\n   */\n  public SetVelocity(velocity: b2Vec2): void {\n    this.m_startingVelocity.Copy(velocity);\n  }\n\n  /**\n   * Get the starting velocity.\n   */\n  public GetVelocity(out: b2Vec2): b2Vec2 {\n    return out.Copy(this.m_startingVelocity);\n  }\n\n  /**\n   * Set the speed of particles along the direction from the\n   * center of the emitter.\n   */\n  public SetSpeed(speed: number): void {\n    this.m_speed = speed;\n  }\n\n  /**\n   * Get the speed of particles along the direction from the\n   * center of the emitter.\n   */\n  public GetSpeed(): number {\n    return this.m_speed;\n  }\n\n  /**\n   * Set the flags for created particles.\n   */\n  public SetParticleFlags(flags: b2ParticleFlag): void {\n    this.m_flags = flags;\n  }\n\n  /**\n   * Get the flags for created particles.\n   */\n  public GetParticleFlags(): b2ParticleFlag {\n    return this.m_flags;\n  }\n\n  /**\n   * Set the color of particles.\n   */\n  public SetColor(color: b2Color): void {\n    this.m_color.Copy(color);\n  }\n\n  /**\n   * Get the color of particles emitter.\n   */\n  public GetColor(out: b2Color): b2Color {\n    return out.Copy(this.m_color);\n  }\n\n  /**\n   * Set the emit rate in particles per second.\n   */\n  public SetEmitRate(emitRate: number): void {\n    this.m_emitRate = emitRate;\n  }\n\n  /**\n   * Get the current emit rate.\n   */\n  public GetEmitRate(): number {\n    return this.m_emitRate;\n  }\n\n  /**\n   * Set the particle system this emitter is adding particles to.\n   */\n  public SetParticleSystem(particleSystem: b2ParticleSystem): void {\n    this.m_particleSystem = particleSystem;\n  }\n\n  /**\n   * Get the particle system this emitter is adding particle to.\n   */\n  public GetParticleSystem(): b2ParticleSystem | null {\n    return this.m_particleSystem;\n  }\n\n  /**\n   * Set the callback that is called on the creation of each\n   * particle.\n   */\n  public SetCallback(callback: EmittedParticleCallback): void {\n    this.m_callback = callback;\n  }\n\n  /**\n   * Get the callback that is called on the creation of each\n   * particle.\n   */\n  public GetCallback(): EmittedParticleCallback | null {\n    return this.m_callback;\n  }\n\n  /**\n   * This class sets the group flags to b2_particleGroupCanBeEmpty\n   * so that it isn't destroyed and clears the\n   * b2_particleGroupCanBeEmpty on the group when the emitter no\n   * longer references it so that the group can potentially be\n   * cleaned up.\n   */\n  public SetGroup(group: b2ParticleGroup | null): void {\n    if (this.m_group) {\n      this.m_group.SetGroupFlags(\n        this.m_group.GetGroupFlags() & ~b2ParticleGroupFlag.b2_particleGroupCanBeEmpty,\n      );\n    }\n    this.m_group = group;\n    if (this.m_group) {\n      this.m_group.SetGroupFlags(\n        this.m_group.GetGroupFlags() | b2ParticleGroupFlag.b2_particleGroupCanBeEmpty,\n      );\n    }\n  }\n\n  /**\n   * Get the group particles should be created within.\n   */\n  public GetGroup(): b2ParticleGroup | null {\n    return this.m_group;\n  }\n\n  /**\n   * dt is seconds that have passed, particleIndices is an\n   * optional pointer to an array which tracks which particles\n   * have been created and particleIndicesCount is the size of the\n   * particleIndices array. This function returns the number of\n   * particles created during this simulation step.\n   */\n  public Step(\n    dt: number,\n    particleIndices?: number[],\n    particleIndicesCount: number = particleIndices ? particleIndices.length : 0,\n  ): number {\n    if (this.m_particleSystem === null) {\n      throw new Error();\n    }\n    let numberOfParticlesCreated = 0;\n    // How many (fractional) particles should we have emitted this frame?\n    this.m_emitRemainder += this.m_emitRate * dt;\n\n    const pd = new b2ParticleDef();\n    pd.color.Copy(this.m_color);\n    pd.flags = this.m_flags;\n    pd.group = this.m_group;\n\n    // Keep emitting particles on this frame until we only have a\n    // fractional particle left.\n    while (this.m_emitRemainder > 1.0) {\n      this.m_emitRemainder -= 1.0;\n\n      // Randomly pick a position within the emitter's radius.\n      const angle = RadialEmitter.Random() * 2.0 * b2_pi;\n      // Distance from the center of the circle.\n      const distance = RadialEmitter.Random();\n      const positionOnUnitCircle = new b2Vec2(Math.sin(angle), Math.cos(angle));\n\n      // Initial position.\n      pd.position.Set(\n        this.m_origin.x + positionOnUnitCircle.x * distance * this.m_halfSize.x,\n        this.m_origin.y + positionOnUnitCircle.y * distance * this.m_halfSize.y,\n      );\n      // Send it flying\n      pd.velocity.Copy(this.m_startingVelocity);\n      if (this.m_speed !== 0.0) {\n        ///  pd.velocity += positionOnUnitCircle * m_speed;\n        pd.velocity.SelfMulAdd(this.m_speed, positionOnUnitCircle);\n      }\n\n      const particleIndex = this.m_particleSystem.CreateParticle(pd);\n      if (this.m_callback) {\n        this.m_callback.ParticleCreated(this.m_particleSystem, particleIndex);\n      }\n      if (particleIndices && numberOfParticlesCreated < particleIndicesCount) {\n        particleIndices[numberOfParticlesCreated] = particleIndex;\n      }\n      ++numberOfParticlesCreated;\n    }\n    return numberOfParticlesCreated;\n  }\n}\n\n// #endif\n","import { Settings, Test, TestEntry } from './Test.js';\nimport { g_camera, g_debugDraw } from './DebugDraw.js';\nimport { b2_branch, b2_commit, b2_version, b2Clamp, b2Vec2 } from '@highduck/box2d';\n\nexport class Main {\n  m_time_last = 0;\n  m_fps_time = 0;\n  m_fps_frames = 0;\n  m_fps = 0;\n  m_fps_div: HTMLDivElement;\n  m_debug_div: HTMLDivElement;\n  readonly m_settings: Settings = new Settings();\n  m_test?: Test;\n  m_test_index = 0;\n  testSelect: HTMLSelectElement;\n  categorySelect: HTMLSelectElement;\n  m_shift = false;\n  m_ctrl = false;\n  m_lMouseDown = false;\n  m_rMouseDown = false;\n  readonly m_projection0 = new b2Vec2();\n  readonly m_viewCenter0 = new b2Vec2();\n  m_demo_mode = false;\n  m_demo_time = 0;\n  m_max_demo_time: number = 1000 * 10;\n  m_canvas_div: HTMLDivElement;\n  m_canvas_2d: HTMLCanvasElement;\n  m_ctx: CanvasRenderingContext2D | null = null;\n  m_demo_button: HTMLInputElement;\n\n  table: Map<string, Map<string, number>> = new Map();\n\n  constructor(time: number, readonly tests: TestEntry[]) {\n    tests.sort((a, b) => {\n      const r = a.category.localeCompare(b.category);\n      if (r === 0) {\n        return a.name.localeCompare(b.name);\n      }\n      return r;\n    });\n    for (let i = 0; i < tests.length; ++i) {\n      let s = this.table.get(tests[i].category);\n      if (!s) {\n        this.table.set(tests[i].category, (s = new Map()));\n      }\n      s.set(tests[i].name, i);\n    }\n    const fps_div: HTMLDivElement = (this.m_fps_div = document.body.appendChild(\n      document.createElement('div'),\n    ));\n    fps_div.style.position = 'absolute';\n    fps_div.style.left = '0px';\n    fps_div.style.bottom = '0px';\n    fps_div.style.backgroundColor = 'rgba(0,0,255,0.75)';\n    fps_div.style.color = 'white';\n    fps_div.style.font = '10pt Courier New';\n    fps_div.style.zIndex = '256';\n    fps_div.innerHTML = 'FPS';\n\n    const debug_div: HTMLDivElement = (this.m_debug_div = document.body.appendChild(\n      document.createElement('div'),\n    ));\n    debug_div.style.position = 'absolute';\n    debug_div.style.left = '0px';\n    debug_div.style.bottom = '0px';\n    debug_div.style.backgroundColor = 'rgba(0,0,255,0.75)';\n    debug_div.style.color = 'white';\n    debug_div.style.font = '10pt Courier New';\n    debug_div.style.zIndex = '256';\n    debug_div.innerHTML = '';\n\n    document.body.style.backgroundColor = 'black';\n\n    const main_div: HTMLDivElement = document.body.appendChild(document.createElement('div'));\n    main_div.style.position = 'absolute'; // relative to document.body\n    main_div.style.left = '0px';\n    main_div.style.top = '0px';\n\n    function resize_main_div(): void {\n      // console.log(window.innerWidth + \"x\" + window.innerHeight);\n      main_div.style.width = window.innerWidth + 'px';\n      main_div.style.height = window.innerHeight + 'px';\n    }\n\n    window.addEventListener('resize', (e: UIEvent): void => {\n      resize_main_div();\n    });\n    window.addEventListener('orientationchange', (e: Event): void => {\n      resize_main_div();\n    });\n    resize_main_div();\n\n    const title_div: HTMLDivElement = main_div.appendChild(document.createElement('div'));\n    title_div.style.textAlign = 'center';\n    title_div.style.color = 'grey';\n    title_div.innerHTML =\n      'Box2D Testbed version ' +\n      b2_version +\n      '<br>(branch: ' +\n      b2_branch +\n      ' commit: ' +\n      b2_commit +\n      ')';\n\n    const view_div: HTMLDivElement = main_div.appendChild(document.createElement('div'));\n\n    const canvas_div: HTMLDivElement = (this.m_canvas_div = view_div.appendChild(\n      document.createElement('div'),\n    ));\n    canvas_div.style.position = 'absolute'; // relative to view_div\n    canvas_div.style.left = '0px';\n    canvas_div.style.right = '0px';\n    canvas_div.style.top = '0px';\n    canvas_div.style.bottom = '0px';\n\n    const canvas_2d: HTMLCanvasElement = (this.m_canvas_2d = canvas_div.appendChild(\n      document.createElement('canvas'),\n    ));\n\n    function resize_canvas(): void {\n      ///console.log(canvas_div.clientWidth + \"x\" + canvas_div.clientHeight);\n      if (canvas_2d.width !== canvas_div.clientWidth) {\n        g_camera.m_width = canvas_2d.width = canvas_div.clientWidth;\n      }\n      if (canvas_2d.height !== canvas_div.clientHeight) {\n        g_camera.m_height = canvas_2d.height = canvas_div.clientHeight;\n      }\n    }\n\n    window.addEventListener('resize', (e: UIEvent): void => {\n      resize_canvas();\n    });\n    window.addEventListener('orientationchange', (e: Event): void => {\n      resize_canvas();\n    });\n    resize_canvas();\n\n    g_debugDraw.m_ctx = this.m_ctx = this.m_canvas_2d.getContext('2d', {\n      alpha: false,\n    });\n\n    const controls_div: HTMLDivElement = view_div.appendChild(document.createElement('div'));\n    controls_div.style.position = 'absolute'; // relative to view_div\n    controls_div.style.backgroundColor = 'rgba(255,255,255,0.5)';\n    controls_div.style.padding = '8px';\n    controls_div.style.right = '0px';\n    controls_div.style.top = '0px';\n    controls_div.style.bottom = '0px';\n    controls_div.style.overflowY = 'scroll';\n\n    // tests select box\n    controls_div.appendChild(document.createTextNode('Tests'));\n    controls_div.appendChild(document.createElement('br'));\n    const categorySelect: HTMLSelectElement = document.createElement('select');\n    const test_select: HTMLSelectElement = document.createElement('select');\n    this.testSelect = test_select;\n    this.categorySelect = categorySelect;\n    test_select.selectedIndex = this.m_test_index;\n    test_select.addEventListener('change', (e: Event): void => {\n      this.m_test_index = parseInt(test_select.value);\n      this.LoadTest();\n    });\n\n    categorySelect.addEventListener('change', () => this.onCategoryChanged());\n\n    for (const category of this.table.keys()) {\n      const option = document.createElement('option');\n      option.text = category;\n      option.value = category;\n      categorySelect.add(option);\n    }\n\n    controls_div.appendChild(categorySelect);\n    controls_div.appendChild(document.createElement('br'));\n    controls_div.appendChild(test_select);\n    categorySelect.selectedIndex = 0;\n    this.onCategoryChanged();\n\n    controls_div.appendChild(document.createElement('br'));\n\n    controls_div.appendChild(document.createElement('hr'));\n\n    // simulation number inputs\n    function connect_number_input(\n      parent: Node,\n      label: string,\n      init: number,\n      update: (value: number) => void,\n      min: number,\n      max: number,\n      step: number,\n    ): HTMLInputElement {\n      const number_input_tr: HTMLTableRowElement = parent.appendChild(document.createElement('tr'));\n      const number_input_td0: HTMLTableDataCellElement = number_input_tr.appendChild(\n        document.createElement('td'),\n      );\n      number_input_td0.align = 'right';\n      number_input_td0.appendChild(document.createTextNode(label));\n      const number_input_td1: HTMLTableDataCellElement = number_input_tr.appendChild(\n        document.createElement('td'),\n      );\n      const number_input: HTMLInputElement = document.createElement('input');\n      number_input.size = 8;\n      number_input.min = min.toString();\n      number_input.max = max.toString();\n      number_input.step = step.toString();\n      number_input.value = init.toString();\n      number_input.addEventListener('change', (e: Event): void => {\n        update(parseInt(number_input.value, 10));\n      });\n      number_input_td1.appendChild(number_input);\n      return number_input;\n    }\n\n    const number_input_table: HTMLTableElement = controls_div.appendChild(\n      document.createElement('table'),\n    );\n    connect_number_input(\n      number_input_table,\n      'Vel Iters',\n      this.m_settings.velocityIterations,\n      (value: number): void => {\n        this.m_settings.velocityIterations = value;\n      },\n      1,\n      20,\n      1,\n    );\n    connect_number_input(\n      number_input_table,\n      'Pos Iters',\n      this.m_settings.positionIterations,\n      (value: number): void => {\n        this.m_settings.positionIterations = value;\n      },\n      1,\n      20,\n      1,\n    );\n    // #if B2_ENABLE_PARTICLE\n    connect_number_input(\n      number_input_table,\n      'Pcl Iters',\n      this.m_settings.particleIterations,\n      (value: number): void => {\n        this.m_settings.particleIterations = value;\n      },\n      1,\n      100,\n      1,\n    );\n    // #endif\n    connect_number_input(\n      number_input_table,\n      'Hertz',\n      this.m_settings.hz,\n      (value: number): void => {\n        this.m_settings.hz = value;\n      },\n      10,\n      120,\n      1,\n    );\n\n    // simulation checkbox inputs\n    function connect_checkbox_input(\n      parent: Node,\n      label: string,\n      init: boolean,\n      update: (value: boolean) => void,\n    ): HTMLInputElement {\n      const checkbox_input: HTMLInputElement = document.createElement('input');\n      checkbox_input.type = 'checkbox';\n      checkbox_input.checked = init;\n      checkbox_input.addEventListener('click', (e: MouseEvent): void => {\n        update(checkbox_input.checked);\n      });\n      parent.appendChild(checkbox_input);\n      parent.appendChild(document.createTextNode(label));\n      parent.appendChild(document.createElement('br'));\n      return checkbox_input;\n    }\n\n    connect_checkbox_input(\n      controls_div,\n      'Sleep',\n      this.m_settings.enableSleep,\n      (value: boolean): void => {\n        this.m_settings.enableSleep = value;\n      },\n    );\n    connect_checkbox_input(\n      controls_div,\n      'Warm Starting',\n      this.m_settings.enableWarmStarting,\n      (value: boolean): void => {\n        this.m_settings.enableWarmStarting = value;\n      },\n    );\n    connect_checkbox_input(\n      controls_div,\n      'Time of Impact',\n      this.m_settings.enableContinuous,\n      (value: boolean): void => {\n        this.m_settings.enableContinuous = value;\n      },\n    );\n    connect_checkbox_input(\n      controls_div,\n      'Sub-Stepping',\n      this.m_settings.enableSubStepping,\n      (value: boolean): void => {\n        this.m_settings.enableSubStepping = value;\n      },\n    );\n    // #if B2_ENABLE_PARTICLE\n    connect_checkbox_input(\n      controls_div,\n      'Strict Particle/Body Contacts',\n      this.m_settings.strictContacts,\n      (value: boolean): void => {\n        this.m_settings.strictContacts = value;\n      },\n    );\n    // #endif\n\n    // draw checkbox inputs\n    const draw_fieldset: HTMLFieldSetElement = controls_div.appendChild(\n      document.createElement('fieldset'),\n    );\n    const draw_legend: HTMLLegendElement = draw_fieldset.appendChild(\n      document.createElement('legend'),\n    );\n    draw_legend.appendChild(document.createTextNode('Draw'));\n    connect_checkbox_input(\n      draw_fieldset,\n      'Shapes',\n      this.m_settings.drawShapes,\n      (value: boolean): void => {\n        this.m_settings.drawShapes = value;\n      },\n    );\n    // #if B2_ENABLE_PARTICLE\n    connect_checkbox_input(\n      draw_fieldset,\n      'Particles',\n      this.m_settings.drawParticles,\n      (value: boolean): void => {\n        this.m_settings.drawParticles = value;\n      },\n    );\n    // #endif\n    connect_checkbox_input(\n      draw_fieldset,\n      'Joints',\n      this.m_settings.drawJoints,\n      (value: boolean): void => {\n        this.m_settings.drawJoints = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'AABBs',\n      this.m_settings.drawAABBs,\n      (value: boolean): void => {\n        this.m_settings.drawAABBs = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Contact Points',\n      this.m_settings.drawContactPoints,\n      (value: boolean): void => {\n        this.m_settings.drawContactPoints = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Contact Normals',\n      this.m_settings.drawContactNormals,\n      (value: boolean): void => {\n        this.m_settings.drawContactNormals = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Contact Impulses',\n      this.m_settings.drawContactImpulse,\n      (value: boolean): void => {\n        this.m_settings.drawContactImpulse = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Friction Impulses',\n      this.m_settings.drawFrictionImpulse,\n      (value: boolean): void => {\n        this.m_settings.drawFrictionImpulse = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Center of Masses',\n      this.m_settings.drawCOMs,\n      (value: boolean): void => {\n        this.m_settings.drawCOMs = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Statistics',\n      this.m_settings.drawStats,\n      (value: boolean): void => {\n        this.m_settings.drawStats = value;\n      },\n    );\n    connect_checkbox_input(\n      draw_fieldset,\n      'Profile',\n      this.m_settings.drawProfile,\n      (value: boolean): void => {\n        this.m_settings.drawProfile = value;\n      },\n    );\n\n    // simulation buttons\n    function connect_button_input(\n      parent: Node,\n      label: string,\n      callback: (e: MouseEvent) => void,\n    ): HTMLInputElement {\n      const button_input: HTMLInputElement = document.createElement('input');\n      button_input.type = 'button';\n      button_input.style.width = '120';\n      button_input.value = label;\n      button_input.addEventListener('click', callback);\n      parent.appendChild(button_input);\n      parent.appendChild(document.createElement('br'));\n      return button_input;\n    }\n\n    const button_div: HTMLDivElement = controls_div.appendChild(document.createElement('div'));\n    button_div.align = 'center';\n    connect_button_input(button_div, 'Pause (P)', (e: MouseEvent): void => {\n      this.Pause();\n    });\n    connect_button_input(button_div, 'Single Step (O)', (e: MouseEvent): void => {\n      this.SingleStep();\n    });\n    connect_button_input(button_div, 'Restart (R)', (e: MouseEvent): void => {\n      this.LoadTest();\n    });\n    this.m_demo_button = connect_button_input(button_div, 'Demo', (e: MouseEvent): void => {\n      this.ToggleDemo();\n    });\n\n    // disable context menu to use right-click\n    window.addEventListener(\n      'contextmenu',\n      (e: MouseEvent): void => {\n        e.preventDefault();\n      },\n      true,\n    );\n\n    canvas_div.addEventListener('mousemove', (e: MouseEvent): void => {\n      this.HandleMouseMove(e);\n    });\n    canvas_div.addEventListener('mousedown', (e: MouseEvent): void => {\n      this.HandleMouseDown(e);\n    });\n    canvas_div.addEventListener('mouseup', (e: MouseEvent): void => {\n      this.HandleMouseUp(e);\n    });\n    canvas_div.addEventListener('mousewheel', (e: Event): void => {\n      this.HandleMouseWheel(e as MouseWheelEvent);\n    });\n\n    canvas_div.addEventListener('touchmove', (e: TouchEvent): void => {\n      this.HandleTouchMove(e);\n    });\n    canvas_div.addEventListener('touchstart', (e: TouchEvent): void => {\n      this.HandleTouchStart(e);\n    });\n    canvas_div.addEventListener('touchend', (e: TouchEvent): void => {\n      this.HandleTouchEnd(e);\n    });\n\n    window.addEventListener('keydown', (e: KeyboardEvent): void => {\n      this.HandleKeyDown(e);\n    });\n    window.addEventListener('keyup', (e: KeyboardEvent): void => {\n      this.HandleKeyUp(e);\n    });\n\n    this.LoadTest();\n\n    this.m_time_last = time;\n  }\n\n  public HomeCamera(): void {\n    g_camera.m_zoom = this.m_test ? this.m_test.GetDefaultViewZoom() : 1.0;\n    g_camera.m_center.Set(0, 20 * g_camera.m_zoom);\n    ///g_camera.m_roll.SetAngle(b2DegToRad(0));\n  }\n\n  public MoveCamera(move: b2Vec2): void {\n    const position: b2Vec2 = g_camera.m_center.Clone();\n    ///move.SelfRotate(g_camera.m_roll.GetAngle());\n    position.SelfAdd(move);\n    g_camera.m_center.Copy(position);\n  }\n\n  ///public RollCamera(roll: number): void {\n  ///  const angle: number = g_camera.m_roll.GetAngle();\n  ///  g_camera.m_roll.SetAngle(angle + roll);\n  ///}\n\n  private updateTestsForCategory() {\n    this.testSelect.innerHTML = '';\n    const tests = this.table.get(this.categorySelect.value);\n    if (tests) {\n      for (const test of tests.keys()) {\n        const option = document.createElement('option');\n        option.text = test;\n        option.value = tests.get(test)!.toString();\n        this.testSelect.add(option);\n      }\n    }\n  }\n\n  private onCategoryChanged() {\n    this.updateTestsForCategory();\n    this.testSelect.selectedIndex = 0;\n    this.m_test_index = parseInt(this.testSelect.options[0].value);\n    this.LoadTest();\n  }\n\n  public ZoomCamera(zoom: number): void {\n    g_camera.m_zoom *= zoom;\n    g_camera.m_zoom = b2Clamp(g_camera.m_zoom, 0.02, 20);\n  }\n\n  private m_mouse = new b2Vec2();\n\n  public HandleMouseMove(e: MouseEvent): void {\n    const element: b2Vec2 = new b2Vec2(e.clientX, e.clientY);\n    const world: b2Vec2 = g_camera.ConvertScreenToWorld(element, new b2Vec2());\n\n    this.m_mouse.Copy(element);\n\n    if (this.m_lMouseDown) {\n      if (this.m_test) {\n        this.m_test.MouseMove(world);\n      }\n    }\n\n    if (this.m_rMouseDown) {\n      // m_center = viewCenter0 - (projection - projection0);\n      const projection: b2Vec2 = g_camera.ConvertElementToProjection(element, new b2Vec2());\n      const diff: b2Vec2 = b2Vec2.SubVV(projection, this.m_projection0, new b2Vec2());\n      const center: b2Vec2 = b2Vec2.SubVV(this.m_viewCenter0, diff, new b2Vec2());\n      g_camera.m_center.Copy(center);\n    }\n  }\n\n  public HandleMouseDown(e: MouseEvent): void {\n    const element: b2Vec2 = new b2Vec2(e.clientX, e.clientY);\n    const world: b2Vec2 = g_camera.ConvertScreenToWorld(element, new b2Vec2());\n\n    switch (e.which) {\n      case 1: // left mouse button\n        this.m_lMouseDown = true;\n        if (this.m_shift) {\n          if (this.m_test) {\n            this.m_test.ShiftMouseDown(world);\n          }\n        } else {\n          if (this.m_test) {\n            this.m_test.MouseDown(world);\n          }\n        }\n        break;\n      case 3: // right mouse button\n        this.m_rMouseDown = true;\n        this.m_projection0.Copy(g_camera.ConvertElementToProjection(element, new b2Vec2()));\n        this.m_viewCenter0.Copy(g_camera.m_center);\n        break;\n    }\n  }\n\n  public HandleMouseUp(e: MouseEvent): void {\n    const element: b2Vec2 = new b2Vec2(e.clientX, e.clientY);\n    const world: b2Vec2 = g_camera.ConvertScreenToWorld(element, new b2Vec2());\n\n    switch (e.which) {\n      case 1: // left mouse button\n        this.m_lMouseDown = false;\n        if (this.m_test) {\n          this.m_test.MouseUp(world);\n        }\n        break;\n      case 3: // right mouse button\n        this.m_rMouseDown = false;\n        break;\n    }\n  }\n\n  public HandleTouchMove(e: TouchEvent): void {\n    const element: b2Vec2 = new b2Vec2(e.touches[0].clientX, e.touches[0].clientY);\n    const world: b2Vec2 = g_camera.ConvertScreenToWorld(element, new b2Vec2());\n    if (this.m_test) {\n      this.m_test.MouseMove(world);\n    }\n    e.preventDefault();\n  }\n\n  public HandleTouchStart(e: TouchEvent): void {\n    const element: b2Vec2 = new b2Vec2(e.touches[0].clientX, e.touches[0].clientY);\n    const world: b2Vec2 = g_camera.ConvertScreenToWorld(element, new b2Vec2());\n    if (this.m_test) {\n      this.m_test.MouseDown(world);\n    }\n    e.preventDefault();\n  }\n\n  public HandleTouchEnd(e: TouchEvent): void {\n    if (this.m_test) {\n      this.m_test.MouseUp(this.m_test.m_mouseWorld);\n    }\n    e.preventDefault();\n  }\n\n  public HandleMouseWheel(e: MouseWheelEvent): void {\n    if (e.deltaY > 0) {\n      this.ZoomCamera(1 / 1.1);\n    } else if (e.deltaY < 0) {\n      this.ZoomCamera(1.1);\n    }\n    e.preventDefault();\n  }\n\n  public HandleKeyDown(e: KeyboardEvent): void {\n    switch (e.key) {\n      case 'Control':\n        this.m_ctrl = true;\n        break;\n      case 'Shift':\n        this.m_shift = true;\n        break;\n      case 'ArrowLeft':\n        if (this.m_ctrl) {\n          if (this.m_test) {\n            this.m_test.ShiftOrigin(new b2Vec2(2, 0));\n          }\n        } else {\n          this.MoveCamera(new b2Vec2(-0.5, 0));\n        }\n        break;\n      case 'ArrowRight':\n        if (this.m_ctrl) {\n          if (this.m_test) {\n            this.m_test.ShiftOrigin(new b2Vec2(-2, 0));\n          }\n        } else {\n          this.MoveCamera(new b2Vec2(0.5, 0));\n        }\n        break;\n      case 'ArrowDown':\n        if (this.m_ctrl) {\n          if (this.m_test) {\n            this.m_test.ShiftOrigin(new b2Vec2(0, 2));\n          }\n        } else {\n          this.MoveCamera(new b2Vec2(0, -0.5));\n        }\n        break;\n      case 'ArrowUp':\n        if (this.m_ctrl) {\n          if (this.m_test) {\n            this.m_test.ShiftOrigin(new b2Vec2(0, -2));\n          }\n        } else {\n          this.MoveCamera(new b2Vec2(0, 0.5));\n        }\n        break;\n      case 'Home':\n        this.HomeCamera();\n        break;\n      ///case \"PageUp\":\n      ///  this.RollCamera(b2DegToRad(-1));\n      ///  break;\n      ///case \"PageDown\":\n      ///  this.RollCamera(b2DegToRad(1));\n      ///  break;\n      case 'z':\n        this.ZoomCamera(1.1);\n        break;\n      case 'x':\n        this.ZoomCamera(0.9);\n        break;\n      case 'r':\n        this.LoadTest();\n        break;\n      case ' ':\n        if (this.m_test) {\n          this.m_test.LaunchBomb();\n        }\n        break;\n      case 'o':\n        this.SingleStep();\n        break;\n      case 'p':\n        this.Pause();\n        break;\n      case '[':\n        this.DecrementTest();\n        break;\n      case ']':\n        this.IncrementTest();\n        break;\n      // #if B2_ENABLE_PARTICLE\n      case ',':\n        if (this.m_shift) {\n          // Press < to select the previous particle parameter setting.\n          Test.particleParameter.Decrement();\n        }\n        break;\n      case '.':\n        if (this.m_shift) {\n          // Press > to select the next particle parameter setting.\n          Test.particleParameter.Increment();\n        }\n        break;\n      // #endif\n      default:\n        // console.log(e.keyCode);\n        break;\n    }\n\n    if (this.m_test) {\n      this.m_test.Keyboard(e.key);\n    }\n  }\n\n  public HandleKeyUp(e: KeyboardEvent): void {\n    switch (e.key) {\n      case 'Control':\n        this.m_ctrl = false;\n        break;\n      case 'Shift':\n        this.m_shift = false;\n        break;\n      default:\n        // console.log(e.keyCode);\n        break;\n    }\n\n    if (this.m_test) {\n      this.m_test.KeyboardUp(e.key);\n    }\n  }\n\n  public UpdateTest(time_elapsed: number): void {\n    if (this.m_demo_mode) {\n      this.m_demo_time += time_elapsed;\n\n      if (this.m_demo_time > this.m_max_demo_time) {\n        this.IncrementTest();\n      }\n\n      const str: string = ((500 + this.m_max_demo_time - this.m_demo_time) / 1000)\n        .toFixed(0)\n        .toString();\n      this.m_demo_button.value = str;\n    } else {\n      this.m_demo_button.value = 'Demo';\n    }\n  }\n\n  public DecrementTest(): void {\n    if (this.m_test_index <= 0) {\n      this.m_test_index = this.tests.length;\n    }\n    this.m_test_index--;\n    this.updateSelectors();\n    this.LoadTest();\n  }\n\n  private updateSelectors() {\n    const test = this.tests[this.m_test_index];\n    let opts = this.categorySelect.options;\n    for (let i = 0; i < opts.length; ++i) {\n      const item = opts.item(i);\n      if (item && item.text === test.category) {\n        if (this.categorySelect.selectedIndex !== i) {\n          this.categorySelect.selectedIndex = i;\n          this.updateTestsForCategory();\n        }\n        break;\n      }\n    }\n    opts = this.testSelect.options;\n    for (let i = 0; i < opts.length; ++i) {\n      const item = opts.item(i);\n      if (item && item.text === test.name) {\n        if (this.testSelect.selectedIndex !== i) {\n          this.testSelect.selectedIndex = i;\n        }\n        break;\n      }\n    }\n  }\n\n  public IncrementTest(): void {\n    this.m_test_index++;\n    if (this.m_test_index >= this.tests.length) {\n      this.m_test_index = 0;\n    }\n    this.updateSelectors();\n    this.LoadTest();\n  }\n\n  public LoadTest(restartTest = false): void {\n    // #if B2_ENABLE_PARTICLE\n    Test.fullscreenUI.Reset();\n    if (!restartTest) {\n      Test.particleParameter.Reset();\n    }\n    // #endif\n    this.m_demo_time = 0;\n    // #if B2_ENABLE_PARTICLE\n    if (this.m_test) {\n      this.m_test.RestoreParticleParameters();\n    }\n    // #endif\n    this.m_test = this.tests[this.m_test_index].createFcn();\n    if (!restartTest) {\n      this.HomeCamera();\n    }\n  }\n\n  public Pause(): void {\n    this.m_settings.pause = !this.m_settings.pause;\n  }\n\n  public SingleStep(): void {\n    this.m_settings.pause = true;\n    this.m_settings.singleStep = true;\n  }\n\n  public ToggleDemo(): void {\n    this.m_demo_mode = !this.m_demo_mode;\n  }\n\n  public SimulationLoop(time: number): void {\n    this.m_time_last = this.m_time_last || time;\n\n    let time_elapsed: number = time - this.m_time_last;\n    this.m_time_last = time;\n\n    if (time_elapsed > 1000) {\n      time_elapsed = 1000;\n    } // clamp\n\n    this.m_fps_time += time_elapsed;\n    this.m_fps_frames++;\n\n    if (this.m_fps_time >= 500) {\n      this.m_fps = (this.m_fps_frames * 1000) / this.m_fps_time;\n      this.m_fps_frames = 0;\n      this.m_fps_time = 0;\n\n      this.m_fps_div.innerHTML = this.m_fps.toFixed(1).toString();\n    }\n\n    if (time_elapsed > 0) {\n      const ctx: CanvasRenderingContext2D | null = this.m_ctx;\n\n      // #if B2_ENABLE_PARTICLE\n      const restartTest = [false];\n      // #endif\n\n      if (ctx) {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        // ctx.strokeStyle = \"blue\";\n        // ctx.strokeRect(this.m_mouse.x - 24, this.m_mouse.y - 24, 48, 48);\n\n        // const mouse_world: b2Vec2 = g_camera.ConvertScreenToWorld(this.m_mouse, new b2Vec2());\n\n        ctx.save();\n\n        // 0,0 at center of canvas, x right, y up\n        ctx.translate(0.5 * ctx.canvas.width, 0.5 * ctx.canvas.height);\n        ctx.scale(1, -1);\n        ///ctx.scale(g_camera.m_extent, g_camera.m_extent);\n        ///ctx.lineWidth /= g_camera.m_extent;\n        const s: number = (0.5 * g_camera.m_height) / g_camera.m_extent;\n        ctx.scale(s, s);\n        ctx.lineWidth /= s;\n\n        // apply camera\n        ctx.scale(1 / g_camera.m_zoom, 1 / g_camera.m_zoom);\n        ctx.lineWidth *= g_camera.m_zoom;\n        ///ctx.rotate(-g_camera.m_roll.GetAngle());\n        ctx.translate(-g_camera.m_center.x, -g_camera.m_center.y);\n\n        if (this.m_test) {\n          this.m_test.Step(this.m_settings);\n        }\n\n        // #if B2_ENABLE_PARTICLE\n        // Update the state of the particle parameter.\n        Test.particleParameter.Changed(restartTest);\n        // #endif\n\n        // #if B2_ENABLE_PARTICLE\n        let msg = this.tests[this.m_test_index].name;\n        if (Test.fullscreenUI.GetParticleParameterSelectionEnabled()) {\n          msg += ' : ';\n          msg += Test.particleParameter.GetName();\n        }\n        if (this.m_test) {\n          this.m_test.DrawTitle(msg);\n        }\n        // #else\n        // if (this.m_test) { this.m_test.DrawTitle(g_testEntries[this.m_test_index].name); }\n        // #endif\n\n        // ctx.strokeStyle = \"yellow\";\n        // ctx.strokeRect(mouse_world.x - 0.5, mouse_world.y - 0.5, 1.0, 1.0);\n\n        ctx.restore();\n      }\n\n      // #if B2_ENABLE_PARTICLE\n      if (restartTest[0]) {\n        this.LoadTest(true);\n      }\n      // #endif\n\n      this.UpdateTest(time_elapsed);\n    }\n  }\n}\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.5',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","module.exports = {};\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","exports.f = Object.getOwnPropertySymbols;\n","var getBuiltIn = require('../internals/get-built-in');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n","var has = require('../internals/has');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6)\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $filter = require('../internals/array-iteration').filter;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n// Edge 14- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('filter');\n\n// `Array.prototype.filter` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\n// /**\n//  * The following parameters are not static const members of the\n//  * Sandbox class with values assigned inline as it can result in\n//  * link errors when using gcc.\n//  */\n// SandboxParams = {};\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Color,\n  b2Contact,\n  b2ContactImpulse,\n  b2DestructionListener,\n  b2Joint,\n  b2Manifold,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleHandle,\n  b2ParticleSystem,\n  b2PolygonShape,\n  b2PrismaticJointDef,\n  b2Shape,\n  b2Transform,\n  b2Vec2,\n  b2World,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_debugDraw,\n  ParticleParameter,\n  ParticleParameterDefinition,\n  ParticleParameterOptions,\n  ParticleParameterValue,\n  RadialEmitter,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class SandboxParams {\n  /**\n   * Total possible pump squares\n   */\n  public static readonly k_maxPumps: number = 5;\n  /**\n   * Total possible emitters\n   */\n  public static readonly k_maxEmitters: number = 5;\n  /**\n   * Number of seconds to push one direction or the other on the\n   * pumps\n   */\n  public static readonly k_flipTime: number = 6;\n  /**\n   * Radius of a tile\n   */\n  public static readonly k_tileRadius: number = 2;\n  /**\n   * Diameter of a tile\n   */\n  public static readonly k_tileDiameter: number = 4;\n  /**\n   * Pump radius; slightly smaller than a tile\n   */\n  public static readonly k_pumpRadius: number = 2.0 - 0.05;\n\n  public static readonly k_playfieldLeftEdge: number = -20;\n  public static readonly k_playfieldRightEdge: number = 20;\n  public static readonly k_playfieldBottomEdge: number = 40;\n\n  /**\n   * The world size in the TILE\n   */\n  public static readonly k_tileWidth: number = 10;\n  public static readonly k_tileHeight: number = 11;\n\n  /**\n   * Particles/second\n   */\n  public static readonly k_defaultEmitterRate: number = 30;\n  /**\n   * Fit cleanly inside one block\n   */\n  public static readonly k_defaultEmitterSize: number = 3;\n  /**\n   * How fast particles coming out of the particles should drop\n   */\n  public static readonly k_particleExitSpeedY: number = -9.8;\n  /**\n   * How hard the pumps can push\n   */\n  public static readonly k_pumpForce: number = 600;\n\n  /**\n   * Number of *special* particles.\n   */\n  public static readonly k_numberOfSpecialParticles: number = 256;\n}\n\n/**\n * Class which tracks a set of particles and applies a special\n * effect to them.\n */\nexport class SpecialParticleTracker extends b2DestructionListener {\n  /**\n   * Set of particle handles used to track special particles.\n   */\n  public m_particles: b2ParticleHandle[] = [];\n\n  /**\n   * Pointer to the world used to enable / disable this class as a\n   * destruction listener.\n   */\n  public m_world: b2World;\n  /**\n   * Pointer to the particle system used to retrieve particle\n   * handles.\n   */\n  public m_particleSystem: b2ParticleSystem;\n  /**\n   * Current offset into this.m_colorOscillationPeriod.\n   */\n  public m_colorOscillationTime = 0.0;\n  /**\n   * Color oscillation period in seconds.\n   */\n  public m_colorOscillationPeriod = 2.0;\n\n  /**\n   * Register this class as a destruction listener so that it's\n   * possible to keep track of special particles.\n   */\n  constructor(world: b2World, system: b2ParticleSystem) {\n    super();\n    // DEBUG: b2Assert(world !== null);\n    // DEBUG: b2Assert(system !== null);\n    this.m_world = world;\n    this.m_particleSystem = system;\n    this.m_world.SetDestructionListener(this);\n  }\n\n  public __dtor__(): void {\n    this.m_world.SetDestructionListener(null);\n  }\n\n  /**\n   * Add as many of the specified particles to the set of special\n   * particles.\n   */\n  public Add(particleIndices: number[], numberOfParticles: number) {\n    // DEBUG: b2Assert(this.m_particleSystem !== null);\n    for (\n      let i = 0;\n      i < numberOfParticles && this.m_particles.length < SandboxParams.k_numberOfSpecialParticles;\n      ++i\n    ) {\n      const particleIndex = particleIndices[i];\n      this.m_particleSystem.SetParticleFlags(\n        particleIndex,\n        this.m_particleSystem.GetFlagsBuffer()[particleIndex] |\n          b2ParticleFlag.b2_destructionListenerParticle,\n      );\n      this.m_particles.push(this.m_particleSystem.GetParticleHandleFromIndex(particleIndex));\n    }\n  }\n\n  /**\n   * Apply effects to special particles.\n   */\n  public Step(dt: number): void {\n    function fmod(a: number, b: number) {\n      return a - Math.floor(a / b) * b;\n    }\n    // Oscillate the shade of color over this.m_colorOscillationPeriod seconds.\n    this.m_colorOscillationTime = fmod(\n      this.m_colorOscillationTime + dt,\n      this.m_colorOscillationPeriod,\n    );\n    const colorCoeff =\n      2.0 * Math.abs(this.m_colorOscillationTime / this.m_colorOscillationPeriod - 0.5);\n    const color = new b2Color().SetByteRGBA(\n      128 + 128.0 * (1.0 - colorCoeff),\n      128 + 256.0 * Math.abs(0.5 - colorCoeff),\n      128 + 128.0 * colorCoeff,\n      255,\n    );\n    // Update the color of all special particles.\n    for (let i = 0; i < this.m_particles.length; ++i) {\n      this.m_particleSystem.GetColorBuffer()[this.m_particles[i].GetIndex()].Copy(color);\n    }\n  }\n\n  // public SayGoodbyeJoint(joint: b2Joint): void {}\n  // public SayGoodbyeFixture(fixture: b2Fixture): void {}\n  // public SayGoodbyeParticleGroup(group: b2ParticleGroup): void {}\n\n  /**\n   * When a particle is about to be destroyed, remove it from the\n   * list of special particles as the handle will become invalid.\n   */\n  public SayGoodbyeParticle(particleSystem: b2ParticleSystem, index: number): void {\n    if (particleSystem !== this.m_particleSystem) {\n      return;\n    }\n\n    // NOTE: user data could be used as an alternative method to look up\n    // the local handle pointer from the index.\n    // DEBUG: const length = this.m_particles.length;\n    this.m_particles = this.m_particles.filter((value) => {\n      return value.GetIndex() !== index;\n    });\n    // DEBUG: b2Assert((length - this.m_particles.length) === 1);\n  }\n}\n\n/**\n * Sandbox test creates a maze of faucets, pumps, ramps,\n * circles, and blocks based on a string constant.  Please\n * modify and play with this string to make new mazes, and also\n * add new maze elements!\n */\n\nexport class Sandbox extends Test {\n  /**\n   * Count of faucets in the world\n   */\n  public m_faucetEmitterIndex = 0;\n  /**\n   * Count of pumps in the world\n   */\n  public m_pumpIndex = 0;\n\n  /**\n   * How long have we been pushing the pumps?\n   */\n  public m_pumpTimer = 0.0;\n  /**\n   * Particle creation flags\n   */\n  public m_particleFlags = 0;\n\n  /**\n   * Pump force\n   */\n  public readonly m_pumpForce: b2Vec2 = new b2Vec2();\n\n  /**\n   * The shape we will use for the killfield\n   */\n  public m_killFieldShape: b2PolygonShape;\n  /**\n   * Transform for the killfield shape\n   */\n  public m_killFieldTransform: b2Transform;\n\n  /**\n   * Pumps and emitters\n   */\n  public readonly m_pumps: Array<b2Body | null> = [];\n  public readonly m_emitters: Array<RadialEmitter | null> = [];\n\n  /**\n   * Special particle tracker.\n   */\n  public m_specialTracker: SpecialParticleTracker;\n\n  public static readonly k_paramValues = [\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions,\n      'water',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions | ParticleParameterOptions.OptionStrictContacts,\n      'water (strict)',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_tensileParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle,\n      ParticleParameter.k_DefaultOptions,\n      'viscous',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle | b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'viscous powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle |\n        b2ParticleFlag.b2_tensileParticle |\n        b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'viscous tensile powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle | b2ParticleFlag.b2_tensileParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile viscous water',\n    ),\n  ];\n\n  public static readonly k_paramDef = [new ParticleParameterDefinition(Sandbox.k_paramValues)];\n  public static readonly k_paramDefCount = Sandbox.k_paramDef.length;\n\n  constructor() {\n    super();\n\n    // We need some ground for the pumps to slide against\n    const bd = new b2BodyDef();\n    const ground = this.m_world.CreateBody(bd);\n\n    // Reset our pointers\n    for (let i = 0; i < SandboxParams.k_maxEmitters; i++) {\n      this.m_emitters[i] = null;\n    }\n\n    for (let i = 0; i < SandboxParams.k_maxPumps; i++) {\n      this.m_pumps[i] = null;\n    }\n\n    this.m_world.SetGravity(new b2Vec2(0.0, -20));\n\n    // Create physical box, no top\n    {\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-40, -10),\n          new b2Vec2(40, -10),\n          new b2Vec2(40, 0),\n          new b2Vec2(-40, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(SandboxParams.k_playfieldLeftEdge - 20, -1),\n          new b2Vec2(SandboxParams.k_playfieldLeftEdge, -1),\n          new b2Vec2(SandboxParams.k_playfieldLeftEdge, 50),\n          new b2Vec2(SandboxParams.k_playfieldLeftEdge - 20, 50),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(SandboxParams.k_playfieldRightEdge, -1),\n          new b2Vec2(SandboxParams.k_playfieldRightEdge + 20, -1),\n          new b2Vec2(SandboxParams.k_playfieldRightEdge + 20, 50),\n          new b2Vec2(SandboxParams.k_playfieldRightEdge, 50),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.25);\n\n    this.m_specialTracker = new SpecialParticleTracker(this.m_world, this.m_particleSystem);\n\n    this.m_pumpTimer = 0;\n\n    this.SetupMaze();\n\n    // Create killfield shape and transform\n    this.m_killFieldShape = new b2PolygonShape();\n    this.m_killFieldShape.SetAsBox(\n      SandboxParams.k_playfieldRightEdge - SandboxParams.k_playfieldLeftEdge,\n      1,\n    );\n\n    // Put this at the bottom of the world\n    this.m_killFieldTransform = new b2Transform();\n    const loc = new b2Vec2(-20, 1);\n    this.m_killFieldTransform.SetPositionAngle(loc, 0);\n\n    // Setup particle parameters.\n    Test.SetParticleParameters(Sandbox.k_paramDef, Sandbox.k_paramDefCount);\n    this.m_particleFlags = Test.GetParticleParameterValue();\n    Test.SetRestartOnParticleParameterChange(false);\n  }\n\n  public __dtor__() {\n    // deallocate our emitters\n    for (let i = 0; i < this.m_faucetEmitterIndex; i++) {\n      ///  delete this.m_emitters[i];\n      this.m_emitters[i] = null;\n    }\n  }\n\n  // Create a maze of blocks, ramps, pumps, and faucets.\n  // The maze is defined in a string; feel free to modify it.\n  // Items in the maze include:\n  //   # = a block\n  //   / = a right-to-left ramp triangle\n  //   A = a left-to-right ramp triangle (can't be \\ or string formatting\n  //       would be weird)\n  //   r, g, b = colored faucets pointing down\n  //   p = a pump block that rocks back and forth.  You can drag them\n  //       yourself with your finger.\n  //   C = a loose circle\n  //   K = an ignored placeholder for a killfield to remove particles;\n  //       entire bottom row is a killfield.\n  public SetupMaze() {\n    const maze =\n      '# r#g #r##' +\n      '  /#  #  #' +\n      ' ###     p' +\n      'A  #  /###' +\n      '## # /#  C' +\n      '  /# #   #' +\n      ' ### # / #' +\n      ' ## p /#  ' +\n      ' #  ####  ' +\n      'A        /' +\n      '#####KK###';\n\n    // DEBUG: b2Assert(maze.length === SandboxParams.k_tileWidth * SandboxParams.k_tileHeight);\n\n    this.m_faucetEmitterIndex = 0;\n    this.m_pumpIndex = 0;\n\n    // Set up some standard shapes/vertices we'll use later.\n    const boxShape = new b2PolygonShape();\n    boxShape.SetAsBox(SandboxParams.k_tileRadius, SandboxParams.k_tileRadius);\n\n    ///  b2Vec2 triangle[3];\n    const triangle = b2Vec2.MakeArray(3);\n    triangle[0].Set(-SandboxParams.k_tileRadius, -SandboxParams.k_tileRadius);\n    triangle[1].Set(SandboxParams.k_tileRadius, SandboxParams.k_tileRadius);\n    triangle[2].Set(SandboxParams.k_tileRadius, -SandboxParams.k_tileRadius);\n    const rightTriangleShape = new b2PolygonShape();\n    rightTriangleShape.Set(triangle, 3);\n\n    triangle[1].Set(-SandboxParams.k_tileRadius, SandboxParams.k_tileRadius);\n    const leftTriangleShape = new b2PolygonShape();\n    leftTriangleShape.Set(triangle, 3);\n\n    // Make these just a touch smaller than a tile\n    const circleShape = new b2CircleShape();\n    circleShape.m_radius = SandboxParams.k_tileRadius * 0.7;\n\n    const red = new b2Color().SetByteRGBA(255, 128, 128, 255);\n    const green = new b2Color().SetByteRGBA(128, 255, 128, 255);\n    const blue = new b2Color().SetByteRGBA(128, 128, 255, 255);\n\n    this.m_pumpForce.Set(SandboxParams.k_pumpForce, 0);\n\n    for (let i = 0; i < SandboxParams.k_tileWidth; i++) {\n      for (let j = 0; j < SandboxParams.k_tileHeight; j++) {\n        const item = maze[j * SandboxParams.k_tileWidth + i];\n\n        // Calculate center of this square\n        const center = new b2Vec2(\n          SandboxParams.k_playfieldLeftEdge +\n            SandboxParams.k_tileRadius * 2 * i +\n            SandboxParams.k_tileRadius,\n          SandboxParams.k_playfieldBottomEdge -\n            SandboxParams.k_tileRadius * 2 * j +\n            SandboxParams.k_tileRadius,\n        );\n\n        // Let's add some items\n        switch (item) {\n          case '#':\n            // Block\n            this.CreateBody(center, boxShape, b2BodyType.b2_staticBody);\n            break;\n          case 'A':\n            // Left-to-right ramp\n            this.CreateBody(center, leftTriangleShape, b2BodyType.b2_staticBody);\n            break;\n          case '/':\n            // Right-to-left ramp\n            this.CreateBody(center, rightTriangleShape, b2BodyType.b2_staticBody);\n            break;\n          case 'C':\n            // A circle to play with\n            this.CreateBody(center, circleShape, b2BodyType.b2_dynamicBody);\n            break;\n          case 'p':\n            this.AddPump(center);\n            break;\n          case 'b':\n            // Blue emitter\n            this.AddFaucetEmitter(center, blue);\n            break;\n          case 'r':\n            // Red emitter\n            this.AddFaucetEmitter(center, red);\n            break;\n          case 'g':\n            // Green emitter\n            this.AddFaucetEmitter(center, green);\n            break;\n          default:\n            // add nothing\n            break;\n        }\n      }\n    }\n  }\n\n  public CreateBody(center: b2Vec2, shape: b2Shape, type: b2BodyType) {\n    const def = new b2BodyDef();\n    def.position.Copy(center);\n    def.type = type;\n    const body = this.m_world.CreateBody(def);\n    body.CreateFixture(shape, 10.0);\n  }\n\n  // Inititalizes a pump and its prismatic joint, and adds it to the world\n  public AddPump(center: b2Vec2) {\n    // Don't make too many pumps\n    // DEBUG: b2Assert(this.m_pumpIndex < SandboxParams.k_maxPumps);\n\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(SandboxParams.k_pumpRadius, SandboxParams.k_pumpRadius);\n\n    const def = new b2BodyDef();\n    def.position.Copy(center);\n    def.type = b2BodyType.b2_dynamicBody;\n    def.angle = 0;\n    const body = this.m_world.CreateBody(def);\n    body.CreateFixture(shape, 5.0);\n\n    // Create a prismatic joint and connect to the ground, and have it\n    // slide along the x axis.\n    const prismaticJointDef = new b2PrismaticJointDef();\n    prismaticJointDef.bodyA = this.m_groundBody;\n    prismaticJointDef.bodyB = body;\n    prismaticJointDef.collideConnected = false;\n    prismaticJointDef.localAxisA.Set(1, 0);\n    prismaticJointDef.localAnchorA.Copy(center);\n\n    this.m_world.CreateJoint(prismaticJointDef);\n\n    this.m_pumps[this.m_pumpIndex] = body;\n    this.m_pumpIndex++;\n  }\n\n  // Initializes and adds a faucet emitter\n  public AddFaucetEmitter(center: b2Vec2, color: b2Color) {\n    // Don't make too many emitters\n    // DEBUG: b2Assert(this.m_faucetEmitterIndex < SandboxParams.k_maxPumps);\n\n    const startingVelocity = new b2Vec2(0, SandboxParams.k_particleExitSpeedY);\n\n    const emitter = new RadialEmitter();\n    emitter.SetParticleSystem(this.m_particleSystem);\n    emitter.SetPosition(center);\n    emitter.SetVelocity(startingVelocity);\n    emitter.SetSize(new b2Vec2(SandboxParams.k_defaultEmitterSize, 0.0));\n    emitter.SetEmitRate(SandboxParams.k_defaultEmitterRate);\n    emitter.SetColor(color);\n    this.m_emitters[this.m_faucetEmitterIndex] = emitter;\n    this.m_faucetEmitterIndex++;\n  }\n\n  public JointDestroyed(joint: b2Joint): void {\n    super.JointDestroyed(joint);\n  }\n\n  public ParticleGroupDestroyed(group: b2ParticleGroup): void {\n    super.ParticleGroupDestroyed(group);\n  }\n\n  public BeginContact(contact: b2Contact): void {\n    super.BeginContact(contact);\n  }\n\n  public EndContact(contact: b2Contact): void {\n    super.EndContact(contact);\n  }\n\n  public PreSolve(contact: b2Contact, oldManifold: b2Manifold): void {\n    super.PreSolve(contact, oldManifold);\n  }\n\n  public PostSolve(contact: b2Contact, impulse: b2ContactImpulse): void {\n    super.PostSolve(contact, impulse);\n  }\n\n  /**\n   * Allows you to set particle flags on devices with keyboards\n   */\n  public Keyboard(key: string): void {\n    super.Keyboard(key);\n    let toggle = 0;\n    switch (key) {\n      case 'a':\n        this.m_particleFlags = 0;\n        break;\n      case 'q':\n        toggle = b2ParticleFlag.b2_powderParticle;\n        break;\n      case 't':\n        toggle = b2ParticleFlag.b2_tensileParticle;\n        break;\n      case 'v':\n        toggle = b2ParticleFlag.b2_viscousParticle;\n        break;\n      case 'w':\n        toggle = b2ParticleFlag.b2_wallParticle;\n        break;\n    }\n    if (toggle) {\n      if (this.m_particleFlags & toggle) {\n        this.m_particleFlags = this.m_particleFlags & ~toggle;\n      } else {\n        this.m_particleFlags = this.m_particleFlags | toggle;\n      }\n    }\n    Test.SetParticleParameterValue(this.m_particleFlags);\n  }\n\n  public KeyboardUp(key: string): void {\n    super.KeyboardUp(key);\n  }\n\n  public MouseDown(p: b2Vec2): void {\n    super.MouseDown(p);\n  }\n\n  public MouseUp(p: b2Vec2): void {\n    super.MouseUp(p);\n  }\n\n  public MouseMove(p: b2Vec2): void {\n    super.MouseMove(p);\n  }\n\n  /**\n   * Per-frame step updater overridden from Test\n   */\n  public Step(settings: Settings): void {\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n    super.Step(settings);\n\n    this.m_particleFlags = Test.GetParticleParameterValue();\n\n    // Step all the emitters\n    for (let i = 0; i < this.m_faucetEmitterIndex; i++) {\n      const particleIndices: number[] = [];\n      const emitter = this.m_emitters[i];\n      if (emitter) {\n        emitter.SetParticleFlags(this.m_particleFlags);\n        const particlesCreated = emitter.Step(\n          dt,\n          particleIndices,\n          SandboxParams.k_numberOfSpecialParticles,\n        );\n        this.m_specialTracker.Add(particleIndices, particlesCreated);\n      }\n    }\n\n    // Step the special tracker.\n    this.m_specialTracker.Step(dt);\n\n    // Do killfield work--kill every particle near the bottom of the screen\n    this.m_particleSystem.DestroyParticlesInShape(this.m_killFieldShape, this.m_killFieldTransform);\n\n    // Move the pumps\n    for (let i = 0; i < this.m_pumpIndex; i++) {\n      const pump = this.m_pumps[i];\n      if (pump) {\n        // Pumps can and will clog up if the pile of particles they're\n        // trying to push is too heavy. Increase k_pumpForce to make\n        // stronger pumps.\n        pump.ApplyForceToCenter(this.m_pumpForce, true);\n      }\n\n      this.m_pumpTimer += dt;\n\n      // Reset pump to go back right again\n      if (this.m_pumpTimer > SandboxParams.k_flipTime) {\n        this.m_pumpTimer -= SandboxParams.k_flipTime;\n        this.m_pumpForce.x *= -1;\n      }\n    }\n\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (a) zero out (water), (q) powder');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, '      (t) tensile, (v) viscous');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public GetDefaultViewZoom(): number {\n    return super.GetDefaultViewZoom();\n  }\n\n  public static Create() {\n    return new Sandbox();\n  }\n}\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectDefinePropertyModule = require('../internals/object-define-property');\nvar regExpFlags = require('../internals/regexp-flags');\nvar UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;\n\n// `RegExp.prototype.flags` getter\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nif (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {\n  objectDefinePropertyModule.f(RegExp.prototype, 'flags', {\n    configurable: true,\n    get: regExpFlags\n  });\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Color,\n  b2Contact,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2ParticleSystem,\n  b2PolygonShape,\n  b2Vec2,\n  b2WorldManifold,\n  RGBA,\n} from '@highduck/box2d';\nimport { RandomFloat, Settings, Test } from '@highduck/box2d-testbed';\n\nclass ParticleVFX {\n  private m_initialLifetime = 0.0;\n  private m_remainingLifetime = 0.0;\n  private m_halfLifetime = 0.0;\n  private m_pg: b2ParticleGroup;\n  private m_particleSystem: b2ParticleSystem;\n  private m_origColor: b2Color = new b2Color();\n  constructor(\n    particleSystem: b2ParticleSystem,\n    origin: b2Vec2,\n    size: number,\n    speed: number,\n    lifetime: number,\n    particleFlags: b2ParticleFlag,\n  ) {\n    // Create a circle to house the particles of size size\n    const shape = new b2CircleShape();\n    shape.m_p.Copy(origin);\n    shape.m_radius = size;\n\n    // Create particle def of random color.\n    const pd = new b2ParticleGroupDef();\n    pd.flags = particleFlags;\n    pd.shape = shape;\n    // this.m_origColor.Set(\n    //   Math.random(),\n    //   Math.random(),\n    //   Math.random(),\n    //   1.0);\n    function hue2rgb(p: number, q: number, t: number) {\n      if (t < 0) {\n        t += 1;\n      }\n      if (t > 1) {\n        t -= 1;\n      }\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n      if (t < 1 / 2) {\n        return q;\n      }\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n      return p;\n    }\n    function hslToRgb(h: number, s: number, l: number, a = 1): RGBA {\n      let r, g, b;\n      if (s === 0) {\n        r = g = b = l; // achromatic\n      } else {\n        const q: number = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p: number = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n      }\n      return { r, g, b, a };\n    }\n    this.m_origColor.Copy(hslToRgb(Math.random(), 1, 0.5));\n    pd.color.Copy(this.m_origColor);\n    this.m_particleSystem = particleSystem;\n\n    // Create a circle full of particles\n    this.m_pg = this.m_particleSystem.CreateParticleGroup(pd);\n\n    this.m_initialLifetime = this.m_remainingLifetime = lifetime;\n    this.m_halfLifetime = this.m_initialLifetime * 0.5;\n\n    // Set particle initial velocity based on how far away it is from\n    // origin, exploding outwards.\n    const bufferIndex = this.m_pg.GetBufferIndex();\n    const pos = this.m_particleSystem.GetPositionBuffer();\n    const vel = this.m_particleSystem.GetVelocityBuffer();\n    for (let i = bufferIndex; i < bufferIndex + this.m_pg.GetParticleCount(); i++) {\n      ///  vel[i] = pos[i] - origin;\n      b2Vec2.SubVV(pos[i], origin, vel[i]);\n      ///  vel[i] *= speed;\n      b2Vec2.MulVS(vel[i], speed, vel[i]);\n    }\n  }\n  public Drop() {\n    this.m_pg.DestroyParticles(false);\n    // this.m_pg = null;\n  }\n  public ColorCoeff() {\n    if (this.m_remainingLifetime >= this.m_halfLifetime) {\n      return 1.0;\n    }\n    return 1.0 - (this.m_halfLifetime - this.m_remainingLifetime) / this.m_halfLifetime;\n  }\n  public Step(dt: number) {\n    if (dt > 0 && this.m_remainingLifetime > 0.0) {\n      this.m_remainingLifetime = Math.max(this.m_remainingLifetime - dt, 0.0);\n      const coeff = this.ColorCoeff();\n\n      const colors = this.m_particleSystem.GetColorBuffer();\n      const bufferIndex = this.m_pg.GetBufferIndex();\n\n      // Set particle colors all at once.\n      for (let i = bufferIndex; i < bufferIndex + this.m_pg.GetParticleCount(); i++) {\n        const c = colors[i];\n        // c *= coeff;\n        // c.SelfMul(coeff);\n        // c.a = this.m_origColor.a;\n        c.a *= coeff;\n      }\n    }\n  }\n  public IsDone() {\n    return this.m_remainingLifetime <= 0.0;\n  }\n}\n\nexport class Sparky extends Test {\n  private static c_maxCircles = 3; ///6;\n  private static c_maxVFX = 20; ///50;\n  private static SHAPE_HEIGHT_OFFSET = 7;\n  private static SHAPE_OFFSET = 4.5;\n  private m_VFXIndex = 0;\n  private m_VFX: Array<ParticleVFX | null> = [];\n  private m_contact = false;\n  private m_contactPoint: b2Vec2 = new b2Vec2();\n  constructor() {\n    super();\n\n    // Set up array of sparks trackers.\n    this.m_VFXIndex = 0;\n\n    for (let i = 0; i < Sparky.c_maxVFX; i++) {\n      this.m_VFX[i] = null;\n    }\n\n    this.CreateWalls();\n    this.m_particleSystem.SetRadius(0.25 * 2); // HACK: increase particle radius\n\n    // Create a list of circles that will spark.\n    for (let i = 0; i < Sparky.c_maxCircles; i++) {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(3.0 * RandomFloat(), Sparky.SHAPE_HEIGHT_OFFSET + Sparky.SHAPE_OFFSET * i);\n      shape.m_radius = 2;\n      const f = body.CreateFixture(shape, 0.5);\n      // Tag this as a sparkable body.\n      f.SetUserData({\n        spark: true,\n      });\n    }\n\n    Test.SetRestartOnParticleParameterChange(false);\n    Test.SetParticleParameterValue(b2ParticleFlag.b2_powderParticle);\n  }\n\n  public BeginContact(contact: b2Contact) {\n    super.BeginContact(contact);\n    // Check to see if these are two circles hitting one another.\n    const userA = contact.GetFixtureA().GetUserData();\n    const userB = contact.GetFixtureB().GetUserData();\n    if ((userA && userA.spark) || (userB && userB.spark)) {\n      const worldManifold = new b2WorldManifold();\n      contact.GetWorldManifold(worldManifold);\n\n      // Note that we overwrite any contact; if there are two collisions\n      // on the same frame, only the last one showers sparks.\n      // Two collisions are rare, and this also guarantees we will not\n      // run out of places to store ParticleVFX explosions.\n      this.m_contactPoint.Copy(worldManifold.points[0]);\n      this.m_contact = true;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    const particleFlags = Test.GetParticleParameterValue();\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    super.Step(settings);\n\n    // If there was a contacts...\n    if (this.m_contact) {\n      // ...explode!\n      this.AddVFX(this.m_contactPoint, particleFlags);\n      this.m_contact = false;\n    }\n\n    // Step particle explosions.\n    for (let i = 0; i < Sparky.c_maxVFX; i++) {\n      const vfx = this.m_VFX[i];\n      if (vfx === null) {\n        continue;\n      }\n      vfx.Step(dt);\n      if (vfx.IsDone()) {\n        /// delete vfx;\n        vfx.Drop();\n        this.m_VFX[i] = null;\n      }\n    }\n  }\n\n  public AddVFX(p: b2Vec2, particleFlags: b2ParticleFlag) {\n    const vfx = this.m_VFX[this.m_VFXIndex];\n    if (vfx !== null) {\n      /// delete vfx;\n      vfx.Drop();\n      this.m_VFX[this.m_VFXIndex] = null;\n    }\n    this.m_VFX[this.m_VFXIndex] = new ParticleVFX(\n      this.m_particleSystem,\n      p,\n      RandomFloat(1.0, 2.0),\n      RandomFloat(10.0, 20.0),\n      RandomFloat(0.5, 1.0),\n      particleFlags,\n    );\n    if (++this.m_VFXIndex >= Sparky.c_maxVFX) {\n      this.m_VFXIndex = 0;\n    }\n  }\n\n  public CreateWalls() {\n    // Create the walls of the world.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-40, -10),\n          new b2Vec2(40, -10),\n          new b2Vec2(40, 0),\n          new b2Vec2(-40, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-40, 40),\n          new b2Vec2(40, 40),\n          new b2Vec2(40, 50),\n          new b2Vec2(-40, 50),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-40, -10),\n          new b2Vec2(-20, -10),\n          new b2Vec2(-20, 50),\n          new b2Vec2(-40, 50),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(20, -10),\n          new b2Vec2(40, -10),\n          new b2Vec2(40, 50),\n          new b2Vec2(20, 50),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n  }\n\n  public static Create(): Test {\n    return new Sparky();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2ChainShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class DamBreak extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2ChainShape();\n      const vertices = [new b2Vec2(-2, 0), new b2Vec2(2, 0), new b2Vec2(2, 4), new b2Vec2(-2, 4)];\n      shape.CreateLoop(vertices, 4);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    this.m_particleSystem.SetRadius(0.025 * 2); // HACK: increase particle radius\n    this.m_particleSystem.SetDamping(0.2);\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.8, 1.0, new b2Vec2(-1.2, 1.01), 0);\n      const pd = new b2ParticleGroupDef();\n      pd.flags = Test.GetParticleParameterValue();\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new DamBreak();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2ChainShape,\n  b2EdgeShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport {\n  ParticleParameter,\n  ParticleParameterDefinition,\n  ParticleParameterValue,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class LiquidTimer extends Test {\n  public static readonly k_paramValues = [\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_viscousParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile + viscous',\n    ),\n  ];\n  public static readonly k_paramDef = [\n    new ParticleParameterDefinition(LiquidTimer.k_paramValues),\n    new ParticleParameterDefinition(ParticleParameter.k_particleTypes),\n  ];\n  public static readonly k_paramDefCount = LiquidTimer.k_paramDef.length;\n\n  constructor() {\n    super();\n\n    // Setup particle parameters.\n    Test.SetParticleParameters(LiquidTimer.k_paramDef, LiquidTimer.k_paramDefCount);\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2ChainShape();\n      const vertices = [new b2Vec2(-2, 0), new b2Vec2(2, 0), new b2Vec2(2, 4), new b2Vec2(-2, 4)];\n      shape.CreateLoop(vertices, 4);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    this.m_particleSystem.SetRadius(0.025);\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2, 0.4, new b2Vec2(0, 3.6), 0);\n      const pd = new b2ParticleGroupDef();\n      pd.flags = Test.GetParticleParameterValue();\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-2, 3.2), new b2Vec2(-1.2, 3.2));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-1.1, 3.2), new b2Vec2(2, 3.2));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-1.2, 3.2), new b2Vec2(-1.2, 2.8));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-1.1, 3.2), new b2Vec2(-1.1, 2.8));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-1.6, 2.4), new b2Vec2(0.8, 2));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(1.6, 1.6), new b2Vec2(-0.8, 1.2));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-1.2, 0.8), new b2Vec2(-1.2, 0));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-0.4, 0.8), new b2Vec2(-0.4, 0));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(0.4, 0.8), new b2Vec2(0.4, 0));\n      body.CreateFixture(shape, 0.1);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(1.2, 0.8), new b2Vec2(1.2, 0));\n      body.CreateFixture(shape, 0.1);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new LiquidTimer();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2_pi,\n  b2BodyDef,\n  b2BodyType,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class WaveMachine extends Test {\n  public m_joint: b2RevoluteJoint;\n  public m_time = 0;\n\n  constructor() {\n    super();\n\n    let ground = null;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.allowSleep = false;\n      bd.position.Set(0.0, 1.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.05, 1.0, new b2Vec2(2.0, 0.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(0.05, 1.0, new b2Vec2(-2.0, 0.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(2.0, 0.05, new b2Vec2(0.0, 1.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(2.0, 0.05, new b2Vec2(0.0, -1.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n\n      const jd = new b2RevoluteJointDef();\n      jd.bodyA = ground;\n      jd.bodyB = body;\n      jd.localAnchorA.Set(0.0, 1.0);\n      jd.localAnchorB.Set(0.0, 0.0);\n      jd.referenceAngle = 0.0;\n      jd.motorSpeed = 0.05 * b2_pi;\n      jd.maxMotorTorque = 1e7;\n      jd.enableMotor = true;\n      this.m_joint = this.m_world.CreateJoint(jd);\n    }\n\n    this.m_particleSystem.SetRadius(0.025 * 2); // HACK: increase particle radius\n    const particleType = Test.GetParticleParameterValue();\n    this.m_particleSystem.SetDamping(0.2);\n\n    {\n      const pd = new b2ParticleGroupDef();\n      pd.flags = particleType;\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.9, 0.9, new b2Vec2(0.0, 1.0), 0.0);\n\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n\n    this.m_time = 0;\n  }\n\n  public Step(settings: Settings) {\n    super.Step(settings);\n    if (settings.hz > 0) {\n      this.m_time += 1 / settings.hz;\n    }\n    this.m_joint.SetMotorSpeed(0.05 * Math.cos(this.m_time) * b2_pi);\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new WaveMachine();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class Particles extends Test {\n  constructor() {\n    super();\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -1),\n          new b2Vec2(4, -1),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -0.1),\n          new b2Vec2(-2, -0.1),\n          new b2Vec2(-2, 2),\n          new b2Vec2(-4, 3),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(2, -0.1),\n          new b2Vec2(4, -0.1),\n          new b2Vec2(4, 3),\n          new b2Vec2(2, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.035 * 2); // HACK: increase particle radius\n    const particleType = Test.GetParticleParameterValue();\n    this.m_particleSystem.SetDamping(0.2);\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 3);\n      shape.m_radius = 2;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = particleType;\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 8);\n      shape.m_radius = 0.5;\n      body.CreateFixture(shape, 0.5);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new Particles();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2Color,\n  b2Max,\n  b2Min,\n  b2ParticleFlag,\n  b2ParticleSystem,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  EmittedParticleCallback,\n  g_debugDraw,\n  ParticleParameter,\n  ParticleParameterDefinition,\n  ParticleParameterOptions,\n  ParticleParameterValue,\n  RadialEmitter,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class ParticleLifetimeRandomizer extends EmittedParticleCallback {\n  public m_minLifetime = 0.0;\n  public m_maxLifetime = 0.0;\n  constructor(minLifetime: number, maxLifetime: number) {\n    super();\n    this.m_minLifetime = minLifetime;\n    this.m_maxLifetime = maxLifetime;\n  }\n  /**\n   * Called for each created particle.\n   */\n  public ParticleCreated(system: b2ParticleSystem, particleIndex: number): void {\n    system.SetParticleLifetime(\n      particleIndex,\n      Math.random() * (this.m_maxLifetime - this.m_minLifetime) + this.m_minLifetime,\n    );\n  }\n}\n\n/**\n * Faucet test creates a container from boxes and continually\n * spawning particles with finite lifetimes that pour into the\n * box.\n */\nexport class Faucet extends Test {\n  /**\n   * Used to cycle through particle colors.\n   */\n  public m_particleColorOffset = 0.0;\n  /**\n   * Particle emitter.\n   */\n  public m_emitter: RadialEmitter;\n  /**\n   * Callback which sets the lifetime of emitted particles.\n   */\n  public m_lifetimeRandomizer: ParticleLifetimeRandomizer;\n\n  /**\n   * Minimum lifetime of particles in seconds.\n   */\n  public static readonly k_particleLifetimeMin = 30.0;\n  /**\n   * Maximum lifetime of particles in seconds.\n   */\n  public static readonly k_particleLifetimeMax = 50.0;\n  /**\n   * Height of the container.\n   */\n  public static readonly k_containerHeight = 0.2;\n  /**\n   * Width of the container.\n   */\n  public static readonly k_containerWidth = 1.0;\n  /**\n   * Thickness of the container's walls and bottom.\n   */\n  public static readonly k_containerThickness = 0.05;\n  /**\n   * Width of the faucet relative to the container width.\n   */\n  public static readonly k_faucetWidth = 0.1;\n  /**\n   * Height of the faucet relative to the base as a fraction of\n   * the container height.\n   */\n  public static readonly k_faucetHeight = 15.0;\n  /**\n   * Length of the faucet as a fraction of the particle diameter.\n   */\n  public static readonly k_faucetLength = 2.0;\n  /**\n   * Spout height as a fraction of the faucet length.  This should\n   * be greater than 1.0f).\n   */\n  public static readonly k_spoutLength = 2.0;\n  /**\n   * Spout width as a fraction of the *faucet* width.  This should\n   * be greater than 1.0).\n   */\n  public static readonly k_spoutWidth = 1.1;\n  /**\n   * Maximum number of particles in the system.\n   */\n  public static readonly k_maxParticleCount = 1000;\n  /**\n   * Factor that is used to increase / decrease the emit rate.\n   * This should be greater than 1.0.\n   */\n  public static readonly k_emitRateChangeFactor = 1.05;\n  /**\n   * Minimum emit rate of the faucet in particles per second.\n   */\n  public static readonly k_emitRateMin = 1.0;\n  /**\n   * Maximum emit rate of the faucet in particles per second.\n   */\n  public static readonly k_emitRateMax = 240.0;\n\n  /**\n   * Selection of particle types for this test.\n   */\n  public static readonly k_paramValues: ParticleParameterValue[] = [\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions,\n      'water',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_waterParticle,\n      ParticleParameter.k_DefaultOptions | ParticleParameterOptions.OptionStrictContacts,\n      'water (strict)',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_viscousParticle,\n      ParticleParameter.k_DefaultOptions,\n      'viscous',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_powderParticle,\n      ParticleParameter.k_DefaultOptions,\n      'powder',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_tensileParticle,\n      ParticleParameter.k_DefaultOptions,\n      'tensile',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_colorMixingParticle,\n      ParticleParameter.k_DefaultOptions,\n      'color mixing',\n    ),\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_staticPressureParticle,\n      ParticleParameter.k_DefaultOptions,\n      'static pressure',\n    ),\n  ];\n  public static readonly k_paramDef: ParticleParameterDefinition[] = [\n    new ParticleParameterDefinition(Faucet.k_paramValues),\n  ];\n  public static readonly k_paramDefCount = Faucet.k_paramDef.length;\n\n  constructor() {\n    super(); // base class constructor\n\n    this.m_emitter = new RadialEmitter();\n    this.m_lifetimeRandomizer = new ParticleLifetimeRandomizer(\n      Faucet.k_particleLifetimeMin,\n      Faucet.k_particleLifetimeMax,\n    );\n\n    // Configure particle system parameters.\n    this.m_particleSystem.SetRadius(0.035);\n    this.m_particleSystem.SetMaxParticleCount(Faucet.k_maxParticleCount);\n    this.m_particleSystem.SetDestructionByAge(true);\n\n    let ground: b2Body;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n    }\n\n    // Create the container / trough style sink.\n    {\n      const shape = new b2PolygonShape();\n      const height = Faucet.k_containerHeight + Faucet.k_containerThickness;\n      shape.SetAsBox(\n        Faucet.k_containerWidth - Faucet.k_containerThickness,\n        Faucet.k_containerThickness,\n        new b2Vec2(0.0, 0.0),\n        0.0,\n      );\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(\n        Faucet.k_containerThickness,\n        height,\n        new b2Vec2(-Faucet.k_containerWidth, Faucet.k_containerHeight),\n        0.0,\n      );\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(\n        Faucet.k_containerThickness,\n        height,\n        new b2Vec2(Faucet.k_containerWidth, Faucet.k_containerHeight),\n        0.0,\n      );\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Create ground under the container to catch overflow.\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(\n        Faucet.k_containerWidth * 5.0,\n        Faucet.k_containerThickness,\n        new b2Vec2(0.0, Faucet.k_containerThickness * -2.0),\n        0.0,\n      );\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Create the faucet spout.\n    {\n      const shape = new b2PolygonShape();\n      const particleDiameter = this.m_particleSystem.GetRadius() * 2.0;\n      const faucetLength = Faucet.k_faucetLength * particleDiameter;\n      // Dimensions of the faucet in world units.\n      const length = faucetLength * Faucet.k_spoutLength;\n      const width = Faucet.k_containerWidth * Faucet.k_faucetWidth * Faucet.k_spoutWidth;\n      // Height from the bottom of the container.\n      const height = Faucet.k_containerHeight * Faucet.k_faucetHeight + length * 0.5;\n\n      shape.SetAsBox(particleDiameter, length, new b2Vec2(-width, height), 0.0);\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(particleDiameter, length, new b2Vec2(width, height), 0.0);\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(\n        width - particleDiameter,\n        particleDiameter,\n        new b2Vec2(0.0, height + length - particleDiameter),\n        0.0,\n      );\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Initialize the particle emitter.\n    {\n      const faucetLength = this.m_particleSystem.GetRadius() * 2.0 * Faucet.k_faucetLength;\n      this.m_emitter.SetParticleSystem(this.m_particleSystem);\n      this.m_emitter.SetCallback(this.m_lifetimeRandomizer);\n      this.m_emitter.SetPosition(\n        new b2Vec2(\n          Faucet.k_containerWidth * Faucet.k_faucetWidth,\n          Faucet.k_containerHeight * Faucet.k_faucetHeight + faucetLength * 0.5,\n        ),\n      );\n      this.m_emitter.SetVelocity(new b2Vec2(0.0, 0.0));\n      this.m_emitter.SetSize(new b2Vec2(0.0, faucetLength));\n      this.m_emitter.SetColor(new b2Color(1, 1, 1, 1));\n      this.m_emitter.SetEmitRate(120.0);\n      this.m_emitter.SetParticleFlags(Test.GetParticleParameterValue());\n    }\n\n    // Don't restart the test when changing particle types.\n    Test.SetRestartOnParticleParameterChange(false);\n    // Limit the set of particle types.\n    Test.SetParticleParameters(Faucet.k_paramDef, Faucet.k_paramDefCount);\n  }\n\n  public Step(settings: Settings): void {\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    super.Step(settings);\n    this.m_particleColorOffset += dt;\n    // Keep m_particleColorOffset in the range 0.0f..k_ParticleColorsCount.\n    if (this.m_particleColorOffset >= Test.k_ParticleColorsCount) {\n      this.m_particleColorOffset -= Test.k_ParticleColorsCount;\n    }\n\n    // Propagate the currently selected particle flags.\n    this.m_emitter.SetParticleFlags(Test.GetParticleParameterValue());\n\n    // If this is a color mixing particle, add some color.\n    ///  b2Color color(1, 1, 1, 1);\n    if (this.m_emitter.GetParticleFlags() & b2ParticleFlag.b2_colorMixingParticle) {\n      // Each second, select a different color.\n      this.m_emitter.SetColor(\n        Test.k_ParticleColors[Math.floor(this.m_particleColorOffset) % Test.k_ParticleColorsCount],\n      );\n    } else {\n      this.m_emitter.SetColor(new b2Color(1, 1, 1, 1));\n    }\n\n    // Create the particles.\n    this.m_emitter.Step(dt);\n\n    const k_keys = [\n      'Keys: (w) water, (q) powder',\n      '      (t) tensile, (v) viscous',\n      '      (c) color mixing, (s) static pressure',\n      '      (+) increase flow, (-) decrease flow',\n    ];\n    for (let i = 0; i < k_keys.length; ++i) {\n      g_debugDraw.DrawString(5, this.m_textLine, k_keys[i]);\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n  }\n\n  public Keyboard(key: string): void {\n    let parameter = 0;\n    switch (key) {\n      case 'w':\n        parameter = b2ParticleFlag.b2_waterParticle;\n        break;\n      case 'q':\n        parameter = b2ParticleFlag.b2_powderParticle;\n        break;\n      case 't':\n        parameter = b2ParticleFlag.b2_tensileParticle;\n        break;\n      case 'v':\n        parameter = b2ParticleFlag.b2_viscousParticle;\n        break;\n      case 'c':\n        parameter = b2ParticleFlag.b2_colorMixingParticle;\n        break;\n      case 's':\n        parameter = b2ParticleFlag.b2_staticPressureParticle;\n        break;\n      case '=':\n        ///if (this.m_shift)\n        {\n          let emitRate = this.m_emitter.GetEmitRate();\n          emitRate *= Faucet.k_emitRateChangeFactor;\n          emitRate = b2Max(emitRate, Faucet.k_emitRateMin);\n          this.m_emitter.SetEmitRate(emitRate);\n        }\n        break;\n      case '-':\n        ///if (!this.shift)\n        {\n          let emitRate = this.m_emitter.GetEmitRate();\n          emitRate *= 1.0 / Faucet.k_emitRateChangeFactor;\n          emitRate = b2Min(emitRate, Faucet.k_emitRateMax);\n          this.m_emitter.SetEmitRate(emitRate);\n        }\n        break;\n      default:\n        // Nothing.\n        return;\n    }\n    Test.SetParticleParameterValue(parameter);\n  }\n\n  public GetDefaultViewZoom(): number {\n    return 0.1;\n  }\n\n  /**\n   * Create the faucet test.\n   */\n  public static Create(): Faucet {\n    return new Faucet();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2ParticleGroupFlag,\n  b2PolygonShape,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_debugDraw,\n  ParticleParameter,\n  ParticleParameterDefinition,\n  ParticleParameterValue,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class DrawingParticles extends Test {\n  /**\n   * Set bit 31 to distiguish these values from particle flags.\n   */\n  public static readonly Parameters = {\n    e_parameterBegin: 1 << 31, // Start of this parameter namespace.\n    e_parameterMove: (1 << 31) | (1 << 0),\n    e_parameterRigid: (1 << 31) | (1 << 1),\n    e_parameterRigidBarrier: (1 << 31) | (1 << 2),\n    e_parameterElasticBarrier: (1 << 31) | (1 << 3),\n    e_parameterSpringBarrier: (1 << 31) | (1 << 4),\n    e_parameterRepulsive: (1 << 31) | (1 << 5),\n  };\n\n  public m_lastGroup: b2ParticleGroup | null;\n  public m_drawing = true;\n  public m_particleFlags = 0;\n  public m_groupFlags = 0;\n  public m_colorIndex = 0;\n\n  public static readonly k_paramValues = [\n    new ParticleParameterValue(\n      b2ParticleFlag.b2_zombieParticle,\n      ParticleParameter.k_DefaultOptions,\n      'erase',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterMove,\n      ParticleParameter.k_DefaultOptions,\n      'move',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterRigid,\n      ParticleParameter.k_DefaultOptions,\n      'rigid',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterRigidBarrier,\n      ParticleParameter.k_DefaultOptions,\n      'rigid barrier',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterElasticBarrier,\n      ParticleParameter.k_DefaultOptions,\n      'elastic barrier',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterSpringBarrier,\n      ParticleParameter.k_DefaultOptions,\n      'spring barrier',\n    ),\n    new ParticleParameterValue(\n      DrawingParticles.Parameters.e_parameterRepulsive,\n      ParticleParameter.k_DefaultOptions,\n      'repulsive wall',\n    ),\n  ];\n\n  public static readonly k_paramDef = [\n    new ParticleParameterDefinition(ParticleParameter.k_particleTypes),\n    new ParticleParameterDefinition(DrawingParticles.k_paramValues),\n  ];\n  public static readonly k_paramDefCount = DrawingParticles.k_paramDef.length;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -2),\n          new b2Vec2(4, -2),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -2),\n          new b2Vec2(-2, -2),\n          new b2Vec2(-2, 6),\n          new b2Vec2(-4, 6),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(2, -2), new b2Vec2(4, -2), new b2Vec2(4, 6), new b2Vec2(2, 6)];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(-4, 4), new b2Vec2(4, 4), new b2Vec2(4, 6), new b2Vec2(-4, 6)];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_colorIndex = 0;\n    this.m_particleSystem.SetRadius(0.05 * 2);\n    this.m_lastGroup = null;\n    this.m_drawing = true;\n\n    // DEBUG: b2Assert((DrawingParticles.k_paramDef[0].CalculateValueMask() & DrawingParticles.Parameters.e_parameterBegin) === 0);\n    Test.SetParticleParameters(DrawingParticles.k_paramDef, DrawingParticles.k_paramDefCount);\n    Test.SetRestartOnParticleParameterChange(false);\n\n    this.m_particleFlags = Test.GetParticleParameterValue();\n    this.m_groupFlags = 0;\n  }\n\n  // Determine the current particle parameter from the drawing state and\n  // group flags.\n  public DetermineParticleParameter() {\n    if (this.m_drawing) {\n      if (\n        this.m_groupFlags ===\n        (b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup)\n      ) {\n        return DrawingParticles.Parameters.e_parameterRigid;\n      }\n      if (\n        this.m_groupFlags === b2ParticleGroupFlag.b2_rigidParticleGroup &&\n        this.m_particleFlags === b2ParticleFlag.b2_barrierParticle\n      ) {\n        return DrawingParticles.Parameters.e_parameterRigidBarrier;\n      }\n      if (\n        this.m_particleFlags ===\n        (b2ParticleFlag.b2_elasticParticle | b2ParticleFlag.b2_barrierParticle)\n      ) {\n        return DrawingParticles.Parameters.e_parameterElasticBarrier;\n      }\n      if (\n        this.m_particleFlags ===\n        (b2ParticleFlag.b2_springParticle | b2ParticleFlag.b2_barrierParticle)\n      ) {\n        return DrawingParticles.Parameters.e_parameterSpringBarrier;\n      }\n      if (\n        this.m_particleFlags ===\n        (b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_repulsiveParticle)\n      ) {\n        return DrawingParticles.Parameters.e_parameterRepulsive;\n      }\n      return this.m_particleFlags;\n    }\n    return DrawingParticles.Parameters.e_parameterMove;\n  }\n\n  public Keyboard(key: string) {\n    this.m_drawing = key !== 'x';\n    this.m_particleFlags = 0;\n    this.m_groupFlags = 0;\n    switch (key) {\n      case 'e':\n        this.m_particleFlags = b2ParticleFlag.b2_elasticParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 'p':\n        this.m_particleFlags = b2ParticleFlag.b2_powderParticle;\n        break;\n      case 'r':\n        this.m_groupFlags =\n          b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 's':\n        this.m_particleFlags = b2ParticleFlag.b2_springParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 't':\n        this.m_particleFlags = b2ParticleFlag.b2_tensileParticle;\n        break;\n      case 'v':\n        this.m_particleFlags = b2ParticleFlag.b2_viscousParticle;\n        break;\n      case 'w':\n        this.m_particleFlags = b2ParticleFlag.b2_wallParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 'b':\n        this.m_particleFlags = b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_wallParticle;\n        break;\n      case 'h':\n        this.m_particleFlags = b2ParticleFlag.b2_barrierParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_rigidParticleGroup;\n        break;\n      case 'n':\n        this.m_particleFlags =\n          b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_elasticParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 'm':\n        this.m_particleFlags = b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_springParticle;\n        this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n        break;\n      case 'f':\n        this.m_particleFlags = b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_repulsiveParticle;\n        break;\n      case 'c':\n        this.m_particleFlags = b2ParticleFlag.b2_colorMixingParticle;\n        break;\n      case 'z':\n        this.m_particleFlags = b2ParticleFlag.b2_zombieParticle;\n        break;\n      default:\n        break;\n    }\n    Test.SetParticleParameterValue(this.DetermineParticleParameter());\n  }\n\n  public MouseMove(p: b2Vec2) {\n    super.MouseMove(p);\n    if (this.m_drawing) {\n      const shape = new b2CircleShape();\n      shape.m_p.Copy(p);\n      shape.m_radius = 0.2;\n      ///  b2Transform xf;\n      ///  xf.SetIdentity();\n      const xf = b2Transform.IDENTITY;\n\n      this.m_particleSystem.DestroyParticlesInShape(shape, xf);\n\n      const joinGroup = this.m_lastGroup && this.m_groupFlags === this.m_lastGroup.GetGroupFlags();\n      if (!joinGroup) {\n        this.m_colorIndex = (this.m_colorIndex + 1) % Test.k_ParticleColorsCount;\n      }\n      const pd = new b2ParticleGroupDef();\n      pd.shape = shape;\n      pd.flags = this.m_particleFlags;\n      if (\n        this.m_particleFlags &\n          (b2ParticleFlag.b2_wallParticle |\n            b2ParticleFlag.b2_springParticle |\n            b2ParticleFlag.b2_elasticParticle) ||\n        this.m_particleFlags ===\n          (b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_barrierParticle)\n      ) {\n        pd.flags |= b2ParticleFlag.b2_reactiveParticle;\n      }\n      pd.groupFlags = this.m_groupFlags;\n      pd.color.Copy(Test.k_ParticleColors[this.m_colorIndex]);\n      pd.group = this.m_lastGroup;\n      this.m_lastGroup = this.m_particleSystem.CreateParticleGroup(pd);\n      this.m_mouseTracing = false;\n    }\n  }\n\n  public MouseUp(p: b2Vec2) {\n    super.MouseUp(p);\n    this.m_lastGroup = null;\n  }\n\n  public ParticleGroupDestroyed(group: b2ParticleGroup) {\n    super.ParticleGroupDestroyed(group);\n    if (group === this.m_lastGroup) {\n      this.m_lastGroup = null;\n    }\n  }\n\n  public SplitParticleGroups() {\n    for (let group = this.m_particleSystem.GetParticleGroupList(); group; group = group.GetNext()) {\n      if (\n        group !== this.m_lastGroup &&\n        group.GetGroupFlags() & b2ParticleGroupFlag.b2_rigidParticleGroup &&\n        group.GetAllParticleFlags() & b2ParticleFlag.b2_zombieParticle\n      ) {\n        // Split a rigid particle group which may be disconnected\n        // by destroying particles.\n        this.m_particleSystem.SplitParticleGroup(group);\n      }\n    }\n  }\n\n  public Step(settings: Settings) {\n    const parameterValue = Test.GetParticleParameterValue();\n    this.m_drawing =\n      (parameterValue & DrawingParticles.Parameters.e_parameterMove) !==\n      DrawingParticles.Parameters.e_parameterMove;\n    if (this.m_drawing) {\n      switch (parameterValue) {\n        case b2ParticleFlag.b2_elasticParticle:\n        case b2ParticleFlag.b2_springParticle:\n        case b2ParticleFlag.b2_wallParticle:\n          this.m_particleFlags = parameterValue;\n          this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n          break;\n        case DrawingParticles.Parameters.e_parameterRigid:\n          // b2_waterParticle is the default particle type in\n          // LiquidFun.\n          this.m_particleFlags = b2ParticleFlag.b2_waterParticle;\n          this.m_groupFlags =\n            b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup;\n          break;\n        case DrawingParticles.Parameters.e_parameterRigidBarrier:\n          this.m_particleFlags = b2ParticleFlag.b2_barrierParticle;\n          this.m_groupFlags = b2ParticleGroupFlag.b2_rigidParticleGroup;\n          break;\n        case DrawingParticles.Parameters.e_parameterElasticBarrier:\n          this.m_particleFlags =\n            b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_elasticParticle;\n          this.m_groupFlags = 0;\n          break;\n        case DrawingParticles.Parameters.e_parameterSpringBarrier:\n          this.m_particleFlags =\n            b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_springParticle;\n          this.m_groupFlags = 0;\n          break;\n        case DrawingParticles.Parameters.e_parameterRepulsive:\n          this.m_particleFlags =\n            b2ParticleFlag.b2_repulsiveParticle | b2ParticleFlag.b2_wallParticle;\n          this.m_groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n          break;\n        default:\n          this.m_particleFlags = parameterValue;\n          this.m_groupFlags = 0;\n          break;\n      }\n    }\n\n    if (this.m_particleSystem.GetAllParticleFlags() & b2ParticleFlag.b2_zombieParticle) {\n      this.SplitParticleGroups();\n    }\n\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (L) liquid, (E) elastic, (S) spring');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, '(R) rigid, (W) wall, (V) viscous, (T) tensile');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, '(F) repulsive wall, (B) wall barrier');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      '(H) rigid barrier, (N) elastic barrier, (M) spring barrier',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, '(C) color mixing, (Z) erase, (X) move');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new DrawingParticles();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2MassData,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class Soup extends Test {\n  public m_ground: b2Body;\n\n  constructor() {\n    super();\n\n    // Disable the selection of wall and barrier particles for this test.\n    this.InitializeParticleParameters(\n      b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_barrierParticle,\n    );\n\n    {\n      const bd = new b2BodyDef();\n      this.m_ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -1),\n          new b2Vec2(4, -1),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        this.m_ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -0.1),\n          new b2Vec2(-2, -0.1),\n          new b2Vec2(-2, 2),\n          new b2Vec2(-4, 3),\n        ];\n        shape.Set(vertices, 4);\n        this.m_ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(2, -0.1),\n          new b2Vec2(4, -0.1),\n          new b2Vec2(4, 3),\n          new b2Vec2(2, 2),\n        ];\n        shape.Set(vertices, 4);\n        this.m_ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.035 * 2); // HACK: increase particle radius\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2, 1, new b2Vec2(0, 1), 0);\n      const pd = new b2ParticleGroupDef();\n      pd.shape = shape;\n      pd.flags = Test.GetParticleParameterValue();\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 0.5);\n      shape.m_radius = 0.1;\n      body.CreateFixture(shape, 0.1);\n      this.m_particleSystem.DestroyParticlesInShape(shape, body.GetTransform());\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.1, 0.1, new b2Vec2(-1, 0.5), 0);\n      body.CreateFixture(shape, 0.1);\n      this.m_particleSystem.DestroyParticlesInShape(shape, body.GetTransform());\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.1, 0.1, new b2Vec2(1, 0.5), 0.5);\n      body.CreateFixture(shape, 0.1);\n      this.m_particleSystem.DestroyParticlesInShape(shape, body.GetTransform());\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(0, 2), new b2Vec2(0.1, 2.1));\n      body.CreateFixture(shape, 1);\n      ///  b2MassData massData = {0.1f, 0.5f * (shape.m_vertex1 + shape.m_vertex2), 0.0f};\n      const massData = new b2MassData();\n      massData.mass = 0.1;\n      massData.center.x = 0.5 * shape.m_vertex1.x + shape.m_vertex2.x;\n      massData.center.y = 0.5 * shape.m_vertex1.y + shape.m_vertex2.y;\n      massData.I = 0.0;\n      body.SetMassData(massData);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(0.3, 2.0), new b2Vec2(0.4, 2.1));\n      body.CreateFixture(shape, 1);\n      ///  b2MassData massData = {0.1f, 0.5f * (shape.m_vertex1 + shape.m_vertex2), 0.0f};\n      const massData = new b2MassData();\n      massData.mass = 0.1;\n      massData.center.x = 0.5 * shape.m_vertex1.x + shape.m_vertex2.x;\n      massData.center.y = 0.5 * shape.m_vertex1.y + shape.m_vertex2.y;\n      massData.I = 0.0;\n      body.SetMassData(massData);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-0.3, 2.1), new b2Vec2(-0.2, 2.0));\n      body.CreateFixture(shape, 1);\n      ///  b2MassData massData = {0.1f, 0.5f * (shape.m_vertex1 + shape.m_vertex2), 0.0f};\n      const massData = new b2MassData();\n      massData.mass = 0.1;\n      massData.center.x = 0.5 * shape.m_vertex1.x + shape.m_vertex2.x;\n      massData.center.y = 0.5 * shape.m_vertex1.y + shape.m_vertex2.y;\n      massData.I = 0.0;\n      body.SetMassData(massData);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new Soup();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class ParticlesSurfaceTension extends Test {\n  constructor() {\n    super(); // base class constructor\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -1),\n          new b2Vec2(4, -1),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -0.1),\n          new b2Vec2(-2, -0.1),\n          new b2Vec2(-2, 2),\n          new b2Vec2(-4, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(2, -0.1),\n          new b2Vec2(4, -0.1),\n          new b2Vec2(4, 2),\n          new b2Vec2(2, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.035 * 2); // HACK: increase particle radius\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 2);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_colorMixingParticle;\n      pd.shape = shape;\n      pd.color.Set(1, 0, 0, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(-1, 2);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_colorMixingParticle;\n      pd.shape = shape;\n      pd.color.Set(0, 1, 0, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      const vertices = [new b2Vec2(0, 3), new b2Vec2(2, 3), new b2Vec2(2, 3.5), new b2Vec2(0, 3.5)];\n      shape.Set(vertices, 4);\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_colorMixingParticle;\n      pd.shape = shape;\n      pd.color.Set(0, 0, 1, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 8);\n      shape.m_radius = 0.5;\n      body.CreateFixture(shape, 0.5);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new ParticlesSurfaceTension();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2ParticleGroupFlag,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class ElasticParticles extends Test {\n  constructor() {\n    super();\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -1),\n          new b2Vec2(4, -1),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -0.1),\n          new b2Vec2(-2, -0.1),\n          new b2Vec2(-2, 2),\n          new b2Vec2(-4, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(2, -0.1),\n          new b2Vec2(4, -0.1),\n          new b2Vec2(4, 2),\n          new b2Vec2(2, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.035 * 2); // HACK: increase particle radius\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 3);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_springParticle;\n      pd.groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.shape = shape;\n      pd.color.Set(1, 0, 0, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(-1, 3);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_elasticParticle;\n      pd.groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.shape = shape;\n      pd.color.Set(0, 1, 0, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(1, 0.5);\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_elasticParticle;\n      pd.groupFlags = b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.position.Set(1, 4);\n      pd.angle = -0.5;\n      pd.angularVelocity = 2.0;\n      pd.shape = shape;\n      pd.color.Set(0, 0, 1, 1);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 8);\n      shape.m_radius = 0.5;\n      body.CreateFixture(shape, 0.5);\n    }\n  }\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n  public static Create() {\n    return new ElasticParticles();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2ParticleGroupDef,\n  b2ParticleGroupFlag,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class RigidParticles extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -1),\n          new b2Vec2(4, -1),\n          new b2Vec2(4, 0),\n          new b2Vec2(-4, 0),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-4, -0.1),\n          new b2Vec2(-2, -0.1),\n          new b2Vec2(-2, 2),\n          new b2Vec2(-4, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(2, -0.1),\n          new b2Vec2(4, -0.1),\n          new b2Vec2(4, 2),\n          new b2Vec2(2, 2),\n        ];\n        shape.Set(vertices, 4);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.035 * 2); // HACK: increase particle radius\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 3);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.groupFlags =\n        b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.shape = shape;\n      pd.color.SetByteRGBA(255, 0, 0, 255);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(-1, 3);\n      shape.m_radius = 0.5;\n      const pd = new b2ParticleGroupDef();\n      pd.groupFlags =\n        b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.shape = shape;\n      pd.color.SetByteRGBA(0, 255, 0, 255);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      //const vertices = [\n      //  new b2Vec2(0, 3),\n      //  new b2Vec2(2, 3),\n      //  new b2Vec2(2, 3.5),\n      //  new b2Vec2(0, 3.5)\n      //];\n      //shape.Set(vertices, 4);\n      shape.SetAsBox(1, 0.5);\n      const pd = new b2ParticleGroupDef();\n      pd.groupFlags =\n        b2ParticleGroupFlag.b2_rigidParticleGroup | b2ParticleGroupFlag.b2_solidParticleGroup;\n      pd.position.Set(1, 4);\n      pd.angle = -0.5;\n      pd.angularVelocity = 2.0;\n      pd.shape = shape;\n      pd.color.SetByteRGBA(0, 0, 255, 255);\n      this.m_particleSystem.CreateParticleGroup(pd);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 8);\n      shape.m_radius = 0.5;\n      body.CreateFixture(shape, 0.5);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new RigidParticles();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2Color,\n  b2MassData,\n  b2ParticleSystem,\n  b2ParticleSystemDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { RadialEmitter, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class MultipleParticleSystems extends Test {\n  public m_particleSystem2: b2ParticleSystem;\n  public m_emitters: RadialEmitter[];\n\n  /**\n   * Maximum number of particles per system.\n   */\n  public static readonly k_maxParticleCount = 500;\n  /**\n   * Size of the box which is pushed around by particles.\n   */\n  public static readonly k_dynamicBoxSize = new b2Vec2(0.5, 0.5);\n  /**\n   * Mass of the box.\n   */\n  public static readonly k_boxMass = 1.0;\n  /**\n   * Emit rate of the emitters in particles per second.\n   */\n  public static readonly k_emitRate = 100.0;\n  /**\n   * Location of the left emitter (the position of the right one\n   * is mirrored along the y-axis).\n   */\n  public static readonly k_emitterPosition = new b2Vec2(-5.0, 4.0);\n  /**\n   * Starting velocity of particles from the left emitter (the\n   * velocity of particles from the right emitter are mirrored\n   * along the y-axis).\n   */\n  public static readonly k_emitterVelocity = new b2Vec2(7.0, -4.0);\n  /**\n   * Size of particle emitters.\n   */\n  public static readonly k_emitterSize = new b2Vec2(1.0, 1.0);\n  /**\n   * Color of the left emitter's particles.\n   */\n  public static readonly k_leftEmitterColor = new b2Color().SetByteRGBA(0x22, 0x33, 0xff, 0xff);\n  /**\n   * Color of the right emitter's particles.\n   */\n  public static readonly k_rightEmitterColor = new b2Color().SetByteRGBA(0xff, 0x22, 0x11, 0xff);\n\n  constructor() {\n    super();\n\n    this.m_emitters = [new RadialEmitter(), new RadialEmitter()];\n\n    // Configure the default particle system's parameters.\n    this.m_particleSystem.SetRadius(0.05);\n    this.m_particleSystem.SetMaxParticleCount(MultipleParticleSystems.k_maxParticleCount);\n    this.m_particleSystem.SetDestructionByAge(true);\n\n    // Create a secondary particle system.\n    const particleSystemDef = new b2ParticleSystemDef();\n    particleSystemDef.radius = this.m_particleSystem.GetRadius();\n    particleSystemDef.destroyByAge = true;\n    this.m_particleSystem2 = this.m_world.CreateParticleSystem(particleSystemDef);\n    this.m_particleSystem2.SetMaxParticleCount(MultipleParticleSystems.k_maxParticleCount);\n\n    // Don't restart the test when changing particle types.\n    Test.SetRestartOnParticleParameterChange(false);\n\n    // Create the ground.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(5.0, 0.1);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Create a dynamic body to push around.\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body = this.m_world.CreateBody(bd);\n      const shape = new b2PolygonShape();\n      const center = new b2Vec2(0.0, 1.2);\n      shape.SetAsBox(\n        MultipleParticleSystems.k_dynamicBoxSize.x,\n        MultipleParticleSystems.k_dynamicBoxSize.y,\n        center,\n        0.0,\n      );\n      body.CreateFixture(shape, 0.0);\n      ///  b2MassData massData = { MultipleParticleSystems.k_boxMass, center, 0.0 };\n      const massData = new b2MassData();\n      massData.mass = MultipleParticleSystems.k_boxMass;\n      massData.center.Copy(center);\n      massData.I = 0.0;\n      body.SetMassData(massData);\n    }\n\n    // Initialize the emitters.\n    for (let i = 0; i < this.m_emitters.length; ++i) {\n      const mirrorAlongY = i & 1 ? -1.0 : 1.0;\n      const emitter = this.m_emitters[i];\n      emitter.SetPosition(\n        new b2Vec2(\n          MultipleParticleSystems.k_emitterPosition.x * mirrorAlongY,\n          MultipleParticleSystems.k_emitterPosition.y,\n        ),\n      );\n      emitter.SetSize(MultipleParticleSystems.k_emitterSize);\n      emitter.SetVelocity(\n        new b2Vec2(\n          MultipleParticleSystems.k_emitterVelocity.x * mirrorAlongY,\n          MultipleParticleSystems.k_emitterVelocity.y,\n        ),\n      );\n      emitter.SetEmitRate(MultipleParticleSystems.k_emitRate);\n      emitter.SetColor(\n        i & 1\n          ? MultipleParticleSystems.k_rightEmitterColor\n          : MultipleParticleSystems.k_leftEmitterColor,\n      );\n      emitter.SetParticleSystem(i & 1 ? this.m_particleSystem2 : this.m_particleSystem);\n    }\n  }\n\n  public Step(settings: Settings) {\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    super.Step(settings);\n\n    for (let i = 0; i < this.m_emitters.length; ++i) {\n      this.m_emitters[i].Step(dt);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new MultipleParticleSystems();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2013 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2ChainShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class Impulse extends Test {\n  public static readonly kBoxLeft = -2;\n  public static readonly kBoxRight = 2;\n  public static readonly kBoxBottom = 0;\n  public static readonly kBoxTop = 4;\n\n  public m_useLinearImpulse = false;\n\n  constructor() {\n    super();\n\n    // Create the containing box.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const box = [\n        new b2Vec2(Impulse.kBoxLeft, Impulse.kBoxBottom),\n        new b2Vec2(Impulse.kBoxRight, Impulse.kBoxBottom),\n        new b2Vec2(Impulse.kBoxRight, Impulse.kBoxTop),\n        new b2Vec2(Impulse.kBoxLeft, Impulse.kBoxTop),\n      ];\n      const shape = new b2ChainShape();\n      shape.CreateLoop(box, box.length);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    this.m_particleSystem.SetRadius(0.025 * 2); // HACK: increase particle radius\n    this.m_particleSystem.SetDamping(0.2);\n\n    // Create the particles.\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.8, 1.0, new b2Vec2(0.0, 1.01), 0);\n      const pd = new b2ParticleGroupDef();\n      pd.flags = Test.GetParticleParameterValue();\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n  }\n\n  public MouseUp(p: b2Vec2) {\n    super.MouseUp(p);\n\n    // Apply an impulse to the particles.\n    const isInsideBox =\n      Impulse.kBoxLeft <= p.x &&\n      p.x <= Impulse.kBoxRight &&\n      Impulse.kBoxBottom <= p.y &&\n      p.y <= Impulse.kBoxTop;\n    if (isInsideBox) {\n      const kBoxCenter = new b2Vec2(\n        0.5 * (Impulse.kBoxLeft + Impulse.kBoxRight),\n        0.5 * (Impulse.kBoxBottom + Impulse.kBoxTop),\n      );\n      const direction = b2Vec2.SubVV(p, kBoxCenter, new b2Vec2());\n      direction.Normalize();\n      this.ApplyImpulseOrForce(direction);\n    }\n  }\n\n  public Keyboard(key: string) {\n    super.Keyboard(key);\n\n    switch (key) {\n      case 'l':\n        this.m_useLinearImpulse = true;\n        break;\n      case 'f':\n        this.m_useLinearImpulse = false;\n        break;\n    }\n  }\n\n  public ApplyImpulseOrForce(direction: b2Vec2) {\n    const particleSystem = this.m_world.GetParticleSystemList();\n    if (!particleSystem) {\n      throw new Error();\n    }\n    const particleGroup = particleSystem.GetParticleGroupList();\n    if (!particleGroup) {\n      throw new Error();\n    }\n    const numParticles = particleGroup.GetParticleCount();\n\n    if (this.m_useLinearImpulse) {\n      const kImpulseMagnitude = 0.005;\n      ///  const b2Vec2 impulse = kImpulseMagnitude * direction * (float32)numParticles;\n      const impulse = b2Vec2.MulSV(kImpulseMagnitude * numParticles, direction, new b2Vec2());\n      particleGroup.ApplyLinearImpulse(impulse);\n    } else {\n      const kForceMagnitude = 1.0;\n      ///  const b2Vec2 force = kForceMagnitude * direction * (float32)numParticles;\n      const force = b2Vec2.MulSV(kForceMagnitude * numParticles, direction, new b2Vec2());\n      particleGroup.ApplyForce(force);\n    }\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new Impulse();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport { Soup } from './Soup.js';\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Joint,\n  b2PrismaticJointDef,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings } from '@highduck/box2d-testbed';\n\nexport class SoupStirrer extends Soup {\n  public m_stirrer: b2Body;\n  public m_joint: b2Joint | null = null;\n  public m_oscillationOffset = 0.0;\n\n  constructor() {\n    super();\n\n    this.m_particleSystem.SetDamping(1.0);\n\n    // Shape of the stirrer.\n    const shape = new b2CircleShape();\n    shape.m_p.Set(0, 0.7);\n    shape.m_radius = 0.4;\n\n    // Create the stirrer.\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    this.m_stirrer = this.m_world.CreateBody(bd);\n    this.m_stirrer.CreateFixture(shape, 1.0);\n\n    // Destroy all particles under the stirrer.\n    const xf = new b2Transform();\n    xf.SetIdentity();\n    this.m_particleSystem.DestroyParticlesInShape(shape, xf);\n\n    // By default attach the body to a joint to restrict movement.\n    this.CreateJoint();\n  }\n\n  public CreateJoint() {\n    // DEBUG: b2Assert(!this.m_joint);\n    // Create a prismatic joint and connect to the ground, and have it\n    // slide along the x axis.\n    // Disconnect the body from this joint to have more fun.\n    const prismaticJointDef = new b2PrismaticJointDef();\n    prismaticJointDef.bodyA = this.m_groundBody;\n    prismaticJointDef.bodyB = this.m_stirrer;\n    prismaticJointDef.collideConnected = true;\n    prismaticJointDef.localAxisA.Set(1, 0);\n    prismaticJointDef.localAnchorA.Copy(this.m_stirrer.GetPosition());\n    this.m_joint = this.m_world.CreateJoint(prismaticJointDef);\n  }\n\n  /**\n   * Enable the joint if it's disabled, disable it if it's\n   * enabled.\n   */\n  public ToggleJoint() {\n    if (this.m_joint) {\n      this.m_world.DestroyJoint(this.m_joint);\n      this.m_joint = null;\n    } else {\n      this.CreateJoint();\n    }\n  }\n\n  /**\n   * Press \"t\" to enable / disable the joint restricting the\n   * stirrer's movement.\n   */\n  public Keyboard(key: string) {\n    switch (key) {\n      case 't':\n        this.ToggleJoint();\n        break;\n      default:\n        super.Keyboard(key);\n        break;\n    }\n  }\n\n  /**\n   * Click the soup to toggle between enabling / disabling the\n   * joint.\n   */\n  public MouseUp(p: b2Vec2) {\n    super.MouseUp(p);\n    if (this.InSoup(p)) {\n      this.ToggleJoint();\n    }\n  }\n\n  /**\n   * Determine whether a point is in the soup.\n   */\n  public InSoup(pos: b2Vec2) {\n    // The soup dimensions are from the container initialization in the\n    // Soup test.\n    return pos.y > -1.0 && pos.y < 2.0 && pos.x > -3.0 && pos.x < 3.0;\n  }\n\n  /**\n   * Apply a force to the stirrer.\n   */\n  public Step(settings: Settings) {\n    // Magnitude of the force applied to the body.\n    const k_forceMagnitude = 10.0;\n    // How often the force vector rotates.\n    const k_forceOscillationPerSecond = 0.2;\n    const k_forceOscillationPeriod = 1.0 / k_forceOscillationPerSecond;\n    // Maximum speed of the body.\n    const k_maxSpeed = 2.0;\n\n    this.m_oscillationOffset += 1.0 / settings.hz;\n    if (this.m_oscillationOffset > k_forceOscillationPeriod) {\n      this.m_oscillationOffset -= k_forceOscillationPeriod;\n    }\n\n    // Calculate the force vector.\n    const forceAngle = this.m_oscillationOffset * k_forceOscillationPerSecond * 2.0 * b2_pi;\n    const forceVector = new b2Vec2(Math.sin(forceAngle), Math.cos(forceAngle)).SelfMul(\n      k_forceMagnitude,\n    );\n\n    // Only apply force to the body when it's within the soup.\n    if (\n      this.InSoup(this.m_stirrer.GetPosition()) &&\n      this.m_stirrer.GetLinearVelocity().Length() < k_maxSpeed\n    ) {\n      this.m_stirrer.ApplyForceToCenter(forceVector, true);\n    }\n    super.Step(settings);\n  }\n\n  public static Create() {\n    return new SoupStirrer();\n  }\n}\n\n// #endif\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","/*\n * Copyright (c) 2014 Google, Inc\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2Clamp,\n  b2Color,\n  b2Contact,\n  b2ContactImpulse,\n  b2DestructionListener,\n  b2Joint,\n  b2Manifold,\n  b2Max,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2ParticleSystem,\n  b2PolygonShape,\n  b2Transform,\n  b2Vec2,\n  b2World,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_debugDraw,\n  RadialEmitter,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\n/**\n * Tracks instances of RadialEmitter and destroys them after a\n * specified period of time.\n */\nexport class EmitterTracker {\n  public m_emitterLifetime: Array<{ emitter: RadialEmitter; lifetime: number }> = [];\n\n  /**\n   * Delete all emitters.\n   */\n  public __dtor__() {\n    ///  for (std.map<RadialEmitter*, float32>.const_iterator it = m_emitterLifetime.begin(); it !== m_emitterLifetime.end(); ++it)\n    for (let it = 0; it < this.m_emitterLifetime.length; ++it) {\n      ///  delete it.first;\n      this.m_emitterLifetime[it].emitter.__dtor__();\n    }\n  }\n\n  /**\n   * Add an emitter to the tracker.\n   * This assumes emitter was allocated using \"new\" and ownership\n   * of the object is handed to this class.\n   */\n  public Add(emitter: RadialEmitter, lifetime: number): void {\n    ///  m_emitterLifetime[emitter] = lifetime;\n    this.m_emitterLifetime.push({ emitter, lifetime });\n  }\n\n  /**\n   * Update all emitters destroying those who are too old.\n   */\n  public Step(dt: number): void {\n    ///  std.vector<RadialEmitter*> emittersToDestroy;\n    const emittersToDestroy: RadialEmitter[] = [];\n    ///  for (std.map<RadialEmitter*, float32>.const_iterator it = m_emitterLifetime.begin(); it !== m_emitterLifetime.end(); ++it)\n    for (let it = 0; it < this.m_emitterLifetime.length; ++it) {\n      ///  RadialEmitter * const emitter = it.first;\n      const emitter = this.m_emitterLifetime[it].emitter;\n      ///  const float32 lifetime = it.second - dt;\n      const lifetime = this.m_emitterLifetime[it].lifetime - dt;\n      if (lifetime <= 0.0) {\n        emittersToDestroy.push(emitter);\n      }\n      ///  m_emitterLifetime[emitter] = lifetime;\n      this.m_emitterLifetime[it].lifetime = lifetime;\n\n      emitter.Step(dt);\n    }\n    ///  for (std.vector<RadialEmitter*>.const_iterator it = emittersToDestroy.begin(); it !== emittersToDestroy.end(); ++it)\n    for (let it = 0; it < emittersToDestroy.length; ++it) {\n      ///  RadialEmitter *emitter = *it;\n      const emitter = emittersToDestroy[it];\n      /// delete emitter;\n      emitter.__dtor__();\n      ///  m_emitterLifetime.erase(m_emitterLifetime.find(emitter));\n      this.m_emitterLifetime = this.m_emitterLifetime.filter((value) => {\n        return value.emitter !== emitter;\n      });\n    }\n  }\n}\n\n/**\n * Keep track of particle groups in a set, removing them when\n * they're destroyed.\n */\nexport class ParticleGroupTracker extends b2DestructionListener {\n  public m_particleGroups: b2ParticleGroup[] = [];\n\n  /**\n   * Called when any particle group is about to be destroyed.\n   */\n  public SayGoodbyeParticleGroup(group: b2ParticleGroup): void {\n    this.RemoveParticleGroup(group);\n  }\n\n  /**\n   * Add a particle group to the tracker.\n   */\n  public AddParticleGroup(group: b2ParticleGroup): void {\n    this.m_particleGroups.push(group);\n  }\n\n  /**\n   * Remove a particle group from the tracker.\n   */\n  public RemoveParticleGroup(group: b2ParticleGroup): void {\n    this.m_particleGroups.splice(this.m_particleGroups.indexOf(group), 1);\n  }\n\n  public GetParticleGroups(): b2ParticleGroup[] {\n    return this.m_particleGroups;\n  }\n}\n\nexport class FrackerSettings {\n  /**\n   * Width and height of the world in tiles.\n   */\n  public static readonly k_worldWidthTiles = 24;\n  public static readonly k_worldHeightTiles = 16;\n  /**\n   * Total number of tiles.\n   */\n  public static readonly k_worldTiles =\n    FrackerSettings.k_worldWidthTiles * FrackerSettings.k_worldHeightTiles;\n  /**\n   * Center of the world in world coordinates.\n   */\n  public static readonly k_worldCenterX = 0.0;\n  public static readonly k_worldCenterY = 2.0;\n  /**\n   * Size of each tile in world units.\n   */\n  public static readonly k_tileWidth = 0.2;\n  public static readonly k_tileHeight = 0.2;\n  /**\n   * Half width and height of tiles in world units.\n   */\n  public static readonly k_tileHalfWidth = FrackerSettings.k_tileWidth * 0.5;\n  public static readonly k_tileHalfHeight = FrackerSettings.k_tileHeight * 0.5;\n  /**\n   * Half width and height of the world in world coordinates.\n   */\n  public static readonly k_worldHalfWidth =\n    FrackerSettings.k_worldWidthTiles * FrackerSettings.k_tileWidth * 0.5;\n  public static readonly k_worldHalfHeight =\n    FrackerSettings.k_worldHeightTiles * FrackerSettings.k_tileHeight * 0.5;\n\n  /**\n   * Colors of tiles.\n   */\n  public static readonly k_playerColor = new b2Color(1.0, 1.0, 1.0);\n  public static readonly k_playerFrackColor = new b2Color(1.0, 0.5, 0.5);\n  public static readonly k_wellColor = new b2Color(0.5, 0.5, 0.5);\n  public static readonly k_oilColor = new b2Color(1.0, 0.0, 0.0);\n  public static readonly k_waterColor = new b2Color(0.0, 0.2, 1.0);\n  public static readonly k_frackingFluidColor = new b2Color(0.8, 0.4, 0.0);\n\n  /**\n   * Default density of each body.\n   */\n  public static readonly k_density = 0.1;\n\n  /**\n   * Radius of oil / water / fracking fluid particles.\n   */\n  public static readonly k_particleRadius =\n    (FrackerSettings.k_tileWidth + FrackerSettings.k_tileHeight) * 0.5 * 0.2;\n\n  /**\n   * Probability (0..100%) of generating each tile (must sum to\n   * 1.0).\n   */\n  public static readonly k_dirtProbability = 80;\n  public static readonly k_emptyProbability = 10;\n  public static readonly k_oilProbability = 7;\n  public static readonly k_waterProbability = 3;\n\n  /**\n   * Lifetime of a fracking fluid emitter in seconds.\n   */\n  public static readonly k_frackingFluidEmitterLifetime = 5.0;\n\n  /**\n   * Speed particles are sucked up the well.\n   */\n  public static readonly k_wellSuckSpeedInside = FrackerSettings.k_tileHeight * 5.0;\n  /**\n   * Speed particle are sucket towards the well bottom.\n   */\n  public static readonly k_wellSuckSpeedOutside = FrackerSettings.k_tileWidth * 1.0;\n\n  /**\n   * Time mouse button must be held before emitting fracking\n   * fluid.\n   */\n  public static readonly k_frackingFluidChargeTime = 1.0;\n\n  /**\n   * Scores.\n   */\n  public static readonly k_scorePerOilParticle = 1;\n  public static readonly k_scorePerWaterParticle = -1;\n  public static readonly k_scorePerFrackingParticle = 0;\n  public static readonly k_scorePerFrackingDeployment = -10;\n}\n\n/**\n * Oil Fracking simulator.\n *\n * Dig down to move the oil (red) to the well (gray). Try not to\n * contaminate the ground water (blue). To deploy fracking fluid\n * press 'space'.  Fracking fluid can be used to push other\n * fluids to the well head and ultimately score points.\n */\nexport class Fracker extends Test {\n  public m_player!: b2Body;\n  public m_wellX = FrackerSettings.k_worldWidthTiles - FrackerSettings.k_worldWidthTiles / 4;\n  public m_wellTop = FrackerSettings.k_worldHeightTiles - 1;\n  public m_wellBottom = FrackerSettings.k_worldHeightTiles / 8;\n  public m_tracker: EmitterTracker = new EmitterTracker();\n  public m_allowInput = false;\n  public m_frackingFluidChargeTime = -1.0;\n  public m_material: Fracker_Material[] = [];\n  public m_bodies: Array<b2Body | null> = [];\n  /**\n   * Set of particle groups the well has influence over.\n   */\n  public m_listener: Fracker_DestructionListener = new Fracker_DestructionListener(this.m_world);\n\n  constructor() {\n    super();\n\n    this.m_particleSystem.SetRadius(FrackerSettings.k_particleRadius);\n    this.InitializeLayout();\n    // Create the boundaries of the play area.\n    this.CreateGround();\n    // Create the well.\n    this.CreateWell();\n    // Create the geography / features (tiles of the world).\n    this.CreateGeo();\n    // Create the player.\n    this.CreatePlayer();\n  }\n\n  public dispose() {\n    this.m_listener.dispose();\n  }\n\n  /**\n   * Initialize the data structures used to track the material in\n   * each tile and the bodies associated with each tile.\n   */\n  public InitializeLayout(): void {\n    for (let i = 0; i < FrackerSettings.k_worldTiles; ++i) {\n      this.m_material[i] = Fracker_Material.EMPTY;\n      this.m_bodies[i] = null;\n    }\n  }\n\n  /**\n   * Get the material of the tile at the specified tile position.\n   */\n  public GetMaterial(x: number, y: number): Fracker_Material {\n    ///  return *const_cast<Fracker*>(this).GetMaterialStorage(x, y);\n    return this.m_material[Fracker.TileToArrayOffset(x, y)];\n  }\n\n  /**\n   * Set the material of the tile at the specified tile position.\n   */\n  public SetMaterial(x: number, y: number, material: Fracker_Material): void {\n    ///  *GetMaterialStorage(x, y) = material;\n    this.m_material[Fracker.TileToArrayOffset(x, y)] = material;\n  }\n\n  /**\n   * Get the body associated with the specified tile position.\n   */\n  public GetBody(x: number, y: number): b2Body | null {\n    ///  return *const_cast<Fracker*>(this).GetBodyStorage(x, y);\n    return this.m_bodies[Fracker.TileToArrayOffset(x, y)];\n  }\n\n  /**\n   * Set the body associated with the specified tile position.\n   */\n  public SetBody(x: number, y: number, body: b2Body | null): void {\n    ///  b2Body** const currentBody = GetBodyStorage(x, y);\n    const currentBody = this.m_bodies[Fracker.TileToArrayOffset(x, y)];\n    if (currentBody) {\n      this.m_world.DestroyBody(currentBody);\n    }\n    this.m_bodies[Fracker.TileToArrayOffset(x, y)] = body;\n  }\n\n  /**\n   * Create the player.\n   */\n  public CreatePlayer(): void {\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_kinematicBody;\n    this.m_player = this.m_world.CreateBody(bd);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(\n      FrackerSettings.k_tileHalfWidth,\n      FrackerSettings.k_tileHalfHeight,\n      new b2Vec2(FrackerSettings.k_tileHalfWidth, FrackerSettings.k_tileHalfHeight),\n      0,\n    );\n    this.m_player.CreateFixture(shape, FrackerSettings.k_density);\n    this.m_player.SetTransformVec(\n      Fracker.TileToWorld(\n        FrackerSettings.k_worldWidthTiles / 2,\n        FrackerSettings.k_worldHeightTiles / 2,\n      ),\n      0,\n    );\n  }\n\n  /**\n   * Create the geography / features of the world.\n   */\n  public CreateGeo(): void {\n    // DEBUG: b2Assert(FrackerSettings.k_dirtProbability +\n    // DEBUG:   FrackerSettings.k_emptyProbability +\n    // DEBUG:   FrackerSettings.k_oilProbability +\n    // DEBUG:   FrackerSettings.k_waterProbability === 100);\n    for (let x = 0; x < FrackerSettings.k_worldWidthTiles; x++) {\n      for (let y = 0; y < FrackerSettings.k_worldHeightTiles; y++) {\n        if (this.GetMaterial(x, y) !== Fracker_Material.EMPTY) {\n          continue;\n        }\n        // Choose a tile at random.\n        const chance = Math.random() * 100.0;\n        // Create dirt if this is the bottom row or chance dictates it.\n        if (chance < FrackerSettings.k_dirtProbability || y === 0) {\n          this.CreateDirtBlock(x, y);\n        } else if (\n          chance <\n          FrackerSettings.k_dirtProbability + FrackerSettings.k_emptyProbability\n        ) {\n          this.SetMaterial(x, y, Fracker_Material.EMPTY);\n        } else if (\n          chance <\n          FrackerSettings.k_dirtProbability +\n            FrackerSettings.k_emptyProbability +\n            FrackerSettings.k_oilProbability\n        ) {\n          this.CreateReservoirBlock(x, y, Fracker_Material.OIL);\n        } else {\n          this.CreateReservoirBlock(x, y, Fracker_Material.WATER);\n        }\n      }\n    }\n  }\n\n  /**\n   * Create the boundary of the world.\n   */\n  public CreateGround(): void {\n    const bd = new b2BodyDef();\n    const ground = this.m_world.CreateBody(bd);\n    const shape = new b2ChainShape();\n    const bottomLeft = new b2Vec2(),\n      topRight = new b2Vec2();\n    Fracker.GetExtents(bottomLeft, topRight);\n    const vertices = [\n      new b2Vec2(bottomLeft.x, bottomLeft.y),\n      new b2Vec2(topRight.x, bottomLeft.y),\n      new b2Vec2(topRight.x, topRight.y),\n      new b2Vec2(bottomLeft.x, topRight.y),\n    ];\n    shape.CreateLoop(vertices, 4);\n    ground.CreateFixture(shape, 0.0);\n  }\n\n  /**\n   * Create a dirt block at the specified world position.\n   */\n  public CreateDirtBlock(x: number, y: number): void {\n    const position = Fracker.TileToWorld(x, y);\n    const bd = new b2BodyDef();\n    const body = this.m_world.CreateBody(bd);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(\n      FrackerSettings.k_tileHalfWidth,\n      FrackerSettings.k_tileHalfHeight,\n      Fracker.CenteredPosition(position),\n      0,\n    );\n    body.CreateFixture(shape, FrackerSettings.k_density);\n    this.SetBody(x, y, body);\n    this.SetMaterial(x, y, Fracker_Material.DIRT);\n  }\n\n  /**\n   * Create particles in a tile with resources.\n   */\n  public CreateReservoirBlock(x: number, y: number, material: Fracker_Material): void {\n    const position = Fracker.TileToWorld(x, y);\n    const shape = new b2PolygonShape();\n    this.SetMaterial(x, y, material);\n    shape.SetAsBox(\n      FrackerSettings.k_tileHalfWidth,\n      FrackerSettings.k_tileHalfHeight,\n      Fracker.CenteredPosition(position),\n      0,\n    );\n    const pd = new b2ParticleGroupDef();\n    pd.flags =\n      b2ParticleFlag.b2_tensileParticle |\n      b2ParticleFlag.b2_viscousParticle |\n      b2ParticleFlag.b2_destructionListenerParticle;\n    pd.shape = shape;\n    pd.color.Copy(\n      material === Fracker_Material.OIL ? FrackerSettings.k_oilColor : FrackerSettings.k_waterColor,\n    );\n    const group = this.m_particleSystem.CreateParticleGroup(pd);\n    this.m_listener.AddParticleGroup(group);\n\n    // Tag each particle with its type.\n    const particleCount = group.GetParticleCount();\n    ///  void** const userDataBuffer = m_particleSystem.GetUserDataBuffer() + group.GetBufferIndex();;\n    const userDataBuffer = this.m_particleSystem.GetUserDataBuffer();\n    const index = group.GetBufferIndex();\n    for (let i = 0; i < particleCount; ++i) {\n      ///  userDataBuffer[i] = GetMaterialStorage(x, y);\n      userDataBuffer[index + i] = this.m_material[Fracker.TileToArrayOffset(x, y)];\n    }\n    // Keep track of the total available oil.\n    if (material === Fracker_Material.OIL) {\n      this.m_listener.AddOil(particleCount);\n    }\n  }\n\n  /**\n   * Create a well and the region which applies negative pressure\n   * to suck out fluid.\n   */\n  public CreateWell(): void {\n    for (let y = this.m_wellBottom; y <= this.m_wellTop; y++) {\n      this.SetMaterial(this.m_wellX, y, Fracker_Material.WELL);\n    }\n  }\n\n  /**\n   * Create a fracking fluid emitter.\n   */\n  public CreateFrackingFluidEmitter(position: b2Vec2): void {\n    const groupDef = new b2ParticleGroupDef();\n    const group = this.m_particleSystem.CreateParticleGroup(groupDef);\n    this.m_listener.AddParticleGroup(group);\n    const emitter = new RadialEmitter();\n    emitter.SetGroup(group);\n    emitter.SetParticleSystem(this.m_particleSystem);\n    emitter.SetPosition(Fracker.CenteredPosition(position));\n    emitter.SetVelocity(new b2Vec2(0.0, -FrackerSettings.k_tileHalfHeight));\n    emitter.SetSpeed(FrackerSettings.k_tileHalfWidth * 0.1);\n    emitter.SetSize(new b2Vec2(FrackerSettings.k_tileHalfWidth, FrackerSettings.k_tileHalfHeight));\n    emitter.SetEmitRate(20.0);\n    emitter.SetColor(FrackerSettings.k_frackingFluidColor);\n    emitter.SetParticleFlags(b2ParticleFlag.b2_tensileParticle | b2ParticleFlag.b2_viscousParticle);\n    this.m_tracker.Add(emitter, FrackerSettings.k_frackingFluidEmitterLifetime);\n    this.m_listener.AddScore(FrackerSettings.k_scorePerFrackingDeployment);\n  }\n\n  /**\n   * Update the player's position.\n   */\n  public SetPlayerPosition(playerX: number, playerY: number): void {\n    const playerPosition = this.m_player.GetTransform().p;\n    const currentPlayerX: [number] = [0];\n    const currentPlayerY: [number] = [0];\n    Fracker.WorldToTile(playerPosition, currentPlayerX, currentPlayerY);\n\n    playerX = b2Clamp(playerX, 0, FrackerSettings.k_worldWidthTiles - 1);\n    playerY = b2Clamp(playerY, 0, FrackerSettings.k_worldHeightTiles - 1);\n\n    // Only update if the player has moved and isn't attempting to\n    // move through the well.\n    if (\n      this.GetMaterial(playerX, playerY) !== Fracker_Material.WELL &&\n      (currentPlayerX[0] !== playerX || currentPlayerY[0] !== playerY)\n    ) {\n      // Try to deploy any fracking fluid that was charging.\n      this.DeployFrackingFluid();\n      // Move the player.\n      this.m_player.SetTransformVec(Fracker.TileToWorld(playerX, playerY), 0);\n    }\n  }\n\n  /**\n   * Try to deploy fracking fluid at the player's position,\n   * returning true if successful.\n   */\n  public DeployFrackingFluid(): boolean {\n    let deployed = false;\n    const playerPosition = this.m_player.GetTransform().p;\n    if (this.m_frackingFluidChargeTime > FrackerSettings.k_frackingFluidChargeTime) {\n      this.CreateFrackingFluidEmitter(playerPosition);\n      deployed = true;\n    }\n    this.m_frackingFluidChargeTime = -1.0;\n    return deployed;\n  }\n\n  /**\n   * Destroy all particles in the box specified by a set of tile\n   * coordinates.\n   */\n  public DestroyParticlesInTiles(startX: number, startY: number, endX: number, endY: number): void {\n    const shape = new b2PolygonShape();\n    const width = endX - startX + 1;\n    const height = endY - startY + 1;\n    const centerX = startX + width / 2;\n    const centerY = startY + height / 2;\n    shape.SetAsBox(\n      FrackerSettings.k_tileHalfWidth * width,\n      FrackerSettings.k_tileHalfHeight * height,\n    );\n    const killLocation = new b2Transform();\n    killLocation.SetPositionAngle(\n      Fracker.CenteredPosition(Fracker.TileToWorld(centerX, centerY)),\n      0,\n    );\n    this.m_particleSystem.DestroyParticlesInShape(shape, killLocation);\n  }\n\n  public JointDestroyed(joint: b2Joint): void {\n    super.JointDestroyed(joint);\n  }\n\n  public ParticleGroupDestroyed(group: b2ParticleGroup): void {\n    super.ParticleGroupDestroyed(group);\n  }\n\n  public BeginContact(contact: b2Contact): void {\n    super.BeginContact(contact);\n  }\n\n  public EndContact(contact: b2Contact): void {\n    super.EndContact(contact);\n  }\n\n  public PreSolve(contact: b2Contact, oldManifold: b2Manifold): void {\n    super.PreSolve(contact, oldManifold);\n  }\n\n  public PostSolve(contact: b2Contact, impulse: b2ContactImpulse): void {\n    super.PostSolve(contact, impulse);\n  }\n\n  /**\n   * a = left, d = right, a = up, s = down, e = deploy fracking\n   * fluid.\n   */\n  public Keyboard(key: string): void {\n    // Only allow 1 move per simulation step.\n    if (!this.m_allowInput) {\n      return;\n    }\n\n    const playerPosition = this.m_player.GetTransform().p;\n    const playerX: [number] = [0];\n    const playerY: [number] = [0];\n    Fracker.WorldToTile(playerPosition, playerX, playerY);\n    switch (key) {\n      case 'a':\n        playerX[0]--;\n        break;\n      case 's':\n        playerY[0]--;\n        break;\n      case 'd':\n        playerX[0]++;\n        break;\n      case 'w':\n        playerY[0]++;\n        break;\n      case 'e':\n        // Start charging the fracking fluid.\n        if (this.m_frackingFluidChargeTime < 0.0) {\n          this.m_frackingFluidChargeTime = 0.0;\n        } else {\n          // KeyboardUp() in freeglut (at least on OSX) is called\n          // repeatedly while a key is held.  This means there isn't\n          // a way for fracking fluid to be deployed when the user\n          // releases 'e'.  This works around the issue by attempting\n          // to deploy the fluid when 'e' is pressed again.\n          this.DeployFrackingFluid();\n        }\n        break;\n      default:\n        super.Keyboard(key);\n        break;\n    }\n    this.SetPlayerPosition(playerX[0], playerY[0]);\n    this.m_allowInput = false;\n  }\n\n  public KeyboardUp(key: string): void {\n    super.KeyboardUp(key);\n  }\n\n  public MouseDown(p: b2Vec2): void {\n    super.MouseDown(p);\n    this.m_frackingFluidChargeTime = 0.0;\n  }\n\n  /**\n   * Try to deploy the fracking fluid or move the player.\n   */\n  public MouseUp(p: b2Vec2): void {\n    super.MouseUp(p);\n    if (!this.m_allowInput) {\n      return;\n    }\n\n    // If fracking fluid isn't being released, move the player.\n    if (!this.DeployFrackingFluid()) {\n      const playerPosition = this.m_player.GetTransform().p;\n      const playerX: [number] = [0];\n      const playerY: [number] = [0];\n      Fracker.WorldToTile(playerPosition, playerX, playerY);\n      // Move the player towards the mouse position, preferring to move\n      // along the axis with the maximal distance from the cursor.\n      const distance = b2Vec2.SubVV(p, Fracker.CenteredPosition(playerPosition), new b2Vec2());\n      const absDistX = Math.abs(distance.x);\n      const absDistY = Math.abs(distance.y);\n      if (absDistX > absDistY && absDistX >= FrackerSettings.k_tileHalfWidth) {\n        playerX[0] += distance.x > 0.0 ? 1 : -1;\n      } else if (absDistY >= FrackerSettings.k_tileHalfWidth) {\n        playerY[0] += distance.y > 0.0 ? 1 : -1;\n      }\n      this.SetPlayerPosition(playerX[0], playerY[0]);\n    }\n    this.m_allowInput = false;\n  }\n\n  public MouseMove(p: b2Vec2): void {\n    super.MouseMove(p);\n  }\n\n  public Step(settings: Settings): void {\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    super.Step(settings);\n\n    this.m_tracker.Step(dt);\n    // Allow the user to move again.\n    this.m_allowInput = true;\n    // Charge up fracking fluid.\n    if (this.m_frackingFluidChargeTime >= 0.0) {\n      this.m_frackingFluidChargeTime += dt;\n    }\n\n    const playerPosition = this.m_player.GetTransform().p;\n    const playerX: [number] = [0];\n    const playerY: [number] = [0];\n    Fracker.WorldToTile(playerPosition, playerX, playerY);\n    // If the player is moved to a square with dirt, remove it.\n    if (this.GetMaterial(playerX[0], playerY[0]) === Fracker_Material.DIRT) {\n      this.SetMaterial(playerX[0], playerY[0], Fracker_Material.EMPTY);\n      this.SetBody(playerX[0], playerY[0], null);\n    }\n\n    // Destroy particles at the top of the well.\n    this.DestroyParticlesInTiles(this.m_wellX, this.m_wellTop, this.m_wellX, this.m_wellTop);\n\n    // Only move particles in the groups being tracked.\n    ///  const std.set<b2ParticleGroup*> &particleGroups = m_listener.GetParticleGroups();\n    const particleGroups = this.m_listener.GetParticleGroups();\n    ///  for (std.set<b2ParticleGroup*>.const_iterator it = particleGroups.begin(); it !== particleGroups.end(); ++it)\n    for (let it = 0; it < particleGroups.length; ++it) {\n      ///  b2ParticleGroup * const particleGroup = *it;\n      const particleGroup = particleGroups[it];\n      const index = particleGroup.GetBufferIndex();\n      ///  const b2Vec2* const positionBuffer = m_particleSystem.GetPositionBuffer() + index;\n      const positionBuffer = this.m_particleSystem.GetPositionBuffer();\n      ///  b2Vec2* const velocityBuffer = m_particleSystem.GetVelocityBuffer() + index;\n      const velocityBuffer = this.m_particleSystem.GetVelocityBuffer();\n      const particleCount = particleGroup.GetParticleCount();\n      for (let i = 0; i < particleCount; ++i) {\n        // Apply velocity to particles near the bottom or in the well\n        // sucking them up to the top.\n        const wellEnd = Fracker.CenteredPosition(\n          Fracker.TileToWorld(this.m_wellX, this.m_wellBottom - 2),\n        );\n        const particlePosition = positionBuffer[index + i];\n        // Distance from the well's bottom.\n        ///  const b2Vec2 distance = particlePosition - wellEnd;\n        const distance = b2Vec2.SubVV(particlePosition, wellEnd, new b2Vec2());\n        // Distance from either well side wall.\n        const absDistX = Math.abs(distance.x);\n        if (\n          absDistX < FrackerSettings.k_tileWidth &&\n          // If the particles are just below the well bottom.\n          distance.y > FrackerSettings.k_tileWidth * -2.0 &&\n          distance.y < 0.0\n        ) {\n          // Suck the particles towards the end of the well.\n          ///  b2Vec2 velocity = wellEnd - particlePosition;\n          const velocity = b2Vec2.SubVV(wellEnd, particlePosition, new b2Vec2());\n          velocity.Normalize();\n          ///  velocityBuffer[i] = velocity * FrackerSettings.k_wellSuckSpeedOutside;\n          velocityBuffer[index + i].Copy(velocity.SelfMul(FrackerSettings.k_wellSuckSpeedOutside));\n        } else if (absDistX <= FrackerSettings.k_tileHalfWidth && distance.y > 0.0) {\n          // Suck the particles up the well with a random\n          // x component moving them side to side in the well.\n          const randomX = Math.random() * FrackerSettings.k_tileHalfWidth - distance.x;\n          const velocity = new b2Vec2(randomX, FrackerSettings.k_tileHeight);\n          velocity.Normalize();\n          ///  velocityBuffer[i] = velocity * FrackerSettings.k_wellSuckSpeedInside;\n          velocityBuffer[index + i].Copy(velocity.SelfMul(FrackerSettings.k_wellSuckSpeedInside));\n        }\n      }\n    }\n\n    // Draw everything.\n    this.DrawPlayer();\n    this.DrawWell();\n    this.DrawScore();\n  }\n\n  /**\n   * Render the well.\n   */\n  public DrawWell(): void {\n    for (let y = this.m_wellBottom; y <= this.m_wellTop; ++y) {\n      this.DrawQuad(Fracker.TileToWorld(this.m_wellX, y), FrackerSettings.k_wellColor);\n    }\n  }\n\n  /**\n   * Render the player / fracker.\n   */\n  public DrawPlayer(): void {\n    this.DrawQuad(\n      this.m_player.GetTransform().p,\n      Fracker.LerpColor(\n        FrackerSettings.k_playerColor,\n        FrackerSettings.k_playerFrackColor,\n        b2Max(this.m_frackingFluidChargeTime / FrackerSettings.k_frackingFluidChargeTime, 0.0),\n      ),\n      true,\n    );\n  }\n\n  /**\n   * Render the score and the instructions / keys.\n   */\n  public DrawScore(): void {\n    ///  char score[512];\n    ///  sprintf(score, \"Score: %d, Remaining Oil %d\",\n    ///          m_listener.GetScore(), m_listener.GetOil());\n    ///  const char *lines[] = { score,  \"Move: a,s,d,w   Fracking Fluid: e\" };\n    ///  for (uint32 i = 0; i < B2_ARRAY_SIZE(lines); ++i)\n    ///  {\n    ///    m_debugDraw.DrawString(5, m_textLine, lines[i]);\n    ///    m_textLine += DRAW_STRING_NEW_LINE;\n    ///  }\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `Score: ${this.m_listener.GetScore()}, Remaining Oil ${this.m_listener.GetOil()}`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, 'Move: a,s,d,w   Fracking Fluid: e');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  /**\n   * Draw a quad at position of color that is either just an\n   * outline (fill = false) or solid (fill = true).\n   */\n  public DrawQuad(position: b2Vec2, color: b2Color, fill = false): void {\n    ///  b2Vec2 verts[4];\n    const verts = b2Vec2.MakeArray(4);\n    const maxX = position.x + FrackerSettings.k_tileWidth;\n    const maxY = position.y + FrackerSettings.k_tileHeight;\n    verts[0].Set(position.x, maxY);\n    verts[1].Set(position.x, position.y);\n    verts[2].Set(maxX, position.y);\n    verts[3].Set(maxX, maxY);\n    if (fill) {\n      g_debugDraw.DrawPolygon(verts, 4, color);\n    } else {\n      g_debugDraw.DrawSolidPolygon(verts, 4, color);\n    }\n  }\n\n  ///  // Get a pointer to the material of the tile at the specified position.\n  ///  Material* GetMaterialStorage(const int32 x, const int32 y)\n  ///  {\n  ///    return &m_material[Fracker.TileToArrayOffset(x, y)];\n  ///  }\n\n  ///  // A pointer to the body storage associated with the specified tile\n  ///  // position.\n  ///  b2Body** GetBodyStorage(const int32 x, const int32 y)\n  ///  {\n  ///    return &m_bodies[Fracker.TileToArrayOffset(x, y)];\n  ///  }\n\n  public GetDefaultViewZoom(): number {\n    return 0.1;\n  }\n\n  public static Create(): Test {\n    return new Fracker();\n  }\n\n  /**\n   * Get the bottom left position of the world in world units.\n   */\n  public static GetBottomLeft(bottomLeft: b2Vec2): void {\n    bottomLeft.Set(\n      FrackerSettings.k_worldCenterX - FrackerSettings.k_worldHalfWidth,\n      FrackerSettings.k_worldCenterY - FrackerSettings.k_worldHalfHeight,\n    );\n  }\n\n  /**\n   * Get the extents of the world in world units.\n   */\n  public static GetExtents(bottomLeft: b2Vec2, topRight: b2Vec2): void {\n    Fracker.GetBottomLeft(bottomLeft);\n    topRight.Set(\n      FrackerSettings.k_worldCenterX + FrackerSettings.k_worldHalfWidth,\n      FrackerSettings.k_worldCenterY + FrackerSettings.k_worldHalfHeight,\n    );\n  }\n\n  // Convert a point in world coordintes to a tile location\n  public static WorldToTile(position: b2Vec2, x: [number], y: [number]): void {\n    // Translate relative to the world center and scale based upon the\n    // tile size.\n    const bottomLeft = new b2Vec2();\n    Fracker.GetBottomLeft(bottomLeft);\n    x[0] = Math.floor(\n      (position.x - bottomLeft.x) / FrackerSettings.k_tileWidth + FrackerSettings.k_tileHalfWidth,\n    );\n    y[0] = Math.floor(\n      (position.y - bottomLeft.y) / FrackerSettings.k_tileHeight + FrackerSettings.k_tileHalfHeight,\n    );\n  }\n\n  /**\n   * Convert a tile position to a point  in world coordinates.\n   */\n  public static TileToWorld(x: number, y: number, out: b2Vec2 = new b2Vec2()): b2Vec2 {\n    // Scale based upon the tile size and translate relative to the world\n    // center.\n    const bottomLeft = new b2Vec2();\n    Fracker.GetBottomLeft(bottomLeft);\n    return out.Set(\n      x * FrackerSettings.k_tileWidth + bottomLeft.x,\n      y * FrackerSettings.k_tileHeight + bottomLeft.y,\n    );\n  }\n\n  /**\n   * Calculate the offset within an array of all world tiles using\n   * the specified tile coordinates.\n   */\n  public static TileToArrayOffset(x: number, y: number): number {\n    // DEBUG: b2Assert(x >= 0);\n    // DEBUG: b2Assert(x < FrackerSettings.k_worldWidthTiles);\n    // DEBUG: b2Assert(y >= 0);\n    // DEBUG: b2Assert(y < FrackerSettings.k_worldHeightTiles);\n    return x + y * FrackerSettings.k_worldWidthTiles;\n  }\n\n  /**\n   * Calculate the center of a tile position in world units.\n   */\n  public static CenteredPosition(position: b2Vec2, out: b2Vec2 = new b2Vec2()): b2Vec2 {\n    return out.Set(\n      position.x + FrackerSettings.k_tileHalfWidth,\n      position.y + FrackerSettings.k_tileHalfHeight,\n    );\n  }\n\n  /**\n   * Interpolate between color a and b using t.\n   */\n  public static LerpColor(a: b2Color, b: b2Color, t: number): b2Color {\n    return new b2Color(\n      Fracker.Lerp(a.r, b.r, t),\n      Fracker.Lerp(a.g, b.g, t),\n      Fracker.Lerp(a.b, b.b, t),\n    );\n  }\n\n  /**\n   * Interpolate between a and b using t.\n   */\n  public static Lerp(a: number, b: number, t: number): number {\n    return a * (1.0 - t) + b * t;\n  }\n}\n\n/**\n * Type of material in a tile.\n */\nexport enum Fracker_Material {\n  EMPTY = 0,\n  DIRT = 1,\n  ROCK = 2,\n  OIL = 3,\n  WATER = 4,\n  WELL = 5,\n  PUMP = 6,\n}\n\n/**\n * Keep track of particle groups which are drawn up the well and\n * tracks the score of the game.\n */\nexport class Fracker_DestructionListener extends ParticleGroupTracker {\n  public m_score = 0;\n  public m_oil = 0;\n  public m_world: b2World;\n  public m_previousListener: b2DestructionListener | null = null;\n\n  /**\n   * Initialize the particle system and world, setting this class\n   * as a destruction listener for the world.\n   */\n  constructor(world: b2World) {\n    super();\n    // DEBUG: b2Assert(world !== null);\n    this.m_world = world;\n    this.m_previousListener = world.m_destructionListener;\n    this.m_world.SetDestructionListener(this);\n  }\n\n  public dispose() {\n    if (this.m_world) {\n      this.m_world.SetDestructionListener(this.m_previousListener);\n    }\n  }\n\n  /**\n   * Add to the current score.\n   */\n  public AddScore(score: number): void {\n    this.m_score += score;\n  }\n\n  /**\n   * Get the current score.\n   */\n  public GetScore(): number {\n    return this.m_score;\n  }\n\n  /**\n   * Add to the remaining oil.\n   */\n  public AddOil(oil: number): void {\n    this.m_oil += oil;\n  }\n\n  /**\n   * Get the total oil.\n   */\n  public GetOil(): number {\n    return this.m_oil;\n  }\n\n  /**\n   * Update the score when certain particles are destroyed.\n   */\n  public SayGoodbyeParticle(particleSystem: b2ParticleSystem, index: number): void {\n    // DEBUG: b2Assert(particleSystem !== null);\n    ///  const void * const userData = particleSystem.GetUserDataBuffer()[index];\n    const userData = particleSystem.GetUserDataBuffer()[index];\n    if (userData) {\n      ///  const Material material = *((Material*)userData);\n      const material = userData;\n      switch (material) {\n        case Fracker_Material.OIL:\n          this.AddScore(FrackerSettings.k_scorePerOilParticle);\n          this.AddOil(-1);\n          break;\n        case Fracker_Material.WATER:\n          this.AddScore(FrackerSettings.k_scorePerWaterParticle);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2ChainShape,\n  b2Clamp,\n  b2FixtureDef,\n  b2Max,\n  b2Min,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { g_debugDraw, RandomFloat, Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * Game which adds some fun to Maxwell's demon.\n *\n * http://en.wikipedia.org/wiki/Maxwell's_demon\n *\n * The user's goal is to try to catch as many particles as\n * possible in the bottom half of the container by splitting the\n * container using a barrier with the 'a' key.\n *\n * See Maxwell::Keyboard() for other controls.\n */\n\nexport class Maxwell extends Test {\n  public m_density = Maxwell.k_densityDefault;\n  public m_position = Maxwell.k_containerHalfHeight;\n  public m_temperature = Maxwell.k_temperatureDefault;\n  public m_barrierBody: b2Body | null = null;\n  public m_particleGroup: b2ParticleGroup | null = null;\n\n  public static readonly k_containerWidth = 2.0;\n  public static readonly k_containerHeight = 4.0;\n  public static readonly k_containerHalfWidth = Maxwell.k_containerWidth / 2.0;\n  public static readonly k_containerHalfHeight = Maxwell.k_containerHeight / 2.0;\n  public static readonly k_barrierHeight = Maxwell.k_containerHalfHeight / 100.0;\n  public static readonly k_barrierMovementIncrement = Maxwell.k_containerHalfHeight * 0.1;\n  public static readonly k_densityStep = 1.25;\n  public static readonly k_densityMin = 0.01;\n  public static readonly k_densityMax = 0.8;\n  public static readonly k_densityDefault = 0.25;\n  public static readonly k_temperatureStep = 0.2;\n  public static readonly k_temperatureMin = 0.4;\n  public static readonly k_temperatureMax = 10.0;\n  public static readonly k_temperatureDefault = 5.0;\n\n  constructor() {\n    super();\n\n    this.m_world.SetGravity(new b2Vec2(0, 0));\n\n    // Create the container.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n      const shape = new b2ChainShape();\n      const vertices = [\n        new b2Vec2(-Maxwell.k_containerHalfWidth, 0),\n        new b2Vec2(Maxwell.k_containerHalfWidth, 0),\n        new b2Vec2(Maxwell.k_containerHalfWidth, Maxwell.k_containerHeight),\n        new b2Vec2(-Maxwell.k_containerHalfWidth, Maxwell.k_containerHeight),\n      ];\n      shape.CreateLoop(vertices, 4);\n      const def = new b2FixtureDef();\n      def.shape = shape;\n      def.density = 0;\n      def.restitution = 1.0;\n      ground.CreateFixture(def);\n    }\n\n    // Enable the barrier.\n    this.EnableBarrier();\n    // Create the particles.\n    this.ResetParticles();\n  }\n\n  /**\n   * Disable the barrier.\n   */\n  public DisableBarrier() {\n    if (this.m_barrierBody) {\n      this.m_world.DestroyBody(this.m_barrierBody);\n      this.m_barrierBody = null;\n    }\n  }\n\n  /**\n   * Enable the barrier.\n   */\n  public EnableBarrier() {\n    if (!this.m_barrierBody) {\n      const bd = new b2BodyDef();\n      this.m_barrierBody = this.m_world.CreateBody(bd);\n      const barrierShape = new b2PolygonShape();\n      barrierShape.SetAsBox(\n        Maxwell.k_containerHalfWidth,\n        Maxwell.k_barrierHeight,\n        new b2Vec2(0, this.m_position),\n        0,\n      );\n      const def = new b2FixtureDef();\n      def.shape = barrierShape;\n      def.density = 0;\n      def.restitution = 1.0;\n      this.m_barrierBody.CreateFixture(def);\n    }\n  }\n\n  /**\n   * Enable / disable the barrier.\n   */\n  public ToggleBarrier() {\n    if (this.m_barrierBody) {\n      this.DisableBarrier();\n    } else {\n      this.EnableBarrier();\n    }\n  }\n\n  /**\n   * Destroy and recreate all particles.\n   */\n  public ResetParticles() {\n    if (this.m_particleGroup !== null) {\n      this.m_particleGroup.DestroyParticles(false);\n      this.m_particleGroup = null;\n    }\n\n    this.m_particleSystem.SetRadius(Maxwell.k_containerHalfWidth / 20.0);\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(\n        this.m_density * Maxwell.k_containerHalfWidth,\n        this.m_density * Maxwell.k_containerHalfHeight,\n        new b2Vec2(0, Maxwell.k_containerHalfHeight),\n        0,\n      );\n      const pd = new b2ParticleGroupDef();\n      pd.flags = b2ParticleFlag.b2_powderParticle;\n      pd.shape = shape;\n      this.m_particleGroup = this.m_particleSystem.CreateParticleGroup(pd);\n      ///  b2Vec2* velocities =\n      ///    this.m_particleSystem.GetVelocityBuffer() +\n      ///    this.m_particleGroup.GetBufferIndex();\n      const velocities = this.m_particleSystem.GetVelocityBuffer();\n      const index = this.m_particleGroup.GetBufferIndex();\n\n      for (let i = 0; i < this.m_particleGroup.GetParticleCount(); ++i) {\n        ///  b2Vec2& v = *(velocities + i);\n        const v = velocities[index + i];\n        v.Set(RandomFloat() + 1.0, RandomFloat() + 1.0);\n        v.Normalize();\n        ///  v *= this.m_temperature;\n        v.SelfMul(this.m_temperature);\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        // Enable / disable the barrier.\n        this.ToggleBarrier();\n        break;\n      case '=':\n        // Increase the particle density.\n        this.m_density = b2Min(this.m_density * Maxwell.k_densityStep, Maxwell.k_densityMax);\n        this.Reset();\n        break;\n      case '-':\n        // Reduce the particle density.\n        this.m_density = b2Max(this.m_density / Maxwell.k_densityStep, Maxwell.k_densityMin);\n        this.Reset();\n        break;\n      case '.':\n        // Move the location of the divider up.\n        this.MoveDivider(this.m_position + Maxwell.k_barrierMovementIncrement);\n        break;\n      case ',':\n        // Move the location of the divider down.\n        this.MoveDivider(this.m_position - Maxwell.k_barrierMovementIncrement);\n        break;\n      case ';':\n        // Reduce the temperature (velocity of particles).\n        this.m_temperature = b2Max(\n          this.m_temperature - Maxwell.k_temperatureStep,\n          Maxwell.k_temperatureMin,\n        );\n        this.Reset();\n        break;\n      case \"'\":\n        // Increase the temperature (velocity of particles).\n        this.m_temperature = b2Min(\n          this.m_temperature + Maxwell.k_temperatureStep,\n          Maxwell.k_temperatureMax,\n        );\n        this.Reset();\n        break;\n      default:\n        super.Keyboard(key);\n        break;\n    }\n  }\n\n  /**\n   * Determine whether a point is in the container.\n   */\n  public InContainer(p: b2Vec2) {\n    return (\n      p.x >= -Maxwell.k_containerHalfWidth &&\n      p.x <= Maxwell.k_containerHalfWidth &&\n      p.y >= 0.0 &&\n      p.y <= Maxwell.k_containerHalfHeight * 2.0\n    );\n  }\n\n  public MouseDown(p: b2Vec2) {\n    if (!this.InContainer(p)) {\n      super.MouseDown(p);\n    }\n  }\n\n  public MouseUp(p: b2Vec2) {\n    // If the pointer is in the container.\n    if (this.InContainer(p)) {\n      // Enable / disable the barrier.\n      this.ToggleBarrier();\n    } else {\n      // Move the barrier to the touch position.\n      this.MoveDivider(p.y);\n\n      super.MouseUp(p);\n    }\n  }\n\n  public Step(settings: Settings) {\n    super.Step(settings);\n\n    // Number of particles above (top) and below (bottom) the barrier.\n    let top = 0;\n    let bottom = 0;\n\n    if (this.m_particleGroup) {\n      const index = this.m_particleGroup.GetBufferIndex();\n      ///  b2Vec2* const velocities = this.m_particleSystem.GetVelocityBuffer() + index;\n      const velocities = this.m_particleSystem.GetVelocityBuffer();\n      ///  b2Vec2* const positions = this.m_particleSystem.GetPositionBuffer() + index;\n      const positions = this.m_particleSystem.GetPositionBuffer();\n\n      for (let i = 0; i < this.m_particleGroup.GetParticleCount(); i++) {\n        // Add energy to particles based upon the temperature.\n        ///  b2Vec2& v = velocities[i];\n        const v = velocities[index + i];\n        v.Normalize();\n        ///  v *= this.m_temperature;\n        v.SelfMul(this.m_temperature);\n\n        // Keep track of the number of particles above / below the\n        // divider / barrier position.\n        ///  b2Vec2& p = positions[i];\n        const p = positions[index + i];\n        if (p.y > this.m_position) {\n          top++;\n        } else {\n          bottom++;\n        }\n      }\n    }\n\n    // Calculate a score based upon the difference in pressure between the\n    // upper and lower divisions of the container.\n    const topPressure = top / (Maxwell.k_containerHeight - this.m_position);\n    const botPressure = bottom / this.m_position;\n    g_debugDraw.DrawString(\n      10,\n      75,\n      `Score: ${topPressure > 0.0 ? botPressure / topPressure - 1.0 : 0.0}`,\n    );\n  }\n\n  /**\n   * Reset the particles and the barrier.\n   */\n  public Reset() {\n    this.DisableBarrier();\n    this.ResetParticles();\n    this.EnableBarrier();\n  }\n\n  /**\n   * Move the divider / barrier.\n   */\n  public MoveDivider(newPosition: number) {\n    this.m_position = b2Clamp(\n      newPosition,\n      Maxwell.k_barrierMovementIncrement,\n      Maxwell.k_containerHeight - Maxwell.k_barrierMovementIncrement,\n    );\n    this.Reset();\n  }\n\n  public GetDefaultViewZoom() {\n    return 0.1;\n  }\n\n  public static Create() {\n    return new Maxwell();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class Ramp extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      // Construct a ramp out of many polygons to ensure there's no\n      // issue with particles moving across vertices\n\n      const xstep = 5.0,\n        ystep = 5.0;\n\n      for (let y = 30.0; y > 0.0; y -= ystep) {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-25.0, y),\n          new b2Vec2(-25.0, y - ystep),\n          new b2Vec2(0.0, 15.0),\n        ];\n        shape.Set(vertices, 3);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      for (let x = -25.0; x < 25.0; x += xstep) {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(x, 0.0), new b2Vec2(x + xstep, 0.0), new b2Vec2(0.0, 15.0)];\n        shape.Set(vertices, 3);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.25);\n    const particleType = Test.GetParticleParameterValue();\n    if (particleType === b2ParticleFlag.b2_waterParticle) {\n      this.m_particleSystem.SetDamping(0.2);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(-20, 33);\n      shape.m_radius = 3;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = particleType;\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n  }\n\n  public static Create() {\n    return new Ramp();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2ParticleDef,\n  b2ParticleFlag,\n  b2PolygonShape,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * Test behavior when particles fall on a convex ambigious Body\n * contact fixture junction.\n */\n\nexport class Pointy extends Test {\n  public m_killfieldShape = new b2PolygonShape();\n  public m_killfieldTransform = new b2Transform();\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      // Construct a triangle out of many polygons to ensure there's no\n      // issue with particles falling directly on an ambiguous corner\n\n      const xstep = 1.0;\n      for (let x = -10.0; x < 10.0; x += xstep) {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(x, -10.0),\n          new b2Vec2(x + xstep, -10.0),\n          new b2Vec2(0.0, 25.0),\n        ];\n        shape.Set(vertices, 3);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(0.25 * 2); // HACK: increase particle radius\n    const particleType = Test.GetParticleParameterValue();\n    if (particleType === b2ParticleFlag.b2_waterParticle) {\n      this.m_particleSystem.SetDamping(0.2);\n    }\n\n    // Create killfield shape and transform\n    this.m_killfieldShape = new b2PolygonShape();\n    this.m_killfieldShape.SetAsBox(50.0, 1.0);\n\n    // Put this at the bottom of the world\n    this.m_killfieldTransform = new b2Transform();\n    const loc = new b2Vec2(-25, 1);\n    this.m_killfieldTransform.SetPositionAngle(loc, 0);\n  }\n\n  public Step(settings: Settings) {\n    super.Step(settings);\n\n    const flags = Test.GetParticleParameterValue();\n    const pd = new b2ParticleDef();\n\n    pd.position.Set(0.0, 33.0);\n    pd.velocity.Set(0.0, -1.0);\n    pd.flags = flags;\n\n    if (flags & (b2ParticleFlag.b2_springParticle | b2ParticleFlag.b2_elasticParticle)) {\n      const count = this.m_particleSystem.GetParticleCount();\n      pd.velocity.Set(count & 1 ? -1.0 : 1.0, -5.0);\n      pd.flags |= b2ParticleFlag.b2_reactiveParticle;\n    }\n\n    this.m_particleSystem.CreateParticle(pd);\n\n    // kill every particle near the bottom of the screen\n    this.m_particleSystem.DestroyParticlesInShape(this.m_killfieldShape, this.m_killfieldTransform);\n  }\n\n  public static Create() {\n    return new Pointy();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport { b2BodyDef, b2ParticleDef, b2ParticleFlag, b2PolygonShape, b2Vec2 } from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * Test the behavior of particles falling onto a concave\n * ambiguous Body contact fixture junction.\n */\n\nexport class AntiPointy extends Test {\n  public m_particlesToCreate = 300;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      // Construct a valley out of many polygons to ensure there's no\n      // issue with particles falling directly on an ambiguous set of\n      // fixture corners.\n\n      const step = 1.0;\n\n      for (let i = -10.0; i < 10.0; i += step) {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(i, -10.0), new b2Vec2(i + step, -10.0), new b2Vec2(0.0, 15.0)];\n        shape.Set(vertices, 3);\n        ground.CreateFixture(shape, 0.0);\n      }\n      for (let i = -10.0; i < 35.0; i += step) {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(-10.0, i), new b2Vec2(-10.0, i + step), new b2Vec2(0.0, 15.0)];\n        shape.Set(vertices, 3);\n        ground.CreateFixture(shape, 0.0);\n\n        const vertices2 = [new b2Vec2(10.0, i), new b2Vec2(10.0, i + step), new b2Vec2(0.0, 15.0)];\n        shape.Set(vertices2, 3);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    // Cap the number of generated particles or we'll fill forever\n    this.m_particlesToCreate = 300;\n\n    this.m_particleSystem.SetRadius(0.25 * 2); // HACK: increase particle radius\n    const particleType = Test.GetParticleParameterValue();\n    if (particleType === b2ParticleFlag.b2_waterParticle) {\n      this.m_particleSystem.SetDamping(0.2);\n    }\n  }\n\n  public Step(settings: Settings) {\n    super.Step(settings);\n\n    if (this.m_particlesToCreate <= 0) {\n      return;\n    }\n\n    --this.m_particlesToCreate;\n\n    const flags = Test.GetParticleParameterValue();\n    const pd = new b2ParticleDef();\n\n    pd.position.Set(0.0, 40.0);\n    pd.velocity.Set(0.0, -1.0);\n    pd.flags = flags;\n\n    if (flags & (b2ParticleFlag.b2_springParticle | b2ParticleFlag.b2_elasticParticle)) {\n      const count = this.m_particleSystem.GetParticleCount();\n      pd.velocity.Set(count & 1 ? -1.0 : 1.0, -5.0);\n      pd.flags |= b2ParticleFlag.b2_reactiveParticle;\n    }\n\n    this.m_particleSystem.CreateParticle(pd);\n  }\n\n  public static Create() {\n    return new AntiPointy();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2014 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2BodyDef,\n  b2CircleShape,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class CornerCase extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      // Construct a pathological corner intersection out of many\n      // polygons to ensure there's no issue with particle oscillation\n      // from many fixture contact impulses at the corner\n\n      // left edge\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [\n          new b2Vec2(-20.0, 30.0),\n          new b2Vec2(-20.0, 0.0),\n          new b2Vec2(-25.0, 0.0),\n          new b2Vec2(-25.0, 30.0),\n        ];\n        shape.Set(vertices);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      const yrange = 30.0,\n        ystep = yrange / 10.0,\n        xrange = 20.0,\n        xstep = xrange / 2.0;\n\n      {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(-25.0, 0.0), new b2Vec2(20.0, 15.0), new b2Vec2(25.0, 0.0)];\n        shape.Set(vertices);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      for (let x = -xrange; x < xrange; x += xstep) {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(-25.0, 0.0), new b2Vec2(x, 15.0), new b2Vec2(x + xstep, 15.0)];\n        shape.Set(vertices);\n        ground.CreateFixture(shape, 0.0);\n      }\n\n      for (let y = 0.0; y < yrange; y += ystep) {\n        const shape = new b2PolygonShape();\n        const vertices = [new b2Vec2(25.0, y), new b2Vec2(25.0, y + ystep), new b2Vec2(20.0, 15.0)];\n        shape.Set(vertices);\n        ground.CreateFixture(shape, 0.0);\n      }\n    }\n\n    this.m_particleSystem.SetRadius(1.0);\n    const particleType = Test.GetParticleParameterValue();\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_p.Set(0, 35);\n      shape.m_radius = 12;\n      const pd = new b2ParticleGroupDef();\n      pd.flags = particleType;\n      pd.shape = shape;\n      const group = this.m_particleSystem.CreateParticleGroup(pd);\n      if (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\n        this.ColorParticleGroup(group, 0);\n      }\n    }\n  }\n  public static Create() {\n    return new CornerCase();\n  }\n}\n\n// #endif\n","/*\n * Copyright (c) 2015 Google, Inc.\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// #if B2_ENABLE_PARTICLE\n\n// Optionally disables particle / fixture and particle / particle contacts.\nimport {\n  b2BodyDef,\n  b2ChainShape,\n  b2ContactFilter,\n  b2FixtureDef,\n  b2ParticleFlag,\n  b2ParticleGroup,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_debugDraw,\n  RandomFloat,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class ParticleContactDisabler extends b2ContactFilter {\n  public m_enableFixtureParticleCollisions = true;\n  public m_enableParticleParticleCollisions = true;\n\n  // Blindly enable / disable collisions between fixtures and particles.\n  public ShouldCollideFixtureParticle(): boolean {\n    return this.m_enableFixtureParticleCollisions;\n  }\n\n  // Blindly enable / disable collisions between particles.\n  public ShouldCollideParticleParticle(): boolean {\n    return this.m_enableParticleParticleCollisions;\n  }\n}\n\nexport class ParticleCollisionFilter extends Test {\n  constructor() {\n    super();\n\n    // must also set b2_particleContactFilterParticle and\n    // b2_fixtureContactFilterParticle flags for particle group\n    this.m_world.SetContactFilter(this.m_contactDisabler);\n\n    this.m_world.SetGravity(new b2Vec2(0, 0));\n\n    // Create the container.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n      const shape = new b2ChainShape();\n      const vertices: b2Vec2[] = [\n        new b2Vec2(\n          -ParticleCollisionFilter.kBoxSize,\n          -ParticleCollisionFilter.kBoxSize + ParticleCollisionFilter.kOffset,\n        ),\n        new b2Vec2(\n          ParticleCollisionFilter.kBoxSize,\n          -ParticleCollisionFilter.kBoxSize + ParticleCollisionFilter.kOffset,\n        ),\n        new b2Vec2(\n          ParticleCollisionFilter.kBoxSize,\n          ParticleCollisionFilter.kBoxSize + ParticleCollisionFilter.kOffset,\n        ),\n        new b2Vec2(\n          -ParticleCollisionFilter.kBoxSize,\n          ParticleCollisionFilter.kBoxSize + ParticleCollisionFilter.kOffset,\n        ),\n      ];\n      shape.CreateLoop(vertices);\n      const def = new b2FixtureDef();\n      def.shape = shape;\n      def.density = 0;\n      def.density = 0;\n      def.restitution = 1.0;\n      ground.CreateFixture(def);\n    }\n\n    // create the particles\n    this.m_particleSystem.SetRadius(0.5);\n    {\n      // b2PolygonShape shape;\n      const shape = new b2PolygonShape();\n      // shape.SetAsBox(1.5f, 1.5f, b2Vec2(kBoxSizeHalf, kBoxSizeHalf + kOffset), 0.0f);\n      shape.SetAsBox(\n        1.5,\n        1.5,\n        new b2Vec2(\n          ParticleCollisionFilter.kBoxSizeHalf,\n          ParticleCollisionFilter.kBoxSizeHalf + ParticleCollisionFilter.kOffset,\n        ),\n        0.0,\n      );\n      // b2ParticleGroupDef pd;\n      const pd = new b2ParticleGroupDef();\n      // pd.shape = &shape;\n      pd.shape = shape;\n      // pd.flags = b2_powderParticle\n      // \t\t| b2_particleContactFilterParticle\n      // \t\t| b2_fixtureContactFilterParticle;\n      pd.flags =\n        b2ParticleFlag.b2_powderParticle |\n        b2ParticleFlag.b2_particleContactFilterParticle |\n        b2ParticleFlag.b2_fixtureContactFilterParticle;\n      // m_particleGroup =\n      // \tm_particleSystem.CreateParticleGroup(pd);\n      this.m_particleGroup = this.m_particleSystem.CreateParticleGroup(pd);\n\n      // b2Vec2* velocities =\n      // \tm_particleSystem.GetVelocityBuffer() +\n      // \tm_particleGroup.GetBufferIndex();\n      const velocities: b2Vec2[] = this.m_particleSystem.GetVelocityBuffer();\n      const index: number = this.m_particleGroup.GetBufferIndex();\n      // for (int i = 0; i < m_particleGroup.GetParticleCount(); ++i) {\n      // \tb2Vec2& v = *(velocities + i);\n      // \tv.Set(RandomFloat(), RandomFloat());\n      // \tv.Normalize();\n      // \tv *= kSpeedup;\n      // }\n      for (let i = 0; i < this.m_particleGroup.GetParticleCount(); ++i) {\n        const v: b2Vec2 = velocities[index + i];\n        v.Set(RandomFloat(), RandomFloat());\n        v.SelfNormalize();\n        v.SelfMul(ParticleCollisionFilter.kSpeedup);\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    // const int32 index = m_particleGroup.GetBufferIndex();\n    const index: number = this.m_particleGroup.GetBufferIndex();\n    // b2Vec2* const velocities =\n    // \tm_particleSystem.GetVelocityBuffer() + index;\n    const velocities: b2Vec2[] = this.m_particleSystem.GetVelocityBuffer();\n    // for (int32 i = 0; i < m_particleGroup.GetParticleCount(); i++) {\n    // \t// Add energy to particles based upon the temperature.\n    // \tb2Vec2& v = velocities[i];\n    // \tv.Normalize();\n    // \tv *= kSpeedup;\n    // }\n    for (let i = 0; i < this.m_particleGroup.GetParticleCount(); ++i) {\n      const v: b2Vec2 = velocities[index + i];\n      v.SelfNormalize();\n      v.SelfMul(ParticleCollisionFilter.kSpeedup);\n    }\n\n    // key help\n    {\n      const k_keys: string[] = [\n        'Keys: (a) toggle Fixture collisions',\n        '      (s) toggle particle collisions',\n      ];\n      for (let i = 0; i < k_keys.length; ++i) {\n        g_debugDraw.DrawString(5, this.m_textLine, k_keys[i]);\n        this.m_textLine += DRAW_STRING_NEW_LINE;\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.ToggleFixtureCollisions();\n        break;\n      case 's':\n        this.ToggleParticleCollisions();\n        break;\n      default:\n        super.Keyboard(key);\n        break;\n    }\n  }\n\n  public ToggleFixtureCollisions(): void {\n    this.m_contactDisabler.m_enableFixtureParticleCollisions = !this.m_contactDisabler\n      .m_enableFixtureParticleCollisions;\n  }\n\n  public ToggleParticleCollisions(): void {\n    this.m_contactDisabler.m_enableParticleParticleCollisions = !this.m_contactDisabler\n      .m_enableParticleParticleCollisions;\n  }\n\n  public m_contactDisabler: ParticleContactDisabler = new ParticleContactDisabler();\n  public m_particleGroup: b2ParticleGroup;\n\n  public static readonly kBoxSize = 10.0;\n  public static readonly kBoxSizeHalf = ParticleCollisionFilter.kBoxSize / 2;\n  public static readonly kOffset = 20.0;\n  public static readonly kParticlesContainerSize = ParticleCollisionFilter.kOffset + 0.5;\n  public static readonly kSpeedup = 8.0;\n\n  public static Create() {\n    return new ParticleCollisionFilter();\n  }\n}\n\n// #endif\n","// #if B2_ENABLE_PARTICLE\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2ParticleFlag,\n  b2ParticleGroupDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class EyeCandy extends Test {\n  public m_mover: b2Body;\n  public m_joint: b2RevoluteJoint;\n\n  constructor() {\n    super();\n\n    this.m_particleSystem.SetDamping(0.2);\n    this.m_particleSystem.SetRadius(0.3 * 2);\n    this.m_particleSystem.SetGravityScale(0.4);\n    this.m_particleSystem.SetDensity(1.2);\n\n    const bdg = new b2BodyDef();\n    const ground = this.m_world.CreateBody(bdg);\n\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_staticBody; //b2BodyType.b2_dynamicBody;\n    bd.allowSleep = false;\n    bd.position.Set(0.0, 0.0);\n    const body = this.m_world.CreateBody(bd);\n\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(0.5, 10.0, new b2Vec2(20.0, 0.0), 0.0);\n    body.CreateFixture(shape, 5.0);\n    shape.SetAsBox(0.5, 10.0, new b2Vec2(-20.0, 0.0), 0.0);\n    body.CreateFixture(shape, 5.0);\n    shape.SetAsBox(0.5, 20.0, new b2Vec2(0.0, 10.0), Math.PI / 2.0);\n    body.CreateFixture(shape, 5.0);\n    shape.SetAsBox(0.5, 20.0, new b2Vec2(0.0, -10.0), Math.PI / 2.0);\n    body.CreateFixture(shape, 5.0);\n\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Set(0.0, 0.0);\n    this.m_mover = this.m_world.CreateBody(bd);\n    shape.SetAsBox(1.0, 5.0, new b2Vec2(0.0, 2.0), 0.0);\n    this.m_mover.CreateFixture(shape, 5.0);\n\n    const jd = new b2RevoluteJointDef();\n    jd.bodyA = ground;\n    jd.bodyB = this.m_mover;\n    jd.localAnchorA.Set(0.0, 0.0);\n    jd.localAnchorB.Set(0.0, 5.0);\n    jd.referenceAngle = 0.0;\n    jd.motorSpeed = 0;\n    jd.maxMotorTorque = 1e7;\n    jd.enableMotor = true;\n    this.m_joint = this.m_world.CreateJoint(jd);\n\n    const pd = new b2ParticleGroupDef();\n    pd.flags = b2ParticleFlag.b2_waterParticle;\n\n    const shape2 = new b2PolygonShape();\n    shape2.SetAsBox(9.0, 9.0, new b2Vec2(0.0, 0.0), 0.0);\n\n    pd.shape = shape2;\n    this.m_particleSystem.CreateParticleGroup(pd);\n  }\n\n  public Step(settings: Settings) {\n    const time = new Date().getTime();\n    this.m_joint.SetMotorSpeed(0.7 * Math.cos(time / 1000));\n\n    super.Step(settings);\n  }\n\n  public static Create() {\n    return new EyeCandy();\n  }\n}\n\n// #endif\n","import { registerTest } from '../test';\nimport { Sandbox } from './Sandbox';\nimport { Sparky } from './Sparky';\nimport { DamBreak } from './DamBreak';\nimport { LiquidTimer } from './LiquidTimer';\nimport { WaveMachine } from './WaveMachine';\nimport { Particles } from './Particles';\nimport { Faucet } from './Faucet';\nimport { DrawingParticles } from './DrawingParticles';\nimport { Soup } from './Soup';\nimport { ParticlesSurfaceTension } from './ParticlesSurfaceTension';\nimport { ElasticParticles } from './ElasticParticles';\nimport { RigidParticles } from './RigidParticles';\nimport { MultipleParticleSystems } from './MultipleParticleSystems';\nimport { Impulse } from './Impulse';\nimport { SoupStirrer } from './SoupStirrer';\nimport { Fracker } from './Fracker';\nimport { Maxwell } from './Maxwell';\nimport { Ramp } from './Ramp';\nimport { Pointy } from './Pointy';\nimport { AntiPointy } from './AntiPointy';\nimport { CornerCase } from './CornerCase';\nimport { ParticleCollisionFilter } from './ParticleCollisionFilter';\nimport { EyeCandy } from './EyeCandy';\n\nif (B2_ENABLE_PARTICLE) {\n  registerTest('Particles', 'Sandbox', Sandbox.Create);\n  registerTest('Particles', 'Sparky', Sparky.Create);\n  registerTest('Particles', 'DamBreak', DamBreak.Create);\n  registerTest('Particles', 'Liquid Timer', LiquidTimer.Create);\n  registerTest('Particles', 'Wave Machine', WaveMachine.Create);\n  registerTest('Particles', 'Particles', Particles.Create);\n  registerTest('Particles', 'Faucet', Faucet.Create);\n  registerTest('Particles', 'Particle Drawing', DrawingParticles.Create);\n  registerTest('Particles', 'Soup', Soup.Create);\n  registerTest('Particles', 'Surface Tension', ParticlesSurfaceTension.Create);\n  registerTest('Particles', 'Elastic Particles', ElasticParticles.Create);\n  registerTest('Particles', 'Rigid Particles', RigidParticles.Create);\n  registerTest('Particles', 'Multiple Systems', MultipleParticleSystems.Create);\n  registerTest('Particles', 'Impulse', Impulse.Create);\n  registerTest('Particles', 'Soup Stirrer', SoupStirrer.Create);\n  registerTest('Particles', 'Fracker', Fracker.Create);\n  registerTest('Particles', 'Maxwell', Maxwell.Create);\n  registerTest('Particles', 'Ramp', Ramp.Create);\n  registerTest('Particles', 'Pointy', Pointy.Create);\n  registerTest('Particles', 'AntiPointy', AntiPointy.Create);\n  registerTest('Particles', 'Corner Case', CornerCase.Create);\n  registerTest('Particles', 'Particle Collisions', ParticleCollisionFilter.Create);\n  registerTest('Particles', 'Eye Candy', EyeCandy.Create);\n}\n","var classof = require('../internals/classof-raw');\n\n// `thisNumberValue` abstract operation\n// https://tc39.github.io/ecma262/#sec-thisnumbervalue\nmodule.exports = function (value) {\n  if (typeof value != 'number' && classof(value) != 'Number') {\n    throw TypeError('Incorrect invocation');\n  }\n  return +value;\n};\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar toInteger = require('../internals/to-integer');\nvar thisNumberValue = require('../internals/this-number-value');\nvar repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar nativeToFixed = 1.0.toFixed;\nvar floor = Math.floor;\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar FORCED = nativeToFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !fails(function () {\n  // V8 ~ Android 4.3-\n  nativeToFixed.call({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  // eslint-disable-next-line max-statements\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toInteger(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    var multiply = function (n, c) {\n      var index = -1;\n      var c2 = c;\n      while (++index < 6) {\n        c2 += n * data[index];\n        data[index] = c2 % 1e7;\n        c2 = floor(c2 / 1e7);\n      }\n    };\n\n    var divide = function (n) {\n      var index = 6;\n      var c = 0;\n      while (--index >= 0) {\n        c += data[index];\n        data[index] = floor(c / n);\n        c = (c % n) * 1e7;\n      }\n    };\n\n    var dataToString = function () {\n      var index = 6;\n      var s = '';\n      while (--index >= 0) {\n        if (s !== '' || index === 0 || data[index] !== 0) {\n          var t = String(data[index]);\n          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;\n        }\n      } return s;\n    };\n\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        result = dataToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        result = dataToString() + repeat.call('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat.call('0', fractDigits - k) + result\n        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_polygonRadius,\n  b2Color,\n  b2Distance,\n  b2DistanceInput,\n  b2DistanceOutput,\n  b2ShapeCast,\n  b2ShapeCastInput,\n  b2ShapeCastOutput,\n  b2SimplexCache,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ShapeCast extends Test {\n  public static e_vertexCount = 8;\n\n  public m_vAs: b2Vec2[] = [];\n  public m_countA = 0;\n  public m_radiusA = 0;\n\n  public m_vBs: b2Vec2[] = [];\n  public m_countB = 0;\n  public m_radiusB = 0;\n\n  constructor() {\n    super();\n\n    // #if 1\n    this.m_vAs[0] = new b2Vec2(-0.5, 1.0);\n    this.m_vAs[1] = new b2Vec2(0.5, 1.0);\n    this.m_vAs[2] = new b2Vec2(0.0, 0.0);\n    this.m_countA = 3;\n    this.m_radiusA = b2_polygonRadius;\n\n    this.m_vBs[0] = new b2Vec2(-0.5, -0.5);\n    this.m_vBs[1] = new b2Vec2(0.5, -0.5);\n    this.m_vBs[2] = new b2Vec2(0.5, 0.5);\n    this.m_vBs[3] = new b2Vec2(-0.5, 0.5);\n    this.m_countB = 4;\n    this.m_radiusB = b2_polygonRadius;\n    // #else\n    // this.m_vAs[0] = new b2Vec2(0.0, 0.0);\n    // this.m_countA = 1;\n    // this.m_radiusA = 0.5;\n\n    // this.m_vBs[0] = new b2Vec2(0.0, 0.0);\n    // this.m_countB = 1;\n    // this.m_radiusB = 0.5;\n    // #endif\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    const transformA = new b2Transform();\n    transformA.p.Set(0.0, 0.25);\n    transformA.q.SetIdentity();\n\n    const transformB = new b2Transform();\n    transformB.SetIdentity();\n\n    const input = new b2ShapeCastInput();\n    input.proxyA.SetVerticesRadius(this.m_vAs, this.m_countA, this.m_radiusA);\n    input.proxyB.SetVerticesRadius(this.m_vBs, this.m_countB, this.m_radiusB);\n    input.transformA.Copy(transformA);\n    input.transformB.Copy(transformB);\n    input.translationB.Set(8.0, 0.0);\n\n    const output = new b2ShapeCastOutput();\n\n    const hit = b2ShapeCast(output, input);\n\n    const transformB2 = new b2Transform();\n    transformB2.q.Copy(transformB.q);\n    // transformB2.p = transformB.p + output.lambda * input.translationB;\n    transformB2.p.Copy(transformB.p).SelfMulAdd(output.lambda, input.translationB);\n\n    const distanceInput = new b2DistanceInput();\n    distanceInput.proxyA.SetVerticesRadius(this.m_vAs, this.m_countA, this.m_radiusA);\n    distanceInput.proxyB.SetVerticesRadius(this.m_vBs, this.m_countB, this.m_radiusB);\n    distanceInput.transformA.Copy(transformA);\n    distanceInput.transformB.Copy(transformB2);\n    distanceInput.useRadii = false;\n    const simplexCache = new b2SimplexCache();\n    simplexCache.count = 0;\n    const distanceOutput = new b2DistanceOutput();\n\n    b2Distance(distanceOutput, simplexCache, distanceInput);\n\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `hit = ${hit ? 'true' : 'false'}, iters = ${output.iterations}, lambda = ${\n        output.lambda\n      }, distance = ${distanceOutput.distance.toFixed(5)}`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    g_debugDraw.PushTransform(transformA);\n    // g_debugDraw.DrawCircle(this.m_vAs[0], this.m_radiusA, new b2Color(0.9, 0.9, 0.9));\n    g_debugDraw.DrawPolygon(this.m_vAs, this.m_countA, new b2Color(0.9, 0.9, 0.9));\n    g_debugDraw.PopTransform(transformA);\n\n    g_debugDraw.PushTransform(transformB);\n    // g_debugDraw.DrawCircle(this.m_vBs[0], this.m_radiusB, new b2Color(0.5, 0.9, 0.5));\n    g_debugDraw.DrawPolygon(this.m_vBs, this.m_countB, new b2Color(0.5, 0.9, 0.5));\n    g_debugDraw.PopTransform(transformB);\n\n    g_debugDraw.PushTransform(transformB2);\n    // g_debugDraw.DrawCircle(this.m_vBs[0], this.m_radiusB, new b2Color(0.5, 0.7, 0.9));\n    g_debugDraw.DrawPolygon(this.m_vBs, this.m_countB, new b2Color(0.5, 0.7, 0.9));\n    g_debugDraw.PopTransform(transformB2);\n\n    if (hit) {\n      const p1 = output.point;\n      g_debugDraw.DrawPoint(p1, 10.0, new b2Color(0.9, 0.3, 0.3));\n      // b2Vec2 p2 = p1 + output.normal;\n      const p2 = b2Vec2.AddVV(p1, output.normal, new b2Vec2());\n      g_debugDraw.DrawSegment(p1, p2, new b2Color(0.9, 0.3, 0.3));\n    }\n  }\n\n  public static Create(): Test {\n    return new ShapeCast();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_toiStats,\n  b2Color,\n  b2PolygonShape,\n  b2Sweep,\n  b2TimeOfImpact,\n  b2TOIInput,\n  b2TOIOutput,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\n\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class TimeOfImpact extends Test {\n  m_shapeA = new b2PolygonShape();\n  m_shapeB = new b2PolygonShape();\n\n  constructor() {\n    super();\n\n    this.m_shapeA.SetAsBox(25.0, 5.0);\n    this.m_shapeB.SetAsBox(2.5, 2.5);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    const sweepA = new b2Sweep();\n    sweepA.c0.Set(0.0, 20.0 + 8.0 * Math.cos(Date.now() / 1000)); // (24.0, -60.0);\n    sweepA.a0 = 2.95;\n    sweepA.c.Copy(sweepA.c0);\n    sweepA.a = sweepA.a0;\n    sweepA.localCenter.SetZero();\n\n    const sweepB = new b2Sweep();\n    sweepB.c0.Set(20.0, 40.0); // (53.474274, -50.252514);\n    sweepB.a0 = 0.1; // 513.36676; // - 162.0 * b2_pi;\n    sweepB.c.Set(-20.0, 0.0); // (54.595478, -51.083473);\n    sweepB.a = 3.1; // 513.62781; //  - 162.0 * b2_pi;\n    sweepB.localCenter.SetZero();\n\n    //sweepB.a0 -= 300.0 * b2_pi;\n    //sweepB.a -= 300.0 * b2_pi;\n\n    const input = new b2TOIInput();\n    input.proxyA.SetShape(this.m_shapeA, 0);\n    input.proxyB.SetShape(this.m_shapeB, 0);\n    input.sweepA.Copy(sweepA);\n    input.sweepB.Copy(sweepB);\n    input.tMax = 1.0;\n\n    const output = new b2TOIOutput();\n\n    b2TimeOfImpact(output, input);\n\n    g_debugDraw.DrawString(5, this.m_textLine, `toi = ${output.t.toFixed(3)}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `max toi iters = ${b2_toiStats.maxIters}, max root iters = ${b2_toiStats.maxRootIters}`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    const vertices = [];\n\n    const transformA = new b2Transform();\n    sweepA.GetTransform(transformA, 0.0);\n    for (let i = 0; i < this.m_shapeA.m_count; ++i) {\n      vertices[i] = b2Transform.MulXV(transformA, this.m_shapeA.m_vertices[i], new b2Vec2());\n    }\n    g_debugDraw.DrawPolygon(vertices, this.m_shapeA.m_count, new b2Color(0.9, 0.9, 0.9));\n\n    const transformB = new b2Transform();\n    sweepB.GetTransform(transformB, 0.0);\n\n    //b2Vec2 localPoint(2.0f, -0.1f);\n\n    for (let i = 0; i < this.m_shapeB.m_count; ++i) {\n      vertices[i] = b2Transform.MulXV(transformB, this.m_shapeB.m_vertices[i], new b2Vec2());\n    }\n    g_debugDraw.DrawPolygon(vertices, this.m_shapeB.m_count, new b2Color(0.5, 0.9, 0.5));\n    g_debugDraw.DrawStringWorld(transformB.p.x, transformB.p.y, `${(0.0).toFixed(1)}`);\n\n    sweepB.GetTransform(transformB, output.t);\n    for (let i = 0; i < this.m_shapeB.m_count; ++i) {\n      vertices[i] = b2Transform.MulXV(transformB, this.m_shapeB.m_vertices[i], new b2Vec2());\n    }\n    g_debugDraw.DrawPolygon(vertices, this.m_shapeB.m_count, new b2Color(0.5, 0.7, 0.9));\n    g_debugDraw.DrawStringWorld(transformB.p.x, transformB.p.y, `${output.t.toFixed(3)}`);\n\n    sweepB.GetTransform(transformB, 1.0);\n    for (let i = 0; i < this.m_shapeB.m_count; ++i) {\n      vertices[i] = b2Transform.MulXV(transformB, this.m_shapeB.m_vertices[i], new b2Vec2());\n    }\n    g_debugDraw.DrawPolygon(vertices, this.m_shapeB.m_count, new b2Color(0.9, 0.5, 0.5));\n    g_debugDraw.DrawStringWorld(transformB.p.x, transformB.p.y, `${(1.0).toFixed(1)}`);\n\n    // #if 0\n    for (let t = 0.0; t < 1.0; t += 0.1) {\n      sweepB.GetTransform(transformB, t);\n      for (let i = 0; i < this.m_shapeB.m_count; ++i) {\n        vertices[i] = b2Transform.MulXV(transformB, this.m_shapeB.m_vertices[i], new b2Vec2());\n      }\n      g_debugDraw.DrawPolygon(vertices, this.m_shapeB.m_count, new b2Color(0.5, 0.5, 0.5));\n      g_debugDraw.DrawStringWorld(transformB.p.x, transformB.p.y, `${t.toFixed(1)}`);\n    }\n    // #endif\n  }\n\n  public static Create(): Test {\n    return new TimeOfImpact();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2CircleShape,\n  b2Cos,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Sin,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class CharacterCollision extends Test {\n  public m_character: b2Body;\n\n  constructor() {\n    super();\n\n    // Ground body\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Collinear edges with no adjacency information.\n    // This shows the problematic case where a box shape can hit\n    // an internal vertex.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-8.0, 1.0), new b2Vec2(-6.0, 1.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(-6.0, 1.0), new b2Vec2(-4.0, 1.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(-4.0, 1.0), new b2Vec2(-2.0, 1.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Chain shape\n    {\n      const bd = new b2BodyDef();\n      bd.angle = 0.25 * b2_pi;\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2Vec2[]*/\n      const vs = b2Vec2.MakeArray(4);\n      vs[0].Set(5.0, 7.0);\n      vs[1].Set(6.0, 8.0);\n      vs[2].Set(7.0, 8.0);\n      vs[3].Set(8.0, 7.0);\n      /*b2ChainShape*/\n      const shape = new b2ChainShape();\n      shape.CreateChain(vs, 4);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Square tiles. This shows that adjacency shapes may\n    // have non-smooth collision. There is no solution\n    // to this problem.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(1.0, 1.0, new b2Vec2(4.0, 3.0), 0.0);\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(1.0, 1.0, new b2Vec2(6.0, 3.0), 0.0);\n      ground.CreateFixture(shape, 0.0);\n      shape.SetAsBox(1.0, 1.0, new b2Vec2(8.0, 3.0), 0.0);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Square made from an edge loop. Collision should be smooth.\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2Vec2[]*/\n      const vs = b2Vec2.MakeArray(4);\n      vs[0].Set(-1.0, 3.0);\n      vs[1].Set(1.0, 3.0);\n      vs[2].Set(1.0, 5.0);\n      vs[3].Set(-1.0, 5.0);\n      /*b2ChainShape*/\n      const shape = new b2ChainShape();\n      shape.CreateChain(vs, 4);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Edge loop. Collision should be smooth.\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-10.0, 4.0);\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2Vec2[]*/\n      const vs = b2Vec2.MakeArray(10);\n      vs[0].Set(0.0, 0.0);\n      vs[1].Set(6.0, 0.0);\n      vs[2].Set(6.0, 2.0);\n      vs[3].Set(4.0, 1.0);\n      vs[4].Set(2.0, 2.0);\n      vs[5].Set(0.0, 2.0);\n      vs[6].Set(-2.0, 2.0);\n      vs[7].Set(-4.0, 3.0);\n      vs[8].Set(-6.0, 2.0);\n      vs[9].Set(-6.0, 0.0);\n      /*b2ChainShape*/\n      const shape = new b2ChainShape();\n      shape.CreateChain(vs, 10);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Square character 1\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-3.0, 8.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.fixedRotation = true;\n      bd.allowSleep = false;\n\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      body.CreateFixture(fd);\n    }\n\n    // Square character 2\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-5.0, 5.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.fixedRotation = true;\n      bd.allowSleep = false;\n\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.25, 0.25);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      body.CreateFixture(fd);\n    }\n\n    // Hexagon character\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-5.0, 8.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.fixedRotation = true;\n      bd.allowSleep = false;\n\n      const body = this.m_world.CreateBody(bd);\n\n      let angle = 0.0;\n      const delta = b2_pi / 3.0;\n      const vertices = b2Vec2.MakeArray(6);\n      for (let i = 0; i < 6; ++i) {\n        vertices[i].Set(0.5 * b2Cos(angle), 0.5 * b2Sin(angle));\n        angle += delta;\n      }\n\n      const shape = new b2PolygonShape();\n      shape.Set(vertices, 6);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      body.CreateFixture(fd);\n    }\n\n    // Circle character\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(3.0, 5.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.fixedRotation = true;\n      bd.allowSleep = false;\n\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.5;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      body.CreateFixture(fd);\n    }\n\n    // Circle character\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-7.0, 6.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.allowSleep = false;\n\n      this.m_character = this.m_world.CreateBody(bd);\n\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.25;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      fd.friction = 1.0;\n      this.m_character.CreateFixture(fd);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    const v = this.m_character.GetLinearVelocity().Clone();\n    v.x = -5.0;\n    this.m_character.SetLinearVelocity(v);\n\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'This tests various character collision shapes');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'Limitation: square and hexagon can snag on aligned boxes.',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'Feature: edge chains have smooth collision inside and out.',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new CharacterCollision();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2BodyDef, b2BodyType, b2PolygonShape, b2Timer, b2Vec2 } from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * This stress tests the dynamic tree broad-phase. This also\n * shows that tile based collision is _not_ smooth due to Box2D\n * not knowing about adjacency.\n */\n\nexport class Tiles extends Test {\n  public static readonly e_count = 20;\n\n  public m_fixtureCount = 0;\n  public m_createTime = 0.0;\n\n  constructor() {\n    super();\n\n    this.m_fixtureCount = 0;\n    /*b2Timer*/\n    const timer = new b2Timer();\n\n    {\n      /*float32*/\n      const a = 0.5;\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.position.y = -a;\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      {\n        /*int32*/\n        const N = 200;\n        /*int32*/\n        const M = 10;\n        /*b2Vec2*/\n        const position = new b2Vec2();\n        position.y = 0.0;\n        for (/*int32*/ let j = 0; j < M; ++j) {\n          position.x = -N * a;\n          for (/*int32*/ let i = 0; i < N; ++i) {\n            /*b2PolygonShape*/\n            const shape = new b2PolygonShape();\n            shape.SetAsBox(a, a, position, 0.0);\n            ground.CreateFixture(shape, 0.0);\n            ++this.m_fixtureCount;\n            position.x += 2.0 * a;\n          }\n          position.y -= 2.0 * a;\n        }\n      }\n      //    else\n      //    {\n      //      /*int32*/ const N = 200;\n      //      /*int32*/ const M = 10;\n      //      /*b2Vec2*/ const position = new b2Vec2();\n      //      position.x = -N * a;\n      //      for (/*int32*/ let i = 0; i < N; ++i)\n      //      {\n      //        position.y = 0.0;\n      //        for (/*int32*/ let j = 0; j < M; ++j)\n      //        {\n      //          /*b2PolygonShape*/ const shape = new b2PolygonShape();\n      //          shape.SetAsBox(a, a, position, 0.0);\n      //          ground.CreateFixture(shape, 0.0);\n      //          position.y -= 2.0 * a;\n      //        }\n      //        position.x += 2.0 * a;\n      //      }\n      //    }\n    }\n\n    {\n      /*float32*/\n      const a = 0.5;\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(a, a);\n\n      /*b2Vec2*/\n      const x = new b2Vec2(-7.0, 0.75);\n      /*b2Vec2*/\n      const y = new b2Vec2();\n      /*b2Vec2*/\n      const deltaX = new b2Vec2(0.5625, 1.25);\n      /*b2Vec2*/\n      const deltaY = new b2Vec2(1.125, 0.0);\n\n      for (/*int32*/ let i = 0; i < Tiles.e_count; ++i) {\n        y.Copy(x);\n\n        for (/*int32*/ let j = i; j < Tiles.e_count; ++j) {\n          /*b2BodyDef*/\n          const bd = new b2BodyDef();\n          bd.type = b2BodyType.b2_dynamicBody;\n          bd.position.Copy(y);\n\n          //if (i === 0 && j === 0)\n          //{\n          //  bd.allowSleep = false;\n          //}\n          //else\n          //{\n          //  bd.allowSleep = true;\n          //}\n\n          /*b2Body*/\n          const body = this.m_world.CreateBody(bd);\n          body.CreateFixture(shape, 5.0);\n          ++this.m_fixtureCount;\n          y.SelfAdd(deltaY);\n        }\n\n        x.SelfAdd(deltaX);\n      }\n    }\n\n    this.m_createTime = timer.GetMilliseconds();\n  }\n\n  public Step(settings: Settings): void {\n    /*const b2ContactManager*/\n    const cm = this.m_world.GetContactManager();\n    /*int32*/\n    const height = cm.m_broadPhase.GetTreeHeight();\n    /*int32*/\n    const leafCount = cm.m_broadPhase.GetProxyCount();\n    /*int32*/\n    const minimumNodeCount = 2 * leafCount - 1;\n    /*float32*/\n    const minimumHeight = Math.ceil(Math.log(minimumNodeCount) / Math.log(2.0));\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `dynamic tree height = ${height}, min = ${minimumHeight}`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    super.Step(settings);\n\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `create time = ${this.m_createTime.toFixed(2)} ms, fixture count = ${this.m_fixtureCount}`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    //b2DynamicTree* tree = this.m_world.this.m_contactManager.m_broadPhase.m_tree;\n\n    //if (this.m_stepCount === 400)\n    //{\n    //  tree.RebuildBottomUp();\n    //}\n  }\n\n  public static Create(): Test {\n    return new Tiles();\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { Test } from '@highduck/box2d-testbed';\nimport { b2BodyDef, b2BodyType, b2CircleShape, b2EdgeShape, b2Vec2 } from '@highduck/box2d';\n\nexport class HeavyOnLight extends Test {\n  constructor() {\n    super();\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    /*b2BodyDef*/\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Set(0.0, 0.5);\n    /*b2Body*/\n    let body = this.m_world.CreateBody(bd);\n\n    /*b2CircleShape*/\n    const shape = new b2CircleShape();\n    shape.m_radius = 0.5;\n    body.CreateFixture(shape, 10.0);\n\n    bd.position.Set(0.0, 6.0);\n    body = this.m_world.CreateBody(bd);\n    shape.m_radius = 5.0;\n    body.CreateFixture(shape, 10.0);\n  }\n\n  public static Create() {\n    return new HeavyOnLight();\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { Test } from '@highduck/box2d-testbed';\nimport { b2Body, b2BodyDef, b2BodyType, b2CircleShape, b2EdgeShape, b2Vec2 } from '@highduck/box2d';\n\nexport class HeavyOnLightTwo extends Test {\n  public m_heavy: b2Body | null = null;\n\n  constructor() {\n    super();\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    /*b2BodyDef*/\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Set(0.0, 2.5);\n    /*b2Body*/\n    let body = this.m_world.CreateBody(bd);\n\n    /*b2CircleShape*/\n    const shape = new b2CircleShape();\n    shape.m_radius = 0.5;\n    body.CreateFixture(shape, 10.0);\n\n    bd.position.Set(0.0, 3.5);\n    body = this.m_world.CreateBody(bd);\n    body.CreateFixture(shape, 10.0);\n  }\n\n  public ToggleHeavy() {\n    if (this.m_heavy !== null) {\n      this.m_world.DestroyBody(this.m_heavy);\n      this.m_heavy = null;\n    } else {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 9.0);\n      this.m_heavy = this.m_world.CreateBody(bd);\n\n      /*b2CircleShape*/\n      const shape = new b2CircleShape();\n      shape.m_radius = 5.0;\n      this.m_heavy.CreateFixture(shape, 10.0);\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'h':\n        this.ToggleHeavy();\n        break;\n    }\n  }\n\n  public static Create() {\n    return new HeavyOnLightTwo();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class VerticalStack extends Test {\n  public static readonly e_columnCount = 1;\n  public static readonly e_rowCount = 15;\n\n  public m_bullet: b2Body | null = null;\n  public m_bodies: b2Body[];\n  public m_indices: number[];\n\n  constructor() {\n    super();\n\n    this.m_bodies = new Array(VerticalStack.e_rowCount * VerticalStack.e_columnCount);\n    this.m_indices = new Array(VerticalStack.e_rowCount * VerticalStack.e_columnCount);\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(new b2Vec2(20.0, 0.0), new b2Vec2(20.0, 20.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    const xs = [0.0, -10.0, -5.0, 5.0, 10.0];\n\n    for (let j = 0; j < VerticalStack.e_columnCount; ++j) {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n      fd.friction = 0.3;\n\n      for (let i = 0; i < VerticalStack.e_rowCount; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n\n        const n = j * VerticalStack.e_rowCount + i;\n        // DEBUG: b2Assert(n < VerticalStack.e_rowCount * VerticalStack.e_columnCount);\n        this.m_indices[n] = n;\n        bd.userData = this.m_indices[n];\n\n        const x = 0.0;\n        //const x = b2RandomRange(-0.02, 0.02);\n        //const x = i % 2 === 0 ? -0.01 : 0.01;\n        bd.position.Set(xs[j] + x, 0.55 + 1.1 * i);\n        const body = this.m_world.CreateBody(bd);\n\n        this.m_bodies[n] = body;\n\n        body.CreateFixture(fd);\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case ',':\n        if (this.m_bullet) {\n          this.m_world.DestroyBody(this.m_bullet);\n          this.m_bullet = null;\n        }\n\n        {\n          const shape = new b2CircleShape();\n          shape.m_radius = 0.25;\n\n          const fd = new b2FixtureDef();\n          fd.shape = shape;\n          fd.density = 20.0;\n          fd.restitution = 0.05;\n\n          const bd = new b2BodyDef();\n          bd.type = b2BodyType.b2_dynamicBody;\n          bd.bullet = true;\n          bd.position.Set(-31.0, 5.0);\n\n          this.m_bullet = this.m_world.CreateBody(bd);\n          this.m_bullet.CreateFixture(fd);\n\n          this.m_bullet.SetLinearVelocity(new b2Vec2(400.0, 0.0));\n        }\n        break;\n      case 'b':\n        // g_blockSolve = !g_blockSolve;\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press: (,) to launch a bullet.');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    // g_debugDraw.DrawString(5, this.m_textLine, `Blocksolve = ${(g_blockSolve) ? (1) : (0)}`);\n    //if (this.m_stepCount === 300)\n    //{\n    //  if (this.m_bullet !== null)\n    //  {\n    //    this.m_world.DestroyBody(this.m_bullet);\n    //    this.m_bullet = null;\n    //  }\n\n    //  {\n    //    const shape = new b2CircleShape();\n    //    shape.m_radius = 0.25;\n\n    //    const fd = new b2FixtureDef();\n    //    fd.shape = shape;\n    //    fd.density = 20.0;\n    //    fd.restitution = 0.05;\n\n    //    const bd = new b2BodyDef();\n    //    bd.type = b2BodyType.b2_dynamicBody;\n    //    bd.bullet = true;\n    //    bd.position.Set(-31.0, 5.0);\n\n    //    this.m_bullet = this.m_world.CreateBody(bd);\n    //    this.m_bullet.CreateFixture(fd);\n\n    //    this.m_bullet.SetLinearVelocity(new b2Vec2(400.0, 0.0));\n    //  }\n    //}\n  }\n\n  public static Create(): Test {\n    return new VerticalStack();\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2PolygonShape,\n  b2PrismaticJointDef,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class BasicSliderCrank extends Test {\n  constructor() {\n    super();\n\n    /*b2Body*/\n    let ground = null;\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.position.Set(0.0, 17.0);\n      ground = this.m_world.CreateBody(bd);\n    }\n\n    {\n      /*b2Body*/\n      let prevBody = ground;\n\n      // Define crank.\n      {\n        /*b2PolygonShape*/\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(4.0, 1.0);\n\n        /*b2BodyDef*/\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-8.0, 20.0);\n        /*b2Body*/\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        /*b2RevoluteJointDef*/\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(-12.0, 20.0));\n        this.m_world.CreateJoint(rjd);\n\n        prevBody = body;\n      }\n\n      // Define connecting rod\n      {\n        /*b2PolygonShape*/\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(8.0, 1.0);\n\n        /*b2BodyDef*/\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(4.0, 20.0);\n        /*b2Body*/\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        /*b2RevoluteJointDef*/\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(-4.0, 20.0));\n        this.m_world.CreateJoint(rjd);\n\n        prevBody = body;\n      }\n\n      // Define piston\n      {\n        /*b2PolygonShape*/\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(3.0, 3.0);\n\n        /*b2BodyDef*/\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.fixedRotation = true;\n        bd.position.Set(12.0, 20.0);\n        /*b2Body*/\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        /*b2RevoluteJointDef*/\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(12.0, 20.0));\n        this.m_world.CreateJoint(rjd);\n\n        /*b2PrismaticJointDef*/\n        const pjd = new b2PrismaticJointDef();\n        pjd.Initialize(ground, body, new b2Vec2(12.0, 17.0), new b2Vec2(1.0, 0.0));\n        this.m_world.CreateJoint(pjd);\n      }\n    }\n  }\n\n  public static Create() {\n    return new BasicSliderCrank();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2PrismaticJoint,\n  b2PrismaticJointDef,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class SliderCrank extends Test {\n  public static readonly e_count = 30;\n\n  public m_joint1: b2RevoluteJoint;\n  public m_joint2: b2PrismaticJoint;\n\n  constructor() {\n    super();\n\n    let ground = null;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      let prevBody = ground;\n\n      // Define crank.\n      {\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(0.5, 2.0);\n\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.0, 7.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(0.0, 5.0));\n        rjd.motorSpeed = 1.0 * b2_pi;\n        rjd.maxMotorTorque = 10000.0;\n        rjd.enableMotor = true;\n        this.m_joint1 = this.m_world.CreateJoint(rjd);\n\n        prevBody = body;\n      }\n\n      // Define follower.\n      {\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(0.5, 4.0);\n\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.0, 13.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(0.0, 9.0));\n        rjd.enableMotor = false;\n        this.m_world.CreateJoint(rjd);\n\n        prevBody = body;\n      }\n\n      // Define piston\n      {\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(1.5, 1.5);\n\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.fixedRotation = true;\n        bd.position.Set(0.0, 17.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n\n        const rjd = new b2RevoluteJointDef();\n        rjd.Initialize(prevBody, body, new b2Vec2(0.0, 17.0));\n        this.m_world.CreateJoint(rjd);\n\n        const pjd = new b2PrismaticJointDef();\n        pjd.Initialize(ground, body, new b2Vec2(0.0, 17.0), new b2Vec2(0.0, 1.0));\n\n        pjd.maxMotorForce = 1000.0;\n        pjd.enableMotor = true;\n\n        this.m_joint2 = this.m_world.CreateJoint(pjd);\n      }\n\n      // Create a payload\n      {\n        const shape = new b2PolygonShape();\n        shape.SetAsBox(1.5, 1.5);\n\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.0, 23.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 2.0);\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'f':\n        this.m_joint2.EnableMotor(!this.m_joint2.IsMotorEnabled());\n        this.m_joint2.GetBodyB().SetAwake(true);\n        break;\n\n      case 'm':\n        this.m_joint1.EnableMotor(!this.m_joint1.IsMotorEnabled());\n        this.m_joint1.GetBodyB().SetAwake(true);\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (f) toggle friction, (m) toggle motor');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    const torque = this.m_joint1.GetMotorTorque(settings.hz);\n    g_debugDraw.DrawString(5, this.m_textLine, `Motor Torque = ${torque.toFixed(0)}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new SliderCrank();\n  }\n}\n","/*\n * Copyright (c) 2006-2009 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { Settings, Test } from '@highduck/box2d-testbed';\nimport { b2Body, b2BodyDef, b2BodyType, b2CircleShape, b2EdgeShape, b2Vec2 } from '@highduck/box2d';\n\nexport class SphereStack extends Test {\n  public static readonly e_count: number = 10;\n\n  public m_bodies: b2Body[] = [];\n\n  constructor() {\n    super();\n\n    {\n      const bd: b2BodyDef = new b2BodyDef();\n      const ground: b2Body = this.m_world.CreateBody(bd);\n\n      const shape: b2EdgeShape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape: b2CircleShape = new b2CircleShape();\n      shape.m_radius = 1.0;\n\n      for (let i = 0; i < SphereStack.e_count; ++i) {\n        const bd: b2BodyDef = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.0, 4.0 + 3.0 * i);\n\n        this.m_bodies[i] = this.m_world.CreateBody(bd);\n\n        this.m_bodies[i].CreateFixture(shape, 1.0);\n\n        this.m_bodies[i].SetLinearVelocity(new b2Vec2(0.0, -50.0));\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    // for (let i: number = 0; i < SphereStack.e_count; ++i)\n    // {\n    //   printf(\"%g \", this.m_bodies[i].GetWorldCenter().y);\n    // }\n\n    // for (let i: number = 0; i < SphereStack.e_count; ++i)\n    // {\n    //   printf(\"%g \", this.m_bodies[i].GetLinearVelocity().y);\n    // }\n\n    // printf(\"\\n\");\n  }\n\n  public static Create(): Test {\n    return new SphereStack();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2Clamp, b2Color, b2PolygonShape, b2RandomRange, b2Vec2 } from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ConvexHull extends Test {\n  public static readonly e_count = 10;\n\n  public m_test_points: b2Vec2[] = [];\n  public m_count = 0;\n  public m_auto = false;\n\n  constructor() {\n    super();\n\n    this.Generate();\n  }\n\n  public Generate(): void {\n    for (let i = 0; i < ConvexHull.e_count; ++i) {\n      let x = b2RandomRange(-10.0, 10.0);\n      let y = b2RandomRange(-10.0, 10.0);\n\n      // Clamp onto a square to help create collinearities.\n      // This will stress the convex hull algorithm.\n      x = b2Clamp(x, -8.0, 8.0);\n      y = b2Clamp(y, -8.0, 8.0);\n      this.m_test_points[i] = new b2Vec2(x, y);\n    }\n\n    this.m_count = ConvexHull.e_count;\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_auto = !this.m_auto;\n        break;\n\n      case 'g':\n        this.Generate();\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    const shape = new b2PolygonShape();\n    shape.Set(this.m_test_points, this.m_count);\n\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press g to generate a new random convex hull');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    g_debugDraw.DrawPolygon(shape.m_vertices, shape.m_count, new b2Color(0.9, 0.9, 0.9));\n\n    for (let i = 0; i < this.m_count; ++i) {\n      g_debugDraw.DrawPoint(this.m_test_points[i], 3.0, new b2Color(0.3, 0.9, 0.3));\n      g_debugDraw.DrawStringWorld(\n        this.m_test_points[i].x + 0.05,\n        this.m_test_points[i].y + 0.05,\n        `${i}`,\n      );\n    }\n\n    if (!shape.Validate()) {\n      this.m_textLine += 0;\n    }\n\n    if (this.m_auto) {\n      this.Generate();\n    }\n  }\n\n  public static Create(): Test {\n    return new ConvexHull();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2BodyDef,\n  b2BodyType,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Tumbler extends Test {\n  public static readonly e_count = 800;\n\n  public m_joint: b2RevoluteJoint;\n  public m_count = 0;\n\n  constructor() {\n    super();\n\n    const ground = this.m_world.CreateBody(new b2BodyDef());\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.allowSleep = false;\n      bd.position.Set(0.0, 10.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 10.0, new b2Vec2(10.0, 0.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(0.5, 10.0, new b2Vec2(-10.0, 0.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(10.0, 0.5, new b2Vec2(0.0, 10.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n      shape.SetAsBox(10.0, 0.5, new b2Vec2(0.0, -10.0), 0.0);\n      body.CreateFixture(shape, 5.0);\n\n      const jd = new b2RevoluteJointDef();\n      jd.bodyA = ground;\n      jd.bodyB = body;\n      jd.localAnchorA.Set(0.0, 10.0);\n      jd.localAnchorB.Set(0.0, 0.0);\n      jd.referenceAngle = 0.0;\n      jd.motorSpeed = 0.05 * b2_pi;\n      jd.maxMotorTorque = 1e8;\n      jd.enableMotor = true;\n      this.m_joint = this.m_world.CreateJoint(jd);\n    }\n\n    this.m_count = 0;\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    if (this.m_count < Tumbler.e_count) {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 10.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.125, 0.125);\n      body.CreateFixture(shape, 1.0);\n\n      ++this.m_count;\n    }\n  }\n\n  public static Create(): Test {\n    return new Tumbler();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2CircleShape,\n  b2Color,\n  b2Cos,\n  b2EdgeShape,\n  b2Fixture,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RandomRange,\n  b2RayCastCallback,\n  b2Sin,\n  b2Sqrt,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nclass RayCastClosestCallback extends b2RayCastCallback {\n  public m_hit = false;\n  public readonly m_point: b2Vec2 = new b2Vec2();\n  public readonly m_normal: b2Vec2 = new b2Vec2();\n  constructor() {\n    super();\n  }\n  public ReportFixture(\n    fixture: b2Fixture,\n    point: b2Vec2,\n    normal: b2Vec2,\n    fraction: number,\n  ): number {\n    const body: b2Body = fixture.GetBody();\n    const userData: any = body.GetUserData();\n    if (userData) {\n      const index: number = userData.index;\n      if (index === 0) {\n        // By returning -1, we instruct the calling code to ignore this fixture\n        // and continue the ray-cast to the next fixture.\n        return -1;\n      }\n    }\n\n    this.m_hit = true;\n    this.m_point.Copy(point);\n    this.m_normal.Copy(normal);\n\n    // By returning the current fraction, we instruct the calling code to clip the ray and\n    // continue the ray-cast to the next fixture. WARNING: do not assume that fixtures\n    // are reported in order. However, by clipping, we can always get the closest fixture.\n    return fraction;\n  }\n}\n\n// This callback finds any hit. Polygon 0 is filtered. For this type of query we are usually\n// just checking for obstruction, so the actual fixture and hit point are irrelevant.\nclass RayCastAnyCallback extends b2RayCastCallback {\n  public m_hit = false;\n  public readonly m_point: b2Vec2 = new b2Vec2();\n  public readonly m_normal: b2Vec2 = new b2Vec2();\n  constructor() {\n    super();\n  }\n  public ReportFixture(\n    fixture: b2Fixture,\n    point: b2Vec2,\n    normal: b2Vec2,\n    fraction: number,\n  ): number {\n    const body: b2Body = fixture.GetBody();\n    const userData: any = body.GetUserData();\n    if (userData) {\n      const index: number = userData.index;\n      if (index === 0) {\n        // By returning -1, we instruct the calling code to ignore this fixture\n        // and continue the ray-cast to the next fixture.\n        return -1;\n      }\n    }\n\n    this.m_hit = true;\n    this.m_point.Copy(point);\n    this.m_normal.Copy(normal);\n\n    // At this point we have a hit, so we know the ray is obstructed.\n    // By returning 0, we instruct the calling code to terminate the ray-cast.\n    return 0;\n  }\n}\n\n// This ray cast collects multiple hits along the ray. Polygon 0 is filtered.\n// The fixtures are not necessary reported in order, so we might not capture\n// the closest fixture.\nclass RayCastMultipleCallback extends b2RayCastCallback {\n  private static e_maxCount = 3;\n  public m_points: b2Vec2[] = b2Vec2.MakeArray(RayCastMultipleCallback.e_maxCount);\n  public m_normals: b2Vec2[] = b2Vec2.MakeArray(RayCastMultipleCallback.e_maxCount);\n  public m_count = 0;\n  constructor() {\n    super();\n  }\n  public ReportFixture(\n    fixture: b2Fixture,\n    point: b2Vec2,\n    normal: b2Vec2,\n    fraction: number,\n  ): number {\n    const body: b2Body = fixture.GetBody();\n    const userData: any = body.GetUserData();\n    if (userData) {\n      const index: number = userData.index;\n      if (index === 0) {\n        // By returning -1, we instruct the calling code to ignore this fixture\n        // and continue the ray-cast to the next fixture.\n        return -1;\n      }\n    }\n\n    // DEBUG: b2Assert(this.m_count < RayCastMultipleCallback.e_maxCount);\n\n    this.m_points[this.m_count].Copy(point);\n    this.m_normals[this.m_count].Copy(normal);\n    ++this.m_count;\n\n    if (this.m_count === RayCastMultipleCallback.e_maxCount) {\n      // At this point the buffer is full.\n      // By returning 0, we instruct the calling code to terminate the ray-cast.\n      return 0;\n    }\n\n    // By returning 1, we instruct the caller to continue without clipping the ray.\n    return 1;\n  }\n}\n\nenum RayCastMode {\n  e_closest,\n  e_any,\n  e_multiple,\n}\n\nexport class RayCast extends Test {\n  private static e_maxBodies = 256;\n\n  private m_bodyIndex = 0;\n  private m_bodies: Array<b2Body | null> = [];\n  private m_polygons: b2PolygonShape[] = [];\n  private m_circle: b2CircleShape = new b2CircleShape();\n  private m_edge: b2EdgeShape = new b2EdgeShape();\n\n  private m_angle = 0;\n\n  private m_mode: RayCastMode = RayCastMode.e_closest;\n\n  constructor() {\n    super();\n\n    for (let i = 0; i < 4; ++i) {\n      this.m_polygons[i] = new b2PolygonShape();\n    }\n\n    // Ground body\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const vertices: b2Vec2[] = [\n        /*3*/\n      ];\n      vertices[0] = new b2Vec2(-0.5, 0.0);\n      vertices[1] = new b2Vec2(0.5, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[0].Set(vertices, 3);\n    }\n\n    {\n      const vertices: b2Vec2[] = [\n        /*3*/\n      ];\n      vertices[0] = new b2Vec2(-0.1, 0.0);\n      vertices[1] = new b2Vec2(0.1, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[1].Set(vertices, 3);\n    }\n\n    {\n      const w = 1.0;\n      const b = w / (2.0 + b2Sqrt(2.0));\n      const s = b2Sqrt(2.0) * b;\n\n      const vertices: b2Vec2[] = [\n        /*8*/\n      ];\n      vertices[0] = new b2Vec2(0.5 * s, 0.0);\n      vertices[1] = new b2Vec2(0.5 * w, b);\n      vertices[2] = new b2Vec2(0.5 * w, b + s);\n      vertices[3] = new b2Vec2(0.5 * s, w);\n      vertices[4] = new b2Vec2(-0.5 * s, w);\n      vertices[5] = new b2Vec2(-0.5 * w, b + s);\n      vertices[6] = new b2Vec2(-0.5 * w, b);\n      vertices[7] = new b2Vec2(-0.5 * s, 0.0);\n\n      this.m_polygons[2].Set(vertices, 8);\n    }\n\n    {\n      this.m_polygons[3].SetAsBox(0.5, 0.5);\n    }\n\n    {\n      this.m_circle.m_radius = 0.5;\n    }\n\n    {\n      this.m_edge.Set(new b2Vec2(-1, 0), new b2Vec2(1, 0));\n    }\n\n    this.m_bodyIndex = 0;\n    for (let i = 0; i < RayCast.e_maxBodies; ++i) {\n      this.m_bodies[i] = null;\n    }\n\n    this.m_angle = 0;\n\n    this.m_mode = RayCastMode.e_closest;\n  }\n\n  public CreateBody(index: number): void {\n    const old_body = this.m_bodies[this.m_bodyIndex];\n    if (old_body !== null) {\n      this.m_world.DestroyBody(old_body);\n      this.m_bodies[this.m_bodyIndex] = null;\n    }\n\n    const bd: b2BodyDef = new b2BodyDef();\n\n    const x: number = b2RandomRange(-10.0, 10.0);\n    const y: number = b2RandomRange(0.0, 20.0);\n    bd.position.Set(x, y);\n    bd.angle = b2RandomRange(-b2_pi, b2_pi);\n\n    bd.userData = {};\n    bd.userData.index = index;\n\n    if (index === 4) {\n      bd.angularDamping = 0.02;\n    }\n\n    const new_body = (this.m_bodies[this.m_bodyIndex] = this.m_world.CreateBody(bd));\n\n    if (index < 4) {\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = this.m_polygons[index];\n      fd.friction = 0.3;\n      new_body.CreateFixture(fd);\n    } else if (index < 5) {\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = this.m_circle;\n      fd.friction = 0.3;\n      new_body.CreateFixture(fd);\n    } else {\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = this.m_edge;\n      fd.friction = 0.3;\n      new_body.CreateFixture(fd);\n    }\n\n    this.m_bodyIndex = (this.m_bodyIndex + 1) % RayCast.e_maxBodies;\n  }\n\n  public DestroyBody(): void {\n    for (let i = 0; i < RayCast.e_maxBodies; ++i) {\n      const body = this.m_bodies[i];\n      if (body !== null) {\n        this.m_world.DestroyBody(body);\n        this.m_bodies[i] = null;\n        return;\n      }\n    }\n  }\n\n  public Keyboard(key: string): void {\n    switch (key) {\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n        this.CreateBody(parseInt(key, 10) - 1);\n        break;\n\n      case 'd':\n        this.DestroyBody();\n        break;\n\n      case 'm':\n        if (this.m_mode === RayCastMode.e_closest) {\n          this.m_mode = RayCastMode.e_any;\n        } else if (this.m_mode === RayCastMode.e_any) {\n          this.m_mode = RayCastMode.e_multiple;\n        } else if (this.m_mode === RayCastMode.e_multiple) {\n          this.m_mode = RayCastMode.e_closest;\n        }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    const advanceRay: boolean = !settings.pause || settings.singleStep;\n\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press 1-6 to drop stuff, m to change the mode');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    switch (this.m_mode) {\n      case RayCastMode.e_closest:\n        g_debugDraw.DrawString(\n          5,\n          this.m_textLine,\n          'Ray-cast mode: closest - find closest fixture along the ray',\n        );\n        break;\n\n      case RayCastMode.e_any:\n        g_debugDraw.DrawString(5, this.m_textLine, 'Ray-cast mode: any - check for obstruction');\n        break;\n\n      case RayCastMode.e_multiple:\n        g_debugDraw.DrawString(\n          5,\n          this.m_textLine,\n          'Ray-cast mode: multiple - gather multiple fixtures',\n        );\n        break;\n    }\n\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    const L = 11.0;\n    const point1 = new b2Vec2(0.0, 10.0);\n    const d = new b2Vec2(L * b2Cos(this.m_angle), L * b2Sin(this.m_angle));\n    const point2 = b2Vec2.AddVV(point1, d, new b2Vec2());\n\n    if (this.m_mode === RayCastMode.e_closest) {\n      const callback = new RayCastClosestCallback();\n      this.m_world.RayCast(callback, point1, point2);\n\n      if (callback.m_hit) {\n        g_debugDraw.DrawPoint(callback.m_point, 5.0, new b2Color(0.4, 0.9, 0.4));\n        g_debugDraw.DrawSegment(point1, callback.m_point, new b2Color(0.8, 0.8, 0.8));\n        const head = b2Vec2.AddVV(\n          callback.m_point,\n          b2Vec2.MulSV(0.5, callback.m_normal, b2Vec2.s_t0),\n          new b2Vec2(),\n        );\n        g_debugDraw.DrawSegment(callback.m_point, head, new b2Color(0.9, 0.9, 0.4));\n      } else {\n        g_debugDraw.DrawSegment(point1, point2, new b2Color(0.8, 0.8, 0.8));\n      }\n    } else if (this.m_mode === RayCastMode.e_any) {\n      const callback = new RayCastAnyCallback();\n      this.m_world.RayCast(callback, point1, point2);\n\n      if (callback.m_hit) {\n        g_debugDraw.DrawPoint(callback.m_point, 5.0, new b2Color(0.4, 0.9, 0.4));\n        g_debugDraw.DrawSegment(point1, callback.m_point, new b2Color(0.8, 0.8, 0.8));\n        const head = b2Vec2.AddVV(\n          callback.m_point,\n          b2Vec2.MulSV(0.5, callback.m_normal, b2Vec2.s_t0),\n          new b2Vec2(),\n        );\n        g_debugDraw.DrawSegment(callback.m_point, head, new b2Color(0.9, 0.9, 0.4));\n      } else {\n        g_debugDraw.DrawSegment(point1, point2, new b2Color(0.8, 0.8, 0.8));\n      }\n    } else if (this.m_mode === RayCastMode.e_multiple) {\n      const callback = new RayCastMultipleCallback();\n      this.m_world.RayCast(callback, point1, point2);\n      g_debugDraw.DrawSegment(point1, point2, new b2Color(0.8, 0.8, 0.8));\n\n      for (let i = 0; i < callback.m_count; ++i) {\n        const p = callback.m_points[i];\n        const n = callback.m_normals[i];\n        g_debugDraw.DrawPoint(p, 5.0, new b2Color(0.4, 0.9, 0.4));\n        g_debugDraw.DrawSegment(point1, p, new b2Color(0.8, 0.8, 0.8));\n        const head = b2Vec2.AddVV(p, b2Vec2.MulSV(0.5, n, b2Vec2.s_t0), new b2Vec2());\n        g_debugDraw.DrawSegment(p, head, new b2Color(0.9, 0.9, 0.4));\n      }\n    }\n\n    if (advanceRay) {\n      this.m_angle += (0.25 * b2_pi) / 180.0;\n    }\n\n    /*\n    #if 0\n      // This case was failing.\n      {\n        b2Vec2 vertices[4];\n        //vertices[0].Set(-22.875f, -3.0f);\n        //vertices[1].Set(22.875f, -3.0f);\n        //vertices[2].Set(22.875f, 3.0f);\n        //vertices[3].Set(-22.875f, 3.0f);\n\n        b2PolygonShape shape;\n        //shape.Set(vertices, 4);\n        shape.SetAsBox(22.875f, 3.0f);\n\n        b2RayCastInput input;\n        input.p1.Set(10.2725f,1.71372f);\n        input.p2.Set(10.2353f,2.21807f);\n        //input.maxFraction = 0.567623f;\n        input.maxFraction = 0.56762173f;\n\n        b2Transform xf;\n        xf.SetIdentity();\n        xf.p.Set(23.0f, 5.0f);\n\n        b2RayCastOutput output;\n        bool hit;\n        hit = shape.RayCast(&output, input, xf);\n        hit = false;\n\n        b2Color color(1.0f, 1.0f, 1.0f);\n        b2Vec2 vs[4];\n        for (int32 i = 0; i < 4; ++i)\n        {\n          vs[i] = b2Mul(xf, shape.m_vertices[i]);\n        }\n\n        g_debugDraw.DrawPolygon(vs, 4, color);\n        g_debugDraw.DrawSegment(input.p1, input.p2, color);\n      }\n    #endif\n    */\n  }\n\n  public static Create(): Test {\n    return new RayCast();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_linearSlop,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Contact,\n  b2EdgeShape,\n  b2Fixture,\n  b2Manifold,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class OneSidedPlatform extends Test {\n  public m_radius = 0.0;\n  public m_top = 0.0;\n  public m_bottom = 0.0;\n  public m_state = OneSidedPlatform_State.e_unknown;\n  public m_platform: b2Fixture;\n  public m_character: b2Fixture;\n\n  constructor() {\n    super();\n\n    // Ground\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Platform\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(0.0, 10.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(3.0, 0.5);\n      this.m_platform = body.CreateFixture(shape, 0.0);\n\n      this.m_bottom = 10.0 - 0.5;\n      this.m_top = 10.0 + 0.5;\n    }\n\n    // Actor\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 12.0);\n      const body = this.m_world.CreateBody(bd);\n\n      this.m_radius = 0.5;\n      const shape = new b2CircleShape();\n      shape.m_radius = this.m_radius;\n      this.m_character = body.CreateFixture(shape, 20.0);\n\n      body.SetLinearVelocity(new b2Vec2(0.0, -50.0));\n\n      this.m_state = OneSidedPlatform_State.e_unknown;\n    }\n  }\n\n  public PreSolve(contact: b2Contact, oldManifold: b2Manifold) {\n    super.PreSolve(contact, oldManifold);\n\n    const fixtureA = contact.GetFixtureA();\n    const fixtureB = contact.GetFixtureB();\n\n    if (fixtureA !== this.m_platform && fixtureA !== this.m_character) {\n      return;\n    }\n\n    if (fixtureB !== this.m_platform && fixtureB !== this.m_character) {\n      return;\n    }\n\n    const position = this.m_character.GetBody().GetPosition();\n\n    if (position.y < this.m_top + this.m_radius - 3.0 * b2_linearSlop) {\n      contact.SetEnabled(false);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new OneSidedPlatform();\n  }\n}\n\nexport enum OneSidedPlatform_State {\n  e_unknown = 0,\n  e_above = 1,\n  e_below = 2,\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2PrismaticJointDef,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class DumpShell extends Test {\n  constructor() {\n    super();\n\n    // dump begin\n    /*b2Vec2*/\n    const g = new b2Vec2(0.0, 0.0);\n    this.m_world.SetGravity(g);\n    /*b2Body*/\n    const bodies = new Array(4);\n    /*b2Joint*/\n    const joints = new Array(2);\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_staticBody;\n      bd.position.Set(0.0, 0.0);\n      bd.angle = 0.0;\n      bd.linearVelocity.Set(0.0, 0.0);\n      bd.angularVelocity = 0.0;\n      bd.linearDamping = 0.0;\n      bd.angularDamping = 0.0;\n      bd.allowSleep = true;\n      bd.awake = true;\n      bd.fixedRotation = false;\n      bd.bullet = false;\n      bd.active = true;\n      bd.gravityScale = 1.0;\n\n      bodies[0] = this.m_world.CreateBody(bd);\n\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 10.0;\n        fd.restitution = 0.0;\n        fd.density = 0.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2EdgeShape*/\n        const shape = new b2EdgeShape();\n        shape.m_radius = 0.009999999776483;\n        shape.m_vertex0.Set(0.0, 0.0);\n        shape.m_vertex1.Set(0.0, 0.0);\n        shape.m_vertex2.Set(44.521739959716797, 0.0);\n        shape.m_vertex3.Set(0.0, 0.0);\n        shape.m_hasVertex0 = false;\n        shape.m_hasVertex3 = false;\n\n        fd.shape = shape;\n\n        bodies[0].CreateFixture(fd);\n      }\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 10.0;\n        fd.restitution = 0.0;\n        fd.density = 0.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2EdgeShape*/\n        const shape = new b2EdgeShape();\n        shape.m_radius = 0.009999999776483;\n        shape.m_vertex0.Set(0.0, 0.0);\n        shape.m_vertex1.Set(0.0, 16.695652008056641);\n        shape.m_vertex2.Set(44.521739959716797, 16.695652008056641);\n        shape.m_vertex3.Set(0.0, 0.0);\n        shape.m_hasVertex0 = false;\n        shape.m_hasVertex3 = false;\n\n        fd.shape = shape;\n\n        bodies[0].CreateFixture(fd);\n      }\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 10.0;\n        fd.restitution = 0.0;\n        fd.density = 0.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2EdgeShape*/\n        const shape = new b2EdgeShape();\n        shape.m_radius = 0.009999999776483;\n        shape.m_vertex0.Set(0.0, 0.0);\n        shape.m_vertex1.Set(0.0, 16.695652008056641);\n        shape.m_vertex2.Set(0.0, 0.0);\n        shape.m_vertex3.Set(0.0, 0.0);\n        shape.m_hasVertex0 = false;\n        shape.m_hasVertex3 = false;\n\n        fd.shape = shape;\n\n        bodies[0].CreateFixture(fd);\n      }\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 10.0;\n        fd.restitution = 0.0;\n        fd.density = 0.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2EdgeShape*/\n        const shape = new b2EdgeShape();\n        shape.m_radius = 0.009999999776483;\n        shape.m_vertex0.Set(0.0, 0.0);\n        shape.m_vertex1.Set(44.521739959716797, 16.695652008056641);\n        shape.m_vertex2.Set(44.521739959716797, 0.0);\n        shape.m_vertex3.Set(0.0, 0.0);\n        shape.m_hasVertex0 = false;\n        shape.m_hasVertex3 = false;\n\n        fd.shape = shape;\n\n        bodies[0].CreateFixture(fd);\n      }\n    }\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.847826063632965, 2.5);\n      bd.angle = 0.0;\n      bd.linearVelocity.Set(0.0, 0.0);\n      bd.angularVelocity = 0.0;\n      bd.linearDamping = 0.5;\n      bd.angularDamping = 0.5;\n      bd.allowSleep = true;\n      bd.awake = true;\n      bd.fixedRotation = false;\n      bd.bullet = false;\n      bd.active = true;\n      bd.gravityScale = 1.0;\n\n      bodies[1] = this.m_world.CreateBody(bd);\n\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 1.0;\n        fd.restitution = 0.5;\n        fd.density = 10.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2PolygonShape*/\n        const shape = new b2PolygonShape();\n        /*b2Vec2[]*/\n        const vs = b2Vec2.MakeArray(8);\n        vs[0].Set(6.907599925994873, 0.327199995517731);\n        vs[1].Set(-0.322800010442734, 0.282599985599518);\n        vs[2].Set(-0.322800010442734, -0.295700013637543);\n        vs[3].Set(6.885900020599365, -0.364100009202957);\n        shape.Set(vs, 4);\n\n        fd.shape = shape;\n\n        bodies[1].CreateFixture(fd);\n      }\n    }\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(13.043478012084959, 2.5);\n      bd.angle = 0.0;\n      bd.linearVelocity.Set(0.0, 0.0);\n      bd.angularVelocity = 0.0;\n      bd.linearDamping = 0.5;\n      bd.angularDamping = 0.5;\n      bd.allowSleep = true;\n      bd.awake = true;\n      bd.fixedRotation = false;\n      bd.bullet = false;\n      bd.active = true;\n      bd.gravityScale = 1.0;\n\n      bodies[2] = this.m_world.CreateBody(bd);\n\n      {\n        /*b2FixtureDef*/\n        const fd = new b2FixtureDef();\n        fd.friction = 1.0;\n        fd.restitution = 0.5;\n        fd.density = 10.0;\n        fd.isSensor = false;\n        fd.filter.categoryBits = 1;\n        fd.filter.maskBits = 65535;\n        fd.filter.groupIndex = 0;\n        /*b2PolygonShape*/\n        const shape = new b2PolygonShape();\n        /*b2Vec2[]*/\n        const vs = b2Vec2.MakeArray(8);\n        vs[0].Set(0.200000002980232, -0.300000011920929);\n        vs[1].Set(0.200000002980232, 0.200000002980232);\n        vs[2].Set(-6.900000095367432, 0.200000002980232);\n        vs[3].Set(-6.900000095367432, -0.300000011920929);\n        shape.Set(vs, 4);\n\n        fd.shape = shape;\n\n        bodies[2].CreateFixture(fd);\n      }\n    }\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_staticBody;\n      bd.position.Set(0.0, 0.0);\n      bd.angle = 0.0;\n      bd.linearVelocity.Set(0.0, 0.0);\n      bd.angularVelocity = 0.0;\n      bd.linearDamping = 0.0;\n      bd.angularDamping = 0.0;\n      bd.allowSleep = true;\n      bd.awake = true;\n      bd.fixedRotation = false;\n      bd.bullet = false;\n      bd.active = true;\n      bd.gravityScale = 1.0;\n\n      bodies[3] = this.m_world.CreateBody(bd);\n    }\n    {\n      /*b2RevoluteJointDef*/\n      const jd = new b2RevoluteJointDef();\n      jd.bodyA = bodies[1];\n      jd.bodyB = bodies[0];\n      jd.collideConnected = false;\n      jd.localAnchorA.Set(0.0, 0.0);\n      jd.localAnchorB.Set(0.847826063632965, 2.5);\n      jd.referenceAngle = 0.0;\n      jd.enableLimit = false;\n      jd.lowerAngle = 0.0;\n      jd.upperAngle = 0.0;\n      jd.enableMotor = false;\n      jd.motorSpeed = 0.0;\n      jd.maxMotorTorque = 0.0;\n      joints[0] = this.m_world.CreateJoint(jd);\n    }\n    {\n      /*b2PrismaticJointDef*/\n      const jd = new b2PrismaticJointDef();\n      jd.bodyA = bodies[1];\n      jd.bodyB = bodies[2];\n      jd.collideConnected = false;\n      jd.localAnchorA.Set(0.0, 0.0);\n      jd.localAnchorB.Set(-12.195652008056641, 0.0);\n      jd.localAxisA.Set(-1.0, 0.0);\n      jd.referenceAngle = 0.0;\n      jd.enableLimit = true;\n      jd.lowerTranslation = -20.0;\n      jd.upperTranslation = 0.0;\n      jd.enableMotor = true;\n      jd.motorSpeed = 0.0;\n      jd.maxMotorForce = 10.0;\n      joints[1] = this.m_world.CreateJoint(jd);\n    }\n    // dump end\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new DumpShell();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2FrictionJointDef,\n  b2PolygonShape,\n  b2Rot,\n  b2Sqrt,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ApplyForce extends Test {\n  public m_body: b2Body;\n\n  constructor() {\n    super();\n\n    this.m_world.SetGravity(new b2Vec2(0.0, 0.0));\n\n    /*float32*/\n    const k_restitution = 0.4;\n\n    /*b2Body*/\n    let ground = null;\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.position.Set(0.0, 20.0);\n      ground = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n\n      /*b2FixtureDef*/\n      const sd = new b2FixtureDef();\n      sd.shape = shape;\n      sd.density = 0.0;\n      sd.restitution = k_restitution;\n\n      // Left vertical\n      shape.Set(new b2Vec2(-20.0, -20.0), new b2Vec2(-20.0, 20.0));\n      ground.CreateFixture(sd);\n\n      // Right vertical\n      shape.Set(new b2Vec2(20.0, -20.0), new b2Vec2(20.0, 20.0));\n      ground.CreateFixture(sd);\n\n      // Top horizontal\n      shape.Set(new b2Vec2(-20.0, 20.0), new b2Vec2(20.0, 20.0));\n      ground.CreateFixture(sd);\n\n      // Bottom horizontal\n      shape.Set(new b2Vec2(-20.0, -20.0), new b2Vec2(20.0, -20.0));\n      ground.CreateFixture(sd);\n    }\n\n    {\n      /*b2Transform*/\n      const xf1 = new b2Transform();\n      xf1.q.SetAngle(0.3524 * b2_pi);\n      xf1.p.Copy(b2Rot.MulRV(xf1.q, new b2Vec2(1.0, 0.0), new b2Vec2()));\n\n      /*b2Vec2[]*/\n      const vertices = [];\n      vertices[0] = b2Transform.MulXV(xf1, new b2Vec2(-1.0, 0.0), new b2Vec2());\n      vertices[1] = b2Transform.MulXV(xf1, new b2Vec2(1.0, 0.0), new b2Vec2());\n      vertices[2] = b2Transform.MulXV(xf1, new b2Vec2(0.0, 0.5), new b2Vec2());\n\n      /*b2PolygonShape*/\n      const poly1 = new b2PolygonShape();\n      poly1.Set(vertices, 3);\n\n      /*b2FixtureDef*/\n      const sd1 = new b2FixtureDef();\n      sd1.shape = poly1;\n      sd1.density = 4.0;\n\n      /*b2Transform*/\n      const xf2 = new b2Transform();\n      xf2.q.SetAngle(-0.3524 * b2_pi);\n      xf2.p.Copy(b2Rot.MulRV(xf2.q, new b2Vec2(-1.0, 0.0), new b2Vec2()));\n\n      vertices[0] = b2Transform.MulXV(xf2, new b2Vec2(-1.0, 0.0), new b2Vec2());\n      vertices[1] = b2Transform.MulXV(xf2, new b2Vec2(1.0, 0.0), new b2Vec2());\n      vertices[2] = b2Transform.MulXV(xf2, new b2Vec2(0.0, 0.5), new b2Vec2());\n\n      /*b2PolygonShape*/\n      const poly2 = new b2PolygonShape();\n      poly2.Set(vertices, 3);\n\n      /*b2FixtureDef*/\n      const sd2 = new b2FixtureDef();\n      sd2.shape = poly2;\n      sd2.density = 4.0;\n\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.angularDamping = 2.0;\n      bd.linearDamping = 0.5;\n\n      bd.position.Set(0.0, 2.0);\n      bd.angle = b2_pi;\n      bd.allowSleep = false;\n      this.m_body = this.m_world.CreateBody(bd);\n      this.m_body.CreateFixture(sd1);\n      this.m_body.CreateFixture(sd2);\n    }\n\n    {\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n      fd.friction = 0.3;\n\n      for (/*int*/ let i = 0; i < 10; ++i) {\n        /*b2BodyDef*/\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n\n        bd.position.Set(0.0, 5.0 + 1.54 * i);\n        /*b2Body*/\n        const body = this.m_world.CreateBody(bd);\n\n        body.CreateFixture(fd);\n\n        /*float32*/\n        const gravity = 10.0;\n        /*float32*/\n        const I = body.GetInertia();\n        /*float32*/\n        const mass = body.GetMass();\n\n        // For a circle: I = 0.5 * m * r * r ==> r = sqrt(2 * I / m)\n        /*float32*/\n        const radius = b2Sqrt((2.0 * I) / mass);\n\n        /*b2FrictionJointDef*/\n        const jd = new b2FrictionJointDef();\n        jd.localAnchorA.SetZero();\n        jd.localAnchorB.SetZero();\n        jd.bodyA = ground;\n        jd.bodyB = body;\n        jd.collideConnected = true;\n        jd.maxForce = mass * gravity;\n        jd.maxTorque = mass * radius * gravity;\n\n        this.m_world.CreateJoint(jd);\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'w':\n        {\n          /*b2Vec2*/\n          const f = this.m_body.GetWorldVector(new b2Vec2(0.0, -200.0), new b2Vec2());\n          /*b2Vec2*/\n          const p = this.m_body.GetWorldPoint(new b2Vec2(0.0, 2.0), new b2Vec2());\n          this.m_body.ApplyForce(f, p);\n        }\n        break;\n\n      case 'a':\n        {\n          this.m_body.ApplyTorque(50.0);\n        }\n        break;\n\n      case 'd':\n        {\n          this.m_body.ApplyTorque(-50.0);\n        }\n        break;\n    }\n\n    super.Keyboard(key);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new ApplyForce();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_gjkStats,\n  b2_toiStats,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2RandomRange,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ContinuousTest extends Test {\n  public m_body: b2Body;\n  public m_angularVelocity = 0.0;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(0.0, 0.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const edge = new b2EdgeShape();\n\n      edge.Set(new b2Vec2(-10.0, 0.0), new b2Vec2(10.0, 0.0));\n      body.CreateFixture(edge, 0.0);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.2, 1.0, new b2Vec2(0.5, 1.0), 0.0);\n      body.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 20.0);\n      //bd.angle = 0.1;\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2.0, 0.1);\n\n      this.m_body = this.m_world.CreateBody(bd);\n      this.m_body.CreateFixture(shape, 1.0);\n\n      this.m_angularVelocity = b2RandomRange(-50.0, 50.0);\n      //this.m_angularVelocity = 46.661274;\n      this.m_body.SetLinearVelocity(new b2Vec2(0.0, -100.0));\n      this.m_body.SetAngularVelocity(this.m_angularVelocity);\n    }\n    /*\n        else\n        {\n          const bd = new b2BodyDef();\n          bd.type = b2BodyType.b2_dynamicBody;\n          bd.position.Set(0.0, 2.0);\n          const body = this.m_world.CreateBody(bd);\n          const shape = new b2CircleShape();\n          shape.m_p.SetZero();\n          shape.m_radius = 0.5;\n          body.CreateFixture(shape, 1.0);\n          bd.bullet = true;\n          bd.position.Set(0.0, 10.0);\n          body = this.m_world.CreateBody(bd);\n          body.CreateFixture(shape, 1.0);\n          body.SetLinearVelocity(new b2Vec2(0.0, -100.0));\n        }\n        */\n\n    b2_gjkStats.Reset();\n    b2_toiStats.Reset();\n  }\n\n  public Launch() {\n    b2_gjkStats.Reset();\n    b2_toiStats.Reset();\n\n    this.m_body.SetTransformVec(new b2Vec2(0.0, 20.0), 0.0);\n    this.m_angularVelocity = b2RandomRange(-50.0, 50.0);\n    this.m_body.SetLinearVelocity(new b2Vec2(0.0, -100.0));\n    this.m_body.SetAngularVelocity(this.m_angularVelocity);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    if (b2_gjkStats.calls > 0) {\n      // g_debugDraw.DrawString(5, this.m_textLine, \"gjk calls = %d, ave gjk iters = %3.1f, max gjk iters = %d\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `gjk calls = ${b2_gjkStats.calls.toFixed(0)}, ave gjk iters = ${(\n          b2_gjkStats.iters / b2_gjkStats.calls\n        ).toFixed(1)}, max gjk iters = ${b2_gjkStats.maxIters.toFixed(0)}`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    if (b2_toiStats.calls > 0) {\n      // g_debugDraw.DrawString(5, this.m_textLine, \"toi [max] calls = %d, ave toi iters = %3.1f [%d]\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `toi [max] calls = ${b2_toiStats.calls}, ave toi iters = ${(\n          b2_toiStats.iters / b2_toiStats.calls\n        ).toFixed(1)} [${b2_toiStats.maxRootIters}]`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n\n      // g_debugDraw.DrawString(5, this.m_textLine, \"ave [max] toi root iters = %3.1f [%d]\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `ave [max] toi root iters = ${(b2_toiStats.rootIters / b2_toiStats.calls).toFixed(\n          1,\n        )} [${b2_toiStats.maxRootIters.toFixed(0)}]`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n\n      // g_debugDraw.DrawString(5, this.m_textLine, \"ave [max] toi time = %.1f [%.1f] (microseconds)\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `ave [max] toi time = ${((1000.0 * b2_toiStats.time) / b2_toiStats.calls).toFixed(1)} [${(\n          1000.0 * b2_toiStats.maxTime\n        ).toFixed(1)}] (microseconds)`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    if (this.m_stepCount % 60 === 0) {\n      this.Launch();\n    }\n  }\n\n  public static Create(): Test {\n    return new ContinuousTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2Color,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2MotorJoint,\n  b2MotorJointDef,\n  b2PolygonShape,\n  b2Sin,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class MotorJoint extends Test {\n  public m_joint: b2MotorJoint;\n  public m_time = 0;\n  public m_go = false;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n\n      ground.CreateFixture(fd);\n    }\n\n    // Define motorized body\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 8.0);\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2.0, 0.5);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.6;\n      fd.density = 2.0;\n      body.CreateFixture(fd);\n\n      const mjd = new b2MotorJointDef();\n      mjd.Initialize(ground, body);\n      mjd.maxForce = 1000.0;\n      mjd.maxTorque = 1000.0;\n      this.m_joint = this.m_world.CreateJoint(mjd);\n    }\n\n    this.m_go = false;\n    this.m_time = 0.0;\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 's':\n        this.m_go = !this.m_go;\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    if (this.m_go && settings.hz > 0.0) {\n      this.m_time += 1.0 / settings.hz;\n    }\n\n    /*b2Vec2*/\n    const linearOffset = new b2Vec2();\n    linearOffset.x = 6.0 * b2Sin(2.0 * this.m_time);\n    linearOffset.y = 8.0 + 4.0 * b2Sin(1.0 * this.m_time);\n\n    /*float32*/\n    const angularOffset = 4.0 * this.m_time;\n\n    this.m_joint.SetLinearOffset(linearOffset);\n    this.m_joint.SetAngularOffset(angularOffset);\n\n    g_debugDraw.DrawPoint(linearOffset, 4.0, new b2Color(0.9, 0.9, 0.9));\n\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (s) pause');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new MotorJoint();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2Vec2_zero,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Mobile extends Test {\n  public static readonly e_depth = 4;\n\n  constructor() {\n    super();\n\n    // Create ground body.\n    const bodyDef = new b2BodyDef();\n    bodyDef.position.Set(0.0, 20.0);\n    const ground = this.m_world.CreateBody(bodyDef);\n\n    const a = 0.5;\n    const h = new b2Vec2(0.0, a);\n\n    const root = this.AddNode(ground, b2Vec2_zero, 0, 3.0, a);\n\n    const jointDef = new b2RevoluteJointDef();\n    jointDef.bodyA = ground;\n    jointDef.bodyB = root;\n    jointDef.localAnchorA.SetZero();\n    jointDef.localAnchorB.Copy(h);\n    this.m_world.CreateJoint(jointDef);\n  }\n\n  public AddNode(\n    parent: b2Body,\n    localAnchor: b2Vec2,\n    depth: number,\n    offset: number,\n    a: number,\n  ): b2Body {\n    const /*float32*/ density = 20.0;\n    const /*b2Vec2*/ h = new b2Vec2(0.0, a);\n\n    //  b2Vec2 p = parent->GetPosition() + localAnchor - h;\n    const /*b2Vec2*/ p = parent.GetPosition().Clone().SelfAdd(localAnchor).SelfSub(h);\n\n    const /*b2BodyDef*/ bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Copy(p);\n    const /*b2Body*/ body = this.m_world.CreateBody(bodyDef);\n\n    const /*b2PolygonShape*/ shape = new b2PolygonShape();\n    shape.SetAsBox(0.25 * a, a);\n    body.CreateFixture(shape, density);\n\n    if (depth === Mobile.e_depth) {\n      return body;\n    }\n\n    const /*b2Vec2*/ a1 = new b2Vec2(offset, -a);\n    const /*b2Vec2*/ a2 = new b2Vec2(-offset, -a);\n    const /*b2Body*/ body1 = this.AddNode(body, a1, depth + 1, 0.5 * offset, a);\n    const /*b2Body*/ body2 = this.AddNode(body, a2, depth + 1, 0.5 * offset, a);\n\n    const /*b2RevoluteJointDef*/ jointDef = new b2RevoluteJointDef();\n    jointDef.bodyA = body;\n    jointDef.localAnchorB.Copy(h);\n\n    jointDef.localAnchorA.Copy(a1);\n    jointDef.bodyB = body1;\n    this.m_world.CreateJoint(jointDef);\n\n    jointDef.localAnchorA.Copy(a2);\n    jointDef.bodyB = body2;\n    this.m_world.CreateJoint(jointDef);\n\n    return body;\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Mobile();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2Vec2_zero,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class MobileBalanced extends Test {\n  public static readonly e_depth = 4;\n\n  constructor() {\n    super();\n\n    // Create ground body.\n    const /*b2BodyDef*/ bodyDef = new b2BodyDef();\n    bodyDef.position.Set(0.0, 20.0);\n    const ground = this.m_world.CreateBody(bodyDef);\n\n    const /*float32*/ a = 0.5;\n    const /*b2Vec2*/ h = new b2Vec2(0.0, a);\n\n    const /*b2Body*/ root = this.AddNode(ground, b2Vec2_zero, 0, 3.0, a);\n\n    const /*b2RevoluteJointDef*/ jointDef = new b2RevoluteJointDef();\n    jointDef.bodyA = ground;\n    jointDef.bodyB = root;\n    jointDef.localAnchorA.SetZero();\n    jointDef.localAnchorB.Copy(h);\n    this.m_world.CreateJoint(jointDef);\n  }\n\n  public AddNode(\n    parent: b2Body,\n    localAnchor: b2Vec2,\n    depth: number,\n    offset: number,\n    a: number,\n  ): b2Body {\n    const /*float32*/ density = 20.0;\n    const /*b2Vec2*/ h = new b2Vec2(0.0, a);\n\n    //  b2Vec2 p = parent->GetPosition() + localAnchor - h;\n    const /*b2Vec2*/ p = parent.GetPosition().Clone().SelfAdd(localAnchor).SelfSub(h);\n\n    const /*b2BodyDef*/ bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Copy(p);\n    const /*b2Body*/ body = this.m_world.CreateBody(bodyDef);\n\n    const /*b2PolygonShape*/ shape = new b2PolygonShape();\n    shape.SetAsBox(0.25 * a, a);\n    body.CreateFixture(shape, density);\n\n    if (depth === MobileBalanced.e_depth) {\n      return body;\n    }\n\n    shape.SetAsBox(offset, 0.25 * a, new b2Vec2(0, -a), 0.0);\n    body.CreateFixture(shape, density);\n\n    const /*b2Vec2*/ a1 = new b2Vec2(offset, -a);\n    const /*b2Vec2*/ a2 = new b2Vec2(-offset, -a);\n    const /*b2Body*/ body1 = this.AddNode(body, a1, depth + 1, 0.5 * offset, a);\n    const /*b2Body*/ body2 = this.AddNode(body, a2, depth + 1, 0.5 * offset, a);\n\n    const /*b2RevoluteJointDef*/ jointDef = new b2RevoluteJointDef();\n    jointDef.bodyA = body;\n    jointDef.localAnchorB.Copy(h);\n\n    jointDef.localAnchorA.Copy(a1);\n    jointDef.bodyB = body1;\n    this.m_world.CreateJoint(jointDef);\n\n    jointDef.localAnchorA.Copy(a2);\n    jointDef.bodyB = body2;\n    this.m_world.CreateJoint(jointDef);\n\n    return body;\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new MobileBalanced();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2Contact,\n  b2EdgeShape,\n  b2Fixture,\n  b2FixtureDef,\n  b2Manifold,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ConveyorBelt extends Test {\n  public m_platform: b2Fixture;\n\n  constructor() {\n    super();\n\n    // Ground\n    {\n      const bd = new b2BodyDef();\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Platform\n    {\n      const bd = new b2BodyDef();\n      bd.position.Set(-5.0, 5.0);\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(10.0, 0.5);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.8;\n      this.m_platform = body.CreateFixture(fd);\n    }\n\n    // Boxes\n    for (/*int*/ let i = 0; i < 5; ++i) {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-10.0 + 2.0 * i, 7.0);\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n      body.CreateFixture(shape, 20.0);\n    }\n  }\n\n  public PreSolve(contact: b2Contact, oldManifold: b2Manifold) {\n    super.PreSolve(contact, oldManifold);\n\n    /*b2Fixture*/\n    const fixtureA = contact.GetFixtureA();\n    /*b2Fixture*/\n    const fixtureB = contact.GetFixtureB();\n\n    if (fixtureA === this.m_platform) {\n      contact.SetTangentSpeed(5.0);\n    }\n\n    if (fixtureB === this.m_platform) {\n      contact.SetTangentSpeed(-5.0);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new ConveyorBelt();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2GearJoint,\n  b2GearJointDef,\n  b2PolygonShape,\n  b2PrismaticJoint,\n  b2PrismaticJointDef,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Gears extends Test {\n  public m_joint1: b2RevoluteJoint;\n  public m_joint2: b2RevoluteJoint;\n  public m_joint3: b2PrismaticJoint;\n  public m_joint4: b2GearJoint;\n  public m_joint5: b2GearJoint;\n\n  constructor() {\n    super();\n\n    let ground = null;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-50.0, 0.0), new b2Vec2(50.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const circle1 = new b2CircleShape();\n      circle1.m_radius = 1.0;\n\n      const box = new b2PolygonShape();\n      box.SetAsBox(0.5, 5.0);\n\n      const circle2 = new b2CircleShape();\n      circle2.m_radius = 2.0;\n\n      const bd1 = new b2BodyDef();\n      bd1.type = b2BodyType.b2_staticBody;\n      bd1.position.Set(10.0, 9.0);\n      const body1 = this.m_world.CreateBody(bd1);\n      body1.CreateFixture(circle1, 5.0);\n\n      const bd2 = new b2BodyDef();\n      bd2.type = b2BodyType.b2_dynamicBody;\n      bd2.position.Set(10.0, 8.0);\n      const body2 = this.m_world.CreateBody(bd2);\n      body2.CreateFixture(box, 5.0);\n\n      const bd3 = new b2BodyDef();\n      bd3.type = b2BodyType.b2_dynamicBody;\n      bd3.position.Set(10.0, 6.0);\n      const body3 = this.m_world.CreateBody(bd3);\n      body3.CreateFixture(circle2, 5.0);\n\n      const jd1 = new b2RevoluteJointDef();\n      jd1.Initialize(body2, body1, bd1.position);\n      const joint1: b2RevoluteJoint = this.m_world.CreateJoint(jd1);\n\n      const jd2 = new b2RevoluteJointDef();\n      jd2.Initialize(body2, body3, bd3.position);\n      const joint2: b2RevoluteJoint = this.m_world.CreateJoint(jd2);\n\n      const jd4 = new b2GearJointDef();\n      jd4.bodyA = body1;\n      jd4.bodyB = body3;\n      jd4.joint1 = joint1;\n      jd4.joint2 = joint2;\n      jd4.ratio = circle2.m_radius / circle1.m_radius;\n      this.m_world.CreateJoint(jd4);\n    }\n\n    {\n      const circle1 = new b2CircleShape();\n      circle1.m_radius = 1.0;\n\n      const circle2 = new b2CircleShape();\n      circle2.m_radius = 2.0;\n\n      const box = new b2PolygonShape();\n      box.SetAsBox(0.5, 5.0);\n\n      const bd1 = new b2BodyDef();\n      bd1.type = b2BodyType.b2_dynamicBody;\n      bd1.position.Set(-3.0, 12.0);\n      const body1 = this.m_world.CreateBody(bd1);\n      body1.CreateFixture(circle1, 5.0);\n\n      const jd1 = new b2RevoluteJointDef();\n      jd1.bodyA = ground;\n      jd1.bodyB = body1;\n      ground.GetLocalPoint(bd1.position, jd1.localAnchorA);\n      body1.GetLocalPoint(bd1.position, jd1.localAnchorB);\n      jd1.referenceAngle = body1.GetAngle() - ground.GetAngle();\n      this.m_joint1 = this.m_world.CreateJoint(jd1);\n\n      const bd2 = new b2BodyDef();\n      bd2.type = b2BodyType.b2_dynamicBody;\n      bd2.position.Set(0.0, 12.0);\n      const body2 = this.m_world.CreateBody(bd2);\n      body2.CreateFixture(circle2, 5.0);\n\n      const jd2 = new b2RevoluteJointDef();\n      jd2.Initialize(ground, body2, bd2.position);\n      this.m_joint2 = this.m_world.CreateJoint(jd2);\n\n      const bd3 = new b2BodyDef();\n      bd3.type = b2BodyType.b2_dynamicBody;\n      bd3.position.Set(2.5, 12.0);\n      const body3 = this.m_world.CreateBody(bd3);\n      body3.CreateFixture(box, 5.0);\n\n      const jd3 = new b2PrismaticJointDef();\n      jd3.Initialize(ground, body3, bd3.position, new b2Vec2(0.0, 1.0));\n      jd3.lowerTranslation = -5.0;\n      jd3.upperTranslation = 5.0;\n      jd3.enableLimit = true;\n\n      this.m_joint3 = this.m_world.CreateJoint(jd3);\n\n      const jd4 = new b2GearJointDef();\n      jd4.bodyA = body1;\n      jd4.bodyB = body2;\n      jd4.joint1 = this.m_joint1;\n      jd4.joint2 = this.m_joint2;\n      jd4.ratio = circle2.m_radius / circle1.m_radius;\n      this.m_joint4 = this.m_world.CreateJoint(jd4);\n\n      const jd5 = new b2GearJointDef();\n      jd5.bodyA = body2;\n      jd5.bodyB = body3;\n      jd5.joint1 = this.m_joint2;\n      jd5.joint2 = this.m_joint3;\n      jd5.ratio = -1.0 / circle2.m_radius;\n      this.m_joint5 = this.m_world.CreateJoint(jd5);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Gears();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// Note: even with a restitution of 1.0, there is some energy change\n// due to position correction.\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class VaryingRestitution extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_radius = 1.0;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n\n      const restitution = [0.0, 0.1, 0.3, 0.5, 0.75, 0.9, 1.0];\n\n      for (let i = 0; i < 7; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-10.0 + 3.0 * i, 20.0);\n\n        const body = this.m_world.CreateBody(bd);\n\n        fd.restitution = restitution[i];\n        body.CreateFixture(fd);\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new VaryingRestitution();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n  b2WeldJointDef,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Cantilever extends Test {\n  public static readonly e_count = 8;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n\n      const jd = new b2WeldJointDef();\n\n      let prevBody = ground;\n      for (let i = 0; i < Cantilever.e_count; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-14.5 + 1.0 * i, 5.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        const anchor = new b2Vec2(-15.0 + 1.0 * i, 5.0);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        prevBody = body;\n      }\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(1.0, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n\n      const jd = new b2WeldJointDef();\n      jd.frequencyHz = 5.0;\n      jd.dampingRatio = 0.7;\n\n      let prevBody = ground;\n      for (let i = 0; i < 3; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-14.0 + 2.0 * i, 15.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        const anchor = new b2Vec2(-15.0 + 2.0 * i, 15.0);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        prevBody = body;\n      }\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n\n      const jd = new b2WeldJointDef();\n\n      let prevBody = ground;\n      for (let i = 0; i < Cantilever.e_count; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-4.5 + 1.0 * i, 15.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        if (i > 0) {\n          const anchor = new b2Vec2(-5.0 + 1.0 * i, 15.0);\n          jd.Initialize(prevBody, body, anchor);\n          this.m_world.CreateJoint(jd);\n        }\n\n        prevBody = body;\n      }\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n\n      const jd = new b2WeldJointDef();\n      jd.frequencyHz = 8.0;\n      jd.dampingRatio = 0.7;\n\n      let prevBody = ground;\n      for (let i = 0; i < Cantilever.e_count; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(5.5 + 1.0 * i, 10.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        if (i > 0) {\n          const anchor = new b2Vec2(5.0 + 1.0 * i, 10.0);\n          jd.Initialize(prevBody, body, anchor);\n          this.m_world.CreateJoint(jd);\n        }\n\n        prevBody = body;\n      }\n    }\n\n    for (let i = 0; i < 2; ++i) {\n      const vertices = [];\n      vertices[0] = new b2Vec2(-0.5, 0.0);\n      vertices[1] = new b2Vec2(0.5, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n\n      const shape = new b2PolygonShape();\n      shape.Set(vertices);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-8.0 + 8.0 * i, 12.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(fd);\n    }\n\n    for (let i = 0; i < 2; ++i) {\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.5;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-6.0 + 6.0 * i, 10.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(fd);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Cantilever();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class EdgeTest extends Test {\n  constructor() {\n    super();\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2Vec2*/\n      const v1 = new b2Vec2(-10.0, 0.0),\n        v2 = new b2Vec2(-7.0, -2.0),\n        v3 = new b2Vec2(-4.0, 0.0);\n      /*b2Vec2*/\n      const v4 = new b2Vec2(0.0, 0.0),\n        v5 = new b2Vec2(4.0, 0.0),\n        v6 = new b2Vec2(7.0, 2.0),\n        v7 = new b2Vec2(10.0, 0.0);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n\n      shape.Set(v1, v2);\n      shape.m_hasVertex3 = true;\n      shape.m_vertex3.Copy(v3);\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(v2, v3);\n      shape.m_hasVertex0 = true;\n      shape.m_hasVertex3 = true;\n      shape.m_vertex0.Copy(v1);\n      shape.m_vertex3.Copy(v4);\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(v3, v4);\n      shape.m_hasVertex0 = true;\n      shape.m_hasVertex3 = true;\n      shape.m_vertex0.Copy(v2);\n      shape.m_vertex3.Copy(v5);\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(v4, v5);\n      shape.m_hasVertex0 = true;\n      shape.m_hasVertex3 = true;\n      shape.m_vertex0.Copy(v3);\n      shape.m_vertex3.Copy(v6);\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(v5, v6);\n      shape.m_hasVertex0 = true;\n      shape.m_hasVertex3 = true;\n      shape.m_vertex0.Copy(v4);\n      shape.m_vertex3.Copy(v7);\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(v6, v7);\n      shape.m_hasVertex0 = true;\n      shape.m_vertex0.Copy(v5);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-0.5, 0.6);\n      bd.allowSleep = false;\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      /*b2CircleShape*/\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.5;\n\n      body.CreateFixture(shape, 1.0);\n    }\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(1.0, 0.6);\n      bd.allowSleep = false;\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      body.CreateFixture(shape, 1.0);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new EdgeTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2PrismaticJointDef,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class BodyTypes extends Test {\n  public m_attachment: b2Body;\n  public m_platform: b2Body;\n  public m_speed = 0;\n\n  constructor() {\n    super();\n\n    /*b2BodyDef*/\n    const bd = new b2BodyDef();\n    const ground = this.m_world.CreateBody(bd);\n\n    /*b2EdgeShape*/\n    const shape = new b2EdgeShape();\n    shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n\n    /*b2FixtureDef*/\n    const fd = new b2FixtureDef();\n    fd.shape = shape;\n\n    ground.CreateFixture(fd);\n\n    // Define attachment\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 3.0);\n      this.m_attachment = this.m_world.CreateBody(bd);\n\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 2.0);\n      this.m_attachment.CreateFixture(shape, 2.0);\n    }\n\n    // Define platform\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-4.0, 5.0);\n      this.m_platform = this.m_world.CreateBody(bd);\n\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 4.0, new b2Vec2(4.0, 0.0), 0.5 * b2_pi);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.6;\n      fd.density = 2.0;\n      this.m_platform.CreateFixture(fd);\n\n      /*b2RevoluteJointDef*/\n      const rjd = new b2RevoluteJointDef();\n      rjd.Initialize(this.m_attachment, this.m_platform, new b2Vec2(0.0, 5.0));\n      rjd.maxMotorTorque = 50.0;\n      rjd.enableMotor = true;\n      this.m_world.CreateJoint(rjd);\n\n      /*b2PrismaticJointDef*/\n      const pjd = new b2PrismaticJointDef();\n      pjd.Initialize(ground, this.m_platform, new b2Vec2(0.0, 5.0), new b2Vec2(1.0, 0.0));\n\n      pjd.maxMotorForce = 1000.0;\n      pjd.enableMotor = true;\n      pjd.lowerTranslation = -10.0;\n      pjd.upperTranslation = 10.0;\n      pjd.enableLimit = true;\n\n      this.m_world.CreateJoint(pjd);\n\n      this.m_speed = 3.0;\n    }\n\n    // Create a payload\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 8.0);\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.75, 0.75);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.6;\n      fd.density = 2.0;\n\n      body.CreateFixture(fd);\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'd':\n        this.m_platform.SetType(b2BodyType.b2_dynamicBody);\n        break;\n\n      case 's':\n        this.m_platform.SetType(b2BodyType.b2_staticBody);\n        break;\n\n      case 'k':\n        this.m_platform.SetType(b2BodyType.b2_kinematicBody);\n        this.m_platform.SetLinearVelocity(new b2Vec2(-this.m_speed, 0.0));\n        this.m_platform.SetAngularVelocity(0.0);\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    // Drive the kinematic body.\n    if (this.m_platform.GetType() === b2BodyType.b2_kinematicBody) {\n      /*b2Vec2*/\n      const p = this.m_platform.GetTransform().p;\n      /*b2Vec2*/\n      const v = this.m_platform.GetLinearVelocity();\n\n      if ((p.x < -10.0 && v.x < 0.0) || (p.x > 10.0 && v.x > 0.0)) {\n        this.m_platform.SetLinearVelocity(new b2Vec2(-v.x, v.y));\n      }\n    }\n\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (d) dynamic, (s) static, (k) kinematic');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new BodyTypes();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2Fixture,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class ShapeEditing extends Test {\n  public m_body: b2Body;\n  public m_fixture1: b2Fixture;\n  public m_fixture2: b2Fixture | null = null;\n  public m_sensor = false;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Set(0.0, 10.0);\n    this.m_body = this.m_world.CreateBody(bd);\n\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(4.0, 4.0, new b2Vec2(0.0, 0.0), 0.0);\n    this.m_fixture1 = this.m_body.CreateFixture(shape, 10.0);\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'c':\n        if (this.m_fixture2 === null) {\n          const shape = new b2CircleShape();\n          shape.m_radius = 3.0;\n          shape.m_p.Set(0.5, -4.0);\n          this.m_fixture2 = this.m_body.CreateFixture(shape, 10.0);\n          this.m_body.SetAwake(true);\n        }\n        break;\n\n      case 'd':\n        if (this.m_fixture2 !== null) {\n          this.m_body.DestroyFixture(this.m_fixture2);\n          this.m_fixture2 = null;\n          this.m_body.SetAwake(true);\n        }\n        break;\n\n      case 's':\n        if (this.m_fixture2 !== null) {\n          this.m_sensor = !this.m_sensor;\n          this.m_fixture2.SetSensor(this.m_sensor);\n        }\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press: (c) create a shape, (d) destroy a shape.');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, `sensor = ${this.m_sensor ? 1 : 0}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new ShapeEditing();\n  }\n}\n","/*\n * Copyright (c) 2006-2011 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// This is a fun demo that shows off the wheel joint\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2Max,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2WheelJoint,\n  b2WheelJointDef,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_camera,\n  g_debugDraw,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class Car extends Test {\n  public m_car: b2Body;\n  public m_wheel1: b2Body;\n  public m_wheel2: b2Body;\n  public m_hz = 0.0;\n  public m_zeta = 0.0;\n  public m_speed = 0.0;\n  public m_spring1: b2WheelJoint;\n  public m_spring2: b2WheelJoint;\n\n  constructor() {\n    super();\n\n    this.m_hz = 4.0;\n    this.m_zeta = 0.7;\n    this.m_speed = 50.0;\n\n    let ground: b2Body;\n    {\n      const bd: b2BodyDef = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape: b2EdgeShape = new b2EdgeShape();\n\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 0.0;\n      fd.friction = 0.6;\n\n      shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n      ground.CreateFixture(fd);\n\n      const hs: number[] = [0.25, 1.0, 4.0, 0.0, 0.0, -1.0, -2.0, -2.0, -1.25, 0.0];\n\n      let x = 20.0,\n        y1 = 0.0;\n      const dx = 5.0;\n\n      for (let i = 0; i < 10; ++i) {\n        const y2: number = hs[i];\n        shape.Set(new b2Vec2(x, y1), new b2Vec2(x + dx, y2));\n        ground.CreateFixture(fd);\n        y1 = y2;\n        x += dx;\n      }\n\n      for (let i = 0; i < 10; ++i) {\n        const y2: number = hs[i];\n        shape.Set(new b2Vec2(x, y1), new b2Vec2(x + dx, y2));\n        ground.CreateFixture(fd);\n        y1 = y2;\n        x += dx;\n      }\n\n      shape.Set(new b2Vec2(x, 0.0), new b2Vec2(x + 40.0, 0.0));\n      ground.CreateFixture(fd);\n\n      x += 80.0;\n      shape.Set(new b2Vec2(x, 0.0), new b2Vec2(x + 40.0, 0.0));\n      ground.CreateFixture(fd);\n\n      x += 40.0;\n      shape.Set(new b2Vec2(x, 0.0), new b2Vec2(x + 10.0, 5.0));\n      ground.CreateFixture(fd);\n\n      x += 20.0;\n      shape.Set(new b2Vec2(x, 0.0), new b2Vec2(x + 40.0, 0.0));\n      ground.CreateFixture(fd);\n\n      x += 40.0;\n      shape.Set(new b2Vec2(x, 0.0), new b2Vec2(x, 20.0));\n      ground.CreateFixture(fd);\n    }\n\n    // Teeter\n    {\n      const bd: b2BodyDef = new b2BodyDef();\n      bd.position.Set(140.0, 1.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      const body: b2Body = this.m_world.CreateBody(bd);\n\n      const box: b2PolygonShape = new b2PolygonShape();\n      box.SetAsBox(10.0, 0.25);\n      body.CreateFixture(box, 1.0);\n\n      const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n      jd.Initialize(ground, body, body.GetPosition());\n      jd.lowerAngle = (-8.0 * b2_pi) / 180.0;\n      jd.upperAngle = (8.0 * b2_pi) / 180.0;\n      jd.enableLimit = true;\n      this.m_world.CreateJoint(jd);\n\n      body.ApplyAngularImpulse(100.0);\n    }\n\n    // Bridge\n    {\n      const N = 20;\n      const shape: b2PolygonShape = new b2PolygonShape();\n      shape.SetAsBox(1.0, 0.125);\n\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n      fd.friction = 0.6;\n\n      const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n\n      let prevBody: b2Body = ground;\n      for (let i = 0; i < N; ++i) {\n        const bd: b2BodyDef = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(161.0 + 2.0 * i, -0.125);\n        const body: b2Body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        const anchor: b2Vec2 = new b2Vec2(160.0 + 2.0 * i, -0.125);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        prevBody = body;\n      }\n\n      const anchor: b2Vec2 = new b2Vec2(160.0 + 2.0 * N, -0.125);\n      jd.Initialize(prevBody, ground, anchor);\n      this.m_world.CreateJoint(jd);\n    }\n\n    // Boxes\n    {\n      const box: b2PolygonShape = new b2PolygonShape();\n      box.SetAsBox(0.5, 0.5);\n\n      let body: b2Body;\n      const bd: b2BodyDef = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      bd.position.Set(230.0, 0.5);\n      body = this.m_world.CreateBody(bd);\n      body.CreateFixture(box, 0.5);\n\n      bd.position.Set(230.0, 1.5);\n      body = this.m_world.CreateBody(bd);\n      body.CreateFixture(box, 0.5);\n\n      bd.position.Set(230.0, 2.5);\n      body = this.m_world.CreateBody(bd);\n      body.CreateFixture(box, 0.5);\n\n      bd.position.Set(230.0, 3.5);\n      body = this.m_world.CreateBody(bd);\n      body.CreateFixture(box, 0.5);\n\n      bd.position.Set(230.0, 4.5);\n      body = this.m_world.CreateBody(bd);\n      body.CreateFixture(box, 0.5);\n    }\n\n    // Car\n    {\n      const chassis: b2PolygonShape = new b2PolygonShape();\n      const vertices: b2Vec2[] = b2Vec2.MakeArray(8);\n      vertices[0].Set(-1.5, -0.5);\n      vertices[1].Set(1.5, -0.5);\n      vertices[2].Set(1.5, 0.0);\n      vertices[3].Set(0.0, 0.9);\n      vertices[4].Set(-1.15, 0.9);\n      vertices[5].Set(-1.5, 0.2);\n      chassis.Set(vertices, 6);\n\n      const circle: b2CircleShape = new b2CircleShape();\n      circle.m_radius = 0.4;\n\n      const bd: b2BodyDef = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 1.0);\n      this.m_car = this.m_world.CreateBody(bd);\n      this.m_car.CreateFixture(chassis, 1.0);\n\n      const fd: b2FixtureDef = new b2FixtureDef();\n      fd.shape = circle;\n      fd.density = 1.0;\n      fd.friction = 0.9;\n\n      bd.position.Set(-1.0, 0.35);\n      this.m_wheel1 = this.m_world.CreateBody(bd);\n      this.m_wheel1.CreateFixture(fd);\n\n      bd.position.Set(1.0, 0.4);\n      this.m_wheel2 = this.m_world.CreateBody(bd);\n      this.m_wheel2.CreateFixture(fd);\n\n      const jd: b2WheelJointDef = new b2WheelJointDef();\n      const axis: b2Vec2 = new b2Vec2(0.0, 1.0);\n\n      jd.Initialize(this.m_car, this.m_wheel1, this.m_wheel1.GetPosition(), axis);\n      jd.motorSpeed = 0.0;\n      jd.maxMotorTorque = 20.0;\n      jd.enableMotor = true;\n      jd.frequencyHz = this.m_hz;\n      jd.dampingRatio = this.m_zeta;\n      this.m_spring1 = this.m_world.CreateJoint(jd);\n\n      jd.Initialize(this.m_car, this.m_wheel2, this.m_wheel2.GetPosition(), axis);\n      jd.motorSpeed = 0.0;\n      jd.maxMotorTorque = 10.0;\n      jd.enableMotor = false;\n      jd.frequencyHz = this.m_hz;\n      jd.dampingRatio = this.m_zeta;\n      this.m_spring2 = this.m_world.CreateJoint(jd);\n    }\n  }\n\n  public Keyboard(key: string): void {\n    switch (key) {\n      case 'a':\n        this.m_spring1.SetMotorSpeed(this.m_speed);\n        break;\n\n      case 's':\n        this.m_spring1.SetMotorSpeed(0.0);\n        break;\n\n      case 'd':\n        this.m_spring1.SetMotorSpeed(-this.m_speed);\n        break;\n\n      case 'q':\n        this.m_hz = b2Max(0.0, this.m_hz - 1.0);\n        this.m_spring1.SetSpringFrequencyHz(this.m_hz);\n        this.m_spring2.SetSpringFrequencyHz(this.m_hz);\n        break;\n\n      case 'e':\n        this.m_hz += 1.0;\n        this.m_spring1.SetSpringFrequencyHz(this.m_hz);\n        this.m_spring2.SetSpringFrequencyHz(this.m_hz);\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'Keys: left = a, brake = s, right = d, hz down = q, hz up = e',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'frequency = ' + this.m_hz.toFixed(2) + ' hz, damping ratio = ' + this.m_zeta.toFixed(2),\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    g_camera.m_center.x = this.m_car.GetPosition().x;\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Car();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2PrismaticJoint,\n  b2PrismaticJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Prismatic extends Test {\n  public m_joint: b2PrismaticJoint;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2.0, 0.5);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-10.0, 10.0);\n      bd.angle = 0.5 * b2_pi;\n      bd.allowSleep = false;\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(shape, 5.0);\n\n      const pjd = new b2PrismaticJointDef();\n\n      // Bouncy limit\n      const axis = new b2Vec2(2.0, 1.0);\n      axis.Normalize();\n      pjd.Initialize(ground, body, new b2Vec2(0.0, 0.0), axis);\n\n      // Non-bouncy limit\n      //pjd.Initialize(ground, body, new b2Vec2(-10.0, 10.0), new b2Vec2(1.0, 0.0));\n\n      pjd.motorSpeed = 10.0;\n      pjd.maxMotorForce = 10000.0;\n      pjd.enableMotor = true;\n      pjd.lowerTranslation = 0.0;\n      pjd.upperTranslation = 20.0;\n      pjd.enableLimit = true;\n\n      this.m_joint = this.m_world.CreateJoint(pjd);\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'l':\n        this.m_joint.EnableLimit(!this.m_joint.IsLimitEnabled());\n        break;\n\n      case 'm':\n        this.m_joint.EnableMotor(!this.m_joint.IsMotorEnabled());\n        break;\n\n      case 's':\n        this.m_joint.SetMotorSpeed(-this.m_joint.GetMotorSpeed());\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (l) limits, (m) motors, (s) speed');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    const force = this.m_joint.GetMotorForce(settings.hz);\n    g_debugDraw.DrawString(5, this.m_textLine, `Motor Force = ${force.toFixed(4)}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Prismatic();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Revolute extends Test {\n  public m_ball: b2Body;\n  public m_joint: b2RevoluteJoint;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      //fd.filter.categoryBits = 2;\n\n      ground.CreateFixture(fd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.5;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      const rjd = new b2RevoluteJointDef();\n\n      bd.position.Set(-10.0, 20.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(shape, 5.0);\n\n      const w = 100.0;\n      body.SetAngularVelocity(w);\n      body.SetLinearVelocity(new b2Vec2(-8.0 * w, 0.0));\n\n      rjd.Initialize(ground, body, new b2Vec2(-10.0, 12.0));\n      rjd.motorSpeed = 1.0 * b2_pi;\n      rjd.maxMotorTorque = 10000.0;\n      rjd.enableMotor = false;\n      rjd.lowerAngle = -0.25 * b2_pi;\n      rjd.upperAngle = 0.5 * b2_pi;\n      rjd.enableLimit = true;\n      rjd.collideConnected = true;\n\n      this.m_joint = this.m_world.CreateJoint(rjd);\n    }\n\n    {\n      /*b2CircleShape*/\n      const circle_shape = new b2CircleShape();\n      circle_shape.m_radius = 3.0;\n\n      const circle_bd = new b2BodyDef();\n      circle_bd.type = b2BodyType.b2_dynamicBody;\n      circle_bd.position.Set(5.0, 30.0);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.density = 5.0;\n      fd.filter.maskBits = 1;\n      fd.shape = circle_shape;\n\n      this.m_ball = this.m_world.CreateBody(circle_bd);\n      this.m_ball.CreateFixture(fd);\n\n      /*b2PolygonShape*/\n      const polygon_shape = new b2PolygonShape();\n      polygon_shape.SetAsBox(10.0, 0.2, new b2Vec2(-10.0, 0.0), 0.0);\n\n      const polygon_bd = new b2BodyDef();\n      polygon_bd.position.Set(20.0, 10.0);\n      polygon_bd.type = b2BodyType.b2_dynamicBody;\n      polygon_bd.bullet = true;\n      /*b2Body*/\n      const polygon_body = this.m_world.CreateBody(polygon_bd);\n      polygon_body.CreateFixture(polygon_shape, 2.0);\n\n      const rjd = new b2RevoluteJointDef();\n      rjd.Initialize(ground, polygon_body, new b2Vec2(20.0, 10.0));\n      rjd.lowerAngle = -0.25 * b2_pi;\n      rjd.upperAngle = 0.0 * b2_pi;\n      rjd.enableLimit = true;\n      this.m_world.CreateJoint(rjd);\n    }\n\n    // Tests mass computation of a small object far from the origin\n    {\n      const bodyDef = new b2BodyDef();\n      bodyDef.type = b2BodyType.b2_dynamicBody;\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bodyDef);\n\n      /*b2PolygonShape*/\n      const polyShape = new b2PolygonShape();\n      /*b2Vec2*/\n      const verts = b2Vec2.MakeArray(3);\n      verts[0].Set(17.63, 36.31);\n      verts[1].Set(17.52, 36.69);\n      verts[2].Set(17.19, 36.36);\n      polyShape.Set(verts, 3);\n\n      /*b2FixtureDef*/\n      const polyFixtureDef = new b2FixtureDef();\n      polyFixtureDef.shape = polyShape;\n      polyFixtureDef.density = 1;\n\n      body.CreateFixture(polyFixtureDef); //assertion hits inside here\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'l':\n        this.m_joint.EnableLimit(!this.m_joint.IsLimitEnabled());\n        break;\n\n      case 'm':\n        this.m_joint.EnableMotor(!this.m_joint.IsMotorEnabled());\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: (l) limits, (m) motor');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    // if (this.m_stepCount === 360) {\n    //   this.m_ball.SetTransformVec(new b2Vec2(0.0, 0.5), 0.0);\n    // }\n\n    // const torque1 = this.m_joint.GetMotorTorque(settings.hz);\n    // g_debugDraw.DrawString(5, this.m_textLine, `Motor Torque = ${torque1.toFixed(0)}, ${torque2.toFixed(0)} : Motor Force = ${force3.toFixed(0)}`);\n    // this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Revolute();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2PulleyJoint,\n  b2PulleyJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Pulleys extends Test {\n  public m_joint1: b2PulleyJoint;\n\n  constructor() {\n    super();\n\n    const y = 16.0;\n    const L = 12.0;\n    const a = 1.0;\n    const b = 2.0;\n\n    let ground = null;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const edge = new b2EdgeShape();\n      edge.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      //ground.CreateFixture(edge, 0.0);\n\n      /*b2CircleShape*/\n      const circle = new b2CircleShape();\n      circle.m_radius = 2.0;\n\n      circle.m_p.Set(-10.0, y + b + L);\n      ground.CreateFixture(circle, 0.0);\n\n      circle.m_p.Set(10.0, y + b + L);\n      ground.CreateFixture(circle, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(a, b);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      //bd.fixedRotation = true;\n      bd.position.Set(-10.0, y);\n      const body1 = this.m_world.CreateBody(bd);\n      body1.CreateFixture(shape, 5.0);\n\n      bd.position.Set(10.0, y);\n      const body2 = this.m_world.CreateBody(bd);\n      body2.CreateFixture(shape, 5.0);\n\n      const pulleyDef = new b2PulleyJointDef();\n      const anchor1 = new b2Vec2(-10.0, y + b);\n      const anchor2 = new b2Vec2(10.0, y + b);\n      const groundAnchor1 = new b2Vec2(-10.0, y + b + L);\n      const groundAnchor2 = new b2Vec2(10.0, y + b + L);\n      pulleyDef.Initialize(body1, body2, groundAnchor1, groundAnchor2, anchor1, anchor2, 1.5);\n\n      this.m_joint1 = this.m_world.CreateJoint(pulleyDef);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    const ratio = this.m_joint1.GetRatio();\n    const L = this.m_joint1.GetCurrentLengthA() + ratio * this.m_joint1.GetCurrentLengthB();\n    g_debugDraw.DrawString(5, this.m_textLine, `L1 + ${ratio.toFixed(2)} * L2 = ${L.toFixed(2)}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Pulleys();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2AABB,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Color,\n  b2EdgeShape,\n  b2Fixture,\n  b2FixtureDef,\n  b2MakeArray,\n  b2PolygonShape,\n  b2QueryCallback,\n  b2RandomRange,\n  b2ShapeType,\n  b2Sqrt,\n  b2TestOverlapShape,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * This callback is called by b2World::QueryAABB. We find\n * all the fixtures that overlap an AABB. Of those, we use\n * b2TestOverlap to determine which fixtures overlap a circle.\n * Up to 4 overlapped fixtures will be highlighted with a yellow\n * border.\n */\nexport class PolyShapesCallback extends b2QueryCallback {\n  public static readonly e_maxCount = 4;\n\n  public m_circle = new b2CircleShape();\n  public m_transform = new b2Transform();\n  public m_count = 0;\n\n  public ReportFixture(fixture: b2Fixture) {\n    if (this.m_count === PolyShapesCallback.e_maxCount) {\n      return false;\n    }\n\n    const body = fixture.GetBody();\n    const shape = fixture.GetShape();\n\n    const overlap = b2TestOverlapShape(\n      shape,\n      0,\n      this.m_circle,\n      0,\n      body.GetTransform(),\n      this.m_transform,\n    );\n\n    if (overlap) {\n      this.DrawFixture(fixture);\n      ++this.m_count;\n    }\n\n    return true;\n  }\n\n  public DrawFixture(fixture: b2Fixture) {\n    const color = new b2Color(0.95, 0.95, 0.6);\n    const xf = fixture.GetBody().GetTransform();\n\n    switch (fixture.GetType()) {\n      case b2ShapeType.e_circleShape:\n        {\n          //const circle = ((shape instanceof b2CircleShape ? shape : null));\n          const circle: b2CircleShape = fixture.GetShape() as b2CircleShape;\n\n          const center = b2Transform.MulXV(xf, circle.m_p, new b2Vec2());\n          const radius = circle.m_radius;\n\n          g_debugDraw.DrawCircle(center, radius, color);\n        }\n        break;\n\n      case b2ShapeType.e_polygonShape:\n        {\n          //const poly = ((shape instanceof b2PolygonShape ? shape : null));\n          const poly: b2PolygonShape = fixture.GetShape() as b2PolygonShape;\n          const vertexCount = poly.m_count;\n          const vertices = [];\n\n          for (let i = 0; i < vertexCount; ++i) {\n            vertices[i] = b2Transform.MulXV(xf, poly.m_vertices[i], new b2Vec2());\n          }\n\n          g_debugDraw.DrawPolygon(vertices, vertexCount, color);\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport class PolyShapes extends Test {\n  public static readonly e_maxBodies = 256;\n\n  public m_bodyIndex = 0;\n  public m_bodies = new Array(PolyShapes.e_maxBodies);\n  public m_polygons = b2MakeArray(4, () => new b2PolygonShape());\n  public m_circle = new b2CircleShape();\n\n  constructor() {\n    super();\n\n    // Ground body\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const vertices = new Array(3);\n      vertices[0] = new b2Vec2(-0.5, 0.0);\n      vertices[1] = new b2Vec2(0.5, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[0].Set(vertices, 3);\n    }\n\n    {\n      const vertices = new Array(3);\n      vertices[0] = new b2Vec2(-0.1, 0.0);\n      vertices[1] = new b2Vec2(0.1, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[1].Set(vertices, 3);\n    }\n\n    {\n      const w = 1.0;\n      const b = w / (2.0 + b2Sqrt(2.0));\n      const s = b2Sqrt(2.0) * b;\n\n      const vertices = new Array(8);\n      vertices[0] = new b2Vec2(0.5 * s, 0.0);\n      vertices[1] = new b2Vec2(0.5 * w, b);\n      vertices[2] = new b2Vec2(0.5 * w, b + s);\n      vertices[3] = new b2Vec2(0.5 * s, w);\n      vertices[4] = new b2Vec2(-0.5 * s, w);\n      vertices[5] = new b2Vec2(-0.5 * w, b + s);\n      vertices[6] = new b2Vec2(-0.5 * w, b);\n      vertices[7] = new b2Vec2(-0.5 * s, 0.0);\n\n      this.m_polygons[2].Set(vertices, 8);\n    }\n\n    {\n      this.m_polygons[3].SetAsBox(0.5, 0.5);\n    }\n\n    {\n      this.m_circle.m_radius = 0.5;\n    }\n\n    for (let i = 0; i < PolyShapes.e_maxBodies; ++i) {\n      this.m_bodies[i] = null;\n    }\n  }\n\n  public CreateBody(index: number) {\n    if (this.m_bodies[this.m_bodyIndex] !== null) {\n      this.m_world.DestroyBody(this.m_bodies[this.m_bodyIndex]);\n      this.m_bodies[this.m_bodyIndex] = null;\n    }\n\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n\n    const x = b2RandomRange(-2.0, 2.0);\n    bd.position.Set(x, 10.0);\n    bd.angle = b2RandomRange(-b2_pi, b2_pi);\n\n    if (index === 4) {\n      bd.angularDamping = 0.02;\n    }\n\n    this.m_bodies[this.m_bodyIndex] = this.m_world.CreateBody(bd);\n\n    if (index < 4) {\n      const fd = new b2FixtureDef();\n      fd.shape = this.m_polygons[index];\n      fd.density = 1.0;\n      fd.friction = 0.3;\n      this.m_bodies[this.m_bodyIndex].CreateFixture(fd);\n    } else {\n      const fd = new b2FixtureDef();\n      fd.shape = this.m_circle;\n      fd.density = 1.0;\n      fd.friction = 0.3;\n\n      this.m_bodies[this.m_bodyIndex].CreateFixture(fd);\n    }\n\n    this.m_bodyIndex = (this.m_bodyIndex + 1) % PolyShapes.e_maxBodies;\n  }\n\n  public DestroyBody() {\n    for (let i = 0; i < PolyShapes.e_maxBodies; ++i) {\n      if (this.m_bodies[i] !== null) {\n        this.m_world.DestroyBody(this.m_bodies[i]);\n        this.m_bodies[i] = null;\n        return;\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        this.CreateBody(key.charCodeAt(0) - '1'.charCodeAt(0));\n        break;\n\n      case 'a':\n        for (let i = 0; i < PolyShapes.e_maxBodies; i += 2) {\n          if (this.m_bodies[i]) {\n            const active = this.m_bodies[i].IsActive();\n            this.m_bodies[i].SetActive(!active);\n          }\n        }\n        break;\n\n      case 'd':\n        this.DestroyBody();\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    const callback = new PolyShapesCallback();\n    callback.m_circle.m_radius = 2.0;\n    callback.m_circle.m_p.Set(0.0, 1.1);\n    callback.m_transform.SetIdentity();\n\n    const aabb = new b2AABB();\n    callback.m_circle.ComputeAABB(aabb, callback.m_transform, 0);\n\n    this.m_world.QueryAABB(callback, aabb);\n\n    const color = new b2Color(0.4, 0.7, 0.8);\n    g_debugDraw.DrawCircle(callback.m_circle.m_p, callback.m_circle.m_radius, color);\n\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press 1-5 to drop stuff');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, \"Press 'a' to (de)activate some bodies\");\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(5, this.m_textLine, \"Press 'd' to destroy a body\");\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new PolyShapes();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2DistanceJointDef,\n  b2EdgeShape,\n  b2Joint,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Web extends Test {\n  public m_bodies: Array<b2Body | null>;\n  public m_joints: Array<b2Joint | null>;\n  constructor() {\n    super();\n\n    this.m_bodies = new Array(4);\n    this.m_joints = new Array(8);\n\n    let ground = null;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      bd.position.Set(-5.0, 5.0);\n      const body0 = (this.m_bodies[0] = this.m_world.CreateBody(bd));\n      body0.CreateFixture(shape, 5.0);\n\n      bd.position.Set(5.0, 5.0);\n      const body1 = (this.m_bodies[1] = this.m_world.CreateBody(bd));\n      body1.CreateFixture(shape, 5.0);\n\n      bd.position.Set(5.0, 15.0);\n      const body2 = (this.m_bodies[2] = this.m_world.CreateBody(bd));\n      body2.CreateFixture(shape, 5.0);\n\n      bd.position.Set(-5.0, 15.0);\n      const body3 = (this.m_bodies[3] = this.m_world.CreateBody(bd));\n      body3.CreateFixture(shape, 5.0);\n\n      const jd = new b2DistanceJointDef();\n      let p1, p2, d;\n\n      jd.frequencyHz = 2.0;\n      jd.dampingRatio = 0.0;\n\n      jd.bodyA = ground;\n      jd.bodyB = body0;\n      jd.localAnchorA.Set(-10.0, 0.0);\n      jd.localAnchorB.Set(-0.5, -0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[0] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = ground;\n      jd.bodyB = body1;\n      jd.localAnchorA.Set(10.0, 0.0);\n      jd.localAnchorB.Set(0.5, -0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[1] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = ground;\n      jd.bodyB = body2;\n      jd.localAnchorA.Set(10.0, 20.0);\n      jd.localAnchorB.Set(0.5, 0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[2] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = ground;\n      jd.bodyB = body3;\n      jd.localAnchorA.Set(-10.0, 20.0);\n      jd.localAnchorB.Set(-0.5, 0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[3] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = body0;\n      jd.bodyB = body1;\n      jd.localAnchorA.Set(0.5, 0.0);\n      jd.localAnchorB.Set(-0.5, 0.0);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[4] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = body1;\n      jd.bodyB = body2;\n      jd.localAnchorA.Set(0.0, 0.5);\n      jd.localAnchorB.Set(0.0, -0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[5] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = body2;\n      jd.bodyB = body3;\n      jd.localAnchorA.Set(-0.5, 0.0);\n      jd.localAnchorB.Set(0.5, 0.0);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[6] = this.m_world.CreateJoint(jd);\n\n      jd.bodyA = body3;\n      jd.bodyB = body0;\n      jd.localAnchorA.Set(0.0, -0.5);\n      jd.localAnchorB.Set(0.0, 0.5);\n      p1 = jd.bodyA.GetWorldPoint(jd.localAnchorA, new b2Vec2());\n      p2 = jd.bodyB.GetWorldPoint(jd.localAnchorB, new b2Vec2());\n      d = b2Vec2.SubVV(p2, p1, new b2Vec2());\n      jd.length = d.Length();\n      this.m_joints[7] = this.m_world.CreateJoint(jd);\n    }\n  }\n\n  public JointDestroyed(joint: b2Joint) {\n    for (let i = 0; i < 8; ++i) {\n      if (this.m_joints[i] === joint) {\n        this.m_joints[i] = null;\n        break;\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'b':\n        for (let i = 0; i < 4; ++i) {\n          const body = this.m_bodies[i];\n          if (body) {\n            this.m_world.DestroyBody(body);\n            this.m_bodies[i] = null;\n            break;\n          }\n        }\n        break;\n\n      case 'j':\n        for (let i = 0; i < 8; ++i) {\n          const joint = this.m_joints[i];\n          if (joint) {\n            this.m_world.DestroyJoint(joint);\n            this.m_joints[i] = null;\n            break;\n          }\n        }\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'This demonstrates a soft distance joint.');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'Press: (b) to delete a body, (j) to delete a joint',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Web();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2RopeJoint,\n  b2RopeJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class RopeJoint extends Test {\n  public m_ropeDef = new b2RopeJointDef();\n  public m_rope: b2RopeJoint | null = null;\n\n  constructor() {\n    super();\n\n    /*b2Body*/\n    let ground = null;\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.125);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      fd.friction = 0.2;\n      fd.filter.categoryBits = 0x0001;\n      fd.filter.maskBits = 0xffff & ~0x0002;\n\n      /*b2RevoluteJointDef*/\n      const jd = new b2RevoluteJointDef();\n      jd.collideConnected = false;\n\n      /*const int32*/\n      const N = 10;\n      /*const float32*/\n      const y = 15.0;\n      this.m_ropeDef.localAnchorA.Set(0.0, y);\n\n      /*b2Body*/\n      let prevBody = ground;\n      for (/*int32*/ let i = 0; i < N; ++i) {\n        /*b2BodyDef*/\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.5 + 1.0 * i, y);\n        if (i === N - 1) {\n          shape.SetAsBox(1.5, 1.5);\n          fd.density = 100.0;\n          fd.filter.categoryBits = 0x0002;\n          bd.position.Set(1.0 * i, y);\n          bd.angularDamping = 0.4;\n        }\n\n        /*b2Body*/\n        const body = this.m_world.CreateBody(bd);\n\n        body.CreateFixture(fd);\n\n        /*b2Vec2*/\n        const anchor = new b2Vec2(i, y);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        prevBody = body;\n      }\n\n      this.m_ropeDef.localAnchorB.SetZero();\n\n      /*float32*/\n      const extraLength = 0.01;\n      this.m_ropeDef.maxLength = N - 1.0 + extraLength;\n      this.m_ropeDef.bodyB = prevBody;\n    }\n\n    {\n      this.m_ropeDef.bodyA = ground;\n      this.m_rope = this.m_world.CreateJoint(this.m_ropeDef) as b2RopeJoint;\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'j':\n        if (this.m_rope) {\n          this.m_world.DestroyJoint(this.m_rope);\n          this.m_rope = null;\n        } else {\n          this.m_rope = this.m_world.CreateJoint(this.m_ropeDef) as b2RopeJoint;\n        }\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press (j) to toggle the rope joint.');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    if (this.m_rope) {\n      g_debugDraw.DrawString(5, this.m_textLine, 'Rope ON');\n    } else {\n      g_debugDraw.DrawString(5, this.m_textLine, 'Rope OFF');\n    }\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new RopeJoint();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2CircleShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\n/**\n * This tests bullet collision and provides an example of a\n * gameplay scenario. This also uses a loop shape.\n */\n\nexport class Pinball extends Test {\n  public m_leftJoint: b2RevoluteJoint;\n  public m_rightJoint: b2RevoluteJoint;\n  public m_ball: b2Body;\n  public m_button = false;\n\n  constructor() {\n    super();\n\n    // Ground body\n    /*b2Body*/\n    let ground = null;\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      /*b2Vec2*/\n      const vs = b2Vec2.MakeArray(5);\n      vs[0].Set(0.0, -2.0);\n      vs[1].Set(8.0, 6.0);\n      vs[2].Set(8.0, 20.0);\n      vs[3].Set(-8.0, 20.0);\n      vs[4].Set(-8.0, 6.0);\n\n      /*b2ChainShape*/\n      const loop = new b2ChainShape();\n      loop.CreateLoop(vs, 5);\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = loop;\n      fd.density = 0.0;\n      ground.CreateFixture(fd);\n    }\n\n    // Flippers\n    {\n      /*b2Vec2*/\n      const p1 = new b2Vec2(-2.0, 0.0),\n        p2 = new b2Vec2(2.0, 0.0);\n\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      bd.position.Copy(p1);\n      /*b2Body*/\n      const leftFlipper = this.m_world.CreateBody(bd);\n\n      bd.position.Copy(p2);\n      /*b2Body*/\n      const rightFlipper = this.m_world.CreateBody(bd);\n\n      /*b2PolygonShape*/\n      const box = new b2PolygonShape();\n      box.SetAsBox(1.75, 0.1);\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = box;\n      fd.density = 1.0;\n\n      leftFlipper.CreateFixture(fd);\n      rightFlipper.CreateFixture(fd);\n\n      /*b2RevoluteJointDef*/\n      const jd = new b2RevoluteJointDef();\n      jd.bodyA = ground;\n      jd.localAnchorB.SetZero();\n      jd.enableMotor = true;\n      jd.maxMotorTorque = 1000.0;\n      jd.enableLimit = true;\n\n      jd.motorSpeed = 0.0;\n      jd.localAnchorA.Copy(p1);\n      jd.bodyB = leftFlipper;\n      jd.lowerAngle = (-30.0 * b2_pi) / 180.0;\n      jd.upperAngle = (5.0 * b2_pi) / 180.0;\n      this.m_leftJoint = this.m_world.CreateJoint(jd);\n\n      jd.motorSpeed = 0.0;\n      jd.localAnchorA.Copy(p2);\n      jd.bodyB = rightFlipper;\n      jd.lowerAngle = (-5.0 * b2_pi) / 180.0;\n      jd.upperAngle = (30.0 * b2_pi) / 180.0;\n      this.m_rightJoint = this.m_world.CreateJoint(jd);\n    }\n\n    // Circle character\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.position.Set(1.0, 15.0);\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.bullet = true;\n\n      this.m_ball = this.m_world.CreateBody(bd);\n\n      /*b2CircleShape*/\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.2;\n\n      /*b2FixtureDef*/\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n      this.m_ball.CreateFixture(fd);\n    }\n\n    this.m_button = false;\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_button = true;\n        break;\n    }\n  }\n\n  public KeyboardUp(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_button = false;\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    if (this.m_button) {\n      this.m_leftJoint.SetMotorSpeed(20.0);\n      this.m_rightJoint.SetMotorSpeed(-20.0);\n    } else {\n      this.m_leftJoint.SetMotorSpeed(-10.0);\n      this.m_rightJoint.SetMotorSpeed(10.0);\n    }\n\n    super.Step(settings);\n\n    g_debugDraw.DrawString(5, this.m_textLine, \"Press 'a' to control the flippers\");\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Pinball();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_gjkStats,\n  b2_toiStats,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2RandomRange,\n  b2Vec2,\n  b2Vec2_zero,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class BulletTest extends Test {\n  public m_body: b2Body;\n  public m_bullet: b2Body;\n  public m_x = 0;\n\n  constructor() {\n    super();\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.position.Set(0.0, 0.0);\n      /*b2Body*/\n      const body = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const edge = new b2EdgeShape();\n\n      edge.Set(new b2Vec2(-10.0, 0.0), new b2Vec2(10.0, 0.0));\n      body.CreateFixture(edge, 0.0);\n\n      /*b2PolygonShape*/\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.2, 1.0, new b2Vec2(0.5, 1.0), 0.0);\n      body.CreateFixture(shape, 0.0);\n    }\n\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 4.0);\n\n      /*b2PolygonShape*/\n      const box = new b2PolygonShape();\n      box.SetAsBox(2.0, 0.1);\n\n      this.m_body = this.m_world.CreateBody(bd);\n      this.m_body.CreateFixture(box, 1.0);\n\n      box.SetAsBox(0.25, 0.25);\n\n      //this.m_x = b2RandomRange(-1.0, 1.0);\n      this.m_x = 0.20352793;\n      bd.position.Set(this.m_x, 10.0);\n      bd.bullet = true;\n\n      this.m_bullet = this.m_world.CreateBody(bd);\n      this.m_bullet.CreateFixture(box, 100.0);\n\n      this.m_bullet.SetLinearVelocity(new b2Vec2(0.0, -50.0));\n    }\n  }\n\n  public Launch() {\n    this.m_body.SetTransformVec(new b2Vec2(0.0, 4.0), 0.0);\n    this.m_body.SetLinearVelocity(b2Vec2_zero);\n    this.m_body.SetAngularVelocity(0.0);\n\n    this.m_x = b2RandomRange(-1.0, 1.0);\n    this.m_bullet.SetTransformVec(new b2Vec2(this.m_x, 10.0), 0.0);\n    this.m_bullet.SetLinearVelocity(new b2Vec2(0.0, -50.0));\n    this.m_bullet.SetAngularVelocity(0.0);\n\n    b2_gjkStats.Reset();\n    b2_toiStats.Reset();\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    if (b2_gjkStats.calls > 0) {\n      // g_debugDraw.DrawString(5, this.m_textLine, \"gjk calls = %d, ave gjk iters = %3.1f, max gjk iters = %d\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `gjk calls = ${b2_gjkStats.calls.toFixed(0)}, ave gjk iters = ${(\n          b2_gjkStats.iters / b2_gjkStats.calls\n        ).toFixed(1)}, max gjk iters = ${b2_gjkStats.maxIters.toFixed(0)}`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    if (b2_toiStats.calls > 0) {\n      // g_debugDraw.DrawString(5, this.m_textLine, \"toi calls = %d, ave toi iters = %3.1f, max toi iters = %d\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `toi calls = ${b2_toiStats.calls}, ave toi iters = ${(\n          b2_toiStats.iters / b2_toiStats.calls\n        ).toFixed(1)}, max toi iters = ${b2_toiStats.maxRootIters}`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n\n      // g_debugDraw.DrawString(5, this.m_textLine, \"ave toi root iters = %3.1f, max toi root iters = %d\",\n      g_debugDraw.DrawString(\n        5,\n        this.m_textLine,\n        `ave toi root iters = ${(b2_toiStats.rootIters / b2_toiStats.calls).toFixed(\n          1,\n        )}, max toi root iters = ${b2_toiStats.maxRootIters}`,\n      );\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    if (this.m_stepCount % 60 === 0) {\n      this.Launch();\n    }\n  }\n\n  public static Create(): Test {\n    return new BulletTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2Random,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Confined extends Test {\n  public static readonly e_columnCount = 0;\n  public static readonly e_rowCount = 0;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n\n      // Floor\n      shape.Set(new b2Vec2(-10.0, 0.0), new b2Vec2(10.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n\n      // Left wall\n      shape.Set(new b2Vec2(-10.0, 0.0), new b2Vec2(-10.0, 20.0));\n      ground.CreateFixture(shape, 0.0);\n\n      // Right wall\n      shape.Set(new b2Vec2(10.0, 0.0), new b2Vec2(10.0, 20.0));\n      ground.CreateFixture(shape, 0.0);\n\n      // Roof\n      shape.Set(new b2Vec2(-10.0, 20.0), new b2Vec2(10.0, 20.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    const radius = 0.5;\n    const shape = new b2CircleShape();\n    shape.m_p.SetZero();\n    shape.m_radius = radius;\n\n    const fd = new b2FixtureDef();\n    fd.shape = shape;\n    fd.density = 1.0;\n    fd.friction = 0.1;\n\n    for (let j = 0; j < Confined.e_columnCount; ++j) {\n      for (let i = 0; i < Confined.e_rowCount; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-10.0 + (2.1 * j + 1.0 + 0.01 * i) * radius, (2.0 * i + 1.0) * radius);\n        const body = this.m_world.CreateBody(bd);\n\n        body.CreateFixture(fd);\n      }\n    }\n\n    this.m_world.SetGravity(new b2Vec2(0.0, 0.0));\n  }\n\n  public CreateCircle() {\n    const radius = 2.0;\n    const shape = new b2CircleShape();\n    shape.m_p.SetZero();\n    shape.m_radius = radius;\n\n    const fd = new b2FixtureDef();\n    fd.shape = shape;\n    fd.density = 1.0;\n    fd.friction = 0.0;\n\n    const p = new b2Vec2(b2Random(), 3.0 + b2Random());\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Copy(p);\n    //bd.allowSleep = false;\n    const body = this.m_world.CreateBody(bd);\n\n    body.CreateFixture(fd);\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'c':\n        this.CreateCircle();\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    let sleeping = true;\n    for (let b = this.m_world.GetBodyList(); b; b = b.m_next) {\n      if (b.GetType() !== b2BodyType.b2_dynamicBody) {\n        continue;\n      }\n\n      if (b.IsAwake()) {\n        sleeping = false;\n      }\n    }\n\n    if (this.m_stepCount === 180) {\n      this.m_stepCount += 0;\n    }\n\n    if (sleeping) {\n      // this.CreateCircle();\n    }\n\n    super.Step(settings);\n\n    // for (let b = this.m_world.GetBodyList(); b; b = b.m_next) {\n    // if (b.GetType() !== b2BodyType.b2_dynamicBody) {\n    // }\n\n    // const p = b.GetPosition();\n    // if (p.x <= -10.0 || 10.0 <= p.x || p.y <= 0.0 || 20.0 <= p.y) {\n    //   p.x += 0.0;\n    // }\n    // }\n\n    g_debugDraw.DrawString(5, this.m_textLine, \"Press 'c' to create a circle.\");\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Confined();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2BodyDef, b2BodyType, b2EdgeShape, b2PolygonShape, b2Vec2 } from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Pyramid extends Test {\n  public static readonly e_count = 20;\n\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const a = 0.5;\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(a, a);\n\n      const x = new b2Vec2(-7.0, 0.75);\n      const y = new b2Vec2(0.0, 0.0);\n      const deltaX = new b2Vec2(0.5625, 1.25);\n      const deltaY = new b2Vec2(1.125, 0.0);\n\n      for (let i = 0; i < Pyramid.e_count; ++i) {\n        y.Copy(x);\n\n        for (let j = i; j < Pyramid.e_count; ++j) {\n          const bd = new b2BodyDef();\n          bd.type = b2BodyType.b2_dynamicBody;\n          bd.position.Copy(y);\n          const body = this.m_world.CreateBody(bd);\n          body.CreateFixture(shape, 5.0);\n\n          y.SelfAdd(deltaY);\n        }\n\n        x.SelfAdd(deltaX);\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    // b2DynamicTree* tree = &m_world.m_contactManager.m_broadPhase.m_tree;\n\n    // if (m_stepCount === 400) {\n    //   tree.RebuildBottomUp();\n    // }\n  }\n\n  public static Create(): Test {\n    return new Pyramid();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// Inspired by a contribution by roman_m\n// Dimensions scooped from APE (http://www.cove.org/ape/index.htm)\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2DistanceJointDef,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2Vec2_zero,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class TheoJansen extends Test {\n  public m_offset = new b2Vec2();\n  public m_chassis!: b2Body;\n  public m_wheel!: b2Body;\n  public m_motorJoint!: b2RevoluteJoint;\n  public m_motorOn = false;\n  public m_motorSpeed = 0;\n\n  constructor() {\n    super();\n\n    this.Construct();\n  }\n\n  public CreateLeg(s: number, wheelAnchor: b2Vec2) {\n    const p1 = new b2Vec2(5.4 * s, -6.1);\n    const p2 = new b2Vec2(7.2 * s, -1.2);\n    const p3 = new b2Vec2(4.3 * s, -1.9);\n    const p4 = new b2Vec2(3.1 * s, 0.8);\n    const p5 = new b2Vec2(6.0 * s, 1.5);\n    const p6 = new b2Vec2(2.5 * s, 3.7);\n\n    const fd1 = new b2FixtureDef();\n    const fd2 = new b2FixtureDef();\n    fd1.filter.groupIndex = -1;\n    fd2.filter.groupIndex = -1;\n    fd1.density = 1.0;\n    fd2.density = 1.0;\n\n    const poly1 = new b2PolygonShape();\n    const poly2 = new b2PolygonShape();\n\n    if (s > 0.0) {\n      const vertices = [];\n\n      vertices[0] = p1;\n      vertices[1] = p2;\n      vertices[2] = p3;\n      poly1.Set(vertices);\n\n      vertices[0] = b2Vec2_zero;\n      vertices[1] = b2Vec2.SubVV(p5, p4, new b2Vec2());\n      vertices[2] = b2Vec2.SubVV(p6, p4, new b2Vec2());\n      poly2.Set(vertices);\n    } else {\n      const vertices = [];\n\n      vertices[0] = p1;\n      vertices[1] = p3;\n      vertices[2] = p2;\n      poly1.Set(vertices);\n\n      vertices[0] = b2Vec2_zero;\n      vertices[1] = b2Vec2.SubVV(p6, p4, new b2Vec2());\n      vertices[2] = b2Vec2.SubVV(p5, p4, new b2Vec2());\n      poly2.Set(vertices);\n    }\n\n    fd1.shape = poly1;\n    fd2.shape = poly2;\n\n    const bd1 = new b2BodyDef();\n    const bd2 = new b2BodyDef();\n    bd1.type = b2BodyType.b2_dynamicBody;\n    bd2.type = b2BodyType.b2_dynamicBody;\n    bd1.position.Copy(this.m_offset);\n    bd2.position.Copy(b2Vec2.AddVV(p4, this.m_offset, new b2Vec2()));\n\n    bd1.angularDamping = 10.0;\n    bd2.angularDamping = 10.0;\n\n    const body1 = this.m_world.CreateBody(bd1);\n    const body2 = this.m_world.CreateBody(bd2);\n\n    body1.CreateFixture(fd1);\n    body2.CreateFixture(fd2);\n\n    const djd = new b2DistanceJointDef();\n\n    // Using a soft distance constraint can reduce some jitter.\n    // It also makes the structure seem a bit more fluid by\n    // acting like a suspension system.\n    djd.dampingRatio = 0.5;\n    djd.frequencyHz = 10.0;\n\n    djd.Initialize(\n      body1,\n      body2,\n      b2Vec2.AddVV(p2, this.m_offset, new b2Vec2()),\n      b2Vec2.AddVV(p5, this.m_offset, new b2Vec2()),\n    );\n    this.m_world.CreateJoint(djd);\n\n    djd.Initialize(\n      body1,\n      body2,\n      b2Vec2.AddVV(p3, this.m_offset, new b2Vec2()),\n      b2Vec2.AddVV(p4, this.m_offset, new b2Vec2()),\n    );\n    this.m_world.CreateJoint(djd);\n\n    djd.Initialize(\n      body1,\n      this.m_wheel,\n      b2Vec2.AddVV(p3, this.m_offset, new b2Vec2()),\n      b2Vec2.AddVV(wheelAnchor, this.m_offset, new b2Vec2()),\n    );\n    this.m_world.CreateJoint(djd);\n\n    djd.Initialize(\n      body2,\n      this.m_wheel,\n      b2Vec2.AddVV(p6, this.m_offset, new b2Vec2()),\n      b2Vec2.AddVV(wheelAnchor, this.m_offset, new b2Vec2()),\n    );\n    this.m_world.CreateJoint(djd);\n\n    const rjd = new b2RevoluteJointDef();\n\n    rjd.Initialize(body2, this.m_chassis, b2Vec2.AddVV(p4, this.m_offset, new b2Vec2()));\n    this.m_world.CreateJoint(rjd);\n  }\n\n  public Construct() {\n    this.m_offset.Set(0.0, 8.0);\n    this.m_motorSpeed = 2.0;\n    this.m_motorOn = true;\n    const pivot = new b2Vec2(0.0, 0.8);\n\n    // Ground\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-50.0, 0.0), new b2Vec2(50.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(new b2Vec2(-50.0, 0.0), new b2Vec2(-50.0, 10.0));\n      ground.CreateFixture(shape, 0.0);\n\n      shape.Set(new b2Vec2(50.0, 0.0), new b2Vec2(50.0, 10.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Balls\n    for (let i = 0; i < 40; ++i) {\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.25;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-40.0 + 2.0 * i, 0.5);\n\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(shape, 1.0);\n    }\n\n    // Chassis\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(2.5, 1.0);\n\n      const sd = new b2FixtureDef();\n      sd.density = 1.0;\n      sd.shape = shape;\n      sd.filter.groupIndex = -1;\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Copy(pivot).SelfAdd(this.m_offset);\n      this.m_chassis = this.m_world.CreateBody(bd);\n      this.m_chassis.CreateFixture(sd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_radius = 1.6;\n\n      const sd = new b2FixtureDef();\n      sd.density = 1.0;\n      sd.shape = shape;\n      sd.filter.groupIndex = -1;\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Copy(pivot).SelfAdd(this.m_offset);\n      this.m_wheel = this.m_world.CreateBody(bd);\n      this.m_wheel.CreateFixture(sd);\n    }\n\n    {\n      const jd = new b2RevoluteJointDef();\n      jd.Initialize(this.m_wheel, this.m_chassis, b2Vec2.AddVV(pivot, this.m_offset, new b2Vec2()));\n      jd.collideConnected = false;\n      jd.motorSpeed = this.m_motorSpeed;\n      jd.maxMotorTorque = 400.0;\n      jd.enableMotor = this.m_motorOn;\n      this.m_motorJoint = this.m_world.CreateJoint(jd);\n    }\n\n    const wheelAnchor = b2Vec2.AddVV(pivot, new b2Vec2(0.0, -0.8), new b2Vec2());\n\n    this.CreateLeg(-1.0, wheelAnchor);\n    this.CreateLeg(1.0, wheelAnchor);\n\n    this.m_wheel.SetTransformVec(this.m_wheel.GetPosition(), (120.0 * b2_pi) / 180.0);\n    this.CreateLeg(-1.0, wheelAnchor);\n    this.CreateLeg(1.0, wheelAnchor);\n\n    this.m_wheel.SetTransformVec(this.m_wheel.GetPosition(), (-120.0 * b2_pi) / 180.0);\n    this.CreateLeg(-1.0, wheelAnchor);\n    this.CreateLeg(1.0, wheelAnchor);\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_motorJoint.SetMotorSpeed(-this.m_motorSpeed);\n        break;\n\n      case 's':\n        this.m_motorJoint.SetMotorSpeed(0.0);\n        break;\n\n      case 'd':\n        this.m_motorJoint.SetMotorSpeed(this.m_motorSpeed);\n        break;\n\n      case 'm':\n        this.m_motorJoint.EnableMotor(!this.m_motorJoint.IsMotorEnabled());\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      'Keys: left = a, brake = s, right = d, toggle motor = m',\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new TheoJansen();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Abs,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Color,\n  b2Cos,\n  b2EdgeShape,\n  b2Fixture,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RandomRange,\n  b2RayCastCallback,\n  b2Sin,\n  b2Sqrt,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class EdgeShapesCallback extends b2RayCastCallback {\n  public m_fixture: b2Fixture | null = null;\n  public m_point = new b2Vec2();\n  public m_normal = new b2Vec2();\n  public ReportFixture(\n    fixture: b2Fixture,\n    point: b2Vec2,\n    normal: b2Vec2,\n    fraction: number,\n  ): number {\n    this.m_fixture = fixture;\n    this.m_point.Copy(point);\n    this.m_normal.Copy(normal);\n    return fraction;\n  }\n}\n\nexport class EdgeShapes extends Test {\n  public static readonly e_maxBodies = 256;\n\n  public m_bodyIndex = 0;\n  public m_bodies: Array<b2Body | null>;\n  public m_polygons: b2PolygonShape[];\n  public m_circle: b2CircleShape;\n  public m_angle = 0.0;\n\n  constructor() {\n    super();\n\n    this.m_bodyIndex = 0;\n    this.m_bodies = new Array(EdgeShapes.e_maxBodies);\n    this.m_polygons = new Array(4);\n    for (let i = 0; i < 4; ++i) {\n      this.m_polygons[i] = new b2PolygonShape();\n    }\n    this.m_circle = new b2CircleShape();\n\n    this.m_angle = 0.0;\n\n    // Ground body\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      let x1 = -20.0;\n      let y1 = 2.0 * b2Cos((x1 / 10.0) * b2_pi);\n      for (let i = 0; i < 80; ++i) {\n        const x2 = x1 + 0.5;\n        const y2 = 2.0 * b2Cos((x2 / 10.0) * b2_pi);\n\n        const shape = new b2EdgeShape();\n        shape.Set(new b2Vec2(x1, y1), new b2Vec2(x2, y2));\n        ground.CreateFixture(shape, 0.0);\n\n        x1 = x2;\n        y1 = y2;\n      }\n    }\n\n    {\n      const vertices = new Array(3);\n      vertices[0] = new b2Vec2(-0.5, 0.0);\n      vertices[1] = new b2Vec2(0.5, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[0].Set(vertices, 3);\n    }\n\n    {\n      const vertices = new Array(3);\n      vertices[0] = new b2Vec2(-0.1, 0.0);\n      vertices[1] = new b2Vec2(0.1, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n      this.m_polygons[1].Set(vertices, 3);\n    }\n\n    {\n      const w = 1.0;\n      const b = w / (2.0 + b2Sqrt(2.0));\n      const s = b2Sqrt(2.0) * b;\n\n      const vertices = new Array(8);\n      vertices[0] = new b2Vec2(0.5 * s, 0.0);\n      vertices[1] = new b2Vec2(0.5 * w, b);\n      vertices[2] = new b2Vec2(0.5 * w, b + s);\n      vertices[3] = new b2Vec2(0.5 * s, w);\n      vertices[4] = new b2Vec2(-0.5 * s, w);\n      vertices[5] = new b2Vec2(-0.5 * w, b + s);\n      vertices[6] = new b2Vec2(-0.5 * w, b);\n      vertices[7] = new b2Vec2(-0.5 * s, 0.0);\n\n      this.m_polygons[2].Set(vertices, 8);\n    }\n\n    {\n      this.m_polygons[3].SetAsBox(0.5, 0.5);\n    }\n\n    {\n      this.m_circle.m_radius = 0.5;\n    }\n\n    for (let i = 0; i < EdgeShapes.e_maxBodies; ++i) {\n      this.m_bodies[i] = null;\n    }\n  }\n\n  public CreateBody(index: number) {\n    const old_body = this.m_bodies[this.m_bodyIndex];\n    if (old_body !== null) {\n      this.m_world.DestroyBody(old_body);\n      this.m_bodies[this.m_bodyIndex] = null;\n    }\n\n    const bd = new b2BodyDef();\n\n    const x = b2RandomRange(-10.0, 10.0);\n    const y = b2RandomRange(10.0, 20.0);\n    bd.position.Set(x, y);\n    bd.angle = b2RandomRange(-b2_pi, b2_pi);\n    bd.type = b2BodyType.b2_dynamicBody;\n\n    if (index === 4) {\n      bd.angularDamping = 0.02;\n    }\n\n    const new_body = (this.m_bodies[this.m_bodyIndex] = this.m_world.CreateBody(bd));\n\n    if (index < 4) {\n      const fd = new b2FixtureDef();\n      fd.shape = this.m_polygons[index];\n      fd.friction = 0.3;\n      fd.density = 20.0;\n      new_body.CreateFixture(fd);\n    } else {\n      const fd = new b2FixtureDef();\n      fd.shape = this.m_circle;\n      fd.friction = 0.3;\n      fd.density = 20.0;\n\n      new_body.CreateFixture(fd);\n    }\n\n    this.m_bodyIndex = (this.m_bodyIndex + 1) % EdgeShapes.e_maxBodies;\n  }\n\n  public DestroyBody() {\n    for (let i = 0; i < EdgeShapes.e_maxBodies; ++i) {\n      const body = this.m_bodies[i];\n      if (body !== null) {\n        this.m_world.DestroyBody(body);\n        this.m_bodies[i] = null;\n        return;\n      }\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        this.CreateBody(key.charCodeAt(0) - '1'.charCodeAt(0));\n        break;\n\n      case 'd':\n        this.DestroyBody();\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    const advanceRay = !settings.pause || settings.singleStep;\n    super.Step(settings);\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press 1-5 to drop stuff, m to change the mode');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    const L = 25.0;\n    const point1 = new b2Vec2(0.0, 10.0);\n    const d = new b2Vec2(L * b2Cos(this.m_angle), -L * b2Abs(b2Sin(this.m_angle)));\n    const point2 = b2Vec2.AddVV(point1, d, new b2Vec2());\n\n    const callback = new EdgeShapesCallback();\n    this.m_world.RayCast(callback, point1, point2);\n\n    if (callback.m_fixture) {\n      g_debugDraw.DrawPoint(callback.m_point, 5.0, new b2Color(0.4, 0.9, 0.4));\n      g_debugDraw.DrawSegment(point1, callback.m_point, new b2Color(0.8, 0.8, 0.8));\n      const head = b2Vec2.AddVV(\n        callback.m_point,\n        b2Vec2.MulSV(0.5, callback.m_normal, b2Vec2.s_t0),\n        new b2Vec2(),\n      );\n      g_debugDraw.DrawSegment(callback.m_point, head, new b2Color(0.9, 0.9, 0.4));\n    } else {\n      g_debugDraw.DrawSegment(point1, point2, new b2Color(0.8, 0.8, 0.8));\n    }\n\n    if (advanceRay) {\n      this.m_angle += (0.25 * b2_pi) / 180.0;\n    }\n  }\n\n  public static Create(): Test {\n    return new EdgeShapes();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2CollidePolygons,\n  b2Color,\n  b2Manifold,\n  b2PolygonShape,\n  b2Transform,\n  b2Vec2,\n  b2WorldManifold,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class PolyCollision extends Test {\n  public m_polygonA = new b2PolygonShape();\n  public m_polygonB = new b2PolygonShape();\n  public m_transformA = new b2Transform();\n  public m_transformB = new b2Transform();\n  public m_positionB = new b2Vec2();\n  public m_angleB = 0;\n\n  constructor() {\n    super();\n\n    {\n      this.m_polygonA.SetAsBox(0.2, 0.4);\n      this.m_transformA.SetPositionAngle(new b2Vec2(0.0, 0.0), 0.0);\n    }\n\n    {\n      this.m_polygonB.SetAsBox(0.5, 0.5);\n      this.m_positionB.Set(19.345284, 1.5632932);\n      this.m_angleB = 1.9160721;\n      this.m_transformB.SetPositionAngle(this.m_positionB, this.m_angleB);\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_positionB.x -= 0.1;\n        break;\n\n      case 'd':\n        this.m_positionB.x += 0.1;\n        break;\n\n      case 's':\n        this.m_positionB.y -= 0.1;\n        break;\n\n      case 'w':\n        this.m_positionB.y += 0.1;\n        break;\n\n      case 'q':\n        this.m_angleB += 0.1 * b2_pi;\n        break;\n\n      case 'e':\n        this.m_angleB -= 0.1 * b2_pi;\n        break;\n    }\n\n    this.m_transformB.SetPositionAngle(this.m_positionB, this.m_angleB);\n  }\n\n  public Step(settings: Settings): void {\n    // super.Step(settings);\n    const manifold = new b2Manifold();\n    b2CollidePolygons(\n      manifold,\n      this.m_polygonA,\n      this.m_transformA,\n      this.m_polygonB,\n      this.m_transformB,\n    );\n\n    const worldManifold = new b2WorldManifold();\n    worldManifold.Initialize(\n      manifold,\n      this.m_transformA,\n      this.m_polygonA.m_radius,\n      this.m_transformB,\n      this.m_polygonB.m_radius,\n    );\n\n    g_debugDraw.DrawString(5, this.m_textLine, `point count = ${manifold.pointCount}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    {\n      const color = new b2Color(0.9, 0.9, 0.9);\n      const v = [];\n      for (let i = 0; i < this.m_polygonA.m_count; ++i) {\n        v[i] = b2Transform.MulXV(this.m_transformA, this.m_polygonA.m_vertices[i], new b2Vec2());\n      }\n      g_debugDraw.DrawPolygon(v, this.m_polygonA.m_count, color);\n\n      for (let i = 0; i < this.m_polygonB.m_count; ++i) {\n        v[i] = b2Transform.MulXV(this.m_transformB, this.m_polygonB.m_vertices[i], new b2Vec2());\n      }\n      g_debugDraw.DrawPolygon(v, this.m_polygonB.m_count, color);\n    }\n\n    for (let i = 0; i < manifold.pointCount; ++i) {\n      g_debugDraw.DrawPoint(worldManifold.points[i], 4.0, new b2Color(0.9, 0.3, 0.3));\n    }\n  }\n\n  public static Create(): Test {\n    return new PolyCollision();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Bridge extends Test {\n  public static readonly e_count = 30;\n\n  public m_middle!: b2Body;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      fd.friction = 0.2;\n\n      const jd = new b2RevoluteJointDef();\n\n      let prevBody = ground;\n      for (let i = 0; i < Bridge.e_count; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-14.5 + 1.0 * i, 5.0);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        const anchor = new b2Vec2(-15.0 + 1.0 * i, 5.0);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        if (i === Bridge.e_count >> 1) {\n          this.m_middle = body;\n        }\n        prevBody = body;\n      }\n\n      const anchor = new b2Vec2(-15.0 + 1.0 * Bridge.e_count, 5.0);\n      jd.Initialize(prevBody, ground, anchor);\n      this.m_world.CreateJoint(jd);\n    }\n\n    for (let i = 0; i < 2; ++i) {\n      const vertices = [];\n      vertices[0] = new b2Vec2(-0.5, 0.0);\n      vertices[1] = new b2Vec2(0.5, 0.0);\n      vertices[2] = new b2Vec2(0.0, 1.5);\n\n      const shape = new b2PolygonShape();\n      shape.Set(vertices);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-8.0 + 8.0 * i, 12.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(fd);\n    }\n\n    for (let i = 0; i < 3; ++i) {\n      const shape = new b2CircleShape();\n      shape.m_radius = 0.5;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 1.0;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-6.0 + 6.0 * i, 10.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(fd);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Bridge();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2Contact,\n  b2ContactImpulse,\n  b2EdgeShape,\n  b2Fixture,\n  b2Max,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Breakable extends Test {\n  public static readonly e_count = 7;\n\n  public readonly m_body1: b2Body;\n  public readonly m_velocity = new b2Vec2();\n  public m_angularVelocity = 0;\n  public readonly m_shape1 = new b2PolygonShape();\n  public readonly m_shape2 = new b2PolygonShape();\n  public m_piece1: b2Fixture;\n  public m_piece2: b2Fixture | null;\n  public m_broke = false;\n  public m_break = false;\n\n  constructor() {\n    super();\n\n    // Ground body\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      /*b2Body*/\n      const ground = this.m_world.CreateBody(bd);\n\n      /*b2EdgeShape*/\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Breakable dynamic body\n    {\n      /*b2BodyDef*/\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 40.0);\n      bd.angle = 0.25 * b2_pi;\n      this.m_body1 = this.m_world.CreateBody(bd);\n\n      this.m_shape1 = new b2PolygonShape();\n      this.m_shape1.SetAsBox(0.5, 0.5, new b2Vec2(-0.5, 0.0), 0.0);\n      this.m_piece1 = this.m_body1.CreateFixture(this.m_shape1, 1.0);\n\n      this.m_shape2 = new b2PolygonShape();\n      this.m_shape2.SetAsBox(0.5, 0.5, new b2Vec2(0.5, 0.0), 0.0);\n      this.m_piece2 = this.m_body1.CreateFixture(this.m_shape2, 1.0);\n    }\n  }\n\n  public PostSolve(contact: b2Contact, impulse: b2ContactImpulse) {\n    if (this.m_broke) {\n      // The body already broke.\n      return;\n    }\n\n    // Should the body break?\n    /*int*/\n    const count = contact.GetManifold().pointCount;\n\n    /*float32*/\n    let maxImpulse = 0.0;\n    for (let i = 0; i < count; ++i) {\n      maxImpulse = b2Max(maxImpulse, impulse.normalImpulses[i]);\n    }\n\n    if (maxImpulse > 40.0) {\n      // Flag the body for breaking.\n      this.m_break = true;\n    }\n  }\n\n  public Break() {\n    // Create two bodies from one.\n    /*b2Body*/\n    const body1 = this.m_piece1.GetBody();\n    /*b2Vec2*/\n    const center = body1.GetWorldCenter();\n\n    if (this.m_piece2) {\n      body1.DestroyFixture(this.m_piece2);\n      this.m_piece2 = null;\n    }\n\n    /*b2BodyDef*/\n    const bd = new b2BodyDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Copy(body1.GetPosition());\n    bd.angle = body1.GetAngle();\n\n    /*b2Body*/\n    const body2 = this.m_world.CreateBody(bd);\n    this.m_piece2 = body2.CreateFixture(this.m_shape2, 1.0);\n\n    // Compute consistent velocities for new bodies based on\n    // cached velocity.\n    /*b2Vec2*/\n    const center1 = body1.GetWorldCenter();\n    /*b2Vec2*/\n    const center2 = body2.GetWorldCenter();\n\n    /*b2Vec2*/\n    const velocity1 = b2Vec2.AddVCrossSV(\n      this.m_velocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(center1, center, b2Vec2.s_t0),\n      new b2Vec2(),\n    );\n    /*b2Vec2*/\n    const velocity2 = b2Vec2.AddVCrossSV(\n      this.m_velocity,\n      this.m_angularVelocity,\n      b2Vec2.SubVV(center2, center, b2Vec2.s_t0),\n      new b2Vec2(),\n    );\n\n    body1.SetAngularVelocity(this.m_angularVelocity);\n    body1.SetLinearVelocity(velocity1);\n\n    body2.SetAngularVelocity(this.m_angularVelocity);\n    body2.SetLinearVelocity(velocity2);\n  }\n\n  public Step(settings: Settings): void {\n    if (this.m_break) {\n      this.Break();\n      this.m_broke = true;\n      this.m_break = false;\n    }\n\n    // Cache velocities to improve movement on breakage.\n    if (!this.m_broke) {\n      this.m_velocity.Copy(this.m_body1.GetLinearVelocity());\n      this.m_angularVelocity = this.m_body1.GetAngularVelocity();\n    }\n\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Breakable();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Chain extends Test {\n  public static readonly e_count = 30;\n\n  constructor() {\n    super();\n\n    let ground = null;\n\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.6, 0.125);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      fd.friction = 0.2;\n\n      const jd = new b2RevoluteJointDef();\n      jd.collideConnected = false;\n\n      const y = 25.0;\n      let prevBody = ground;\n      for (let i = 0; i < Chain.e_count; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(0.5 + i, y);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n\n        const anchor = new b2Vec2(i, y);\n        jd.Initialize(prevBody, body, anchor);\n        this.m_world.CreateJoint(jd);\n\n        prevBody = body;\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Chain();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2PrismaticJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class CollisionFiltering extends Test {\n  public static readonly k_smallGroup = 1;\n  public static readonly k_largeGroup = -1;\n  public static readonly k_defaultCategory = 0x0001;\n  public static readonly k_triangleCategory = 0x0002;\n  public static readonly k_boxCategory = 0x0004;\n  public static readonly k_circleCategory = 0x0008;\n  public static readonly k_triangleMask = 0xffff;\n  public static readonly k_boxMask = 0xffff ^ CollisionFiltering.k_triangleCategory;\n  public static readonly k_circleMask = 0xffff;\n\n  constructor() {\n    super();\n\n    // Ground body\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n\n      const sd = new b2FixtureDef();\n      sd.shape = shape;\n      sd.friction = 0.3;\n\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(sd);\n    }\n\n    // Small triangle\n    const vertices = [];\n    vertices[0] = new b2Vec2(-1.0, 0.0);\n    vertices[1] = new b2Vec2(1.0, 0.0);\n    vertices[2] = new b2Vec2(0.0, 2.0);\n    const polygon = new b2PolygonShape();\n    polygon.Set(vertices, 3);\n\n    const triangleShapeDef = new b2FixtureDef();\n    triangleShapeDef.shape = polygon;\n    triangleShapeDef.density = 1.0;\n\n    triangleShapeDef.filter.groupIndex = CollisionFiltering.k_smallGroup;\n    triangleShapeDef.filter.categoryBits = CollisionFiltering.k_triangleCategory;\n    triangleShapeDef.filter.maskBits = CollisionFiltering.k_triangleMask;\n\n    const triangleBodyDef = new b2BodyDef();\n    triangleBodyDef.type = b2BodyType.b2_dynamicBody;\n    triangleBodyDef.position.Set(-5.0, 2.0);\n\n    const body1 = this.m_world.CreateBody(triangleBodyDef);\n    body1.CreateFixture(triangleShapeDef);\n\n    // Large triangle (recycle definitions)\n    vertices[0].SelfMul(2.0);\n    vertices[1].SelfMul(2.0);\n    vertices[2].SelfMul(2.0);\n    polygon.Set(vertices, 3);\n    triangleShapeDef.filter.groupIndex = CollisionFiltering.k_largeGroup;\n    triangleBodyDef.position.Set(-5.0, 6.0);\n    triangleBodyDef.fixedRotation = true; // look at me!\n\n    const body2 = this.m_world.CreateBody(triangleBodyDef);\n    body2.CreateFixture(triangleShapeDef);\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-5.0, 10.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const p = new b2PolygonShape();\n      p.SetAsBox(0.5, 1.0);\n      body.CreateFixture(p, 1.0);\n\n      const jd = new b2PrismaticJointDef();\n      jd.bodyA = body2;\n      jd.bodyB = body;\n      jd.enableLimit = true;\n      jd.localAnchorA.Set(0.0, 4.0);\n      jd.localAnchorB.SetZero();\n      jd.localAxisA.Set(0.0, 1.0);\n      jd.lowerTranslation = -1.0;\n      jd.upperTranslation = 1.0;\n\n      this.m_world.CreateJoint(jd);\n    }\n\n    // Small box\n    polygon.SetAsBox(1.0, 0.5);\n    const boxShapeDef = new b2FixtureDef();\n    boxShapeDef.shape = polygon;\n    boxShapeDef.density = 1.0;\n    boxShapeDef.restitution = 0.1;\n\n    boxShapeDef.filter.groupIndex = CollisionFiltering.k_smallGroup;\n    boxShapeDef.filter.categoryBits = CollisionFiltering.k_boxCategory;\n    boxShapeDef.filter.maskBits = CollisionFiltering.k_boxMask;\n\n    const boxBodyDef = new b2BodyDef();\n    boxBodyDef.type = b2BodyType.b2_dynamicBody;\n    boxBodyDef.position.Set(0.0, 2.0);\n\n    const body3 = this.m_world.CreateBody(boxBodyDef);\n    body3.CreateFixture(boxShapeDef);\n\n    // Large box (recycle definitions)\n    polygon.SetAsBox(2.0, 1.0);\n    boxShapeDef.filter.groupIndex = CollisionFiltering.k_largeGroup;\n    boxBodyDef.position.Set(0.0, 6.0);\n\n    const body4 = this.m_world.CreateBody(boxBodyDef);\n    body4.CreateFixture(boxShapeDef);\n\n    // Small circle\n    const circle = new b2CircleShape();\n    circle.m_radius = 1.0;\n\n    const circleShapeDef = new b2FixtureDef();\n    circleShapeDef.shape = circle;\n    circleShapeDef.density = 1.0;\n\n    circleShapeDef.filter.groupIndex = CollisionFiltering.k_smallGroup;\n    circleShapeDef.filter.categoryBits = CollisionFiltering.k_circleCategory;\n    circleShapeDef.filter.maskBits = CollisionFiltering.k_circleMask;\n\n    const circleBodyDef = new b2BodyDef();\n    circleBodyDef.type = b2BodyType.b2_dynamicBody;\n    circleBodyDef.position.Set(5.0, 2.0);\n\n    const body5 = this.m_world.CreateBody(circleBodyDef);\n    body5.CreateFixture(circleShapeDef);\n\n    // Large circle\n    circle.m_radius *= 2.0;\n    circleShapeDef.filter.groupIndex = CollisionFiltering.k_largeGroup;\n    circleBodyDef.position.Set(5.0, 6.0);\n\n    const body6 = this.m_world.CreateBody(circleBodyDef);\n    body6.CreateFixture(circleShapeDef);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new CollisionFiltering();\n  }\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RandomRange,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class CollisionProcessing extends Test {\n  constructor() {\n    super();\n\n    // Ground body\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n\n      const sd = new b2FixtureDef();\n      sd.shape = shape;\n\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(sd);\n    }\n\n    const xLo = -5.0,\n      xHi = 5.0;\n    const yLo = 2.0,\n      yHi = 35.0;\n\n    // Small triangle\n    const vertices = new Array(3);\n    vertices[0] = new b2Vec2(-1.0, 0.0);\n    vertices[1] = new b2Vec2(1.0, 0.0);\n    vertices[2] = new b2Vec2(0.0, 2.0);\n\n    const polygon = new b2PolygonShape();\n    polygon.Set(vertices, 3);\n\n    const triangleShapeDef = new b2FixtureDef();\n    triangleShapeDef.shape = polygon;\n    triangleShapeDef.density = 1.0;\n\n    const triangleBodyDef = new b2BodyDef();\n    triangleBodyDef.type = b2BodyType.b2_dynamicBody;\n    triangleBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body1 = this.m_world.CreateBody(triangleBodyDef);\n    body1.CreateFixture(triangleShapeDef);\n\n    // Large triangle (recycle definitions)\n    vertices[0].SelfMul(2.0);\n    vertices[1].SelfMul(2.0);\n    vertices[2].SelfMul(2.0);\n    polygon.Set(vertices, 3);\n\n    triangleBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body2 = this.m_world.CreateBody(triangleBodyDef);\n    body2.CreateFixture(triangleShapeDef);\n\n    // Small box\n    polygon.SetAsBox(1.0, 0.5);\n\n    const boxShapeDef = new b2FixtureDef();\n    boxShapeDef.shape = polygon;\n    boxShapeDef.density = 1.0;\n\n    const boxBodyDef = new b2BodyDef();\n    boxBodyDef.type = b2BodyType.b2_dynamicBody;\n    boxBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body3 = this.m_world.CreateBody(boxBodyDef);\n    body3.CreateFixture(boxShapeDef);\n\n    // Large box (recycle definitions)\n    polygon.SetAsBox(2.0, 1.0);\n    boxBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body4 = this.m_world.CreateBody(boxBodyDef);\n    body4.CreateFixture(boxShapeDef);\n\n    // Small circle\n    const circle = new b2CircleShape();\n    circle.m_radius = 1.0;\n\n    const circleShapeDef = new b2FixtureDef();\n    circleShapeDef.shape = circle;\n    circleShapeDef.density = 1.0;\n\n    const circleBodyDef = new b2BodyDef();\n    circleBodyDef.type = b2BodyType.b2_dynamicBody;\n    circleBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body5 = this.m_world.CreateBody(circleBodyDef);\n    body5.CreateFixture(circleShapeDef);\n\n    // Large circle\n    circle.m_radius *= 2.0;\n    circleBodyDef.position.Set(b2RandomRange(xLo, xHi), b2RandomRange(yLo, yHi));\n\n    const body6 = this.m_world.CreateBody(circleBodyDef);\n    body6.CreateFixture(circleShapeDef);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    // We are going to destroy some bodies according to contact\n    // points. We must buffer the bodies that should be destroyed\n    // because they may belong to multiple contact points.\n    const k_maxNuke = 6;\n    const nuke = new Array(k_maxNuke);\n    let nukeCount = 0;\n\n    // Traverse the contact results. Destroy bodies that\n    // are touching heavier bodies.\n    for (let i = 0; i < this.m_pointCount; ++i) {\n      const point = this.m_points[i];\n\n      const body1 = point.fixtureA.GetBody();\n      const body2 = point.fixtureB.GetBody();\n      const mass1 = body1.GetMass();\n      const mass2 = body2.GetMass();\n\n      if (mass1 > 0.0 && mass2 > 0.0) {\n        if (mass2 > mass1) {\n          nuke[nukeCount++] = body1;\n        } else {\n          nuke[nukeCount++] = body2;\n        }\n\n        if (nukeCount === k_maxNuke) {\n          break;\n        }\n      }\n    }\n\n    // Sort the nuke array to group duplicates.\n    nuke.sort((a, b) => {\n      return a - b;\n    });\n\n    // Destroy the bodies, skipping duplicates.\n    let i = 0;\n    while (i < nukeCount) {\n      const b = nuke[i++];\n      while (i < nukeCount && nuke[i] === b) {\n        ++i;\n      }\n\n      if (b !== this.m_bomb) {\n        this.m_world.DestroyBody(b);\n      }\n    }\n  }\n\n  public static Create(): Test {\n    return new CollisionProcessing();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2PolygonShape,\n  b2RandomRange,\n  b2Rot,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class CompoundShapes extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const body = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(50.0, 0.0), new b2Vec2(-50.0, 0.0));\n\n      body.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const circle1 = new b2CircleShape();\n      circle1.m_radius = 0.5;\n      circle1.m_p.Set(-0.5, 0.5);\n\n      const circle2 = new b2CircleShape();\n      circle2.m_radius = 0.5;\n      circle2.m_p.Set(0.5, 0.5);\n\n      for (let i = 0; i < 10; ++i) {\n        const x = b2RandomRange(-0.1, 0.1);\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(x + 5.0, 1.05 + 2.5 * i);\n        bd.angle = b2RandomRange(-b2_pi, b2_pi);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(circle1, 2.0);\n        body.CreateFixture(circle2, 0.0);\n      }\n    }\n\n    {\n      const polygon1 = new b2PolygonShape();\n      polygon1.SetAsBox(0.25, 0.5);\n\n      const polygon2 = new b2PolygonShape();\n      polygon2.SetAsBox(0.25, 0.5, new b2Vec2(0.0, -0.5), 0.5 * b2_pi);\n\n      for (let i = 0; i < 10; ++i) {\n        const x = b2RandomRange(-0.1, 0.1);\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(x - 5.0, 1.05 + 2.5 * i);\n        bd.angle = b2RandomRange(-b2_pi, b2_pi);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(polygon1, 2.0);\n        body.CreateFixture(polygon2, 2.0);\n      }\n    }\n\n    {\n      const xf1 = new b2Transform();\n      xf1.q.SetAngle(0.3524 * b2_pi);\n      xf1.p.Copy(b2Rot.MulRV(xf1.q, new b2Vec2(1.0, 0.0), new b2Vec2()));\n\n      const vertices = [];\n\n      const triangle1 = new b2PolygonShape();\n      vertices[0] = b2Transform.MulXV(xf1, new b2Vec2(-1.0, 0.0), new b2Vec2());\n      vertices[1] = b2Transform.MulXV(xf1, new b2Vec2(1.0, 0.0), new b2Vec2());\n      vertices[2] = b2Transform.MulXV(xf1, new b2Vec2(0.0, 0.5), new b2Vec2());\n      triangle1.Set(vertices, 3);\n\n      const xf2 = new b2Transform();\n      xf2.q.SetAngle(-0.3524 * b2_pi);\n      xf2.p.Copy(b2Rot.MulRV(xf2.q, new b2Vec2(-1.0, 0.0), new b2Vec2()));\n\n      const triangle2 = new b2PolygonShape();\n      vertices[0] = b2Transform.MulXV(xf2, new b2Vec2(-1.0, 0.0), new b2Vec2());\n      vertices[1] = b2Transform.MulXV(xf2, new b2Vec2(1.0, 0.0), new b2Vec2());\n      vertices[2] = b2Transform.MulXV(xf2, new b2Vec2(0.0, 0.5), new b2Vec2());\n      triangle2.Set(vertices, 3);\n\n      for (let i = 0; i < 10; ++i) {\n        const x = b2RandomRange(-0.1, 0.1);\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(x, 2.05 + 2.5 * i);\n        bd.angle = 0;\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(triangle1, 2.0);\n        body.CreateFixture(triangle2, 2.0);\n      }\n    }\n\n    {\n      const bottom = new b2PolygonShape();\n      bottom.SetAsBox(1.5, 0.15);\n\n      const left = new b2PolygonShape();\n      left.SetAsBox(0.15, 2.7, new b2Vec2(-1.45, 2.35), 0.2);\n\n      const right = new b2PolygonShape();\n      right.SetAsBox(0.15, 2.7, new b2Vec2(1.45, 2.35), -0.2);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 2.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(bottom, 4.0);\n      body.CreateFixture(left, 4.0);\n      body.CreateFixture(right, 4.0);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new CompoundShapes();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_pi,\n  b2Color,\n  b2Distance,\n  b2DistanceInput,\n  b2DistanceOutput,\n  b2PolygonShape,\n  b2SimplexCache,\n  b2Transform,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class DistanceTest extends Test {\n  public m_positionB = new b2Vec2();\n  public m_angleB = 0;\n  public m_transformA = new b2Transform();\n  public m_transformB = new b2Transform();\n  public m_polygonA = new b2PolygonShape();\n  public m_polygonB = new b2PolygonShape();\n\n  constructor() {\n    super();\n\n    {\n      this.m_transformA.SetIdentity();\n      this.m_transformA.p.Set(0.0, -0.2);\n      this.m_polygonA.SetAsBox(10.0, 0.2);\n    }\n\n    {\n      this.m_positionB.Set(12.017401, 0.13678508);\n      this.m_angleB = -0.0109265;\n      this.m_transformB.SetPositionAngle(this.m_positionB, this.m_angleB);\n\n      this.m_polygonB.SetAsBox(2.0, 0.1);\n    }\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_positionB.x -= 0.1;\n        break;\n\n      case 'd':\n        this.m_positionB.x += 0.1;\n        break;\n\n      case 's':\n        this.m_positionB.y -= 0.1;\n        break;\n\n      case 'w':\n        this.m_positionB.y += 0.1;\n        break;\n\n      case 'q':\n        this.m_angleB += 0.1 * b2_pi;\n        break;\n\n      case 'e':\n        this.m_angleB -= 0.1 * b2_pi;\n        break;\n    }\n\n    this.m_transformB.SetPositionAngle(this.m_positionB, this.m_angleB);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    const input = new b2DistanceInput();\n    input.proxyA.SetShape(this.m_polygonA, 0);\n    input.proxyB.SetShape(this.m_polygonB, 0);\n    input.transformA.Copy(this.m_transformA);\n    input.transformB.Copy(this.m_transformB);\n    input.useRadii = true;\n    const cache = new b2SimplexCache();\n    cache.count = 0;\n    const output = new b2DistanceOutput();\n    b2Distance(output, cache, input);\n\n    g_debugDraw.DrawString(5, this.m_textLine, `distance = ${output.distance.toFixed(2)}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    g_debugDraw.DrawString(5, this.m_textLine, `iterations = ${output.iterations}`);\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    {\n      const color = new b2Color(0.9, 0.9, 0.9);\n      const v = [];\n      for (let i = 0; i < this.m_polygonA.m_count; ++i) {\n        v[i] = b2Transform.MulXV(this.m_transformA, this.m_polygonA.m_vertices[i], new b2Vec2());\n      }\n      g_debugDraw.DrawPolygon(v, this.m_polygonA.m_count, color);\n\n      for (let i = 0; i < this.m_polygonB.m_count; ++i) {\n        v[i] = b2Transform.MulXV(this.m_transformB, this.m_polygonB.m_vertices[i], new b2Vec2());\n      }\n      g_debugDraw.DrawPolygon(v, this.m_polygonB.m_count, color);\n    }\n\n    const x1 = output.pointA;\n    const x2 = output.pointB;\n\n    const c1 = new b2Color(1.0, 0.0, 0.0);\n    g_debugDraw.DrawPoint(x1, 4.0, c1);\n\n    const c2 = new b2Color(1.0, 1.0, 0.0);\n    g_debugDraw.DrawPoint(x2, 4.0, c2);\n  }\n\n  public static Create(): Test {\n    return new DistanceTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2DistanceJointDef,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2Vec2_zero,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Dominos extends Test {\n  constructor() {\n    super();\n\n    let b1 = null;\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n\n      const bd = new b2BodyDef();\n      b1 = this.m_world.CreateBody(bd);\n      b1.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(6.0, 0.25);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(-1.5, 10.0);\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.1, 1.0);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 20.0;\n      fd.friction = 0.1;\n\n      for (let i = 0; i < 10; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-6.0 + 1.0 * i, 11.25);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(fd);\n      }\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(7.0, 0.25, b2Vec2_zero, 0.3);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(1.0, 6.0);\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    let b2 = null;\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.25, 1.5);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(-7.0, 4.0);\n      b2 = this.m_world.CreateBody(bd);\n      b2.CreateFixture(shape, 0.0);\n    }\n\n    let b3 = null;\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(6.0, 0.125);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-0.9, 1.0);\n      bd.angle = -0.15;\n\n      b3 = this.m_world.CreateBody(bd);\n      b3.CreateFixture(shape, 10.0);\n    }\n\n    const jd = new b2RevoluteJointDef();\n    const anchor = new b2Vec2();\n\n    anchor.Set(-2.0, 1.0);\n    jd.Initialize(b1, b3, anchor);\n    jd.collideConnected = true;\n    this.m_world.CreateJoint(jd);\n\n    let b4 = null;\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.25, 0.25);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-10.0, 15.0);\n      b4 = this.m_world.CreateBody(bd);\n      b4.CreateFixture(shape, 10.0);\n    }\n\n    anchor.Set(-7.0, 15.0);\n    jd.Initialize(b2, b4, anchor);\n    this.m_world.CreateJoint(jd);\n\n    let b5 = null;\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(6.5, 3.0);\n      b5 = this.m_world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      const fd = new b2FixtureDef();\n\n      fd.shape = shape;\n      fd.density = 10.0;\n      fd.friction = 0.1;\n\n      shape.SetAsBox(1.0, 0.1, new b2Vec2(0.0, -0.9), 0.0);\n      b5.CreateFixture(fd);\n\n      shape.SetAsBox(0.1, 1.0, new b2Vec2(-0.9, 0.0), 0.0);\n      b5.CreateFixture(fd);\n\n      shape.SetAsBox(0.1, 1.0, new b2Vec2(0.9, 0.0), 0.0);\n      b5.CreateFixture(fd);\n    }\n\n    anchor.Set(6.0, 2.0);\n    jd.Initialize(b1, b5, anchor);\n    this.m_world.CreateJoint(jd);\n\n    let b6 = null;\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(1.0, 0.1);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(6.5, 4.1);\n      b6 = this.m_world.CreateBody(bd);\n      b6.CreateFixture(shape, 30.0);\n    }\n\n    anchor.Set(7.5, 4.0);\n    jd.Initialize(b5, b6, anchor);\n    this.m_world.CreateJoint(jd);\n\n    let b7 = null;\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.1, 1.0);\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(7.4, 1.0);\n\n      b7 = this.m_world.CreateBody(bd);\n      b7.CreateFixture(shape, 10.0);\n    }\n\n    const djd = new b2DistanceJointDef();\n    djd.bodyA = b3;\n    djd.bodyB = b7;\n    djd.localAnchorA.Set(6.0, 0.0);\n    djd.localAnchorB.Set(0.0, -1.0);\n    const d = b2Vec2.SubVV(\n      djd.bodyB.GetWorldPoint(djd.localAnchorB, new b2Vec2()),\n      djd.bodyA.GetWorldPoint(djd.localAnchorA, new b2Vec2()),\n      new b2Vec2(),\n    );\n    djd.length = d.Length();\n    this.m_world.CreateJoint(djd);\n\n    {\n      const radius = 0.2;\n\n      const shape = new b2CircleShape();\n      shape.m_radius = radius;\n\n      for (let i = 0; i < 4; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(5.9 + 2.0 * radius * i, 2.4);\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 10.0);\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Dominos();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2AABB,\n  b2Color,\n  b2DynamicTree,\n  b2MakeArray,\n  b2Max,\n  b2RandomRange,\n  b2RayCastInput,\n  b2RayCastOutput,\n  b2TestOverlapAABB,\n  b2TreeNode,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class DynamicTreeTest extends Test {\n  public static readonly e_actorCount = 128;\n\n  public m_worldExtent = 0.0;\n  public m_proxyExtent = 0.0;\n\n  public m_tree = new b2DynamicTree<DynamicTreeTest_Actor>();\n  public m_queryAABB = new b2AABB();\n  public m_rayCastInput = new b2RayCastInput();\n  public m_rayCastOutput = new b2RayCastOutput();\n  public m_rayActor: DynamicTreeTest_Actor | null = null;\n  public m_actors: DynamicTreeTest_Actor[] = b2MakeArray(\n    DynamicTreeTest.e_actorCount,\n    () => new DynamicTreeTest_Actor(),\n  );\n  public m_stepCount = 0;\n  public m_automated = false;\n\n  constructor() {\n    super();\n\n    this.m_worldExtent = 15.0;\n    this.m_proxyExtent = 0.5;\n\n    //srand(888);\n\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      const actor = this.m_actors[i];\n      this.GetRandomAABB(actor.aabb);\n      actor.proxyId = this.m_tree.CreateProxy(actor.aabb, actor);\n    }\n\n    this.m_stepCount = 0;\n\n    const h = this.m_worldExtent;\n    this.m_queryAABB.lowerBound.Set(-3.0, -4.0 + h);\n    this.m_queryAABB.upperBound.Set(5.0, 6.0 + h);\n\n    this.m_rayCastInput.p1.Set(-5.0, 5.0 + h);\n    this.m_rayCastInput.p2.Set(7.0, -4.0 + h);\n    //this.m_rayCastInput.p1.Set(0.0, 2.0 + h);\n    //this.m_rayCastInput.p2.Set(0.0, -2.0 + h);\n    this.m_rayCastInput.maxFraction = 1.0;\n\n    this.m_automated = false;\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    this.Reset();\n\n    if (this.m_automated) {\n      const actionCount = b2Max(1, DynamicTreeTest.e_actorCount >> 2);\n\n      for (let i = 0; i < actionCount; ++i) {\n        this.Action();\n      }\n    }\n\n    this.Query();\n    this.RayCast();\n\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      const actor = this.m_actors[i];\n      if (actor.proxyId === null) {\n        continue;\n      }\n\n      const c = new b2Color(0.9, 0.9, 0.9);\n      if (actor === this.m_rayActor && actor.overlap) {\n        c.SetRGB(0.9, 0.6, 0.6);\n      } else if (actor === this.m_rayActor) {\n        c.SetRGB(0.6, 0.9, 0.6);\n      } else if (actor.overlap) {\n        c.SetRGB(0.6, 0.6, 0.9);\n      }\n      g_debugDraw.DrawAABB(actor.aabb, c);\n    }\n\n    const c = new b2Color(0.7, 0.7, 0.7);\n    g_debugDraw.DrawAABB(this.m_queryAABB, c);\n\n    g_debugDraw.DrawSegment(this.m_rayCastInput.p1, this.m_rayCastInput.p2, c);\n\n    const c1 = new b2Color(0.2, 0.9, 0.2);\n    const c2 = new b2Color(0.9, 0.2, 0.2);\n    g_debugDraw.DrawPoint(this.m_rayCastInput.p1, 6.0, c1);\n    g_debugDraw.DrawPoint(this.m_rayCastInput.p2, 6.0, c2);\n\n    if (this.m_rayActor) {\n      const cr = new b2Color(0.2, 0.2, 0.9);\n      //b2Vec2 p = this.m_rayCastInput.p1 + this.m_rayActor.fraction * (this.m_rayCastInput.p2 - this.m_rayCastInput.p1);\n      const p = b2Vec2.AddVV(\n        this.m_rayCastInput.p1,\n        b2Vec2.MulSV(\n          this.m_rayActor.fraction,\n          b2Vec2.SubVV(this.m_rayCastInput.p2, this.m_rayCastInput.p1, new b2Vec2()),\n          new b2Vec2(),\n        ),\n        new b2Vec2(),\n      );\n      g_debugDraw.DrawPoint(p, 6.0, cr);\n    }\n\n    {\n      const height = this.m_tree.GetHeight();\n      g_debugDraw.DrawString(5, this.m_textLine, `dynamic tree height = ${height}`);\n      this.m_textLine += DRAW_STRING_NEW_LINE;\n    }\n\n    ++this.m_stepCount;\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'a':\n        this.m_automated = !this.m_automated;\n        break;\n\n      case 'c':\n        this.CreateProxy();\n        break;\n\n      case 'd':\n        this.DestroyProxy();\n        break;\n\n      case 'm':\n        this.MoveProxy();\n        break;\n    }\n  }\n\n  public GetRandomAABB(aabb: b2AABB): void {\n    const w = new b2Vec2();\n    w.Set(2.0 * this.m_proxyExtent, 2.0 * this.m_proxyExtent);\n    //aabb.lowerBound.x = -this.m_proxyExtent;\n    //aabb.lowerBound.y = -this.m_proxyExtent + this.m_worldExtent;\n    aabb.lowerBound.x = b2RandomRange(-this.m_worldExtent, this.m_worldExtent);\n    aabb.lowerBound.y = b2RandomRange(0.0, 2.0 * this.m_worldExtent);\n    aabb.upperBound.Copy(aabb.lowerBound);\n    aabb.upperBound.SelfAdd(w);\n  }\n\n  public MoveAABB(aabb: b2AABB): void {\n    const d = new b2Vec2();\n    d.x = b2RandomRange(-0.5, 0.5);\n    d.y = b2RandomRange(-0.5, 0.5);\n    //d.x = 2.0;\n    //d.y = 0.0;\n    aabb.lowerBound.SelfAdd(d);\n    aabb.upperBound.SelfAdd(d);\n\n    //b2Vec2 c0 = 0.5 * (aabb.lowerBound + aabb.upperBound);\n    const c0 = b2Vec2.MulSV(\n      0.5,\n      b2Vec2.AddVV(aabb.lowerBound, aabb.upperBound, b2Vec2.s_t0),\n      new b2Vec2(),\n    );\n    const min = new b2Vec2(-this.m_worldExtent, 0.0);\n    const max = new b2Vec2(this.m_worldExtent, 2.0 * this.m_worldExtent);\n    const c = b2Vec2.ClampV(c0, min, max, new b2Vec2());\n\n    aabb.lowerBound.SelfAdd(b2Vec2.SubVV(c, c0, new b2Vec2()));\n    aabb.upperBound.SelfAdd(b2Vec2.SubVV(c, c0, new b2Vec2()));\n  }\n\n  public CreateProxy(): void {\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      const j = 0 | b2RandomRange(0, DynamicTreeTest.e_actorCount);\n      const actor = this.m_actors[j];\n      if (actor.proxyId === null) {\n        this.GetRandomAABB(actor.aabb);\n        actor.proxyId = this.m_tree.CreateProxy(actor.aabb, actor);\n        return;\n      }\n    }\n  }\n\n  public DestroyProxy(): void {\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      const j = 0 | b2RandomRange(0, DynamicTreeTest.e_actorCount);\n      const actor = this.m_actors[j];\n      if (actor.proxyId !== null) {\n        this.m_tree.DestroyProxy(actor.proxyId);\n        actor.proxyId = null;\n        return;\n      }\n    }\n  }\n\n  public MoveProxy(): void {\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      const j = 0 | b2RandomRange(0, DynamicTreeTest.e_actorCount);\n      const actor = this.m_actors[j];\n      if (actor.proxyId === null) {\n        continue;\n      }\n\n      const aabb0 = new b2AABB();\n      aabb0.Copy(actor.aabb);\n      this.MoveAABB(actor.aabb);\n      const displacement = b2Vec2.SubVV(actor.aabb.GetCenter(), aabb0.GetCenter(), new b2Vec2());\n      this.m_tree.MoveProxy(actor.proxyId, actor.aabb, displacement);\n      return;\n    }\n  }\n\n  public Reset(): void {\n    this.m_rayActor = null;\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      this.m_actors[i].fraction = 1.0;\n      this.m_actors[i].overlap = false;\n    }\n  }\n\n  public Action(): void {\n    const choice = 0 | b2RandomRange(0, 20);\n\n    switch (choice) {\n      case 0:\n        this.CreateProxy();\n        break;\n\n      case 1:\n        this.DestroyProxy();\n        break;\n\n      default:\n        this.MoveProxy();\n    }\n  }\n\n  public Query(): void {\n    this.m_tree.Query(this.m_queryAABB, (proxyId: b2TreeNode<DynamicTreeTest_Actor>): boolean => {\n      const actor = proxyId.userData; // this.m_tree.GetUserData(proxyId);\n      actor.overlap = b2TestOverlapAABB(this.m_queryAABB, actor.aabb);\n      return true;\n    });\n\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      if (this.m_actors[i].proxyId === null) {\n        continue;\n      }\n\n      // DEBUG: const overlap =\n      b2TestOverlapAABB(this.m_queryAABB, this.m_actors[i].aabb);\n      // DEBUG: b2Assert(overlap === this.m_actors[i].overlap);\n    }\n  }\n\n  public RayCast(): void {\n    this.m_rayActor = null;\n\n    const input = new b2RayCastInput();\n    input.Copy(this.m_rayCastInput);\n\n    // Ray cast against the dynamic tree.\n    this.m_tree.RayCast(\n      input,\n      (input: b2RayCastInput, proxyId: b2TreeNode<DynamicTreeTest_Actor>): number => {\n        const actor: DynamicTreeTest_Actor = proxyId.userData; // this.m_tree.GetUserData(proxyId);\n\n        const output = new b2RayCastOutput();\n        const hit = actor.aabb.RayCast(output, input);\n\n        if (hit) {\n          this.m_rayCastOutput = output;\n          this.m_rayActor = actor;\n          this.m_rayActor.fraction = output.fraction;\n          return output.fraction;\n        }\n\n        return input.maxFraction;\n      },\n    );\n\n    // Brute force ray cast.\n    let bruteActor = null;\n    const bruteOutput = new b2RayCastOutput();\n    for (let i = 0; i < DynamicTreeTest.e_actorCount; ++i) {\n      if (this.m_actors[i].proxyId === null) {\n        continue;\n      }\n\n      const output = new b2RayCastOutput();\n      const hit = this.m_actors[i].aabb.RayCast(output, input);\n      if (hit) {\n        bruteActor = this.m_actors[i];\n        bruteOutput.Copy(output);\n        input.maxFraction = output.fraction;\n      }\n    }\n\n    if (bruteActor !== null) {\n      // DEBUG: b2Assert(bruteOutput.fraction === this.m_rayCastOutput.fraction);\n    }\n  }\n\n  public static Create(): Test {\n    return new DynamicTreeTest();\n  }\n}\n\nexport class DynamicTreeTest_Actor {\n  public aabb = new b2AABB();\n  public fraction = 0.0;\n  public overlap = false;\n  public proxyId: b2TreeNode<DynamicTreeTest_Actor> | null = null;\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2_epsilon_sq,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2Contact,\n  b2EdgeShape,\n  b2Fixture,\n  b2FixtureDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class SensorTest extends Test {\n  public static readonly e_count = 7;\n\n  public m_sensor: b2Fixture;\n  public m_bodies: b2Body[];\n  public m_touching: boolean[][];\n\n  constructor() {\n    super();\n\n    this.m_bodies = new Array(SensorTest.e_count);\n    this.m_touching = new Array(SensorTest.e_count);\n    for (let i = 0; i < SensorTest.e_count; ++i) {\n      this.m_touching[i] = new Array(1);\n    }\n\n    const bd = new b2BodyDef();\n    const ground = this.m_world.CreateBody(bd);\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    /*\n    {\n      const sd = new b2FixtureDef();\n      sd.SetAsBox(10.0, 2.0, new b2Vec2(0.0, 20.0), 0.0);\n      sd.isSensor = true;\n      this.m_sensor = ground.CreateFixture(sd);\n    }\n    */\n    {\n      const shape = new b2CircleShape();\n      shape.m_radius = 5.0;\n      shape.m_p.Set(0.0, 10.0);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.isSensor = true;\n      this.m_sensor = ground.CreateFixture(fd);\n    }\n\n    {\n      const shape = new b2CircleShape();\n      shape.m_radius = 1.0;\n\n      for (let i = 0; i < SensorTest.e_count; ++i) {\n        //const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-10.0 + 3.0 * i, 20.0);\n        bd.userData = this.m_touching[i];\n\n        this.m_touching[i][0] = false;\n        this.m_bodies[i] = this.m_world.CreateBody(bd);\n\n        this.m_bodies[i].CreateFixture(shape, 1.0);\n      }\n    }\n  }\n\n  public BeginContact(contact: b2Contact) {\n    const fixtureA = contact.GetFixtureA();\n    const fixtureB = contact.GetFixtureB();\n\n    if (fixtureA === this.m_sensor) {\n      const userData = fixtureB.GetBody().GetUserData();\n      if (userData) {\n        const touching = userData;\n        touching[0] = true;\n      }\n    }\n\n    if (fixtureB === this.m_sensor) {\n      const userData = fixtureA.GetBody().GetUserData();\n      if (userData) {\n        const touching = userData;\n        touching[0] = true;\n      }\n    }\n  }\n\n  public EndContact(contact: b2Contact) {\n    const fixtureA = contact.GetFixtureA();\n    const fixtureB = contact.GetFixtureB();\n\n    if (fixtureA === this.m_sensor) {\n      const userData = fixtureB.GetBody().GetUserData();\n      if (userData) {\n        const touching = userData;\n        touching[0] = false;\n      }\n    }\n\n    if (fixtureB === this.m_sensor) {\n      const userData = fixtureA.GetBody().GetUserData();\n      if (userData) {\n        const touching = userData;\n        touching[0] = false;\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n\n    // Traverse the contact results. Apply a force on shapes\n    // that overlap the sensor.\n    for (let i = 0; i < SensorTest.e_count; ++i) {\n      if (!this.m_touching[i][0]) {\n        continue;\n      }\n\n      const body = this.m_bodies[i];\n      const ground = this.m_sensor.GetBody();\n\n      const circle = this.m_sensor.GetShape() as b2CircleShape;\n      const center = ground.GetWorldPoint(circle.m_p, new b2Vec2());\n\n      const position = body.GetPosition();\n\n      const d = b2Vec2.SubVV(center, position, new b2Vec2());\n      if (d.LengthSquared() < b2_epsilon_sq) {\n        continue;\n      }\n\n      d.Normalize();\n      const F = b2Vec2.MulSV(100.0, d, new b2Vec2());\n      body.ApplyForce(F, position);\n    }\n  }\n\n  public static Create(): Test {\n    return new SensorTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class VaryingFriction extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(13.0, 0.25);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(-4.0, 22.0);\n      bd.angle = -0.25;\n\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.25, 1.0);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(10.5, 19.0);\n\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(13.0, 0.25);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(4.0, 14.0);\n      bd.angle = 0.25;\n\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.25, 1.0);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(-10.5, 11.0);\n\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(13.0, 0.25);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(-4.0, 6.0);\n      bd.angle = -0.25;\n\n      const ground = this.m_world.CreateBody(bd);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(0.5, 0.5);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 25.0;\n\n      const friction = [0.75, 0.5, 0.35, 0.1, 0.0];\n\n      for (let i = 0; i < 5; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(-15.0 + 4.0 * i, 28.0);\n        const body = this.m_world.CreateBody(bd);\n\n        fd.friction = friction[i];\n        body.CreateFixture(fd);\n      }\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new VaryingFriction();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2PolygonShape,\n  b2RandomRange,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class AddPair extends Test {\n  constructor() {\n    super();\n\n    this.m_world.SetGravity(new b2Vec2(0.0, 0.0));\n    {\n      // const a = 0.1;\n\n      const shape = new b2CircleShape();\n      shape.m_p.SetZero();\n      shape.m_radius = 0.1;\n\n      const minX = -6.0;\n      const maxX = 0.0;\n      const minY = 4.0;\n      const maxY = 6.0;\n\n      for (let i = 0; i < 400; ++i) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        bd.position.Set(b2RandomRange(minX, maxX), b2RandomRange(minY, maxY));\n        const body = this.m_world.CreateBody(bd);\n        body.CreateFixture(shape, 0.01);\n      }\n    }\n\n    {\n      const shape = new b2PolygonShape();\n      shape.SetAsBox(1.5, 1.5);\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(-40.0, 5.0);\n      bd.bullet = true;\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(shape, 1.0);\n      body.SetLinearVelocity(new b2Vec2(150.0, 0.0));\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new AddPair();\n  }\n}\n","/*\nTest case for collision/jerking issue.\n*/\n\nimport {\n  b2_pi,\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport {\n  DRAW_STRING_NEW_LINE,\n  g_camera,\n  g_debugDraw,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nexport class Skier extends Test {\n  public m_platform_width: number;\n  public m_skier: b2Body;\n  public m_fixed_camera: boolean;\n\n  constructor() {\n    super();\n\n    const ground = this.m_world.CreateBody();\n\n    const PlatformWidth = 8.0;\n\n    /*\n    First angle is from the horizontal and should be negative for a downward slope.\n    Second angle is relative to the preceding slope, and should be positive, creating a kind of\n    loose 'Z'-shape from the 3 edges.\n    If A1 = -10, then A2 <= ~1.5 will result in the collision glitch.\n    If A1 = -30, then A2 <= ~10.0 will result in the glitch.\n    */\n    const Angle1Degrees = -30.0;\n    const Angle2Degrees = 10.0;\n\n    /*\n    The larger the value of SlopeLength, the less likely the glitch will show up.\n    */\n    const SlopeLength = 2.0;\n\n    const SurfaceFriction = 0.2;\n\n    // Convert to radians\n    const Slope1Incline = (-Angle1Degrees * b2_pi) / 180.0;\n    const Slope2Incline = Slope1Incline - (Angle2Degrees * b2_pi) / 180.0;\n    //\n\n    this.m_platform_width = PlatformWidth;\n\n    const verts: b2Vec2[] = [];\n\n    // Horizontal platform\n    verts.push(new b2Vec2(-PlatformWidth, 0.0));\n    verts.push(new b2Vec2(0.0, 0.0));\n\n    // Slope\n    verts.push(\n      new b2Vec2(\n        verts[verts.length - 1].x + SlopeLength * Math.cos(Slope1Incline),\n        verts[verts.length - 1].y - SlopeLength * Math.sin(Slope1Incline),\n      ),\n    );\n\n    verts.push(\n      new b2Vec2(\n        verts[verts.length - 1].x + SlopeLength * Math.cos(Slope2Incline),\n        verts[verts.length - 1].y - SlopeLength * Math.sin(Slope2Incline),\n      ),\n    );\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(verts[0], verts[1]);\n      shape.m_hasVertex3 = true;\n      shape.m_vertex3.Copy(verts[2]);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 0.0;\n      fd.friction = SurfaceFriction;\n\n      ground.CreateFixture(fd);\n    }\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(verts[1], verts[2]);\n      shape.m_hasVertex0 = true;\n      shape.m_hasVertex3 = true;\n      shape.m_vertex0.Copy(verts[0]);\n      shape.m_vertex3.Copy(verts[3]);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 0.0;\n      fd.friction = SurfaceFriction;\n\n      ground.CreateFixture(fd);\n    }\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(verts[2], verts[3]);\n      shape.m_hasVertex0 = true;\n      shape.m_vertex0.Copy(verts[1]);\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = 0.0;\n      fd.friction = SurfaceFriction;\n\n      ground.CreateFixture(fd);\n    }\n\n    {\n      const EnableCircularSkiTips = false;\n\n      const BodyWidth = 1.0;\n      const BodyHeight = 2.5;\n      const SkiLength = 3.0;\n\n      /*\n      Larger values for this seem to alleviate the issue to some extent.\n      */\n      const SkiThickness = 0.3;\n\n      const SkiFriction = 0.0;\n      const SkiRestitution = 0.15;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      let initial_y = BodyHeight / 2 + SkiThickness;\n      if (EnableCircularSkiTips) {\n        initial_y += SkiThickness / 6;\n      }\n      bd.position.Set(-this.m_platform_width / 2, initial_y);\n\n      const skier = this.m_world.CreateBody(bd);\n\n      const body = new b2PolygonShape();\n      body.SetAsBox(BodyWidth / 2, BodyHeight / 2);\n\n      const ski = new b2PolygonShape();\n      const verts: b2Vec2[] = [];\n      verts.push(new b2Vec2(-SkiLength / 2 - SkiThickness, -BodyHeight / 2));\n      verts.push(new b2Vec2(-SkiLength / 2, -BodyHeight / 2 - SkiThickness));\n      verts.push(new b2Vec2(SkiLength / 2, -BodyHeight / 2 - SkiThickness));\n      verts.push(new b2Vec2(SkiLength / 2 + SkiThickness, -BodyHeight / 2));\n      ski.Set(verts);\n\n      const ski_back_shape = new b2CircleShape();\n      ski_back_shape.m_p.Set(-SkiLength / 2.0, -BodyHeight / 2 - SkiThickness * (2.0 / 3));\n      ski_back_shape.m_radius = SkiThickness / 2;\n\n      const ski_front_shape = new b2CircleShape();\n      ski_front_shape.m_p.Set(SkiLength / 2, -BodyHeight / 2 - SkiThickness * (2.0 / 3));\n      ski_front_shape.m_radius = SkiThickness / 2;\n\n      const fd = new b2FixtureDef();\n      fd.shape = body;\n      fd.density = 1.0;\n      skier.CreateFixture(fd);\n\n      fd.friction = SkiFriction;\n      fd.restitution = SkiRestitution;\n\n      fd.shape = ski;\n      skier.CreateFixture(fd);\n\n      if (EnableCircularSkiTips) {\n        fd.shape = ski_back_shape;\n        skier.CreateFixture(fd);\n\n        fd.shape = ski_front_shape;\n        skier.CreateFixture(fd);\n      }\n\n      skier.SetLinearVelocity(new b2Vec2(0.5, 0.0));\n\n      this.m_skier = skier;\n    }\n\n    g_camera.m_center.Set(this.m_platform_width / 2.0, 0.0);\n    g_camera.m_center.Set(this.m_platform_width / 2.0, 0.0);\n    g_camera.m_zoom = 0.4;\n    this.m_fixed_camera = true;\n  }\n\n  public Keyboard(key: string): void {\n    switch (key) {\n      case 'c':\n        this.m_fixed_camera = !this.m_fixed_camera;\n        if (this.m_fixed_camera) {\n          g_camera.m_center.Set(this.m_platform_width / 2.0, 0.0);\n        }\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    g_debugDraw.DrawString(5, this.m_textLine, 'Keys: c = Camera fixed/tracking');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    if (!this.m_fixed_camera) {\n      g_camera.m_center.Copy(this.m_skier.GetPosition());\n    }\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new Skier();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport { b2_pi, b2MakeNumberArray, b2Max, b2Min, b2Rope, b2RopeDef, b2Vec2 } from '@highduck/box2d';\nimport { DRAW_STRING_NEW_LINE, g_debugDraw, Settings, Test } from '@highduck/box2d-testbed';\n\nexport class Rope extends Test {\n  public m_rope = new b2Rope();\n  public m_angle = 0.0;\n\n  constructor() {\n    super();\n\n    /*const int32*/\n    const N = 40;\n    /*b2Vec2[]*/\n    const vertices = b2Vec2.MakeArray(N);\n    /*float32[]*/\n    const masses = b2MakeNumberArray(N);\n\n    for (let i = 0; i < N; ++i) {\n      vertices[i].Set(0.0, 20.0 - 0.25 * i);\n      masses[i] = 1.0;\n    }\n    masses[0] = 0.0;\n    masses[1] = 0.0;\n\n    /*b2RopeDef*/\n    const def = new b2RopeDef();\n    def.vertices = vertices;\n    def.count = N;\n    def.gravity.Set(0.0, -10.0);\n    def.masses = masses;\n    def.damping = 0.1;\n    def.k2 = 1.0;\n    def.k3 = 0.5;\n\n    this.m_rope.Initialize(def);\n\n    this.m_angle = 0.0;\n    this.m_rope.SetAngle(this.m_angle);\n  }\n\n  public Keyboard(key: string) {\n    switch (key) {\n      case 'q':\n        this.m_angle = b2Max(-b2_pi, this.m_angle - 0.05 * b2_pi);\n        this.m_rope.SetAngle(this.m_angle);\n        break;\n\n      case 'e':\n        this.m_angle = b2Min(b2_pi, this.m_angle + 0.05 * b2_pi);\n        this.m_rope.SetAngle(this.m_angle);\n        break;\n    }\n  }\n\n  public Step(settings: Settings): void {\n    let dt = settings.hz > 0.0 ? 1.0 / settings.hz : 0.0;\n    if (settings.pause && !settings.singleStep) {\n      dt = 0.0;\n    }\n\n    this.m_rope.Step(dt, 1);\n\n    super.Step(settings);\n\n    this.m_rope.Draw(g_debugDraw);\n\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press (q,e) to adjust target angle');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n    g_debugDraw.DrawString(\n      5,\n      this.m_textLine,\n      `Target angle = ${((this.m_angle * 180.0) / b2_pi).toFixed(2)} degrees`,\n    );\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create(): Test {\n    return new Rope();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n// Adapted from MotorJoint.h\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2MotorJoint,\n  b2MotorJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class MotorJoint2 extends Test {\n  constructor() {\n    super();\n\n    let ground: b2Body;\n    {\n      const bd = new b2BodyDef();\n      ground = this.m_world.CreateBody(bd);\n\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-20.0, 0.0), new b2Vec2(20.0, 0.0));\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n\n      ground.CreateFixture(fd);\n    }\n\n    // b2Body * body1 = NULL;\n    let body1: b2Body;\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 4.0);\n      body1 = this.m_world.CreateBody(bd);\n\n      const shape = new b2CircleShape();\n      shape.m_radius = 1.0;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.6;\n      fd.density = 2.0;\n      body1.CreateFixture(fd);\n    }\n\n    // b2Body * body2 = NULL;\n    let body2: b2Body;\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(4.0, 8.0);\n      body2 = this.m_world.CreateBody(bd);\n\n      const shape = new b2CircleShape();\n      shape.m_radius = 1.0;\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.friction = 0.6;\n      fd.density = 2.0;\n      body2.CreateFixture(fd);\n    }\n\n    {\n      const mjd = new b2MotorJointDef();\n      mjd.Initialize(body1, body2);\n      mjd.maxForce = 1000.0;\n      mjd.maxTorque = 1000.0;\n      this.m_joint = this.m_world.CreateJoint(mjd) as b2MotorJoint;\n    }\n  }\n\n  // b2MotorJoint* m_joint;\n  public m_joint: b2MotorJoint;\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new MotorJoint2();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2AreaJointDef,\n  b2BodyDef,\n  b2BodyType,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class BlobTest extends Test {\n  constructor() {\n    super();\n\n    const ground = this.m_world.CreateBody(new b2BodyDef());\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(-40.0, 25.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(40.0, 0.0), new b2Vec2(40.0, 25.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    {\n      const ajd = new b2AreaJointDef();\n\n      const cx = 0.0;\n      const cy = 10.0;\n      const rx = 5.0;\n      const ry = 5.0;\n      const nBodies = 20;\n      const bodyRadius = 0.5;\n      for (let i = 0; i < nBodies; ++i) {\n        const angle = (i * 2.0 * Math.PI) / nBodies;\n        const bd = new b2BodyDef();\n        //bd.isBullet = true;\n        bd.fixedRotation = true;\n\n        const x = cx + rx * Math.cos(angle);\n        const y = cy + ry * Math.sin(angle);\n        bd.position.Set(x, y);\n        bd.type = b2BodyType.b2_dynamicBody;\n        const body = this.m_world.CreateBody(bd);\n\n        const fd = new b2FixtureDef();\n        fd.shape = new b2CircleShape(bodyRadius);\n        fd.density = 1.0;\n        body.CreateFixture(fd);\n\n        ajd.AddBody(body);\n      }\n\n      ajd.frequencyHz = 10.0;\n      ajd.dampingRatio = 1.0;\n      this.m_world.CreateJoint(ajd);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new BlobTest();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2CircleShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class TestCCD extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const vertices = [];\n      vertices[0] = new b2Vec2(-30.0, 0.0);\n      vertices[1] = new b2Vec2(30.0, 0.0);\n      vertices[2] = new b2Vec2(30.0, 40.0);\n      vertices[3] = new b2Vec2(-30.0, 40.0);\n      const shape = new b2ChainShape();\n      shape.CreateLoop(vertices);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Always on, even if default is off\n    this.m_world.SetContinuousPhysics(true);\n\n    const fd = new b2FixtureDef();\n    // These values are used for all the parts of the 'basket'\n    fd.density = 4.0;\n    fd.restitution = 1.4;\n\n    // Create 'basket'\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.bullet = true;\n      bd.position.Set(15.0, 5.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const sd_bottom = new b2PolygonShape();\n      sd_bottom.SetAsBox(4.5, 0.45);\n      fd.shape = sd_bottom;\n      body.CreateFixture(fd);\n\n      const sd_left = new b2PolygonShape();\n      sd_left.SetAsBox(0.45, 8.1, new b2Vec2(-4.35, 7.05), 0.2);\n      fd.shape = sd_left;\n      body.CreateFixture(fd);\n\n      const sd_right = new b2PolygonShape();\n      sd_right.SetAsBox(0.45, 8.1, new b2Vec2(4.35, 7.05), -0.2);\n      fd.shape = sd_right;\n      body.CreateFixture(fd);\n    }\n\n    // add some small circles for effect\n    for (let i = 0; i < 5; i++) {\n      const cd = new b2CircleShape(Math.random() * 1.0 + 0.5);\n      fd.shape = cd;\n      fd.friction = 0.3;\n      fd.density = 1.0;\n      fd.restitution = 1.1;\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.bullet = true;\n      bd.position.Set(Math.random() * 30.0 - 25.0, Math.random() * 32.0 + 2.0);\n      const body = this.m_world.CreateBody(bd);\n      body.CreateFixture(fd);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new TestCCD();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2CircleShape,\n  b2DegToRad,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2RevoluteJointDef,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class TestRagdoll extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const vertices = [];\n      vertices[0] = new b2Vec2(-30.0, 0.0);\n      vertices[1] = new b2Vec2(30.0, 0.0);\n      vertices[2] = new b2Vec2(30.0, 40.0);\n      vertices[3] = new b2Vec2(-30.0, 40.0);\n      const shape = new b2ChainShape();\n      shape.CreateLoop(vertices);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    const bd = new b2BodyDef();\n    const fd = new b2FixtureDef();\n    const jd = new b2RevoluteJointDef();\n\n    // Add 2 ragdolls along the top\n    for (let i = 0; i < 2; ++i) {\n      const startX = -20.0 + Math.random() * 2.0 + 40.0 * i;\n      const startY = 30.0 + Math.random() * 5.0;\n\n      // BODIES\n      // Set these to dynamic bodies\n      bd.type = b2BodyType.b2_dynamicBody;\n\n      // Head\n      fd.shape = new b2CircleShape(1.25);\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.3;\n      bd.position.Set(startX, startY);\n      const head = this.m_world.CreateBody(bd);\n      head.CreateFixture(fd);\n      //if (i === 0)\n      //{\n      head.ApplyLinearImpulse(\n        new b2Vec2(Math.random() * 1000.0 - 500.0, Math.random() * 1000.0 - 500.0),\n        head.GetWorldCenter(),\n      );\n      //}\n\n      // Torso1\n      const shape = new b2PolygonShape();\n      fd.shape = shape;\n      shape.SetAsBox(1.5, 1.0);\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.1;\n      bd.position.Set(startX, startY - 2.8);\n      const torso1 = this.m_world.CreateBody(bd);\n      torso1.CreateFixture(fd);\n      // Torso2\n      shape.SetAsBox(1.5, 1.0);\n      bd.position.Set(startX, startY - 4.3);\n      const torso2 = this.m_world.CreateBody(bd);\n      torso2.CreateFixture(fd);\n      // Torso3\n      shape.SetAsBox(1.5, 1.0);\n      bd.position.Set(startX, startY - 5.8);\n      const torso3 = this.m_world.CreateBody(bd);\n      torso3.CreateFixture(fd);\n\n      // UpperArm\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.1;\n      // L\n      shape.SetAsBox(1.8, 0.65);\n      bd.position.Set(startX - 3.0, startY - 2.0);\n      const upperArmL = this.m_world.CreateBody(bd);\n      upperArmL.CreateFixture(fd);\n      // R\n      shape.SetAsBox(1.8, 0.65);\n      bd.position.Set(startX + 3.0, startY - 2.0);\n      const upperArmR = this.m_world.CreateBody(bd);\n      upperArmR.CreateFixture(fd);\n\n      // LowerArm\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.1;\n      // L\n      shape.SetAsBox(1.7, 0.6);\n      bd.position.Set(startX - 5.7, startY - 2.0);\n      const lowerArmL = this.m_world.CreateBody(bd);\n      lowerArmL.CreateFixture(fd);\n      // R\n      shape.SetAsBox(1.7, 0.6);\n      bd.position.Set(startX + 5.7, startY - 2.0);\n      const lowerArmR = this.m_world.CreateBody(bd);\n      lowerArmR.CreateFixture(fd);\n\n      // UpperLeg\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.1;\n      // L\n      shape.SetAsBox(0.75, 2.2);\n      bd.position.Set(startX - 0.8, startY - 8.5);\n      const upperLegL = this.m_world.CreateBody(bd);\n      upperLegL.CreateFixture(fd);\n      // R\n      shape.SetAsBox(0.75, 2.2);\n      bd.position.Set(startX + 0.8, startY - 8.5);\n      const upperLegR = this.m_world.CreateBody(bd);\n      upperLegR.CreateFixture(fd);\n\n      // LowerLeg\n      fd.density = 1.0;\n      fd.friction = 0.4;\n      fd.restitution = 0.1;\n      // L\n      shape.SetAsBox(0.6, 2.0);\n      bd.position.Set(startX - 0.8, startY - 12.0);\n      const lowerLegL = this.m_world.CreateBody(bd);\n      lowerLegL.CreateFixture(fd);\n      // R\n      shape.SetAsBox(0.6, 2.0);\n      bd.position.Set(startX + 0.8, startY - 12.0);\n      const lowerLegR = this.m_world.CreateBody(bd);\n      lowerLegR.CreateFixture(fd);\n\n      // JOINTS\n      jd.enableLimit = true;\n\n      // Head to shoulders\n      jd.lowerAngle = b2DegToRad(-40.0);\n      jd.upperAngle = b2DegToRad(40.0);\n      jd.Initialize(torso1, head, new b2Vec2(startX, startY - 1.5));\n      this.m_world.CreateJoint(jd);\n\n      // Upper arm to shoulders\n      // L\n      jd.lowerAngle = b2DegToRad(-85.0);\n      jd.upperAngle = b2DegToRad(130.0);\n      jd.Initialize(torso1, upperArmL, new b2Vec2(startX - 1.8, startY - 2.0));\n      this.m_world.CreateJoint(jd);\n      // R\n      jd.lowerAngle = b2DegToRad(-130.0);\n      jd.upperAngle = b2DegToRad(85.0);\n      jd.Initialize(torso1, upperArmR, new b2Vec2(startX + 1.8, startY - 2.0));\n      this.m_world.CreateJoint(jd);\n\n      // Lower arm to upper arm\n      // L\n      jd.lowerAngle = b2DegToRad(-130.0);\n      jd.upperAngle = b2DegToRad(10.0);\n      jd.Initialize(upperArmL, lowerArmL, new b2Vec2(startX - 4.5, startY - 2.0));\n      this.m_world.CreateJoint(jd);\n      // R\n      jd.lowerAngle = b2DegToRad(-10.0);\n      jd.upperAngle = b2DegToRad(130.0);\n      jd.Initialize(upperArmR, lowerArmR, new b2Vec2(startX + 4.5, startY - 2.0));\n      this.m_world.CreateJoint(jd);\n\n      // Shoulders/stomach\n      jd.lowerAngle = b2DegToRad(-15.0);\n      jd.upperAngle = b2DegToRad(15.0);\n      jd.Initialize(torso1, torso2, new b2Vec2(startX, startY - 3.5));\n      this.m_world.CreateJoint(jd);\n      // Stomach/hips\n      jd.Initialize(torso2, torso3, new b2Vec2(startX, startY - 5.0));\n      this.m_world.CreateJoint(jd);\n\n      // Torso to upper leg\n      // L\n      jd.lowerAngle = b2DegToRad(-25.0);\n      jd.upperAngle = b2DegToRad(45.0);\n      jd.Initialize(torso3, upperLegL, new b2Vec2(startX - 0.8, startY - 7.2));\n      this.m_world.CreateJoint(jd);\n      // R\n      jd.lowerAngle = b2DegToRad(-45.0);\n      jd.upperAngle = b2DegToRad(25.0);\n      jd.Initialize(torso3, upperLegR, new b2Vec2(startX + 0.8, startY - 7.2));\n      this.m_world.CreateJoint(jd);\n\n      // Upper leg to lower leg\n      // L\n      jd.lowerAngle = b2DegToRad(-25.0);\n      jd.upperAngle = b2DegToRad(115.0);\n      jd.Initialize(upperLegL, lowerLegL, new b2Vec2(startX - 0.8, startY - 10.5));\n      this.m_world.CreateJoint(jd);\n      // R\n      jd.lowerAngle = b2DegToRad(-115.0);\n      jd.upperAngle = b2DegToRad(25.0);\n      jd.Initialize(upperLegR, lowerLegR, new b2Vec2(startX + 0.8, startY - 10.5));\n      this.m_world.CreateJoint(jd);\n    }\n\n    // these are static bodies so set the type accordingly\n    bd.type = b2BodyType.b2_staticBody;\n    const shape = new b2PolygonShape();\n    fd.shape = shape;\n    fd.density = 0.0;\n    fd.friction = 0.4;\n    fd.restitution = 0.3;\n\n    // Add stairs on the left\n    for (let j = 1; j <= 10; ++j) {\n      shape.SetAsBox(1.0 * j, 1.0);\n      bd.position.Set(1.0 * j - 30.0, 21.0 - 2.0 * j);\n      this.m_world.CreateBody(bd).CreateFixture(fd);\n    }\n\n    // Add stairs on the right\n    for (let k = 1; k <= 10; ++k) {\n      shape.SetAsBox(1.0 * k, 1.0);\n      bd.position.Set(30.0 - 1.0 * k, 21.0 - 2.0 * k);\n      this.m_world.CreateBody(bd).CreateFixture(fd);\n    }\n\n    shape.SetAsBox(3.0, 4.0);\n    bd.position.Set(0.0, 4.0);\n    this.m_world.CreateBody(bd).CreateFixture(fd);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new TestRagdoll();\n  }\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2ChainShape,\n  b2CircleShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class TestStack extends Test {\n  constructor() {\n    super();\n\n    {\n      const bd = new b2BodyDef();\n      const ground = this.m_world.CreateBody(bd);\n\n      const vertices = [];\n      vertices[0] = new b2Vec2(-30.0, 0.0);\n      vertices[1] = new b2Vec2(30.0, 0.0);\n      vertices[2] = new b2Vec2(30.0, 40.0);\n      vertices[3] = new b2Vec2(-30.0, 40.0);\n      const shape = new b2ChainShape();\n      shape.CreateLoop(vertices);\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Add bodies\n    const bd = new b2BodyDef();\n    const fd = new b2FixtureDef();\n    bd.type = b2BodyType.b2_dynamicBody;\n    //bd.isBullet = true;\n    const polygon = new b2PolygonShape();\n    fd.shape = polygon;\n    fd.density = 1.0;\n    fd.friction = 0.5;\n    fd.restitution = 0.1;\n    polygon.SetAsBox(1.0, 1.0);\n    // Create 3 stacks\n    for (let i = 0; i < 10; ++i) {\n      bd.position.Set(0.0 + Math.random() * 0.2 - 0.1, 30.0 - i * 2.5);\n      this.m_world.CreateBody(bd).CreateFixture(fd);\n    }\n    for (let i = 0; i < 10; ++i) {\n      bd.position.Set(10.0 + Math.random() * 0.2 - 0.1, 30.0 - i * 2.5);\n      this.m_world.CreateBody(bd).CreateFixture(fd);\n    }\n    for (let i = 0; i < 10; ++i) {\n      bd.position.Set(20.0 + Math.random() * 0.2 - 0.1, 30.0 - i * 2.5);\n      this.m_world.CreateBody(bd).CreateFixture(fd);\n    }\n    // Create ramp\n    bd.type = b2BodyType.b2_staticBody;\n    bd.position.Set(0.0, 0.0);\n    const vxs = [new b2Vec2(-30.0, 0.0), new b2Vec2(-10.0, 0.0), new b2Vec2(-30.0, 10.0)];\n    polygon.Set(vxs, vxs.length);\n    fd.density = 0;\n    this.m_world.CreateBody(bd).CreateFixture(fd);\n\n    // Create ball\n    bd.type = b2BodyType.b2_dynamicBody;\n    bd.position.Set(-25.0, 20.0);\n    fd.shape = new b2CircleShape(4.0);\n    fd.density = 2;\n    fd.restitution = 0.2;\n    fd.friction = 0.5;\n    this.m_world.CreateBody(bd).CreateFixture(fd);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new TestStack();\n  }\n}\n","import {\n  b2BodyDef,\n  b2BodyType,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n  b2World,\n} from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class PyramidTopple extends Test {\n  constructor() {\n    super();\n\n    const WIDTH = 4;\n    const HEIGHT = 30;\n\n    const add_domino = (world: b2World, pos: b2Vec2, flipped: boolean) => {\n      const mass = 1;\n\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Copy(pos);\n      const body = world.CreateBody(bd);\n\n      const shape = new b2PolygonShape();\n      if (flipped) {\n        shape.SetAsBox(0.5 * HEIGHT, 0.5 * WIDTH);\n      } else {\n        shape.SetAsBox(0.5 * WIDTH, 0.5 * HEIGHT);\n      }\n\n      const fd = new b2FixtureDef();\n      fd.shape = shape;\n      fd.density = mass / (WIDTH * HEIGHT);\n      fd.friction = 0.6;\n      fd.restitution = 0.0;\n      body.CreateFixture(fd);\n    };\n\n    const world = this.m_world;\n    ///settings.positionIterations = 30; // cpSpaceSetIterations(space, 30);\n    ///world.SetGravity(new b2Vec2(0, -300)); // cpSpaceSetGravity(space, cpv(0, -300));\n    ///b2_timeToSleep = 0.5; // cpSpaceSetSleepTimeThreshold(space, 0.5f);\n    ///b2_linearSlop = 0.5; // cpSpaceSetCollisionSlop(space, 0.5f);\n\n    // Add a floor.\n    const bd = new b2BodyDef();\n    const body = world.CreateBody(bd);\n    const shape = new b2EdgeShape();\n    shape.Set(new b2Vec2(-600, -240), new b2Vec2(600, -240));\n    const fd = new b2FixtureDef();\n    fd.shape = shape;\n    fd.friction = 1.0;\n    fd.restitution = 1.0;\n    body.CreateFixture(fd);\n\n    // Add the dominoes.\n    const n = 12;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i; j++) {\n        const offset = new b2Vec2(\n          (j - (n - 1 - i) * 0.5) * 1.5 * HEIGHT,\n          (i + 0.5) * (HEIGHT + 2 * WIDTH) - WIDTH - 240,\n        );\n        add_domino(world, offset, false);\n        add_domino(\n          world,\n          b2Vec2.AddVV(offset, new b2Vec2(0, (HEIGHT + WIDTH) / 2), new b2Vec2()),\n          true,\n        );\n\n        if (j === 0) {\n          add_domino(\n            world,\n            b2Vec2.AddVV(offset, new b2Vec2(0.5 * (WIDTH - HEIGHT), HEIGHT + WIDTH), new b2Vec2()),\n            false,\n          );\n        }\n\n        if (j !== n - i - 1) {\n          add_domino(\n            world,\n            b2Vec2.AddVV(offset, new b2Vec2(HEIGHT * 0.75, (HEIGHT + 3 * WIDTH) / 2), new b2Vec2()),\n            true,\n          );\n        } else {\n          add_domino(\n            world,\n            b2Vec2.AddVV(offset, new b2Vec2(0.5 * (HEIGHT - WIDTH), HEIGHT + WIDTH), new b2Vec2()),\n            false,\n          );\n        }\n      }\n    }\n  }\n\n  public GetDefaultViewZoom(): number {\n    return 10.0;\n  }\n\n  public static Create() {\n    return new PyramidTopple();\n  }\n}\n","import { b2BodyDef, b2BodyType, b2FixtureDef, b2PolygonShape, b2Vec2 } from '@highduck/box2d';\nimport { Test } from '@highduck/box2d-testbed';\n\nexport class DominoTower extends Test {\n  constructor() {\n    super();\n\n    const DOMINO_WIDTH = 0.2;\n    const DOMINO_FRICTION = 0.1;\n    const DOMINO_HEIGHT = 1.0;\n    const BASE_COUNT = 25;\n\n    /**\n     * The density of the dominos under construction. Varies for\n     * different parts of the tower.\n     */\n    let dominoDensity: number;\n\n    function makeDomino(x: number, y: number, horizontal: boolean) {\n      const sd = new b2PolygonShape();\n      sd.SetAsBox(0.5 * DOMINO_WIDTH, 0.5 * DOMINO_HEIGHT);\n      const fd = new b2FixtureDef();\n      fd.shape = sd;\n      fd.density = dominoDensity;\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      fd.friction = DOMINO_FRICTION;\n      fd.restitution = 0.65;\n      bd.position.Set(x, y);\n      bd.angle = horizontal ? Math.PI / 2.0 : 0;\n      const myBody = world.CreateBody(bd);\n      myBody.CreateFixture(fd);\n    }\n\n    const gravity = new b2Vec2(0, -10);\n    //world = new b2World(gravity);\n    const world = this.m_world;\n    world.SetGravity(gravity);\n\n    // Create the floor\n    {\n      const sd = new b2PolygonShape();\n      sd.SetAsBox(50, 10);\n\n      const bd = new b2BodyDef();\n      bd.position.Set(0, -10);\n      const body = world.CreateBody(bd);\n      body.CreateFixture(sd, 0);\n    }\n\n    {\n      dominoDensity = 10;\n      // Make bullet\n      const sd = new b2PolygonShape();\n      sd.SetAsBox(0.7, 0.7);\n      const fd = new b2FixtureDef();\n      fd.density = 35.0;\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      fd.shape = sd;\n      fd.friction = 0.0;\n      fd.restitution = 0.85;\n      bd.bullet = true;\n      bd.position.Set(30.0, 5.0);\n      let b = world.CreateBody(bd);\n      b.CreateFixture(fd);\n      b.SetLinearVelocity(new b2Vec2(-25.0, -25.0));\n      b.SetAngularVelocity(6.7);\n\n      fd.density = 25.0;\n      bd.position.Set(-30.0, 25.0);\n      b = world.CreateBody(bd);\n      b.CreateFixture(fd);\n      b.SetLinearVelocity(new b2Vec2(35.0, -10.0));\n      b.SetAngularVelocity(-8.3);\n    }\n\n    {\n      let currX;\n      // Make base\n      for (let i = 0; i < BASE_COUNT; ++i) {\n        currX = i * 1.5 * DOMINO_HEIGHT - (1.5 * DOMINO_HEIGHT * BASE_COUNT) / 2;\n        makeDomino(currX, DOMINO_HEIGHT / 2.0, false);\n        makeDomino(currX, DOMINO_HEIGHT + DOMINO_WIDTH / 2.0, true);\n      }\n      currX = BASE_COUNT * 1.5 * DOMINO_HEIGHT - (1.5 * DOMINO_HEIGHT * BASE_COUNT) / 2;\n\n      // Make 'I's\n      for (let j = 1; j < BASE_COUNT; ++j) {\n        if (j > 3) {\n          dominoDensity *= 0.8;\n        }\n\n        // The y at the center of the I structure.\n        const currY = DOMINO_HEIGHT * 0.5 + (DOMINO_HEIGHT + 2 * DOMINO_WIDTH) * 0.99 * j;\n\n        for (let i = 0; i < BASE_COUNT - j; ++i) {\n          currX = i * 1.5 * DOMINO_HEIGHT - (1.5 * DOMINO_HEIGHT * (BASE_COUNT - j)) / 2;\n          dominoDensity *= 2.5;\n          if (i === 0) {\n            makeDomino(\n              currX - 1.25 * DOMINO_HEIGHT + 0.5 * DOMINO_WIDTH,\n              currY - DOMINO_WIDTH,\n              false,\n            );\n          }\n          if (i === BASE_COUNT - j - 1) {\n            makeDomino(\n              currX + 1.25 * DOMINO_HEIGHT - 0.5 * DOMINO_WIDTH,\n              currY - DOMINO_WIDTH,\n              false,\n            );\n          }\n\n          dominoDensity /= 2.5;\n          makeDomino(currX, currY, false);\n          makeDomino(currX, currY + 0.5 * (DOMINO_WIDTH + DOMINO_HEIGHT), true);\n          makeDomino(currX, currY - 0.5 * (DOMINO_WIDTH + DOMINO_HEIGHT), true);\n        }\n      }\n    }\n  }\n\n  public static Create() {\n    return new DominoTower();\n  }\n}\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","'use strict';\nvar $ = require('../internals/export');\nvar forEach = require('../internals/array-for-each');\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar forEach = require('../internals/array-for-each');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);\n  } catch (error) {\n    CollectionPrototype.forEach = forEach;\n  }\n}\n","/*\n * Author: Chris Campbell - www.iforce2d.net\n *\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2Clamp,\n  b2Contact,\n  b2Fixture,\n  b2FixtureDef,\n  b2Joint,\n  b2PolygonShape,\n  b2RevoluteJoint,\n  b2RevoluteJointDef,\n  b2Vec2,\n  b2World,\n} from '@highduck/box2d';\nimport {\n  DestructionListener,\n  DRAW_STRING_NEW_LINE,\n  g_debugDraw,\n  Settings,\n  Test,\n} from '@highduck/box2d-testbed';\n\nconst DEGTORAD = 0.0174532925199432957;\n// const RADTODEG = 57.295779513082320876;\n\nconst TDC_LEFT = 0x1;\nconst TDC_RIGHT = 0x2;\nconst TDC_UP = 0x4;\nconst TDC_DOWN = 0x8;\n\n/**\n * types of fixture user data\n */\nconst FUD_CAR_TIRE = 0;\nconst FUD_GROUND_AREA = 1;\n\n/**\n * a class to allow subclassing of different fixture user data\n */\nexport class FixtureUserData {\n  public m_type: number;\n\n  constructor(type: number) {\n    this.m_type = type;\n  }\n\n  public getType(): number {\n    return this.m_type;\n  }\n}\n\n/**\n * class to allow marking a fixture as a car tire\n */\nexport class CarTireFUD extends FixtureUserData {\n  constructor() {\n    super(FUD_CAR_TIRE);\n  }\n}\n\n// /**\n//  * class to allow marking a fixture as a ground area\n//  */\nexport class GroundAreaFUD extends FixtureUserData {\n  public frictionModifier: number;\n  public outOfCourse: boolean;\n  constructor(fm: number, ooc: boolean) {\n    super(FUD_GROUND_AREA);\n    this.frictionModifier = fm;\n    this.outOfCourse = ooc;\n  }\n}\n\nexport class TDTire {\n  public m_groundAreas: GroundAreaFUD[] = [];\n  public m_body: b2Body;\n  public m_currentTraction = 1;\n  public m_maxForwardSpeed = 0;\n  public m_maxBackwardSpeed = 0;\n  public m_maxDriveForce = 0;\n  public m_maxLateralImpulse = 0;\n\n  constructor(world: b2World) {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    this.m_body = world.CreateBody(bodyDef);\n\n    const polygonShape = new b2PolygonShape();\n    polygonShape.SetAsBox(0.5, 1.25);\n    const fixture = this.m_body.CreateFixture(polygonShape, 1); //shape, density\n    fixture.SetUserData(new CarTireFUD());\n\n    this.m_body.SetUserData(this);\n  }\n\n  public setCharacteristics(\n    maxForwardSpeed: number,\n    maxBackwardSpeed: number,\n    maxDriveForce: number,\n    maxLateralImpulse: number,\n  ): void {\n    this.m_maxForwardSpeed = maxForwardSpeed;\n    this.m_maxBackwardSpeed = maxBackwardSpeed;\n    this.m_maxDriveForce = maxDriveForce;\n    this.m_maxLateralImpulse = maxLateralImpulse;\n  }\n\n  public addGroundArea(ga: GroundAreaFUD): void {\n    this.m_groundAreas.push(ga);\n    this.updateTraction();\n  }\n\n  public removeGroundArea(ga: GroundAreaFUD): void {\n    this.m_groundAreas.splice(this.m_groundAreas.indexOf(ga));\n    this.updateTraction();\n  }\n\n  public updateTraction(): void {\n    if (this.m_groundAreas.length === 0) {\n      this.m_currentTraction = 1;\n    } else {\n      //find area with highest traction\n      this.m_currentTraction = 0;\n      this.m_groundAreas.forEach((ga) => {\n        if (ga.frictionModifier > this.m_currentTraction) {\n          this.m_currentTraction = ga.frictionModifier;\n        }\n      });\n    }\n  }\n\n  public getLateralVelocity(): b2Vec2 {\n    const currentRightNormal = this.m_body.GetWorldVector(new b2Vec2(1, 0), new b2Vec2());\n    return currentRightNormal.SelfMul(\n      b2Vec2.DotVV(currentRightNormal, this.m_body.GetLinearVelocity()),\n    );\n  }\n\n  public getForwardVelocity(): b2Vec2 {\n    const currentForwardNormal = this.m_body.GetWorldVector(new b2Vec2(0, 1), new b2Vec2());\n    return currentForwardNormal.SelfMul(\n      b2Vec2.DotVV(currentForwardNormal, this.m_body.GetLinearVelocity()),\n    );\n  }\n\n  public updateFriction(): void {\n    //lateral linear velocity\n    const impulse = this.getLateralVelocity().SelfMul(-1.0 * this.m_body.GetMass());\n    if (impulse.Length() > this.m_maxLateralImpulse) {\n      impulse.SelfMul(this.m_maxLateralImpulse / impulse.Length());\n    }\n    this.m_body.ApplyLinearImpulse(\n      impulse.SelfMul(this.m_currentTraction),\n      this.m_body.GetWorldCenter(),\n    );\n\n    //angular velocity\n    this.m_body.ApplyAngularImpulse(\n      this.m_currentTraction * 0.1 * this.m_body.GetInertia() * -this.m_body.GetAngularVelocity(),\n    );\n\n    //forward linear velocity\n    const currentForwardNormal = this.getForwardVelocity();\n    const currentForwardSpeed = currentForwardNormal.Normalize();\n    const dragForceMagnitude = -2 * currentForwardSpeed;\n    this.m_body.ApplyForce(\n      currentForwardNormal.SelfMul(this.m_currentTraction * dragForceMagnitude),\n      this.m_body.GetWorldCenter(),\n    );\n  }\n\n  public updateDrive(controlState: number): void {\n    //find desired speed\n    let desiredSpeed = 0;\n    switch (controlState & (TDC_UP | TDC_DOWN)) {\n      case TDC_UP:\n        desiredSpeed = this.m_maxForwardSpeed;\n        break;\n      case TDC_DOWN:\n        desiredSpeed = this.m_maxBackwardSpeed;\n        break;\n      default:\n        return; //do nothing\n    }\n\n    //find current speed in forward direction\n    const currentForwardNormal = this.m_body.GetWorldVector(new b2Vec2(0, 1), new b2Vec2());\n    const currentSpeed = b2Vec2.DotVV(this.getForwardVelocity(), currentForwardNormal);\n\n    //apply necessary force\n    let force = 0;\n    if (desiredSpeed > currentSpeed) {\n      force = this.m_maxDriveForce;\n    } else if (desiredSpeed < currentSpeed) {\n      force = -this.m_maxDriveForce;\n    } else {\n      return;\n    }\n    this.m_body.ApplyForce(\n      currentForwardNormal.SelfMul(this.m_currentTraction * force),\n      this.m_body.GetWorldCenter(),\n    );\n  }\n\n  public updateTurn(controlState: number): void {\n    let desiredTorque = 0;\n    switch (controlState & (TDC_LEFT | TDC_RIGHT)) {\n      case TDC_LEFT:\n        desiredTorque = 15;\n        break;\n      case TDC_RIGHT:\n        desiredTorque = -15;\n        break;\n      default:\n      //nothing\n    }\n    this.m_body.ApplyTorque(desiredTorque);\n  }\n}\n\nexport class TDCar {\n  public m_tires: TDTire[];\n  public m_body: b2Body;\n  public flJoint: b2RevoluteJoint;\n  public frJoint: b2RevoluteJoint;\n\n  constructor(world: b2World) {\n    this.m_tires = [];\n\n    //create car body\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    this.m_body = world.CreateBody(bodyDef);\n    this.m_body.SetAngularDamping(3);\n\n    const vertices = [];\n    vertices[0] = new b2Vec2(1.5, 0);\n    vertices[1] = new b2Vec2(3, 2.5);\n    vertices[2] = new b2Vec2(2.8, 5.5);\n    vertices[3] = new b2Vec2(1, 10);\n    vertices[4] = new b2Vec2(-1, 10);\n    vertices[5] = new b2Vec2(-2.8, 5.5);\n    vertices[6] = new b2Vec2(-3, 2.5);\n    vertices[7] = new b2Vec2(-1.5, 0);\n    const polygonShape = new b2PolygonShape();\n    polygonShape.Set(vertices, 8);\n    this.m_body.CreateFixture(polygonShape, 0.1); //shape, density\n\n    //prepare common joint parameters\n    const jointDef = new b2RevoluteJointDef();\n    jointDef.bodyA = this.m_body;\n    jointDef.enableLimit = true;\n    jointDef.lowerAngle = 0;\n    jointDef.upperAngle = 0;\n    jointDef.localAnchorB.SetZero(); //center of tire\n\n    const maxForwardSpeed = 250;\n    const maxBackwardSpeed = -40;\n    const backTireMaxDriveForce = 300;\n    const frontTireMaxDriveForce = 500;\n    const backTireMaxLateralImpulse = 8.5;\n    const frontTireMaxLateralImpulse = 7.5;\n\n    //back left tire\n    let tire = new TDTire(world);\n    tire.setCharacteristics(\n      maxForwardSpeed,\n      maxBackwardSpeed,\n      backTireMaxDriveForce,\n      backTireMaxLateralImpulse,\n    );\n    jointDef.bodyB = tire.m_body;\n    jointDef.localAnchorA.Set(-3, 0.75);\n    world.CreateJoint(jointDef);\n    this.m_tires.push(tire);\n\n    //back right tire\n    tire = new TDTire(world);\n    tire.setCharacteristics(\n      maxForwardSpeed,\n      maxBackwardSpeed,\n      backTireMaxDriveForce,\n      backTireMaxLateralImpulse,\n    );\n    jointDef.bodyB = tire.m_body;\n    jointDef.localAnchorA.Set(3, 0.75);\n    world.CreateJoint(jointDef);\n    this.m_tires.push(tire);\n\n    //front left tire\n    tire = new TDTire(world);\n    tire.setCharacteristics(\n      maxForwardSpeed,\n      maxBackwardSpeed,\n      frontTireMaxDriveForce,\n      frontTireMaxLateralImpulse,\n    );\n    jointDef.bodyB = tire.m_body;\n    jointDef.localAnchorA.Set(-3, 8.5);\n    this.flJoint = world.CreateJoint(jointDef);\n    this.m_tires.push(tire);\n\n    //front right tire\n    tire = new TDTire(world);\n    tire.setCharacteristics(\n      maxForwardSpeed,\n      maxBackwardSpeed,\n      frontTireMaxDriveForce,\n      frontTireMaxLateralImpulse,\n    );\n    jointDef.bodyB = tire.m_body;\n    jointDef.localAnchorA.Set(3, 8.5);\n    this.frJoint = world.CreateJoint(jointDef);\n    this.m_tires.push(tire);\n  }\n\n  public update(controlState: number) {\n    this.m_tires.forEach((tire) => {\n      tire.updateFriction();\n    });\n    this.m_tires.forEach((tire) => {\n      tire.updateDrive(controlState);\n    });\n\n    //control steering\n    const lockAngle = 35 * DEGTORAD;\n    const turnSpeedPerSec = 160 * DEGTORAD; //from lock to lock in 0.5 sec\n    const turnPerTimeStep = turnSpeedPerSec / 60.0;\n    let desiredAngle = 0;\n    switch (controlState & (TDC_LEFT | TDC_RIGHT)) {\n      case TDC_LEFT:\n        desiredAngle = lockAngle;\n        break;\n      case TDC_RIGHT:\n        desiredAngle = -lockAngle;\n        break;\n      default:\n      //nothing\n    }\n    const angleNow = this.flJoint.GetJointAngle();\n    let angleToTurn = desiredAngle - angleNow;\n    angleToTurn = b2Clamp(angleToTurn, -turnPerTimeStep, turnPerTimeStep);\n    const newAngle = angleNow + angleToTurn;\n    this.flJoint.SetLimits(newAngle, newAngle);\n    this.frJoint.SetLimits(newAngle, newAngle);\n  }\n}\n\nexport class MyDestructionListener extends DestructionListener {\n  public SayGoodbyeFixture(fixture: b2Fixture): void {\n    ///  if ( FixtureUserData* fud = (FixtureUserData*)fixture.GetUserData() )\n    ///    delete fud;\n    super.SayGoodbyeFixture(fixture);\n  }\n\n  /**\n   * (unused but must implement all pure virtual functions)\n   */\n  public SayGoodbyeJoint(joint: b2Joint): void {\n    super.SayGoodbyeJoint(joint);\n  }\n}\n\nexport class TopdownCar extends Test {\n  public m_car: TDCar;\n  public m_controlState: number;\n\n  constructor() {\n    super();\n\n    //this.m_destructionListener = new MyDestructionListener(this);\n\n    this.m_world.SetGravity(new b2Vec2(0.0, 0.0));\n    this.m_world.SetDestructionListener(this.m_destructionListener);\n\n    //set up ground areas\n    {\n      const bodyDef = new b2BodyDef();\n      this.m_groundBody = this.m_world.CreateBody(bodyDef);\n\n      const polygonShape = new b2PolygonShape();\n      const fixtureDef = new b2FixtureDef();\n      fixtureDef.shape = polygonShape;\n      fixtureDef.isSensor = true;\n\n      polygonShape.SetAsBox(9, 7, new b2Vec2(-10, 15), 20 * DEGTORAD);\n      let groundAreaFixture = this.m_groundBody.CreateFixture(fixtureDef);\n      groundAreaFixture.SetUserData(new GroundAreaFUD(0.5, false));\n\n      polygonShape.SetAsBox(9, 5, new b2Vec2(5, 20), -40 * DEGTORAD);\n      groundAreaFixture = this.m_groundBody.CreateFixture(fixtureDef);\n      groundAreaFixture.SetUserData(new GroundAreaFUD(0.2, false));\n    }\n\n    //this.m_tire = new TDTire(this.m_world);\n    //this.m_tire.setCharacteristics(100, -20, 150);\n\n    this.m_car = new TDCar(this.m_world);\n\n    this.m_controlState = 0;\n  }\n\n  public Keyboard(key: string): void {\n    switch (key) {\n      case 'a':\n        this.m_controlState |= TDC_LEFT;\n        break;\n      case 'd':\n        this.m_controlState |= TDC_RIGHT;\n        break;\n      case 'w':\n        this.m_controlState |= TDC_UP;\n        break;\n      case 's':\n        this.m_controlState |= TDC_DOWN;\n        break;\n      default:\n        super.Keyboard(key);\n    }\n  }\n\n  public KeyboardUp(key: string): void {\n    switch (key) {\n      case 'a':\n        this.m_controlState &= ~TDC_LEFT;\n        break;\n      case 'd':\n        this.m_controlState &= ~TDC_RIGHT;\n        break;\n      case 'w':\n        this.m_controlState &= ~TDC_UP;\n        break;\n      case 's':\n        this.m_controlState &= ~TDC_DOWN;\n        break;\n      default:\n        super.KeyboardUp(key);\n    }\n  }\n\n  public static handleContact(contact: b2Contact, began: boolean): void {\n    const a = contact.GetFixtureA();\n    const b = contact.GetFixtureB();\n    const fudA = a.GetUserData();\n    const fudB = b.GetUserData();\n\n    if (!fudA || !fudB) {\n      return;\n    }\n\n    if (fudA.getType() === FUD_CAR_TIRE || fudB.getType() === FUD_GROUND_AREA) {\n      TopdownCar.tire_vs_groundArea(a, b, began);\n    } else if (fudA.getType() === FUD_GROUND_AREA || fudB.getType() === FUD_CAR_TIRE) {\n      TopdownCar.tire_vs_groundArea(b, a, began);\n    }\n  }\n\n  public BeginContact(contact: b2Contact): void {\n    TopdownCar.handleContact(contact, true);\n  }\n\n  public EndContact(contact: b2Contact): void {\n    TopdownCar.handleContact(contact, false);\n  }\n\n  public static tire_vs_groundArea(\n    tireFixture: b2Fixture,\n    groundAreaFixture: b2Fixture,\n    began: boolean,\n  ): void {\n    const tire = tireFixture.GetBody().GetUserData();\n    const gaFud = groundAreaFixture.GetUserData();\n    if (began) {\n      tire.addGroundArea(gaFud);\n    } else {\n      tire.removeGroundArea(gaFud);\n    }\n  }\n\n  public Step(settings: Settings): void {\n    /*this.m_tire.updateFriction();\n    this.m_tire.updateDrive(this.m_controlState);\n    this.m_tire.updateTurn(this.m_controlState);*/\n\n    this.m_car.update(this.m_controlState);\n\n    super.Step(settings);\n\n    //show some useful info\n    g_debugDraw.DrawString(5, this.m_textLine, 'Press w/a/s/d to control the car');\n    this.m_textLine += DRAW_STRING_NEW_LINE;\n\n    //g_debugDraw.DrawString(5, this.m_textLine, \"Tire traction: %.2f\", this.m_tire.m_currentTraction);\n    //this.m_textLine += DRAW_STRING_NEW_LINE;\n  }\n\n  public static Create() {\n    return new TopdownCar();\n  }\n}\n","import { Main } from '@highduck/box2d-testbed';\n\nimport './liquidfun';\nimport './tests';\nimport './controller';\n\nimport { g_testEntries } from './test';\n\nlet app: Main;\nconst init = function (time: number) {\n  app = new Main(time, g_testEntries);\n  window.requestAnimationFrame(loop);\n};\nconst loop = function (time: number) {\n  window.requestAnimationFrame(loop);\n  app.SimulationLoop(time);\n};\nwindow.requestAnimationFrame(init);\n","import { ShapeCast } from './ShapeCast';\nimport { TimeOfImpact } from './TimeOfImpact';\nimport { CharacterCollision } from './CharacterCollision';\nimport { Tiles } from './Tiles';\nimport { HeavyOnLight } from './HeavyOnLight';\nimport { HeavyOnLightTwo } from './HeavyOnLightTwo';\nimport { VerticalStack } from './VerticalStack';\nimport { BasicSliderCrank } from './BasicSliderCrank';\nimport { SliderCrank } from './SliderCrank';\nimport { SphereStack } from './SphereStack';\nimport { ConvexHull } from './ConvexHull';\nimport { Tumbler } from './Tumbler';\nimport { RayCast } from './RayCast';\nimport { DumpShell } from './DumpShell';\nimport { ApplyForce } from './ApplyForce';\nimport { ContinuousTest } from './ContinuousTest';\nimport { MotorJoint } from './MotorJoint';\nimport { OneSidedPlatform } from './OneSidedPlatform';\nimport { Mobile } from './Mobile';\nimport { MobileBalanced } from './MobileBalanced';\nimport { ConveyorBelt } from './ConveyorBelt';\nimport { Gears } from './Gears';\nimport { VaryingRestitution } from './VaryingRestitution';\nimport { Cantilever } from './Cantilever';\nimport { EdgeTest } from './EdgeTest';\nimport { BodyTypes } from './BodyTypes';\nimport { ShapeEditing } from './ShapeEditing';\nimport { Car } from './Car';\nimport { Prismatic } from './Prismatic';\nimport { Revolute } from './Revolute';\nimport { Pulleys } from './Pulleys';\nimport { PolyShapes } from './PolyShapes';\nimport { Web } from './Web';\nimport { RopeJoint } from './RopeJoint';\nimport { Pinball } from './Pinball';\nimport { BulletTest } from './BulletTest';\nimport { Confined } from './Confined';\nimport { Pyramid } from './Pyramid';\nimport { TheoJansen } from './TheoJansen';\nimport { EdgeShapes } from './EdgeShapes';\nimport { PolyCollision } from './PolyCollision';\nimport { Bridge } from './Bridge';\nimport { Breakable } from './Breakable';\nimport { Chain } from './Chain';\nimport { CollisionFiltering } from './CollisionFiltering';\nimport { CollisionProcessing } from './CollisionProcessing';\nimport { CompoundShapes } from './CompoundShapes';\nimport { DistanceTest } from './DistanceTest';\nimport { Dominos } from './Dominos';\nimport { DynamicTreeTest } from './DynamicTreeTest';\nimport { SensorTest } from './SensorTest';\nimport { VaryingFriction } from './VaryingFriction';\nimport { AddPair } from './AddPair';\nimport { Skier } from './Skier';\nimport { Rope } from './Rope';\nimport { MotorJoint2 } from './MotorJoint2';\nimport { BlobTest } from './BlobTest';\nimport { TestCCD } from './TestCCD';\nimport { TestRagdoll } from './TestRagdoll';\nimport { TestStack } from './TestStack';\nimport { PyramidTopple } from './PyramidTopple';\nimport { DominoTower } from './DominoTower';\nimport { TopdownCar } from './TopdownCar';\nimport { Segway } from './Segway';\nimport { registerTest } from '../test';\n\nregisterTest('Collision', 'Shape Cast', ShapeCast.Create);\nregisterTest('Collision', 'Time of Impact', TimeOfImpact.Create);\nregisterTest('Examples', 'Character Collision', CharacterCollision.Create);\nregisterTest('Benchmark', 'Tiles', Tiles.Create);\nregisterTest('Solver', 'Heavy on Light', HeavyOnLight.Create);\nregisterTest('Solver', 'Heavy on Light Two', HeavyOnLightTwo.Create);\nregisterTest('Stacking', 'Boxes', VerticalStack.Create);\nregisterTest('Examples', 'Slider Crank 1', BasicSliderCrank.Create);\nregisterTest('Examples', 'Slider Crank 2', SliderCrank.Create);\nregisterTest('Stacking', 'Circles', SphereStack.Create);\nregisterTest('Geometry', 'Convex Hull', ConvexHull.Create);\nregisterTest('Benchmark', 'Tumbler', Tumbler.Create);\nregisterTest('Collision', 'Ray-Cast', RayCast.Create);\nregisterTest('Examples', 'Dump Shell', DumpShell.Create);\nregisterTest('Forces', 'Apply Force', ApplyForce.Create);\nregisterTest('Continuous', 'Continuous Test', ContinuousTest.Create);\nregisterTest('Examples', 'Motor Joint', MotorJoint.Create);\nregisterTest('Examples', 'One-Sided Platform', OneSidedPlatform.Create);\nregisterTest('Solver', 'Mobile Unbalanced', Mobile.Create);\nregisterTest('Solver', 'Mobile Balanced', MobileBalanced.Create);\nregisterTest('Examples', 'Conveyor Belt', ConveyorBelt.Create);\nregisterTest('Joints', 'Gears', Gears.Create);\nregisterTest('Forces', 'Restitution', VaryingRestitution.Create);\nregisterTest('Joints', 'Cantilever', Cantilever.Create);\nregisterTest('Geometry', 'Edge Test', EdgeTest.Create);\nregisterTest('Examples', 'Body Types', BodyTypes.Create);\nregisterTest('Examples', 'Shape Editing', ShapeEditing.Create);\nregisterTest('Examples', 'Car', Car.Create);\nregisterTest('Joints', 'Prismatic', Prismatic.Create);\nregisterTest('Joints', 'Revolute', Revolute.Create);\nregisterTest('Joints', 'Pulley', Pulleys.Create);\nregisterTest('Geometry', 'Polygon Shapes', PolyShapes.Create);\nregisterTest('Examples', 'Web', Web.Create);\nregisterTest('Joints', 'RopeJoint', RopeJoint.Create);\nregisterTest('Examples', 'Pinball', Pinball.Create);\nregisterTest('Continuous', 'Bullet Test', BulletTest.Create);\nregisterTest('Solver', 'Confined', Confined.Create);\nregisterTest('Stacking', 'Pyramid', Pyramid.Create);\nregisterTest('Examples', \"Theo Jansen's Walker\", TheoJansen.Create);\nregisterTest('Geometry', 'Edge Shapes', EdgeShapes.Create);\nregisterTest('Geometry', 'Polygon Collision', PolyCollision.Create);\nregisterTest('Joints', 'Bridge', Bridge.Create);\nregisterTest('Examples', 'Breakable', Breakable.Create);\nregisterTest('Joints', 'Chain', Chain.Create);\nregisterTest('Examples', 'Collision Filtering', CollisionFiltering.Create);\nregisterTest('Examples', 'Collision Processing', CollisionProcessing.Create);\nregisterTest('Examples', 'Compound Shapes', CompoundShapes.Create);\nregisterTest('Geometry', 'Distance Test', DistanceTest.Create);\nregisterTest('Examples', 'Dominos', Dominos.Create);\nregisterTest('Collision', 'Dynamic Tree', DynamicTreeTest.Create);\nregisterTest('Collision', 'Sensors', SensorTest.Create);\nregisterTest('Forces', 'Friction', VaryingFriction.Create);\nregisterTest('Benchmark', 'Add Pair', AddPair.Create);\nregisterTest('Bugs', 'Skier', Skier.Create);\nregisterTest('Rope', 'Bending', Rope.Create);\nregisterTest('Joints', 'Motor Joint (Bug #487)', MotorJoint2.Create);\nregisterTest('Examples', 'Blob Test', BlobTest.Create);\nregisterTest('Continuous', 'Continuous Collision', TestCCD.Create);\nregisterTest('Examples', 'Ragdolls', TestRagdoll.Create);\nregisterTest('Examples', 'Stacked Boxes', TestStack.Create);\nregisterTest('Examples', 'Pyramid Topple', PyramidTopple.Create);\nregisterTest('Examples', 'Domino Tower', DominoTower.Create);\nregisterTest('Examples', 'TopDown Car', TopdownCar.Create);\nregisterTest('Examples', 'Segway', Segway.Create);\n\n// TODO:\n// https://github.com/erincatto/box2d/tree/3d92ed4ec487b8e2aff3fc7dc58663870b17c534/testbed/tests\n// RegisterTest(\"Bugs\", \"Chain Problem\", ChainProblem::Create);\n","import { registerTest } from '../test';\nimport { BuoyancyTest } from './BuoyancyTest';\n\nif (B2_ENABLE_CONTROLLER) {\n  registerTest('Controllers', 'Buoyancy Test', BuoyancyTest.Create);\n}\n","/*\n * Copyright (c) 2006-2012 Erin Catto http://www.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nimport {\n  b2Body,\n  b2BodyDef,\n  b2BodyType,\n  b2BuoyancyController,\n  b2CircleShape,\n  b2EdgeShape,\n  b2FixtureDef,\n  b2PolygonShape,\n  b2Vec2,\n} from '@highduck/box2d';\nimport { Settings, Test } from '@highduck/box2d-testbed';\n\nexport class BuoyancyTest extends Test {\n  public m_bodies: b2Body[];\n  public m_controller: b2BuoyancyController;\n\n  constructor() {\n    super();\n\n    this.m_bodies = [];\n\n    const bc = new b2BuoyancyController();\n    this.m_controller = bc;\n\n    bc.normal.Set(0.0, 1.0);\n    bc.offset = 20.0;\n    bc.density = 2.0;\n    bc.linearDrag = 5.0;\n    bc.angularDrag = 2.0;\n\n    const ground = this.m_world.CreateBody(new b2BodyDef());\n\n    {\n      const shape = new b2EdgeShape();\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(40.0, 0.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(-40.0, 0.0), new b2Vec2(-40.0, 25.0));\n      ground.CreateFixture(shape, 0.0);\n      shape.Set(new b2Vec2(40.0, 0.0), new b2Vec2(40.0, 25.0));\n      ground.CreateFixture(shape, 0.0);\n    }\n\n    // Spawn in a bunch of crap\n    {\n      for (let i = 0; i < 5; i++) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        //bd.isBullet = true;\n        bd.position.Set(Math.random() * 40.0 - 20.0, Math.random() * 15.0 + 5.0);\n        bd.angle = Math.random() * Math.PI;\n        const body = this.m_world.CreateBody(bd);\n\n        const fd = new b2FixtureDef();\n        fd.density = 1.0;\n        // Override the default friction.\n        fd.friction = 0.3;\n        fd.restitution = 0.1;\n        const polygon = new b2PolygonShape();\n        fd.shape = polygon;\n        polygon.SetAsBox(Math.random() * 0.5 + 1.0, Math.random() * 0.5 + 1.0);\n        body.CreateFixture(fd);\n\n        this.m_bodies.push(body);\n      }\n    }\n\n    {\n      for (let i = 0; i < 5; i++) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        //bd.isBullet = true;\n        bd.position.Set(Math.random() * 40.0 - 20.0, Math.random() * 15.0 + 5.0);\n        bd.angle = Math.random() * Math.PI;\n        const body = this.m_world.CreateBody(bd);\n\n        const fd = new b2FixtureDef();\n        fd.density = 1.0;\n        // Override the default friction.\n        fd.friction = 0.3;\n        fd.restitution = 0.1;\n        fd.shape = new b2CircleShape(Math.random() * 0.5 + 1.0);\n        body.CreateFixture(fd);\n\n        this.m_bodies.push(body);\n      }\n    }\n\n    {\n      for (let i = 0; i < 15; i++) {\n        const bd = new b2BodyDef();\n        bd.type = b2BodyType.b2_dynamicBody;\n        //bd.isBullet = true;\n        bd.position.Set(Math.random() * 40.0 - 20.0, Math.random() * 15.0 + 5.0);\n        bd.angle = Math.random() * Math.PI;\n        const body = this.m_world.CreateBody(bd);\n\n        const fd = new b2FixtureDef();\n        fd.density = 1.0;\n        fd.friction = 0.3;\n        fd.restitution = 0.1;\n        const polygon = new b2PolygonShape();\n        fd.shape = polygon;\n        if (Math.random() > 0.66) {\n          polygon.Set([\n            new b2Vec2(-1.0 - Math.random() * 1.0, 1.0 + Math.random() * 1.0),\n            new b2Vec2(-0.5 - Math.random() * 1.0, -1.0 - Math.random() * 1.0),\n            new b2Vec2(0.5 + Math.random() * 1.0, -1.0 - Math.random() * 1.0),\n            new b2Vec2(1.0 + Math.random() * 1.0, 1.0 + Math.random() * 1.0),\n          ]);\n        } else if (Math.random() > 0.5) {\n          const array = [];\n          array[0] = new b2Vec2(0.0, 1.0 + Math.random() * 1.0);\n          array[2] = new b2Vec2(-0.5 - Math.random() * 1.0, -1.0 - Math.random() * 1.0);\n          array[3] = new b2Vec2(0.5 + Math.random() * 1.0, -1.0 - Math.random() * 1.0);\n          array[1] = new b2Vec2(array[0].x + array[2].x, array[0].y + array[2].y);\n          array[1].SelfMul(Math.random() / 2 + 0.8);\n          array[4] = new b2Vec2(array[3].x + array[0].x, array[3].y + array[0].y);\n          array[4].SelfMul(Math.random() / 2 + 0.8);\n          polygon.Set(array);\n        } else {\n          polygon.Set([\n            new b2Vec2(0.0, 1.0 + Math.random() * 1.0),\n            new b2Vec2(-0.5 - Math.random() * 1.0, -1.0 - Math.random() * 1.0),\n            new b2Vec2(0.5 + Math.random() * 1.0, -1.0 - Math.random() * 1.0),\n          ]);\n        }\n        body.CreateFixture(fd);\n\n        this.m_bodies.push(body);\n      }\n    }\n\n    //Add some exciting bath toys\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 40.0);\n      bd.angle = 0;\n      const body = this.m_world.CreateBody(bd);\n\n      const fd = new b2FixtureDef();\n      fd.density = 3.0;\n      const polygon = new b2PolygonShape();\n      fd.shape = polygon;\n      polygon.SetAsBox(4.0, 1.0);\n      body.CreateFixture(fd);\n\n      this.m_bodies.push(body);\n    }\n\n    {\n      const bd = new b2BodyDef();\n      bd.type = b2BodyType.b2_dynamicBody;\n      bd.position.Set(0.0, 30.0);\n      const body = this.m_world.CreateBody(bd);\n\n      const fd = new b2FixtureDef();\n      fd.density = 2.0;\n      const circle = new b2CircleShape(0.7);\n      fd.shape = circle;\n      circle.m_p.Set(3.0, 0.0);\n      body.CreateFixture(fd);\n      circle.m_p.Set(-3.0, 0.0);\n      body.CreateFixture(fd);\n      circle.m_p.Set(0.0, 3.0);\n      body.CreateFixture(fd);\n      circle.m_p.Set(0.0, -3.0);\n      body.CreateFixture(fd);\n\n      fd.density = 2.0;\n      const polygon = new b2PolygonShape();\n      fd.shape = polygon;\n      polygon.SetAsBox(3.0, 0.2);\n      body.CreateFixture(fd);\n      polygon.SetAsBox(0.2, 3.0);\n      body.CreateFixture(fd);\n\n      this.m_bodies.push(body);\n    }\n\n    // if (DEBUG) {\n    //   for (let body_i = 0; i < this.m_bodies.length; ++i)\n    //     this.m_controller.AddBody(this.m_bodies[body_i]);\n    //   for (let body_i = 0; i < this.m_bodies.length; ++i)\n    //     this.m_controller.RemoveBody(this.m_bodies[body_i]);\n    // }\n    for (let body_i = 0; body_i < this.m_bodies.length; ++body_i) {\n      this.m_controller.AddBody(this.m_bodies[body_i]);\n    }\n    // if (DEBUG) {\n    //   this.m_world.AddController(this.m_controller);\n    //   this.m_world.RemoveController(this.m_controller);\n    // }\n    this.m_world.AddController(this.m_controller);\n  }\n\n  public Step(settings: Settings): void {\n    super.Step(settings);\n  }\n\n  public static Create(): Test {\n    return new BuoyancyTest();\n  }\n}\n"],"names":["b2Maybe","value","def","undefined","b2MakeArray","length","init","a","i","b2MakeNullArray","b2MakeNumberArray","NaN","b2Abs","x","b2AbsInt","b2Min","b","b2Max","b2MinInt","b2MaxInt","b2Clamp","lo","hi","b2ClampInt","b2Sq","n","b2InvSqrt","Math","sqrt","b2DegToRad","degrees","b2_pi_over_180","b2Random","random","b2RandomRange","b2Distance","output","cache","input","b2_gjkStats","calls","proxyA","proxyB","transformA","transformB","simplex","b2Distance_s_simplex","ReadCache","vertices","m_vertices","k_maxIters","saveA","b2Distance_s_saveA","saveB","b2Distance_s_saveB","saveCount","iter","m_count","indexA","indexB","Solve2","Solve3","d","GetSearchDirection","b2Distance_s_d","LengthSquared","b2_epsilon_sq","vertex","GetSupport","b2Rot","MulTRV","q","b2Vec2","NegV","s_t0","b2Distance_s_supportA","b2Transform","MulXV","GetVertex","wA","b2Distance_s_supportB","wB","SubVV","w","iters","duplicate","maxIters","GetWitnessPoints","pointA","pointB","distance","DistanceVV","iterations","WriteCache","useRadii","rA","m_radius","rB","b2_epsilon","normal","b2Distance_s_normal","Normalize","SelfMulAdd","SelfMulSub","p","MidVV","b2Distance_s_p","Copy","b2ShapeCast","lambda","SetZero","point","radius","b2_polygonRadius","xfA","xfB","r","translationB","b2ShapeCast_s_n","Set","b2ShapeCast_s_simplex","s_t1","b2ShapeCast_s_wA","b2ShapeCast_s_wB","v","b2ShapeCast_s_v","sigma","tolerance","b2_linearSlop","Length","b2ShapeCast_s_p","vp","DotVV","vr","SelfNeg","SelfSub","GetClosestPoint","b2ShapeCast_s_pointA","b2ShapeCast_s_pointB","b2GetPointStates","state1","state2","manifold1","manifold2","pointCount","key","points","id","j","jct","b2_maxManifoldPoints","b2TestOverlapAABB","upperBound","lowerBound","y","b2ClipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","vIn0","vIn1","distance0","distance1","interp","cf","typeA","typeB","b2TestOverlapShape","shapeA","shapeB","b2TestOverlapShape_s_input","Reset","SetShape","simplexCache","b2TestOverlapShape_s_simplexCache","count","b2TestOverlapShape_s_output","verify","Error","std_iter_swap","array","tmp","default_compare","std_sort","first","len","cmp","left","stack","pos","pivot","floor","right","b2PairLessThan","pair1","pair2","m_id","b2TimeOfImpact","timer","b2TimeOfImpact_s_timer","b2_toiStats","state","t","tMax","maxVertices","b2_maxPolygonVertices","sweepA","b2TimeOfImpact_s_sweepA","sweepB","b2TimeOfImpact_s_sweepB","totalRadius","target","t1","k_maxIterations","b2TimeOfImpact_s_cache","distanceInput","b2TimeOfImpact_s_distanceInput","b2TimeOfImpact_s_xfA","b2TimeOfImpact_s_xfB","GetTransform","distanceOutput","b2TimeOfImpact_s_distanceOutput","fcn","b2TimeOfImpact_s_fcn","Initialize","done","t2","pushBackIter","b2TimeOfImpact_s_indexA","b2TimeOfImpact_s_indexB","s2","FindMinSeparation","s1","Evaluate","rootIterCount","a1","a2","rootIters","s","maxRootIters","time","GetMilliseconds","maxTime","b2CollideCircles","manifold","circleA","circleB","pA","m_p","b2CollideCircles_s_pA","pB","b2CollideCircles_s_pB","distSqr","DistanceSquaredVV","type","localPoint","localNormal","b2CollidePolygonAndCircle","polygonA","c","b2CollidePolygonAndCircle_s_c","cLocal","MulTXV","b2CollidePolygonAndCircle_s_cLocal","normalIndex","separation","b2_maxFloat","vertexCount","normals","m_normals","vertIndex1","vertIndex2","v1","v2","u1","u2","SelfNormalize","faceCenter","b2CollidePolygonAndCircle_s_faceCenter","b2EdgeSeparation","poly1","xf1","edge1","poly2","xf2","vertices1","normals1","count2","vertices2","normal1World","MulRV","b2EdgeSeparation_s_normal1World","normal1","b2EdgeSeparation_s_normal1","index","minDot","dot","b2EdgeSeparation_s_v1","b2EdgeSeparation_s_v2","b2FindMaxSeparation","edgeIndex","count1","m_centroid","b2FindMaxSeparation_s_d","dLocal1","b2FindMaxSeparation_s_dLocal1","edge","maxDot","prevEdge","sPrev","nextEdge","sNext","bestEdge","bestSeparation","increment","b2FindIncidentEdge","normals2","b2FindIncidentEdge_s_normal1","i1","i2","c0","cf0","c1","cf1","b2CollidePolygons","polyA","polyB","edgeA","b2CollidePolygons_s_edgeA","separationA","edgeB","b2CollidePolygons_s_edgeB","separationB","flip","incidentEdge","b2CollidePolygons_s_incidentEdge","iv1","iv2","local_v11","local_v12","localTangent","b2CollidePolygons_s_localTangent","CrossVOne","b2CollidePolygons_s_localNormal","planePoint","b2CollidePolygons_s_planePoint","tangent","b2CollidePolygons_s_tangent","b2CollidePolygons_s_normal","v11","b2CollidePolygons_s_v11","v12","b2CollidePolygons_s_v12","frontOffset","sideOffset1","sideOffset2","clipPoints1","b2CollidePolygons_s_clipPoints1","clipPoints2","b2CollidePolygons_s_clipPoints2","b2CollidePolygons_s_ntangent","cv","cp","b2CollideEdgeAndCircle","Q","b2CollideEdgeAndCircle_s_Q","A","m_vertex1","B","m_vertex2","e","b2CollideEdgeAndCircle_s_e","u","b2CollideEdgeAndCircle_s_id","P","b2CollideEdgeAndCircle_s_d","m_hasVertex0","A1","m_vertex0","B1","e1","b2CollideEdgeAndCircle_s_e1","m_hasVertex3","B2","m_vertex3","A2","e2","b2CollideEdgeAndCircle_s_e2","den","b2CollideEdgeAndCircle_s_P","b2CollideEdgeAndCircle_s_n","b2CollideEdgeAndPolygon","polygonB","b2CollideEdgeAndPolygon_s_collider","Collide","ComputeCentroid","vs","out","area","pRef","ComputeCentroid_s_pRef","inv3","p1","p2","p3","ComputeCentroid_s_e1","ComputeCentroid_s_e2","triangleArea","CrossVV","SelfMul","b2MixFriction","friction1","friction2","b2Sqrt","b2MixRestitution","restitution1","restitution2","b2CalculateParticleIterations","gravity","timeStep","B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS","B2_RADIUS_THRESHOLD","ceil","std_stable_sort","std_remove_if","predicate","l","std_lower_bound","last","val","step","it","std_upper_bound","std_rotate","n_first","next","std_unique","result","DrawParticleSystem","drawer","system","particleCount","GetParticleCount","GetRadius","positionBuffer","GetPositionBuffer","m_colorBuffer","data","colorBuffer","GetColorBuffer","DrawParticles","DrawJoint","joint","bodyA","GetBodyA","bodyB","GetBodyB","m_xf","x1","x2","GetAnchorA","DrawJoint_s_p1","GetAnchorB","DrawJoint_s_p2","color","DrawJoint_s_color","SetRGB","m_type","DrawSegment","pulley","GetGroundAnchorA","GetGroundAnchorB","DrawJoint_s_c","DrawPoint","DrawShape","fixture","shape","GetShape","circle","center","axis","UNITX","DrawSolidCircle","chain","ghostColor","DrawShape_s_ghostColor","SetRGBA","g","m_hasPrevVertex","m_prevVertex","DrawCircle","m_hasNextVertex","vn","m_nextVertex","poly","DrawSolidPolygon","drawDebugData","world","flags","GetFlags","DrawDebugData_s_color","m_bodyList","m_next","xf","PushTransform","f","GetFixtureList","IsActive","GetType","IsAwake","PopTransform","m_particleSystemList","m_jointList","DrawDebugData_s_vs","m_proxyCount","aabb","m_proxies","treeNode","DrawPolygon","DrawDebugData_s_xf","GetWorldCenter","DrawTransform","m_controllerList","Draw","RandomFloat","registerTest","category","name","createFunction","g_testEntries","push","TestEntry","RE","RegExp","normalizeAngle","angle","b2_pi","PI","b2_aabbExtension","b2_aabbMultiplier","b2_angularSlop","b2_maxSubSteps","b2_maxTOIContacts","b2_velocityThreshold","b2_maxLinearCorrection","b2_maxAngularCorrection","b2_maxTranslation","b2_maxTranslationSquared","b2_maxRotation","b2_maxRotationSquared","b2_baumgarte","b2_toiBaumgarte","b2_timeToSleep","b2_linearSleepTolerance","b2_angularSleepTolerance","b2_version","major","minor","revision","this","b2_branch","b2_commit","b2_two_pi","b2Pow","pow","b2Sin","sin","b2Cos","cos","b2Asin","asin","b2Atan2","atan2","other","inv_length","radians","isFinite","arr","Array","v_x","v_y","c_x","c_y","b2Vec2_zero","b2Vec3","z","a_x","a_y","a_z","b_x","b_y","b_z","b2Mat22","r1c1","r1c2","r2c1","r2c2","ex","ey","c2","det","a11","a12","a21","a22","SelfAbs","GetInverse","M","SelfAdd","SetVV","SetSSSS","SetAngle","M_ex","M_ey","A_ex","A_ey","B_ex","B_ey","A_ex_x","A_ex_y","A_ey_x","A_ey_y","B_ex_x","B_ex_y","B_ey_x","B_ey_y","b2Mat33","c3","ez","SetXYZ","a31","a32","a13","a23","a33","DotV3V3","CrossV3V3","v_z","q_c","q_s","r_c","r_s","SetIdentity","position","rotation","GetAngle","T","T_q_c","T_q_s","p_x","p_y","MulRR","AddVV","MulTRR","b2Sweep","a0","alpha0","localCenter","beta","one_minus_beta","alpha","b2Color","rr","gg","bb","aa","mixColor","strength","MixColors","MakeStyleString","colorA","colorB","dr","dg","db","da","b2Draw","m_drawFlags","b2Timer","m_start","performance","now","b2GrowableStack","N","m_stack","element","b2DistanceProxy","MakeArray","m_buffer","SetupDistanceProxy","bestIndex","bestValue","b2SimplexCache","metric","b2DistanceInput","b2DistanceOutput","b2ShapeCastInput","b2ShapeCastOutput","b2SimplexVertex","b2Simplex","m_v1","m_v2","m_v3","wALocal","wBLocal","metric1","metric2","GetMetric","e12","CrossOneV","w1","w2","s_e12","d12_2","d12_1","inv_d12","w3","w1e12","e13","s_e13","w1e13","d13_1","d13_2","e23","s_e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","b2ContactFeature","_key_invalid","_key","_indexA","_indexB","_typeA","_typeB","b2ContactID","o","b2ManifoldPoint","normalImpulse","tangentImpulse","b2Manifold","b2WorldManifold","radiusA","radiusB","Initialize_s_pointA","Initialize_s_pointB","cA","AddVMulSV","Initialize_s_cA","cB","SubVMulSV","Initialize_s_cB","separations","Initialize_s_planePoint","clipPoint","Initialize_s_clipPoint","b2ClipVertex","b2RayCastInput","maxFraction","b2RayCastOutput","fraction","b2AABB","IsValid","m_cache_center","ExtVV","m_cache_extent","aabb1","aabb2","tmin","tmax","d_x","d_y","absD_x","absD_y","inv_d","t3","Combine2","b2TreeNode","_userData","child1","b2DynamicTree","callback","Push","m_root","GetCount","node","Pop","TestOverlap","IsLeaf","child2","TestContain","s_r","s_v","abs_v","AbsV","s_abs_v","segmentAABB","s_segmentAABB","t_x","t_y","GetCenter","h","GetExtents","subInput","s_subInput","m_freeList","parent","height","s_node_id","userData","AllocateNode","r_x","r_y","InsertLeaf","RemoveLeaf","FreeNode","displacement","Contains","leaf","m_insertionCount","leafAABB","sibling","GetPerimeter","combinedAABB","s_combinedAABB","combinedArea","cost","inheritanceCost","cost1","s_aabb","oldArea","cost2","oldParent","newParent","Balance","grandParent","C","balance","Rotate_C_Up","Rotate_B_Up","F","G","D","E","rootArea","GetAreaNode","ComputeHeightNode","ValidateStructure","ValidateMetrics","GetMaxBalanceNode","Validate","newOrigin","ShiftOriginNode","maxBalance","b2Pair","b2BroadPhase","proxy","m_tree","CreateProxy","BufferMove","UnBufferMove","DestroyProxy","MoveProxy","m_pairCount","_PerformTreeQueriesForMovingProxies","m_moveCount","m_pairBuffer","_SendPairsBackToClient","queryProxy","m_moveBuffer","fatAABB","_queryCache","Query_","pair","primaryPair","Query","QueryPoint","RayCast","GetHeight","GetMaxBalance","GetAreaRatio","ShiftOrigin","indexOf","b2TimeOfImpact_s_pointA","b2TimeOfImpact_s_pointB","b2TimeOfImpact_s_normal","b2TimeOfImpact_s_axisA","b2TimeOfImpact_s_axisB","b2TOIInput","b2TOIOutput","b2SeparationFunction","m_proxyA","m_proxyB","m_sweepA","m_sweepB","localPointA","localPointB","m_axis","m_localPoint","localPointB1","localPointB2","localPointA1","localPointA2","axisA","axisB","b2EPAxis","b2TempPolygon","b2ReferenceFace","b2EPCollider","MulTXX","m_centroidB","m_v0","hasVertex0","hasVertex3","s_edge1","m_normal1","offset1","offset0","offset2","convex1","convex2","edge0","s_edge0","m_normal0","edge2","s_edge2","m_normal2","m_front","m_normal","m_lowerLimit","m_upperLimit","m_polygonB","edgeAxis","ComputeEdgeSeparation","s_edgeAxis","polygonAxis","ComputePolygonSeparation","s_polygonAxis","primaryAxis","k_relativeTol","k_absoluteTol","ie","s_ie","rf","s_rf","ie0","ie1","sideNormal1","sideNormal2","s_clipPoints1","s_clipPoints2","perp","s_perp","s_n","b2MassData","mass","I","b2Shape","ComputeDistance_s_center","b2CircleShape","transform","TestPoint_s_center","TestPoint_s_d","childIndex","RayCast_s_position","RayCast_s_s","RayCast_s_r","ComputeAABB_s_p","massData","density","radius_sq","r2","l2","com","ComputeDistance_s_pLocal","ComputeDistance_s_normalForMaxDistance","ComputeDistance_s_minDistance","ComputeDistance_s_distance","b2PolygonShape","args","_Set","SetAsBox","ps","unique","i0","x0","hull","m","ih","Set_s_r","Set_s_v","vertexi1","vertexi2","hx","hy","SetPosition","SetRotationAngle","pLocal","TestPoint_s_pLocal","maxDistance","normalForMaxDistance","minDistance","minDistance2","distance2","RayCast_s_p1","RayCast_s_p2","RayCast_s_d","lower","upper","numerator","denominator","ComputeAABB_s_v","MinV","MaxV","SelfSubXY","SelfAddXY","ComputeMass_s_center","ComputeMass_s_s","k_inv3","ComputeMass_s_e1","ComputeMass_s_e2","MulSV","ex1","ey1","ex2","ey2","Validate_s_e","Validate_s_v","normalL","ComputeSubmergedArea_s_normalL","offsetL","depths","diveCount","intoIndex","outoIndex","lastSubmerged","isSubmerged","md","ComputeSubmergedArea_s_md","ComputeMass","intoIndex2","outoIndex2","intoLamdda","outoLamdda","intoVec","ComputeSubmergedArea_s_intoVec","outoVec","ComputeSubmergedArea_s_outoVec","ComputeSubmergedArea_s_center","ComputeDistance_s_v1","ComputeDistance_s_v2","ComputeDistance_s_d","ComputeDistance_s_s","b2EdgeShape","ds","RayCast_s_e","RayCast_s_q","ComputeAABB_s_v1","ComputeAABB_s_v2","b2ChainShape","_CreateLoop","_CreateChain","prevVertex","nextVertex","ComputeDistance_s_edgeShape","GetChildEdge","ComputeDistance","edgeShape","RayCast_s_edgeShape","b2Filter","categoryBits","maskBits","groupIndex","b2FixtureDef","friction","restitution","b2FixtureProxy","m_shape","ComputeAABB","m_body","m_world","m_contactManager","m_broadPhase","TouchProxy","transform1","transform2","Synchronize_s_aabb1","Synchronize_s_aabb2","b2Fixture","body","m_density","m_friction","m_restitution","Clone","_shapeType","_shapeRadius","m_userData","m_filter","filter","DEFAULT","m_isSensor","isSensor","sensor","SetAwake","Refilter","GetContactList","contact","fixtureA","GetFixtureA","fixtureB","GetFixtureB","FlagForFiltering","TouchProxies","TestPoint","GetChildCount","Touch","Synchronize","b2BodyDef","angularVelocity","linearDamping","angularDamping","gravityScale","b2Body","bd","m_bulletFlag","bullet","m_fixedRotationFlag","fixedRotation","m_autoSleepFlag","allowSleep","m_awakeFlag","awake","m_activeFlag","active","ZERO","m_xf0","m_sweep","m_linearVelocity","linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_force","m_torque","m_sleepTime","m_mass","m_invMass","m_I","m_invI","CreateFixtureShapeDensity","CreateFixtureDef","IsLocked","CreateProxies","m_fixtureList","m_fixtureCount","ResetMassData","m_newFixture","CreateFixtureShapeDensity_s_def","ppF","m_contactList","Destroy","DestroyProxies","SetTransformXY","SynchronizeProxies","FindNewContacts","SetTransformVec","GetPosition","SetLinearVelocityXY","GetLinearVelocity","GetUserData","force","wake","torque","impulse","oldCenter","SetMassData_s_oldCenter","AddVCrossSV","ResetMassData_s_localCenter","GetMassData","ResetMassData_s_massData","ResetMassData_s_oldCenter","localVector","worldPoint","worldVector","GetLinearVelocityFromWorldPoint","GetWorldPoint","scale","SynchronizeFixtures","ce","ce0","flag","SynchronizeFixtures_s_xf1","SynchronizeFixtures_s_displacement","ShouldCollideConnected","jn","m_collideConnected","Advance","m_controllerCount","b2JointEdge","_other","prev","b2JointDef","b2Joint","m_edgeA","m_edgeB","m_bodyA","m_bodyB","collideConnected","b2DistanceJointDef","b1","b2","anchor1","anchor2","GetLocalPoint","localAnchorA","localAnchorB","frequencyHz","dampingRatio","b2DistanceJoint","m_frequencyHz","m_dampingRatio","m_localAnchorA","m_localAnchorB","m_length","inv_dt","m_impulse","m_u","hz","ratio","m_indexA","m_islandIndex","m_indexB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","positions","aA","vA","velocities","aB","vB","qA","m_qA","qB","m_qB","m_lalcA","m_rA","m_lalcB","m_rB","crAu","crBu","invMass","omega","k","dt","m_gamma","m_bias","warmStarting","dtRatio","InitVelocityConstraints_s_P","vpA","SolveVelocityConstraints_s_vpA","vpB","SolveVelocityConstraints_s_vpB","Cdot","SolveVelocityConstraints_s_P","SolvePositionConstraints_s_P","b2AreaJointDef","bodies","b2AreaJoint","m_bodies","m_targetLengths","m_joints","m_deltas","djd","_this2","m_targetArea","body_c","next_c","GetWorld","CreateJoint","SetFrequency","SetDampingRatio","prev_c","delta","body_v","dotMassSum","crossMassSum","GetMass","perimeter","m_delta","dist","toExtrude","next_i","norm_sq","b2FrictionJointDef","bA","bB","anchor","b2FrictionJoint","m_linearImpulse","m_maxForce","maxForce","m_maxTorque","maxTorque","m_linearMass","mA","mB","iA","iB","K","m_K","m_angularMass","m_angularImpulse","oldImpulse","maxImpulse","Cdot_v2","SolveVelocityConstraints_s_Cdot_v2","impulseV","MulMV","SolveVelocityConstraints_s_impulseV","oldImpulseV","SolveVelocityConstraints_s_oldImpulseV","b2GearJointDef","b2GearJoint","coordinateA","coordinateB","m_joint1","joint1","m_joint2","joint2","m_typeA","m_typeB","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_referenceAngle","m_localAxisC","prismatic","m_localXAxisA","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_ratio","m_constant","m_indexC","m_indexD","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","vC","wC","vD","wD","qC","m_qC","qD","m_qD","m_JvAC","m_JwA","m_JwC","InitVelocityConstraints_s_u","m_lalcC","rC","InitVelocityConstraints_s_rC","InitVelocityConstraints_s_rA","m_JvBD","m_JwB","m_JwD","m_lalcD","rD","InitVelocityConstraints_s_rD","InitVelocityConstraints_s_rB","JwA","JwB","JwC","JwD","cC","cD","linearError","JvAC","JvBD","SolvePositionConstraints_s_u","SolvePositionConstraints_s_rC","SolvePositionConstraints_s_rA","SolvePositionConstraints_s_rD","SolvePositionConstraints_s_rB","b2MotorJointDef","linearOffset","angleA","angleB","angularOffset","b2MotorJoint","m_linearOffset","m_correctionFactor","correctionFactor","IsEqualToV","m_angularOffset","m_linearError","m_angularError","inv_h","CrossSV","s_t2","s_t3","impulse_v2","SolveVelocityConstraints_s_impulse_v2","oldImpulse_v2","SolveVelocityConstraints_s_oldImpulse_v2","b2MouseJointDef","b2MouseJoint","m_targetA","m_beta","m_C","SolveVelocityConstraints_s_Cdot","SolveVelocityConstraints_s_impulse","SolveVelocityConstraints_s_oldImpulse","b2PrismaticJointDef","GetLocalVector","localAxisA","referenceAngle","b2PrismaticJoint","m_localYAxisA","m_lowerTranslation","lowerTranslation","m_upperTranslation","upperTranslation","m_maxMotorForce","maxMotorForce","m_motorSpeed","motorSpeed","m_enableLimit","enableLimit","m_enableMotor","enableMotor","InitVelocityConstraints_s_d","m_a1","m_a2","m_motorMass","m_perp","m_s1","m_s2","jointTranslation","m_limitState","m_motorImpulse","LA","LB","Cdot1_x","Cdot1_y","Cdot2","f1","SolveVelocityConstraints_s_f1","df3","Solve33","SolveVelocityConstraints_s_df3","f2r","Solve22","SolveVelocityConstraints_s_f2r","df2","SolveVelocityConstraints_s_df2","SolvePositionConstraints_s_d","SolvePositionConstraints_s_impulse","C1_x","C1_y","angularError","C2","translation","k11","k12","k13","k22","k23","k33","m_K3","K2","m_K2","impulse1","Solve","SolvePositionConstraints_s_impulse1","GetJointTranslation_s_pA","GetJointTranslation_s_pB","GetJointTranslation_s_d","GetWorldVector","GetJointTranslation_s_axis","speed","b2PulleyJointDef","groundA","groundB","anchorA","anchorB","groundAnchorA","groundAnchorB","lengthA","lengthB","b2PulleyJoint","m_groundAnchorA","m_groundAnchorB","m_lengthA","m_lengthB","m_uA","m_uB","ruA","ruB","PA","InitVelocityConstraints_s_PA","PB","InitVelocityConstraints_s_PB","SolveVelocityConstraints_s_PA","SolveVelocityConstraints_s_PB","uA","uB","SolvePositionConstraints_s_PA","SolvePositionConstraints_s_PB","GetCurrentLengthA_s_p","GetCurrentLengthB_s_p","b2RevoluteJointDef","b2RevoluteJoint","m_lowerAngle","lowerAngle","m_upperAngle","upperAngle","m_maxMotorTorque","maxMotorTorque","jointAngle","Cdot1","SolveVelocityConstraints_s_Cdot1","impulse_v3","SolveVelocityConstraints_s_impulse_v3","rhs_x","rhs_y","reduced_v2","SolveVelocityConstraints_s_reduced_v2","positionError","limitImpulse","C_v2","SolvePositionConstraints_s_C_v2","b2RopeJointDef","b2RopeJoint","m_maxLength","maxLength","m_state","crA","crB","b2WeldJointDef","b2WeldJoint","GetInverse22","invM","GetSymInverse33","impulse2","MulM33XY","SolveVelocityConstraints_s_impulse1","MulM33XYZ","C1","SolvePositionConstraints_s_C1","b2WheelJointDef","b2WheelJoint","m_ax","m_ay","m_sAy","m_sBy","m_springMass","m_sAx","m_sBx","damp","m_springImpulse","ay","sAy","sBy","GetPrismaticJointTranslation","GetPrismaticJointSpeed","GetRevoluteJointAngle","GetRevoluteJointSpeed","b2ContactEdge","ComputeTOI_s_input","ComputeTOI_s_output","Evaluate_s_edge","m_fixtureA","m_fixtureB","m_manifold","pt","b2Contact","m_toi","m_tangentSpeed","worldManifold","m_touchingFlag","m_enabledFlag","m_filterFlag","m_islandFlag","m_bulletHitFlag","m_toiFlag","m_prev","m_nodeA","m_nodeB","m_toiCount","listener","tManifold","m_oldManifold","touching","wasTouching","sensorA","IsSensor","sensorB","GetBody","GetShapeA","GetShapeB","mp2","id2","mp1","BeginContact","EndContact","PreSolve","b2ContactFactory","InitializeRegisters","pool","pop","m_registers","AddType","reg","createFromPool","destroyToPool","b2DestructionListener","group","b2ContactFilter","filter1","GetFilterData","filter2","b2ContactImpulse","b2ContactListener","oldManifold","b2QueryCallback","b2RayCastCallback","b2ContactManager","b2_defaultFilter","b2_defaultListener","fA","fB","GetChildIndexA","GetChildIndexB","ShouldCollide","m_contactFilter","m_contactFactory","Create","m_contactCount","listA","s_updatePairs_proxyA","listB","s_updatePairs_proxyB","UpdatePairs_","AddPair","m_contactListener","IsTouching","cNuke","activeA","activeB","treeNodeA","treeNodeB","Update","b2Profile","collide","solve","solveInit","solveVelocity","solvePosition","broadphase","solveTOI","b2TimeStep","positionIterations","velocityIterations","particleIterations","b2Position","b2Velocity","b2SolverData","g_blockSolve","b2VelocityConstraintPoint","normalMass","tangentMass","velocityBias","b2ContactVelocityConstraint","b2ContactPositionConstraint","b2ContactSolverDef","b2PositionSolverManifold","pc","localPoints","b2ContactSolver","m_step","m_positionConstraints","new_length","m_velocityConstraints","m_positions","m_velocities","m_contacts","contacts","Initialize2","GetManifold","vc","tangentSpeed","invMassA","invMassB","invIA","invIB","contactIndex","localCenterA","localCenterB","vcp","InitializeVelocityConstraints_s_xfA","InitializeVelocityConstraints_s_xfB","InitializeVelocityConstraints_s_worldManifold","k_maxConditionNumber","rnA","rnB","kNormal","rtA","rtB","kTangent","vRel","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","WarmStart_s_P","dv","SolveVelocityConstraints_s_dv","dv1","SolveVelocityConstraints_s_dv1","dv2","SolveVelocityConstraints_s_dv2","SolveVelocityConstraints_s_a","SolveVelocityConstraints_s_b","SolveVelocityConstraints_s_x","SolveVelocityConstraints_s_d","P1","SolveVelocityConstraints_s_P1","P2","SolveVelocityConstraints_s_P2","P1P2","SolveVelocityConstraints_s_P1P2","vt","maxFriction","newImpulse","cp1","cp2","vn1","vn2","SolvePositionConstraints_s_xfA","SolvePositionConstraints_s_xfB","psm","SolvePositionConstraints_s_psm","minSeparation","toiIndexA","toiIndexB","SolveTOIPositionConstraints_s_xfA","SolveTOIPositionConstraints_s_xfB","SolveTOIPositionConstraints_s_psm","SolveTOIPositionConstraints_s_rA","SolveTOIPositionConstraints_s_rB","SolveTOIPositionConstraints_s_P","s_timer","s_solverData","s_contactSolverDef","s_contactSolver","s_translation","b2Island","bodyCapacity","contactCapacity","jointCapacity","m_bodyCapacity","m_contactCapacity","m_jointCapacity","m_bodyCount","m_jointCount","m_listener","profile","bodyCount","solverData","contactSolverDef","contactSolver","InitializeVelocityConstraints","WarmStart","_SolveInitJoints","SolveVelocityConstraints","StoreImpulses","_SolvePositionsConstraits","SynchronizeTransform","Report","_UpdateSleepTime","jointsCount","joints","contactsOkay","SolvePositionConstraints","jointsOkay","jointOkay","list","InitVelocityConstraints","minSleepTime","linTolSqr","angTolSqr","subStep","SolveTOIPositionConstraints","constraints","s_impulse","normalImpulses","tangentImpulses","PostSolve","b2_invalidParticleIndex","b2_particleStride","b2_minParticleWeight","b2_maxParticlePressure","b2_maxParticleForce","b2_maxTriadDistance","b2_maxTriadDistanceSquared","b2_minParticleSystemBufferCapacity","b2_barrierCollisionTime","b2ParticleDef","lifetime","b2ParticleHandle","b2ParticleGroupDef","b2ParticleGroup","m_system","m_lastIndex","m_firstIndex","m_flagsBuffer","m_groupFlags","SetGroupFlags","UpdateStatistics","m_inertia","m_center","m_transform","GetLinearVelocityFromWorldPoint_s_t0","ApplyForce","ApplyLinearImpulse","callDestructionListener","DestroyParticle","m_positionBuffer","m_velocityBuffer","m_timestamp","GetParticleMass","inv_mass","b2StackQueue","capacity","fill","item","m_back","m_capacity","b2VoronoiDiagram","generatorCapacity","m_generatorBuffer","b2VoronoiDiagram_Generator","m_generatorCapacity","tag","necessary","m_generatorCount","margin","inverseRadius","necessary_count","m_countX","m_countY","m_diagram","queue","b2VoronoiDiagram_Task","Empty","task","Front","m_x","m_y","m_i","m_generator","ax","bx","by","newIndices","start","mid","end","b2GrowableBuffer","allocator","_createClass","Grow","newCapacity","Reserve","newEnd","newCount","pred","b2FixtureParticleQueryCallback","_this","childCount","GetAABB","enumerator","GetInsideBoundsEnumerator","GetNext","ReportFixtureAndParticle","b2ParticleContact","weight","rhs","IsEqual","MAX_WEIGHT_DIFF","MAX_NORMAL_DIFF_SQ","b2ParticleBodyContact","b2ParticlePair","b2ParticleTriad","ka","kb","kc","b2ParticleSystemDef","dampingStrength","repulsiveStrength","strictContactCheck","maxCount","pressureStrength","elasticStrength","springStrength","viscousStrength","surfaceTensionPressureStrength","surfaceTensionNormalStrength","powderStrength","ejectionStrength","staticPressureStrength","staticPressureRelaxation","staticPressureIterations","colorMixingStrength","destroyByAge","lifetimeGranularity","b2ParticleSystem","b2ParticleSystem_UserOverridableBuffer","b2ParticleSystem_Proxy","m_inverseDensity","m_particleDiameter","m_inverseDiameter","m_squaredDiameter","SetStrictContactCheck","SetDensity","SetGravityScale","SetRadius","SetMaxParticleCount","m_def","SetDestructionByAge","m_groupList","DestroyParticleGroup","FreeUserOverridableBuffer","m_handleIndexBuffer","m_lastBodyContactStepBuffer","m_bodyContactCountBuffer","m_consecutiveContactStepsBuffer","m_userDataBuffer","m_expirationTimeBuffer","m_indexByExpirationTimeBuffer","FreeBuffer","m_forceBuffer","m_internalAllocatedCapacity","m_weightBuffer","m_staticPressureBuffer","m_accumulationBuffer","m_accumulation2Buffer","m_depthBuffer","m_groupBuffer","ReallocateInternalAllocatedBuffers","DestroyOldestParticle","SolveZombie","velocity","IsZero","RequestBuffer","m_proxyBuffer","Append","finiteLifetime","SetParticleLifetime","ExpirationTimeToLifetime","GetQuantizedTimeElapsed","RotateBuffer","SetParticleFlags","handle","oldestFiniteLifetimeParticle","oldestInfiniteLifetimeParticle","DestroyParticlesInShape_s_aabb","b2ParticleSystem_DestroyParticlesInShapeCallback","QueryAABB","Destroyed","groupDef","s_transform","CreateParticleGroup_s_transform","SetPositionAngle","firstIndex","CreateParticlesWithShapeForGroup","shapes","CreateParticlesWithShapesForGroup","shapeCount","positionData","CreateParticleForGroup","lastIndex","m_strength","m_groupCount","groupFlags","b2ParticleSystem_ConnectionFilter","UpdateContacts","UpdatePairsAndTriads","JoinParticleGroups","groupA","groupB","b2ParticleSystem_JoinParticleGroupsFilter","nodeBuffer","b2ParticleSystem_ParticleListNode","InitializeParticleLists","MergeParticleListsInContact","survivingList","FindLongestParticleList","MergeZombieParticleListNodes","CreateParticleGroupsFromParticleList","UpdatePairsAndTriadsWithParticleList","m_allParticleFlags","m_allGroupFlags","paused","m_paused","damping","newFlags","m_needsUpdateAllParticleFlags","buffer","SetUserOverridableBuffer","Float32Array","ptr","m_contactBuffer","m_bodyContactBuffer","m_triadBuffer","steps","m_stuckThreshold","m_stuckParticleBuffer","Data","ComputeCollisionEnergy_s_v","vel_data","sum_v2","enabled","initializeExpirationTimes","quantizedLifetime","newExpirationTime","m_expirationTimeBufferRequiresSorting","GetExpirationTimeBuffer","enable","expirationTime","GetParticleLifetime","totalMass","velocityDelta","IsSignificantForce","ForceCanBeApplied","PrepareForceBuffer","distributedForce","beginProxy","endProxy","firstProxy","computeTag","CompareProxyTag","lastProxy","CompareTagProxy","pos_data","ReportParticle","QueryShapeAABB_s_aabb","slop","QueryPointAABB_s_aabb","point1","point2","RayCast_s_aabb","s_p","RayCast_s_p","RayCast_s_v","RayCast_s_n","s_point","RayCast_s_point","pv","determinant","sqrtDeterminant","userSuppliedCapacity","oldBuffer","oldCapacity","newBuffer","slice","deferred","ReallocateBuffer3","ReallocateBuffer5","ReallocateBuffer4","LimitCapacity","ReallocateHandleBuffers","stuck","particleDef","CreateParticle","s_edge","CreateParticlesStrokeShapeForGroup_s_edge","s_d","CreateParticlesStrokeShapeForGroup_s_d","CreateParticlesStrokeShapeForGroup_s_p","stride","GetParticleStride","positionOnEdge","edgeLength","CreateParticlesFillShapeForGroup_s_aabb","CreateParticlesFillShapeForGroup_s_p","identity","IDENTITY","CreateParticlesStrokeShapeForGroup","CreateParticlesFillShapeForGroup","compositeShape","b2ParticleSystem_CompositeShape","oldIndex","newIndex","m_hasForce","m_destructionListener","SayGoodbyeParticleGroup","s_dab","UpdatePairsAndTriads_s_dab","s_dbc","UpdatePairsAndTriads_s_dbc","s_dca","UpdatePairsAndTriads_s_dca","particleFlags","k_pairFlags","af","bf","IsNecessary","ParticleCanBeConnected","ShouldCreatePair","ComparePairIndices","Unique","MatchPairIndices","k_triadFlags","diagram","AddGenerator","Generate","ShouldCreateTriad","pa","pb","dab","dbc","dca","maxDistanceSquared","groupC","triad","indexC","midPoint_x","midPoint_y","GetNodes","CompareTriadIndices","MatchTriadIndices","b2ParticleSystem_ReactiveFilter","bufferIndex","GetBufferIndex","ContainsParticle","_tmp","MergeParticleLists","MergeParticleListAndNode","GetGroupFlags","newGroup","CreateParticleGroup","CloneParticle","contactGroups","contactGroupsCount","groupsToUpdate","groupsToUpdateCount","iterationCount","updated","ap0","bp0","ap1","bp1","lowerTag","upperTag","b2ParticleSystem_InsideBoundsEnumerator","m_needsUpdateAllGroupFlags","flags_data","AddContact_s_d","distBtParticlesSq","invD","rightTag","computeRelativeTag","AddContact","bottomLeftTag","bottomRightTag","FindContacts_Reference","proxies","inv_diam","UpdateProxies_Reference","CompareProxyProxy","contactFilter","GetParticleContactFilter","ShouldCollideParticleParticle","_this3","RemoveIf","particlePairs","GetParticleContactListener","contactListener","itemIndex","Invalidate","BeginContactParticleParticle","exceptZombie","UpdateProxies","SortProxies","b2ParticlePairSet","NotifyContactListenerPreContact","FindContacts","FilterContacts","NotifyContactListenerPostContact","b2ParticleContactIsZombie","fixtureSet","GetFixtureContactListener","BeginContactFixtureParticle","UpdateBodyContacts_s_aabb","b2ParticleSystem_FixtureParticleSet","NotifyBodyContactListenerPreContact","SetCount","UpdateBodyContacts_callback","b2ParticleSystem_UpdateBodyContactsCallback","GetFixtureContactFilter","RemoveSpuriousBodyContacts","NotifyBodyContactListenerPostContact","s_subStep","Solve_s_subStep","SolveLifetimes","UpdateAllParticleFlags","UpdateAllGroupFlags","m_iterationIndex","UpdateBodyContacts","ComputeWeight","ComputeDepth","UpdatePairsAndTriadsWithReactiveParticles","SolveForce","SolveViscous","SolveRepulsive","SolvePowder","SolveTensile","SolveSolid","SolveColorMixing","SolveGravity","SolveStaticPressure","SolvePressure","SolveDamping","k_extraDampingFlags","SolveExtraDamping","SolveElastic","SolveSpring","LimitVelocity","SolveRigidDamping","SolveBarrier","SolveCollision","SolveRigid","SolveWall","SolveCollision_s_aabb","p2_x","p2_y","SolveCollision_callback","b2ParticleSystem_SolveCollisionCallback","criticalVelocitySquared","GetCriticalVelocitySquared","s_gravity","SolveGravity_s_gravity","GetGravity","SolveBarrier_s_aabb","s_va","SolveBarrier_s_va","s_vb","SolveBarrier_s_vb","s_pba","SolveBarrier_s_pba","s_vba","SolveBarrier_s_vba","s_vc","SolveBarrier_s_vc","s_pca","SolveBarrier_s_pca","s_vca","SolveBarrier_s_vca","s_qba","SolveBarrier_s_qba","s_qca","SolveBarrier_s_qca","s_dv","SolveBarrier_s_dv","s_f","SolveBarrier_s_f","k_barrierWallFlags","aGroup","bGroup","va","vb","pba","vba","cGroup","pca","vca","e0","qba","qca","sqrtDet","IsRigidGroup","inertia","GetInertia","ParticleApplyForce","criticalPressure","GetCriticalPressure","pressurePerWeight","maxPressure","relaxation","SolvePressure_s_f","k_noPressureFlags","velocityPerPressure","GetParticleInvMass","SolveDamping_s_v","SolveDamping_s_f","quadraticDamping","GetCriticalVelocity","SolveRigidDamping_s_t0","SolveRigidDamping_s_t1","SolveRigidDamping_s_p","SolveRigidDamping_s_v","invInertiaA","tangentDistanceA","invInertiaB","tangentDistanceB","InitDampingParameterWithRigidGroupOrParticle","InitDampingParameter","GetLocalCenter","ComputeDampingImpulse","ApplyDamping","aRigid","bRigid","SolveExtraDamping_s_v","SolveExtraDamping_s_f","s_position","SolveRigid_s_position","s_rotation","SolveRigid_s_rotation","SolveRigid_s_transform","s_velocityTransform","SolveRigid_s_velocityTransform","SetPositionRotation","MulXX","velocityTransform","s_pa","SolveElastic_s_pa","s_pb","SolveElastic_s_pb","s_pc","SolveElastic_s_pc","SolveElastic_s_r","SolveElastic_s_t0","oa","ob","oc","invR","SolveSpring_s_pa","SolveSpring_s_pb","SolveSpring_s_d","SolveSpring_s_f","r0","r1","s_weightedNormal","SolveTensile_s_weightedNormal","s_s","SolveTensile_s_s","SolveTensile_s_f","weightedNormal","criticalVelocity","normalStrength","maxVelocityVariation","fn","SolveViscous_s_v","SolveViscous_s_f","SolveRepulsive_s_f","SolvePowder_s_f","minWeight","SolveSolid_s_f","velocityPerForce","colorMixing","newIndicesArray","allParticleFlags","destructionListener","SayGoodbyeParticle","Test","IsProxyInvalid","IsContactInvalid","IsBodyContactInvalid","IsPairInvalid","IsTriadInvalid","writeOffset","readOffset","modified","m_timeElapsed","LifetimeToExpirationTime","quantizedTimeElapsed","expirationTimes","expirationTimeIndices","particleIndexA","particleIndexB","expirationTimeA","expirationTimeB","infiniteExpirationTimeA","particleIndex","indexByExpirationTime","inverseStride","oldFlags","BodyContactCompare","RemoveSpuriousBodyContacts_s_n","s_pos","RemoveSpuriousBodyContacts_s_pos","s_normal","RemoveSpuriousBodyContacts_s_normal","k_maxContactsPerPoint","currentContacts","b2ParticleBodyContactRemovePredicate","_this4","particle","invInertia","tangentDistance","isRigidGroup","normalVelocity","yOffset","yShift","xScale","xOffset","xShift","diffA","diffB","nextB","lhs","yTruncBits","tagBits","xTruncBits","yMask","_data","m_xLower","xMask","m_xUpper","m_yLower","m_yUpper","m_first","m_last","xTag","b2ParticleSystem_FixedSetAllocator","itemSize","bodyContactBuffer","flagsBuffer","contactBuffer","_this5","m_callDestructionListener","m_destroyed","particleSystem","threshold","_this6","m_threshold","_this7","m_shapes","m_shapeCount","s_subaabb","subaabb","Combine1","_this8","_this9","GetFlagsBuffer","ShouldCollideFixtureParticle","ReportFixtureAndParticle_s_n","s_rp","ReportFixtureAndParticle_s_rp","ap","bp","bm","bI","invBm","invBI","invAm","rp","rpn","DetectStuckParticle","_this10","s_p1","ReportFixtureAndParticle_s_p1","s_output","ReportFixtureAndParticle_s_output","s_input","ReportFixtureAndParticle_s_input","ReportFixtureAndParticle_s_p","ReportFixtureAndParticle_s_v","ReportFixtureAndParticle_s_f","av","SolveTOI_s_subStep","SolveTOI_s_backup","SolveTOI_s_backup1","SolveTOI_s_backup2","SolveTOI_s_toi_input","SolveTOI_s_toi_output","Step_s_step","Step_s_stepTimer","Step_s_timer","Step_s_broadphaseTimer","b2World","m_inv_dt0","m_gravity","je","je0","SayGoodbyeJoint","DestroyJoint","coe","coe0","nextController","controller","RemoveBody","f0","SayGoodbyeFixture","_Joint_Create","_Joint_Destroy","GetSmallestRadius","smallestRadius","GetParticleSystemList","CalculateReasonableParticleIterations","stepTimer","m_locked","m_warmStarting","m_profile","m_stepComplete","m_continuousPhysics","SolveTOI","m_clearForces","ClearForces","_QueryAABB","ReportFixture","ShouldQueryParticleSystem","_QueryPointAABB","QueryPointAABB","_QueryFixtureShape","QueryFixtureShape_s_aabb","fixture_proxy","QueryFixtureShape","_QueryFixturePoint","QueryFixturePoint","_RayCast","RayCast_s_input","RayCast_s_output","min_fraction","m_allowSleep","m_subStepping","GetProxyCount","GetTreeHeight","GetTreeBalance","GetTreeQuality","Step","island","m_island","s_stack","seed","Clear","stackCount","AddBody","IsEnabled","AddJoint","SleepAll","_SynchronizeFixturesCheck","minContact","minAlpha","collideA","IsBullet","collideB","backup1","backup2","backup","SetEnabled","b2ControllerEdge","b2BuoyancyController","useWorldGravity","nextBody","areac","massc","sc","sarea","ComputeSubmergedArea","shapeDensity","useDensity","GetDensity","buoyancyForce","dragForce","linearDrag","ApplyTorque","GetAngularVelocity","angularDrag","debugDraw","prevBody","prevController","b2RopeDef","b2Rope","m_ps","m_p0s","m_vs","m_ims","masses","count3","m_Ls","m_as","d1","d2","m_damping","m_k2","k2","m_k3","k3","exp","SolveC2","SolveC3","L","im1","im2","m1","m2","m3","s_d1","s_d2","L1sqr","L2sqr","Jd1","SelfSkew","s_Jd1","Jd2","s_Jd2","J1","s_J1","J2","s_J2","J3","draw","Camera","screenPoint","ConvertElementToWorld","ConvertWorldToElement","viewport","element_x","m_width","element_y","m_height","viewport_x","viewport_y","projection","m_zoom","m_extent","ConvertElementToViewport","ConvertViewportToProjection","ConvertProjectionToWorld","ConvertWorldToProjection","ConvertProjectionToViewport","ConvertViewportToElement","DebugDraw","ctx","m_ctx","save","translate","rotate","restore","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","fillStyle","arc","cx","cy","centers","colors","RED","GREEN","size","g_camera","hsize","fillRect","message","setTransform","font","DrawString_s_color","fillText","DrawStringWorld_s_p","cs","cc","DrawStringWorld_s_cc","canvas","width","DrawStringWorld_s_color","strokeRect","ParticleParameterOptions","g_debugDraw","FullScreenUI","m_particleParameterSelectionEnabled","EmittedParticleCallback","RadialEmitter","SetGroup","origin","m_origin","m_halfSize","m_startingVelocity","m_speed","m_flags","m_color","emitRate","m_emitRate","m_particleSystem","m_callback","m_group","particleIndices","particleIndicesCount","numberOfParticlesCreated","m_emitRemainder","pd","Random","positionOnUnitCircle","ParticleCreated","ParticleParameterValue","options","ParticleParameterDefinition","values","numValues","mask","ParticleParameter","k_defaultDefinition","m_restartOnChange","m_index","SetDefinition","definition","definitionCount","m_definition","m_definitionCount","m_valueCount","Get","m_changed","m_value","FindParticleParameterValue","restart","changed","GetRestartOnChange","OptionDrawShapes","OptionDrawParticles","k_DefaultOptions","OptionStrictContacts","OptionDrawAABBs","k_particleTypes","DRAW_STRING_NEW_LINE","Settings","createFcn","DestructionListener","test","m_mouseJoint","JointDestroyed","ParticleGroupDestroyed","ContactPoint","QueryCallback2","m_velocity","GetVelocityBuffer","k_maxContactPoints","particleSystemDef","CreateParticleSystem","m_bomb","m_textLine","SetDestructionListener","SetContactListener","bodyDef","m_groundBody","CreateBody","PreSolve_s_state1","PreSolve_s_state2","PreSolve_s_worldManifold","GetWorldManifold","m_pointCount","m_points","line","title","DrawString","m_mouseWorld","m_mouseTracing","m_mouseTracerPosition","m_mouseTracerVelocity","hit_fixture","worldPt","m_bombSpawnPoint","m_bombSpawning","multiplier","vel","LaunchBombAt","SpawnBomb","CompleteBombSpawn","SetTarget","DestroyBody","SetLinearVelocity","fd","CreateFixture","settings","pause","singleStep","drawShapes","drawParticles","drawJoints","drawAABBs","drawCOMs","drawControllers","SetFlags","SetAllowSleeping","enableSleep","SetWarmStarting","enableWarmStarting","SetContinuousPhysics","enableContinuous","SetSubStepping","enableSubStepping","strictContacts","m_stepCount","drawStats","GetBodyCount","contactCount","GetContactCount","jointCount","GetJointCount","groupCount","GetParticleGroupCount","pairCount","GetPairCount","triadCount","GetTriadCount","proxyCount","quality","toFixed","GetProfile","m_maxProfile","m_totalProfile","drawProfile","aveProfile","delay","acceleration","GetDefaultViewZoom","drawContactPoints","k_impulseScale","k_axisScale","drawContactNormals","drawContactImpulse","drawFrictionImpulse","particlesPerColor","groupStart","groupEnd","colorCount","k_ParticleColors","filterMask","defaultNumValues","defaultValues","m_particleParameters","m_particleParameterDef","SetParticleParameters","particleParameter","SetRestartOnChange","FindIndexByValue","GetValue","fullscreenUI","SetParticleParameterSelectionEnabled","particleParameterDef","particleParameterDefCount","SetByteRGBA","Main","tests","resize_main_div","main_div","style","window","innerWidth","innerHeight","resize_canvas","canvas_2d","canvas_div","clientWidth","clientHeight","connect_number_input","label","update","min","max","number_input_tr","appendChild","document","createElement","number_input_td0","align","createTextNode","number_input_td1","number_input","toString","addEventListener","parseInt","connect_checkbox_input","checkbox_input","checked","connect_button_input","button_input","Map","sort","localeCompare","table","get","set","fps_div","m_fps_div","bottom","backgroundColor","zIndex","innerHTML","debug_div","m_debug_div","top","title_div","textAlign","view_div","m_canvas_div","m_canvas_2d","getContext","controls_div","padding","overflowY","categorySelect","test_select","testSelect","selectedIndex","m_test_index","LoadTest","onCategoryChanged","keys","option","text","add","number_input_table","m_settings","draw_fieldset","button_div","Pause","SingleStep","m_demo_button","ToggleDemo","preventDefault","HandleMouseMove","HandleMouseDown","HandleMouseUp","HandleMouseWheel","HandleTouchMove","HandleTouchStart","HandleTouchEnd","HandleKeyDown","HandleKeyUp","m_time_last","m_test","move","updateTestsForCategory","zoom","clientX","clientY","ConvertScreenToWorld","m_mouse","m_lMouseDown","MouseMove","m_rMouseDown","ConvertElementToProjection","diff","m_projection0","m_viewCenter0","which","m_shift","ShiftMouseDown","MouseDown","MouseUp","touches","deltaY","ZoomCamera","m_ctrl","MoveCamera","HomeCamera","LaunchBomb","DecrementTest","IncrementTest","Decrement","Increment","Keyboard","KeyboardUp","time_elapsed","m_demo_mode","m_demo_time","m_max_demo_time","str","updateSelectors","opts","restartTest","RestoreParticleParameters","m_fps_time","m_fps_frames","m_fps","clearRect","lineWidth","Changed","msg","GetParticleParameterSelectionEnabled","GetName","DrawTitle","UpdateTest","check","globalThis","self","global","Function","exec","error","fails","Object","defineProperty","nativePropertyIsEnumerable","propertyIsEnumerable","getOwnPropertyDescriptor","call","1","V","descriptor","enumerable","bitmap","configurable","writable","split","classof","TypeError","IndexedObject","requireObjectCoercible","PREFERRED_STRING","isObject","valueOf","hasOwnProperty","EXISTS","DESCRIPTORS","nativeGetOwnPropertyDescriptor","O","toIndexedObject","toPrimitive","IE8_DOM_DEFINE","has","createPropertyDescriptor","propertyIsEnumerableModule","String","nativeDefineProperty","Attributes","anObject","object","definePropertyModule","createNonEnumerableProperty","SHARED","setGlobal","functionToString","store","inspectSource","WeakMap","module","version","mode","copyright","postfix","shared","uid","enforce","getterFor","TYPE","NATIVE_WEAK_MAP","wmget","wmhas","wmset","metadata","STATE","sharedKey","hiddenKeys","objectHas","match","getInternalState","InternalStateModule","enforceInternalState","TEMPLATE","unsafe","simple","noTargetGet","source","join","prototype","aFunction","variable","namespace","method","arguments","path","argument","isNaN","toInteger","integer","createMethod","IS_INCLUDES","$this","el","fromIndex","toLength","toAbsoluteIndex","includes","require$$0","names","concat","getOwnPropertyNames","internalObjectKeys","getOwnPropertySymbols","getBuiltIn","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","ownKeys","getOwnPropertyDescriptorModule","replacement","isForced","feature","detection","normalize","POLYFILL","NATIVE","string","replace","toLowerCase","targetProperty","sourceProperty","TARGET","GLOBAL","STATIC","stat","forced","copyConstructorProperties","sham","redefine","that","apply","isArray","arg","Symbol","NATIVE_SYMBOL","iterator","WellKnownSymbolsStore","createWellKnownSymbol","USE_SYMBOL_AS_UID","withoutSetter","SPECIES","wellKnownSymbol","originalArray","constructor","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","callbackfn","specificCreate","toObject","boundFunction","bind","create","arraySpeciesCreate","forEach","map","some","every","find","findIndex","process","versions","v8","userAgent","METHOD_NAME","V8_VERSION","foo","Boolean","thrower","ACCESSORS","argument0","argument1","$filter","HAS_SPECIES_SUPPORT","arrayMethodHasSpeciesSupport","USES_TO_LENGTH","arrayMethodUsesToLength","$","proto","SandboxParams","SpecialParticleTracker","numberOfParticles","m_particles","k_numberOfSpecialParticles","GetParticleHandleFromIndex","fmod","m_colorOscillationTime","m_colorOscillationPeriod","colorCoeff","abs","GetIndex","Sandbox","ground","k_maxEmitters","m_emitters","k_maxPumps","m_pumps","SetGravity","k_playfieldLeftEdge","k_playfieldRightEdge","m_specialTracker","m_pumpTimer","SetupMaze","m_killFieldShape","m_killFieldTransform","loc","k_paramDef","k_paramDefCount","m_particleFlags","GetParticleParameterValue","SetRestartOnParticleParameterChange","m_faucetEmitterIndex","maze","m_pumpIndex","boxShape","k_tileRadius","triangle","rightTriangleShape","leftTriangleShape","circleShape","red","green","blue","m_pumpForce","k_pumpForce","k_tileWidth","k_tileHeight","k_playfieldBottomEdge","AddPump","AddFaucetEmitter","k_pumpRadius","prismaticJointDef","startingVelocity","k_particleExitSpeedY","emitter","SetParticleSystem","SetVelocity","SetSize","k_defaultEmitterSize","SetEmitRate","k_defaultEmitterRate","SetColor","toggle","SetParticleParameterValue","particlesCreated","Add","DestroyParticlesInShape","pump","ApplyForceToCenter","k_flipTime","k_paramValues","ignoreCase","multiline","dotAll","unicode","sticky","UNSUPPORTED_Y","re","objectDefinePropertyModule","regExpFlags","ParticleVFX","hue2rgb","hslToRgb","m_origColor","m_pg","m_initialLifetime","m_remainingLifetime","m_halfLifetime","MulVS","DestroyParticles","coeff","ColorCoeff","Sparky","m_VFXIndex","c_maxVFX","m_VFX","CreateWalls","c_maxCircles","SHAPE_HEIGHT_OFFSET","SHAPE_OFFSET","SetUserData","spark","userA","userB","m_contactPoint","m_contact","AddVFX","vfx","IsDone","Drop","DamBreak","CreateLoop","SetDamping","ColorParticleGroup","LiquidTimer","WaveMachine","jd","m_joint","particleType","m_time","SetMotorSpeed","Particles","ParticleLifetimeRandomizer","minLifetime","maxLifetime","m_minLifetime","m_maxLifetime","Faucet","m_emitter","m_lifetimeRandomizer","k_particleLifetimeMin","k_particleLifetimeMax","k_maxParticleCount","k_containerHeight","k_containerThickness","k_containerWidth","particleDiameter","k_faucetLength","k_spoutLength","k_faucetWidth","k_spoutWidth","k_faucetHeight","faucetLength","SetCallback","m_particleColorOffset","k_ParticleColorsCount","GetParticleFlags","k_keys","parameter","GetEmitRate","k_emitRateChangeFactor","k_emitRateMin","k_emitRateMax","DrawingParticles","m_colorIndex","m_lastGroup","m_drawing","Parameters","e_parameterRigid","e_parameterRigidBarrier","e_parameterElasticBarrier","e_parameterSpringBarrier","e_parameterRepulsive","e_parameterMove","DetermineParticleParameter","GetParticleGroupList","GetAllParticleFlags","SplitParticleGroup","parameterValue","SplitParticleGroups","e_parameterBegin","Soup","InitializeParticleParameters","m_ground","SetMassData","ParticlesSurfaceTension","ElasticParticles","RigidParticles","MultipleParticleSystems","m_particleSystem2","k_dynamicBoxSize","k_boxMass","mirrorAlongY","k_emitterPosition","k_emitterSize","k_emitterVelocity","k_emitRate","k_rightEmitterColor","k_leftEmitterColor","Impulse","box","kBoxLeft","kBoxBottom","kBoxRight","kBoxTop","kBoxCenter","direction","ApplyImpulseOrForce","m_useLinearImpulse","particleGroup","numParticles","kImpulseMagnitude","kForceMagnitude","SoupStirrer","m_stirrer","ToggleJoint","InSoup","k_forceMagnitude","k_forceOscillationPerSecond","k_forceOscillationPeriod","k_maxSpeed","m_oscillationOffset","forceAngle","forceVector","propertyKey","IS_CONCAT_SPREADABLE","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_INDEX_EXCEEDED","IS_CONCAT_SPREADABLE_SUPPORT","SPECIES_SUPPORT","isConcatSpreadable","spreadable","createProperty","$indexOf","nativeIndexOf","NEGATIVE_ZERO","STRICT_METHOD","arrayMethodIsStrict","searchElement","0","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","splice","deleteCount","insertCount","actualDeleteCount","from","to","actualStart","argumentsLength","EmitterTracker","m_emitterLifetime","__dtor__","emittersToDestroy","ParticleGroupTracker","RemoveParticleGroup","m_particleGroups","FrackerSettings","k_worldWidthTiles","k_worldHeightTiles","Fracker_Material","Fracker","Fracker_DestructionListener","k_particleRadius","InitializeLayout","CreateGround","CreateWell","CreateGeo","CreatePlayer","dispose","k_worldTiles","m_material","EMPTY","TileToArrayOffset","material","currentBody","m_player","k_tileHalfWidth","k_tileHalfHeight","k_density","TileToWorld","GetMaterial","chance","k_dirtProbability","CreateDirtBlock","k_emptyProbability","SetMaterial","k_oilProbability","CreateReservoirBlock","OIL","WATER","bottomLeft","topRight","CenteredPosition","SetBody","DIRT","k_oilColor","k_waterColor","AddParticleGroup","userDataBuffer","GetUserDataBuffer","AddOil","m_wellBottom","m_wellTop","m_wellX","WELL","SetSpeed","k_frackingFluidColor","m_tracker","k_frackingFluidEmitterLifetime","AddScore","k_scorePerFrackingDeployment","playerX","playerY","playerPosition","currentPlayerX","currentPlayerY","WorldToTile","DeployFrackingFluid","deployed","m_frackingFluidChargeTime","k_frackingFluidChargeTime","CreateFrackingFluidEmitter","startX","startY","endX","endY","centerX","centerY","killLocation","m_allowInput","SetPlayerPosition","absDistX","absDistY","DestroyParticlesInTiles","particleGroups","GetParticleGroups","velocityBuffer","wellEnd","particlePosition","k_wellSuckSpeedOutside","randomX","k_wellSuckSpeedInside","DrawPlayer","DrawWell","DrawScore","DrawQuad","k_wellColor","LerpColor","k_playerColor","k_playerFrackColor","GetScore","GetOil","verts","maxX","maxY","k_worldCenterX","k_worldHalfWidth","k_worldCenterY","k_worldHalfHeight","GetBottomLeft","Lerp","m_previousListener","score","m_score","oil","m_oil","k_scorePerOilParticle","k_scorePerWaterParticle","Maxwell","k_densityDefault","k_containerHalfHeight","k_temperatureDefault","k_containerHalfWidth","EnableBarrier","ResetParticles","m_barrierBody","barrierShape","k_barrierHeight","m_position","DisableBarrier","m_particleGroup","m_temperature","ToggleBarrier","k_densityStep","k_densityMax","k_densityMin","MoveDivider","k_barrierMovementIncrement","k_temperatureStep","k_temperatureMin","k_temperatureMax","InContainer","topPressure","botPressure","newPosition","Ramp","xstep","ystep","Pointy","m_killfieldShape","m_killfieldTransform","AntiPointy","m_particlesToCreate","CornerCase","yrange","xrange","ParticleContactDisabler","m_enableFixtureParticleCollisions","m_enableParticleParticleCollisions","ParticleCollisionFilter","SetContactFilter","m_contactDisabler","kBoxSize","kOffset","kBoxSizeHalf","kSpeedup","ToggleFixtureCollisions","ToggleParticleCollisions","EyeCandy","bdg","m_mover","shape2","Date","getTime","repeat","Infinity","RangeError","nativeToFixed","acc","log","fractionDigits","number","thisNumberValue","fractDigits","sign","multiply","divide","dataToString","ShapeCast","m_vAs","m_countA","m_radiusA","m_vBs","m_countB","m_radiusB","SetVerticesRadius","hit","transformB2","TimeOfImpact","m_shapeA","m_shapeB","DrawStringWorld","CharacterCollision","CreateChain","m_character","Tiles","deltaX","e_count","m_createTime","cm","GetContactManager","minimumNodeCount","minimumHeight","HeavyOnLight","HeavyOnLightTwo","m_heavy","ToggleHeavy","VerticalStack","e_rowCount","e_columnCount","m_indices","xs","m_bullet","BasicSliderCrank","rjd","pjd","SliderCrank","EnableMotor","IsMotorEnabled","GetMotorTorque","SphereStack","ConvexHull","m_test_points","m_auto","Tumbler","RayCastMode","RayCastClosestCallback","m_hit","m_point","RayCastAnyCallback","RayCastMultipleCallback","e_maxCount","e_closest","m_polygons","m_circle","m_edge","m_bodyIndex","e_maxBodies","m_angle","m_mode","old_body","new_body","e_any","e_multiple","advanceRay","head","OneSidedPlatform_State","DumpShell","k_restitution","sd","sd1","sd2","ContinuousTest","SetAngularVelocity","Launch","MotorJoint","mjd","m_go","SetLinearOffset","SetAngularOffset","OneSidedPlatform","e_unknown","m_platform","m_bottom","m_top","Mobile","root","AddNode","jointDef","localAnchor","depth","e_depth","body1","body2","MobileBalanced","ConveyorBelt","SetTangentSpeed","Gears","circle1","circle2","bd1","bd2","bd3","body3","jd1","jd2","jd4","jd3","m_joint3","m_joint4","jd5","m_joint5","VaryingRestitution","Cantilever","EdgeTest","v3","v4","v5","v6","v7","BodyTypes","m_attachment","SetType","ShapeEditing","m_fixture1","m_fixture2","DestroyFixture","m_sensor","SetSensor","Car","m_hz","m_zeta","hs","y1","dx","y2","ApplyAngularImpulse","chassis","m_car","m_wheel1","m_wheel2","m_spring1","m_spring2","SetSpringFrequencyHz","Prismatic","EnableLimit","IsLimitEnabled","GetMotorSpeed","GetMotorForce","Revolute","circle_shape","circle_bd","m_ball","polygon_shape","polygon_bd","polygon_body","polyShape","polyFixtureDef","Pulleys","pulleyDef","groundAnchor1","groundAnchor2","GetRatio","GetCurrentLengthA","GetCurrentLengthB","PolyShapesCallback","DrawFixture","PolyShapes","charCodeAt","SetActive","Web","body0","RopeJoint","m_ropeDef","extraLength","m_rope","Pinball","loop","leftFlipper","rightFlipper","m_leftJoint","m_rightJoint","m_button","BulletTest","Confined","CreateCircle","GetBodyList","Pyramid","TheoJansen","Construct","wheelAnchor","p4","p5","p6","fd1","fd2","m_offset","m_wheel","m_chassis","m_motorOn","m_motorJoint","CreateLeg","EdgeShapesCallback","m_fixture","EdgeShapes","PolyCollision","m_polygonA","m_transformA","m_positionB","m_angleB","m_transformB","Bridge","m_middle","Breakable","m_body1","m_shape1","m_piece1","m_shape2","m_piece2","m_broke","m_break","center1","center2","velocity1","velocity2","Break","Chain","CollisionFiltering","polygon","triangleShapeDef","k_smallGroup","k_triangleCategory","k_triangleMask","triangleBodyDef","k_largeGroup","boxShapeDef","k_boxCategory","k_boxMask","boxBodyDef","circleShapeDef","k_circleCategory","k_circleMask","circleBodyDef","nativeSort","FAILS_ON_UNDEFINED","FAILS_ON_NULL","comparefn","CollisionProcessing","xLo","xHi","yLo","yHi","k_maxNuke","nuke","nukeCount","mass1","mass2","CompoundShapes","polygon1","polygon2","triangle1","triangle2","DistanceTest","Dominos","b3","b4","b5","b6","b7","DynamicTreeTest","e_actorCount","DynamicTreeTest_Actor","m_worldExtent","m_proxyExtent","actor","m_actors","GetRandomAABB","proxyId","m_queryAABB","m_rayCastInput","m_automated","actionCount","Action","m_rayActor","overlap","DrawAABB","cr","ClampV","aabb0","MoveAABB","m_rayCastOutput","bruteOutput","SensorTest","m_touching","VaryingFriction","minX","minY","Skier","PlatformWidth","SlopeLength","SurfaceFriction","Slope1Incline","Slope2Incline","m_platform_width","EnableCircularSkiTips","BodyWidth","BodyHeight","SkiLength","SkiThickness","SkiFriction","SkiRestitution","initial_y","skier","ski","ski_back_shape","ski_front_shape","m_skier","m_fixed_camera","Rope","MotorJoint2","BlobTest","ajd","rx","ry","nBodies","bodyRadius","TestCCD","sd_bottom","sd_left","sd_right","cd","TestRagdoll","torso1","torso2","torso3","upperArmL","upperArmR","lowerArmL","lowerArmR","upperLegL","upperLegR","lowerLegL","lowerLegR","TestStack","vxs","PyramidTopple","WIDTH","HEIGHT","add_domino","flipped","DominoTower","makeDomino","horizontal","DOMINO_WIDTH","DOMINO_HEIGHT","dominoDensity","DOMINO_FRICTION","BASE_COUNT","currX","currY","$forEach","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","COLLECTION_NAME","DOMIterables","Collection","CollectionPrototype","DEGTORAD","TDC_LEFT","TDC_RIGHT","TDC_UP","TDC_DOWN","FUD_CAR_TIRE","FUD_GROUND_AREA","FixtureUserData","CarTireFUD","GroundAreaFUD","fm","ooc","frictionModifier","outOfCourse","TDTire","polygonShape","maxForwardSpeed","maxBackwardSpeed","maxDriveForce","maxLateralImpulse","m_maxForwardSpeed","m_maxBackwardSpeed","m_maxDriveForce","m_maxLateralImpulse","ga","m_groundAreas","updateTraction","m_currentTraction","currentRightNormal","currentForwardNormal","getLateralVelocity","getForwardVelocity","dragForceMagnitude","controlState","desiredSpeed","currentSpeed","desiredTorque","TDCar","m_tires","SetAngularDamping","backTireMaxDriveForce","frontTireMaxDriveForce","backTireMaxLateralImpulse","frontTireMaxLateralImpulse","tire","setCharacteristics","flJoint","frJoint","updateFriction","updateDrive","lockAngle","turnPerTimeStep","desiredAngle","angleNow","GetJointAngle","angleToTurn","newAngle","SetLimits","TopdownCar","fixtureDef","groundAreaFixture","m_controlState","handleContact","began","fudA","fudB","getType","tire_vs_groundArea","tireFixture","gaFud","addGroundArea","removeGroundArea","Segway","PIDController","angleController","gainP","gainI","gainD","positionController","PENDULUM_LENGTH","pendulumBody","pendulumShape","wheelBody","wheelShape","wheelJoint","groundBody","groundShape","targetPositionInterval","targetPosition","targetAngle","posAvg","currentError","targetLinAccel","currentAngle","targetSpeed","targetAngularVelocity","app","integral","derivative","previousError","bc","m_controller","body_i","AddController","BuoyancyTest","requestAnimationFrame","SimulationLoop"],"mappings":"2rFAyBgBA,EAAWC,EAAsBC,eAC9BC,IAAVF,EAAsBA,EAAQC,WA6IvBE,EAAeC,EAAgBC,WACvCC,EAAS,GACNC,EAAI,EAAGA,EAAIH,IAAUG,EAC5BD,EAAEC,GAAKF,EAAKE,UAEPD,WAGOE,EAAmBJ,WAC3BE,EAAqB,CAAC,MACnBC,EAAI,EAAGA,EAAIH,IAAUG,EAC5BD,EAAEC,GAAK,YAEFD,WAWOG,EAAkBL,WAC1BE,EAAI,CAACI,KACFH,EAAI,EAAGA,EAAIH,IAAUG,EAC5BD,EAAEC,GAAK,SAEFD,WC5KOK,EAAMC,UACbA,EAAI,GAAKA,EAAIA,WAGNC,EAASD,UAChBA,GAAK,EAAIA,GAAKA,WAGPE,EAAMR,EAAWS,UACxBT,EAAIS,EAAIT,EAAIS,WAGLC,EAAMV,EAAWS,UACxBT,EAAIS,EAAIT,EAAIS,WAILE,EAASX,EAAWS,UAC3BT,EAAIS,EAAIT,EAAIS,WAGLG,EAASZ,EAAWS,UAC3BT,EAAIS,EAAIT,EAAIS,WAGLI,EAAQb,EAAWc,EAAYC,UACtCf,EAAIc,EAAKA,EAAKd,EAAIe,EAAKA,EAAKf,WAGrBgB,EAAWhB,EAAWc,EAAYC,UACzCf,EAAIc,EAAKA,EAAKd,EAAIe,EAAKA,EAAKf,WAcrBiB,EAAKC,UACZA,EAAIA,WAIGC,EAAUD,UACjB,EAAME,KAAKC,KAAKH,YAOTI,EAAWC,UAClBA,EAAUC,YA0BHC,WACS,EAAhBL,KAAKM,SAAiB,WAGfC,EAAcb,EAAYC,UAChCA,EAAKD,GAAMM,KAAKM,SAAWZ,WC0arBc,EACdC,EACAC,EACAC,KAEEC,GAAYC,UAERC,EAA0BH,EAAMG,OAChCC,EAA0BJ,EAAMI,OAEhCC,EAA0BL,EAAMK,WAChCC,EAA0BN,EAAMM,WAGhCC,EAAqBC,GAC3BD,EAAQE,UAAUV,EAAOI,EAAQE,EAAYD,EAAQE,WAG/CI,EAA8BH,EAAQI,WACtCC,EAAa,GAIbC,EAAkCC,GAClCC,EAAkCC,GACpCC,EAAY,EAGZC,EAAO,EACJA,EAAON,GAAY,CAExBK,EAAYV,EAAQY,YACf,IAAIjD,EAAI,EAAGA,EAAI+C,IAAa/C,EAC/B2C,EAAM3C,GAAKwC,EAASxC,GAAGkD,OACvBL,EAAM7C,GAAKwC,EAASxC,GAAGmD,cAGjBd,EAAQY,cACT,aAGA,EACHZ,EAAQe,oBAGL,EACHf,EAAQgB,YASY,IAApBhB,EAAQY,kBAKNK,EAAYjB,EAAQkB,mBAAmBC,OAGzCF,EAAEG,gBAAkBC,aAWlBC,EAA0BnB,EAASH,EAAQY,SACjDU,EAAOT,OAASjB,EAAO2B,WACrBC,GAAMC,OAAO3B,EAAW4B,EAAGC,GAAOC,KAAKX,EAAGU,GAAOE,MAAOC,KAE1DC,GAAYC,MAAMlC,EAAYF,EAAOqC,UAAUX,EAAOT,QAASS,EAAOY,IACtEZ,EAAOR,OAASjB,EAAO0B,WAAWC,GAAMC,OAAO1B,EAAW2B,EAAGT,EAAGkB,KAChEJ,GAAYC,MAAMjC,EAAYF,EAAOoC,UAAUX,EAAOR,QAASQ,EAAOc,IACtET,GAAOU,MAAMf,EAAOc,GAAId,EAAOY,GAAIZ,EAAOgB,KAGxC3B,IACAjB,GAAY6C,cAGVC,GAAY,EACP7E,EAAI,EAAGA,EAAI+C,IAAa/C,KAC3B2D,EAAOT,SAAWP,EAAM3C,IAAM2D,EAAOR,SAAWN,EAAM7C,GAAI,CAC5D6E,GAAY,WAMZA,UAKFxC,EAAQY,WAGZlB,GAAY+C,SAAWnE,EAASoB,GAAY+C,SAAU9B,GAGtDX,EAAQ0C,iBAAiBnD,EAAOoD,OAAQpD,EAAOqD,QAC/CrD,EAAOsD,SAAWlB,GAAOmB,WAAWvD,EAAOoD,OAAQpD,EAAOqD,QAC1DrD,EAAOwD,WAAapC,EAGpBX,EAAQgD,WAAWxD,GAGfC,EAAMwD,SAAU,KACZC,EAAatD,EAAOuD,SACpBC,EAAavD,EAAOsD,YAEtB5D,EAAOsD,SAAWK,EAAKE,GAAM7D,EAAOsD,SAAWQ,GAAY,CAG7D9D,EAAOsD,UAAYK,EAAKE,MAClBE,EAAiB3B,GAAOU,MAAM9C,EAAOqD,OAAQrD,EAAOoD,OAAQY,IAClED,EAAOE,YACPjE,EAAOoD,OAAOc,WAAWP,EAAII,GAC7B/D,EAAOqD,OAAOc,WAAWN,EAAIE,OACxB,KAGCK,EAAYhC,GAAOiC,MAAMrE,EAAOoD,OAAQpD,EAAOqD,OAAQiB,IAC7DtE,EAAOoD,OAAOmB,KAAKH,GACnBpE,EAAOqD,OAAOkB,KAAKH,GACnBpE,EAAOsD,SAAW,aAoBRkB,EAAYxE,EAA2BE,GACrDF,EAAOwD,WAAa,EACpBxD,EAAOyE,OAAS,EAChBzE,EAAO+D,OAAOW,UACd1E,EAAO2E,MAAMD,cAGPrE,EAASH,EAAMG,OAEfC,EAASJ,EAAMI,OAOfsE,EAJU/F,EAAMwB,EAAOuD,SAAUiB,IAEvBhG,EAAMyB,EAAOsD,SAAUiB,IAKjCC,EAAM5E,EAAMK,WAEZwE,EAAM7E,EAAMM,WAGZwE,EAAI9E,EAAM+E,aAEV5F,EAAI6F,GAAgBC,IAAI,EAAK,GAE/BV,EAAS,EAGPhE,EAAU2E,GAChB3E,EAAQY,QAAU,UAIZT,EAAWH,EAAQI,WAIrBS,EAASjB,EAAO2B,WAAWC,GAAMC,OAAO4C,EAAI3C,EAAGC,GAAOC,KAAK2C,EAAG5C,GAAOiD,MAAOjD,GAAOE,OAEnFK,EAAKH,GAAYC,MAAMqC,EAAKzE,EAAOqC,UAAUpB,GAASgE,IAEtD/D,EAASjB,EAAO0B,WAAWC,GAAMC,OAAO6C,EAAI5C,EAAG6C,EAAG5C,GAAOE,OAEzDO,EAAKL,GAAYC,MAAMsC,EAAKzE,EAAOoC,UAAUnB,GAASgE,IAEpDC,EAAIpD,GAAOU,MAAMH,EAAIE,EAAI4C,IAIzBC,EAAQ7G,EAAMgG,GAAkBD,EAASC,IAEzCc,EAAY,GAAMC,GAIlB9E,EAAa,GAEfM,EAAO,EAEJA,EAAON,GAActC,EAAMgH,EAAEK,SAAWH,GAASC,GAAW,GAG/D3F,EAAOwD,WAITlC,EAASjB,EAAO2B,WAAWC,GAAMC,OAAO4C,EAAI3C,EAAGC,GAAOC,KAAKmD,EAAGpD,GAAOiD,MAAOjD,GAAOE,OAEnFK,EAAKH,GAAYC,MAAMqC,EAAKzE,EAAOqC,UAAUpB,GAASgE,IAEtD/D,EAASjB,EAAO0B,WAAWC,GAAMC,OAAO6C,EAAI5C,EAAGqD,EAAGpD,GAAOE,OAEzDO,EAAKL,GAAYC,MAAMsC,EAAKzE,EAAOoC,UAAUnB,GAASgE,QAEhDnB,EAAIhC,GAAOU,MAAMH,EAAIE,EAAIiD,IAG/BN,EAAEvB,gBAGI8B,EAAK3D,GAAO4D,MAAMR,EAAGpB,GACrB6B,EAAK7D,GAAO4D,MAAMR,EAAGR,MACvBe,EAAKL,EAAQjB,EAASwB,EAAI,IACxBA,GAAM,SACD,MAGTxB,GAAUsB,EAAKL,GAASO,GACX,SACJ,EAIT5G,EAAEkF,KAAKiB,GAAGU,UACVzF,EAAQY,QAAU,MAQdU,EAA0BnB,EAASH,EAAQY,gBACjDU,EAAOT,OAASC,EAEhBQ,EAAOY,GAAG4B,KAAK1B,GAAIqB,WAAWO,EAAQO,GACtCjD,EAAOR,OAASD,EAEhBS,EAAOc,GAAG0B,KAAK5B,GAEfZ,EAAOgB,EAAEwB,KAAKxC,EAAOc,IAAIsD,QAAQpE,EAAOY,IACxCZ,EAAO5D,EAAI,IACTsC,EAAQY,QAEFZ,EAAQY,cACT,aAGA,EACHZ,EAAQe,oBAGL,EACHf,EAAQgB,YAQY,IAApBhB,EAAQY,eAEH,EAKTZ,EAAQ2F,gBAAgBZ,KAGtBpE,MAIEgC,EAASiD,GACThD,EAASiD,UACf7F,EAAQ0C,iBAAiBC,EAAQC,GAE7BmC,EAAE3D,gBAAkB,IAEtBxC,EAAEkF,KAAKiB,GAAGU,UACV7G,EAAE4E,aAIJjE,EAAO+D,OAAOQ,KAAKlF,GACnBW,EAAOyE,OAASA,EAChBzE,EAAOwD,WAAapC,GACb,WClfOmF,EACdC,EACAC,EACAC,EACAC,OAGIvI,MACCA,EAAI,EAAGA,EAAIsI,EAAUE,aAAcxI,EAAG,KAEnCyI,EADkBH,EAAUI,OAAO1I,GAAG2I,GACrBF,IAEvBL,EAAOpI,SAEF,IAAI4I,EAAI,EAAGC,EAAMN,EAAUC,WAAYI,EAAIC,IAAOD,KACjDL,EAAUG,OAAOE,GAAGD,GAAGF,MAAQA,EAAK,CACtCL,EAAOpI,iBAKNA,EAAI8I,KAAwB9I,EACjCoI,EAAOpI,SAIJA,EAAI,EAAGA,EAAIuI,EAAUC,aAAcxI,EAAG,KAEnCyI,EADkBF,EAAUG,OAAO1I,GAAG2I,GACrBF,IAEvBJ,EAAOrI,SAEF,IAAI4I,EAAI,EAAGC,EAAMP,EAAUE,WAAYI,EAAIC,IAAOD,KACjDN,EAAUI,OAAOE,GAAGD,GAAGF,MAAQA,EAAK,CACtCJ,EAAOrI,iBAKNA,EAAI8I,KAAwB9I,EACjCqI,EAAOrI,cA0QK+I,EAAkBhJ,EAAWS,WACvCT,EAAEiJ,WAAW3I,EAAIG,EAAEyI,WAAW5I,GAG9BN,EAAEiJ,WAAWE,EAAI1I,EAAEyI,WAAWC,GAG9B1I,EAAEwI,WAAW3I,EAAIN,EAAEkJ,WAAW5I,GAG9BG,EAAEwI,WAAWE,EAAInJ,EAAEkJ,WAAWC,YAOpBC,EACdC,EACAC,EACA1D,EACA2D,EACAC,OAGIC,EAAS,EAEPC,EAAqBJ,EAAI,GACzBK,EAAqBL,EAAI,GAGzBM,EAAoB3F,GAAO4D,MAAMjC,EAAQ8D,EAAKrC,GAAKkC,EACnDM,EAAoB5F,GAAO4D,MAAMjC,EAAQ+D,EAAKtC,GAAKkC,KAGrDK,GAAa,GACfP,EAAKI,KAAUrD,KAAKsD,GAElBG,GAAa,GACfR,EAAKI,KAAUrD,KAAKuD,GAIlBC,EAAYC,EAAY,EAAG,KAEvBC,EAAiBF,GAAaA,EAAYC,GAC1CxC,EAAYgC,EAAKI,GAAQpC,EAC/BA,EAAE/G,EAAIoJ,EAAKrC,EAAE/G,EAAIwJ,GAAUH,EAAKtC,EAAE/G,EAAIoJ,EAAKrC,EAAE/G,GAC7C+G,EAAE8B,EAAIO,EAAKrC,EAAE8B,EAAIW,GAAUH,EAAKtC,EAAE8B,EAAIO,EAAKrC,EAAE8B,OAGvCP,EAAkBS,EAAKI,GAAQb,GACrCA,EAAGmB,GAAG5G,OAASqG,EACfZ,EAAGmB,GAAG3G,OAASsG,EAAKd,GAAGmB,GAAG3G,OAC1BwF,EAAGmB,GAAGC,QACNpB,EAAGmB,GAAGE,UACJR,SAGGA,WAQOS,EACdC,EACAhH,EACAiH,EACAhH,EACAuD,EACAC,OAEM7E,EAAyBsI,GAA2BC,QAC1DvI,EAAMG,OAAOqI,SAASJ,EAAQhH,GAC9BpB,EAAMI,OAAOoI,SAASH,EAAQhH,GAC9BrB,EAAMK,WAAWgE,KAAKO,GACtB5E,EAAMM,WAAW+D,KAAKQ,GACtB7E,EAAMwD,UAAW,MAEXiF,EAA+BC,GAAkCH,QACvEE,EAAaE,MAAQ,MAEf7I,EAA2B8I,GAA4BL,eAE7D1I,EAAWC,EAAQ2I,EAAczI,GAE1BF,EAAOsD,SAAW,GAAKQ,GCztBhC,SAASiF,EAAUlL,MACH,OAAVA,QACI,IAAImL,aAELnL,ECLT,SAASoL,EAAiBC,EAAY/K,EAAWS,OACzCuK,EAASD,EAAM/K,GACrB+K,EAAM/K,GAAK+K,EAAMtK,GACjBsK,EAAMtK,GAAKuK,EAGb,SAASC,EAAmBjL,EAAMS,UACzBT,EAAIS,EAGb,SAASyK,EACPH,WACAI,yDAAQ,EACRC,yDAAcL,EAAMjL,OAASqL,EAC7BE,yDAA+BJ,EAE3BK,EAAOH,EACLI,EAAkB,GACpBC,EAAM,IAED,MAEAF,EAAO,EAAIF,EAAKA,IAAO,KAEtBK,EAAQV,EAAMO,EAAOlK,KAAKsK,MAAMtK,KAAKM,UAAY0J,EAAME,KAC7DC,EAAMC,KAASJ,MACV,IAAIO,EAAQL,EAAO,IAAO,MAGtBD,EAAIN,IAAQY,GAAQF,UAEpBJ,EAAII,EAAOV,IAAQK,SACtBO,GAASP,QAGbN,EAAcC,EAAOY,EAAOP,OAGpB,IAARI,QAGJF,EAAOF,EACPA,EAAMG,IAAQC,UAGTT,EA2TT,SAASa,EAAkBC,EAAkBC,UACvCD,EAAM3J,OAAO6J,KAAOD,EAAM5J,OAAO6J,MAIjCF,EAAM3J,OAAO6J,OAASD,EAAM5J,OAAO6J,MAC9BF,EAAM1J,OAAO4J,KAAOD,EAAM3J,OAAO4J,cChE5BC,EAAenK,EAAqBE,OAC5CkK,EAAQC,GAAuB5B,UAEnC6B,GAAYlK,MAEdJ,EAAOuK,QACPvK,EAAOwK,EAAItK,EAAMuK,SAEXpK,EAA0BH,EAAMG,OAChCC,EAA0BJ,EAAMI,OAChCoK,EAAsB3L,EAC1B4L,GACA5L,EAASsB,EAAOgB,QAASf,EAAOe,UAG5BuJ,EAAkBC,GAAwBtG,KAAKrE,EAAM0K,QACrDE,EAAkBC,GAAwBxG,KAAKrE,EAAM4K,QAI3DF,EAAO3G,YACP6G,EAAO7G,gBAEDwG,EAAevK,EAAMuK,KAErBO,EAAsB3K,EAAOuD,SAAWtD,EAAOsD,SAC/CqH,EAAiBpM,EAAM+G,GAAeoF,EAAc,EAAIpF,IACxDD,EAAoB,IAAOC,GAG7BsF,EAAK,EACHC,EAAkB,GACpB/J,EAAO,EAGLnB,EAAwBmL,GAC9BnL,EAAM4I,MAAQ,MACRwC,EAAiCC,OACvCD,EAAchL,OAAOkE,KAAKrE,EAAMG,QAChCgL,EAAc/K,OAAOiE,KAAKrE,EAAMI,QAChC+K,EAAc3H,UAAW,IAIhB,KACDoB,EAAmByG,GACnBxG,EAAmByG,GACzBZ,EAAOa,aAAa3G,EAAKoG,GACzBJ,EAAOW,aAAa1G,EAAKmG,GAIzBG,EAAc9K,WAAWgE,KAAKO,GAC9BuG,EAAc7K,WAAW+D,KAAKQ,OACxB2G,EAAmCC,MACzC5L,EAAW2L,EAAgBzL,EAAOoL,GAG9BK,EAAepI,UAAY,EAAG,CAEhCtD,EAAOuK,QACPvK,EAAOwK,EAAI,WAITkB,EAAepI,SAAW2H,EAAStF,EAAW,CAEhD3F,EAAOuK,QACPvK,EAAOwK,EAAIU,YAKPU,EAA4BC,GAClCD,EAAIE,WAAW7L,EAAOI,EAAQuK,EAAQtK,EAAQwK,EAAQI,WA6BlDa,GAAO,EACPC,EAAavB,EACbwB,EAAe,IACV,KAED3K,EAAmB4K,GACnB3K,EAAmB4K,GACrBC,EAAaR,EAAIS,kBAAkB/K,EAAQC,EAAQyK,MAGnDI,EAAKnB,EAAStF,EAAW,CAE3B3F,EAAOuK,QACPvK,EAAOwK,EAAIC,EACXsB,GAAO,WAKLK,EAAKnB,EAAStF,EAAW,CAE3BuF,EAAKc,YAKHM,EAAaV,EAAIW,SAASjL,EAAO,GAAIC,EAAO,GAAI2J,MAIhDoB,EAAKrB,EAAStF,EAAW,CAC3B3F,EAAOuK,QACPvK,EAAOwK,EAAIU,EACXa,GAAO,WAKLO,GAAMrB,EAAStF,EAAW,CAE5B3F,EAAOuK,QACPvK,EAAOwK,EAAIU,EACXa,GAAO,gBAKLS,EAAgB,EAChBC,EAAavB,EACbwB,EAAaV,IACR,KAEHxB,EAAI,EAGNA,EAFkB,EAAhBgC,EAEEC,GAAOxB,EAASqB,IAAOI,EAAKD,IAAQL,EAAKE,GAGzC,IAAOG,EAAKC,KAGhBF,IACAlC,GAAYqC,cAERC,EAAYhB,EAAIW,SAASjL,EAAO,GAAIC,EAAO,GAAIiJ,MAEjDhM,EAAMoO,EAAI3B,GAAUtF,EAAW,CAEjCqG,EAAKxB,WAKHoC,EAAI3B,GACNwB,EAAKjC,EACL8B,EAAKM,IAELF,EAAKlC,EACL4B,EAAKQ,GAGe,KAAlBJ,WAKNlC,GAAYuC,aAAe9N,EAASuL,GAAYuC,aAAcL,KAE5DP,IAEmBvB,aAKrBtJ,IACAkJ,GAAYtH,MAEV+I,WAIA3K,IAAS+J,EAAiB,CAE5BnL,EAAOuK,QACPvK,EAAOwK,EAAIU,SAKfZ,GAAYpH,SAAWnE,EAASuL,GAAYpH,SAAU9B,OAChD0L,EAAO1C,EAAM2C,kBACnBzC,GAAY0C,QAAUnO,EAAMyL,GAAY0C,QAASF,GACjDxC,GAAYwC,MAAQA,WCnhBNG,EACdC,EACAC,EACArI,EACAsI,EACArI,GAEAmI,EAAStG,WAAa,MAEhByG,EAAK7K,GAAYC,MAAMqC,EAAKqI,EAAQG,IAAKC,IACzCC,EAAKhL,GAAYC,MAAMsC,EAAKqI,EAAQE,IAAKG,IAEzCC,EAAkBtL,GAAOuL,kBAAkBN,EAAIG,GAC/C5I,EAAiBuI,EAAQvJ,SAAWwJ,EAAQxJ,SAC9C8J,EAAU9I,EAASA,IAIvBsI,EAASU,OACTV,EAASW,WAAWtJ,KAAK4I,EAAQG,KACjCJ,EAASY,YAAYpJ,UACrBwI,EAAStG,WAAa,EAEtBsG,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,KAC3CJ,EAASpG,OAAO,GAAGC,GAAGF,IAAM,YAOdkH,EACdb,EACAc,EACAlJ,EACAsI,EACArI,GAEAmI,EAAStG,WAAa,UAGhBqH,EAAYzL,GAAYC,MAAMsC,EAAKqI,EAAQE,IAAKY,IAChDC,EAAiB3L,GAAY4L,OAAOtJ,EAAKmJ,EAAGI,IAG9CC,EAAc,EACdC,GAAsBC,GACpB5J,EAAiBoJ,EAASpK,SAAWwJ,EAAQxJ,SAC7C6K,EAAsBT,EAAS3M,QAC/BT,EAAqBoN,EAASnN,WAC9B6N,EAAoBV,EAASW,UAE1BvQ,EAAI,EAAGA,EAAIqQ,IAAerQ,EAAG,KAC9BwO,EAAYxK,GAAO4D,MAAM0I,EAAQtQ,GAAIgE,GAAOU,MAAMqL,EAAQvN,EAASxC,GAAIgE,GAAOE,UAEhFsK,EAAIhI,SAKJgI,EAAI2B,IACNA,EAAa3B,EACb0B,EAAclQ,OAKZwQ,EAAqBN,EACrBO,GAAsBD,EAAa,GAAKH,EACxCK,EAAalO,EAASgO,GACtBG,EAAanO,EAASiO,MAGxBN,EAAazK,UACfoJ,EAAStG,WAAa,EACtBsG,EAASU,OACTV,EAASY,YAAYvJ,KAAKmK,EAAQJ,IAClClM,GAAOiC,MAAMyK,EAAIC,EAAI7B,EAASW,YAC9BX,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,UAC3CJ,EAASpG,OAAO,GAAGC,GAAGF,IAAM,OAKxBmI,EAAa5M,GAAO4D,MACxB5D,GAAOU,MAAMqL,EAAQW,EAAI1M,GAAOE,MAChCF,GAAOU,MAAMiM,EAAID,EAAI1M,GAAOiD,OAExB4J,EAAa7M,GAAO4D,MACxB5D,GAAOU,MAAMqL,EAAQY,EAAI3M,GAAOE,MAChCF,GAAOU,MAAMgM,EAAIC,EAAI3M,GAAOiD,UAE1B2J,GAAM,EAAG,IACP5M,GAAOuL,kBAAkBQ,EAAQW,GAAMlK,EAASA,SAIpDsI,EAAStG,WAAa,EACtBsG,EAASU,OACTxL,GAAOU,MAAMqL,EAAQW,EAAI5B,EAASY,aAAaoB,gBAC/ChC,EAASW,WAAWtJ,KAAKuK,GACzB5B,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,KAC3CJ,EAASpG,OAAO,GAAGC,GAAGF,IAAM,OACvB,GAAIoI,GAAM,EAAG,IACd7M,GAAOuL,kBAAkBQ,EAAQY,GAAMnK,EAASA,SAIpDsI,EAAStG,WAAa,EACtBsG,EAASU,OACTxL,GAAOU,MAAMqL,EAAQY,EAAI7B,EAASY,aAAaoB,gBAC/ChC,EAASW,WAAWtJ,KAAKwK,GACzB7B,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,KAC3CJ,EAASpG,OAAO,GAAGC,GAAGF,IAAM,MACvB,KACCsI,EAAqB/M,GAAOiC,MAAMyK,EAAIC,EAAIK,OAC7BhN,GAAO4D,MACxB5D,GAAOU,MAAMqL,EAAQgB,EAAY/M,GAAOiD,MACxCqJ,EAAQE,IAEOhK,SAIjBsI,EAAStG,WAAa,EACtBsG,EAASU,OACTV,EAASY,YAAYvJ,KAAKmK,EAAQE,IAAaM,gBAC/ChC,EAASW,WAAWtJ,KAAK4K,GACzBjC,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,KAC3CJ,EAASpG,OAAO,GAAGC,GAAGF,IAAM,GCvHhC,SAASwI,EACPC,EACAC,EACAC,EACAC,EACAC,WAEMC,EAAYL,EAAMzO,WAClB+O,EAAWN,EAAMX,UACjBkB,EAASJ,EAAMpO,QACfyO,EAAYL,EAAM5O,WAKlBkP,EAAuB9N,GAAM+N,MAAMT,EAAIpN,EAAGyN,EAASJ,GAAQS,IAC3DC,EAAkBjO,GAAMC,OAAOwN,EAAIvN,EAAG4N,EAAcI,IAGtDC,EAAQ,EACRC,EAAiB7B,GAEZpQ,EAAI,EAAGA,EAAIyR,IAAUzR,EAAG,KACzBkS,EAAclO,GAAO4D,MAAM8J,EAAU1R,GAAI8R,GAC3CI,EAAMD,IACRA,EAASC,EACTF,EAAQhS,OAIN0Q,EAAatM,GAAYC,MAAM8M,EAAKI,EAAUH,GAAQe,IACtDxB,EAAavM,GAAYC,MAAMiN,EAAKI,EAAUM,GAAQI,WACjCpO,GAAO4D,MAAM5D,GAAOU,MAAMiM,EAAID,EAAI1M,GAAOE,MAAOyN,GAO7E,SAASU,EACPC,EACApB,EACAC,EACAE,EACAC,WAEMiB,EAAiBrB,EAAMjO,QACvBuO,EAAqBN,EAAMX,UAG3BjN,EAAYU,GAAOU,MACvBN,GAAYC,MAAMiN,EAAKD,EAAMmB,WAAYxO,GAAOE,MAChDE,GAAYC,MAAM8M,EAAKD,EAAMsB,WAAYxO,GAAOiD,MAChDwL,IAEIC,EAAkB7O,GAAMC,OAAOqN,EAAIpN,EAAGT,EAAGqP,IAG3CC,EAAO,EACPC,GAAkBzC,GACbpQ,EAAI,EAAGA,EAAIuS,IAAUvS,EAAG,KACzBkS,EAAclO,GAAO4D,MAAM4J,EAASxR,GAAI0S,GAC1CR,EAAMW,IACRA,EAASX,EACTU,EAAO5S,OAKPwO,EAAYyC,EAAiBC,EAAOC,EAAKyB,EAAMvB,EAAOC,GAGpDwB,GAAYF,EAAOL,EAAS,GAAKA,EACjCQ,EAAQ9B,EAAiBC,EAAOC,EAAK2B,EAAUzB,EAAOC,GAGtD0B,GAAYJ,EAAO,GAAKL,EACxBU,EAAQhC,EAAiBC,EAAOC,EAAK6B,EAAU3B,EAAOC,GAGxD4B,EAAW,EACXC,EAAiB,EACjBC,EAAY,KACZL,EAAQvE,GAAKuE,EAAQE,EACvBG,GAAa,EACbF,EAAWJ,EACXK,EAAiBJ,MACZ,CAAA,KAAIE,EAAQzE,UAKjB8D,EAAU,GAAKM,EACRpE,EALP4E,EAAY,EACZF,EAAWF,EACXG,EAAiBF,QAejBzE,EAAIyC,EAAiBC,EAAOC,EAL1ByB,GADiB,IAAfQ,GACMF,EAAWX,EAAS,GAAKA,GAEzBW,EAAW,GAAKX,EAGalB,EAAOC,IAEtC6B,GACND,EAAWN,EACXO,EAAiB3E,SAMrB8D,EAAU,GAAKY,EACRC,EAKT,SAASE,EACPxD,EACAqB,EACAC,EACAC,EACAC,EACAC,WAEME,EAAWN,EAAMX,UACjBkB,EAASJ,EAAMpO,QACfyO,EAAYL,EAAM5O,WAClB6Q,EAAWjC,EAAMd,UAKjBuB,EAAkBjO,GAAMC,OAC5BwN,EAAIvN,EACJF,GAAM+N,MAAMT,EAAIpN,EAAGyN,EAASJ,GAAQpN,GAAOE,MAC3CqP,IAIEvB,EAAQ,EACRC,EAAiB7B,GACZpQ,EAAI,EAAGA,EAAIyR,IAAUzR,EAAG,KACzBkS,EAAclO,GAAO4D,MAAMkK,EAASwB,EAAStT,IAC/CkS,EAAMD,IACRA,EAASC,EACTF,EAAQhS,OAKNwT,EAAaxB,EACbyB,GAAcD,EAAK,GAAK/B,EAExBiC,EAAmB7D,EAAE,GAC3BzL,GAAYC,MAAMiN,EAAKI,EAAU8B,GAAKE,EAAGtM,OACnCuM,EAAwBD,EAAG/K,GAAGmB,GACpC6J,EAAIzQ,OAASkO,EACbuC,EAAIxQ,OAASqQ,EACbG,EAAI5J,QACJ4J,EAAI3J,YAEE4J,EAAmB/D,EAAE,GAC3BzL,GAAYC,MAAMiN,EAAKI,EAAU+B,GAAKG,EAAGxM,OACnCyM,EAAwBD,EAAGjL,GAAGmB,GACpC+J,EAAI3Q,OAASkO,EACbyC,EAAI1Q,OAASsQ,EACbI,EAAI9J,QACJ8J,EAAI7J,iBAiBU8J,EACdhF,EACAiF,EACArN,EACAsN,EACArN,GAEAmI,EAAStG,WAAa,MAChBoE,EAAsBmH,EAAMvO,SAAWwO,EAAMxO,SAE7CyO,EAAkBC,GACxBD,EAAM,GAAK,MACLE,EAAsB9B,EAAoB4B,EAAOF,EAAOrN,EAAKsN,EAAOrN,QACtEwN,EAAcvH,QAIZwH,EAAkBC,GACxBD,EAAM,GAAK,MACLE,EAAsBjC,EAAoB+B,EAAOJ,EAAOrN,EAAKoN,EAAOrN,QACtE4N,EAAc1H,QAIdsE,EACAG,EACAF,EAAkBG,EAClBF,EAAQ,EACRmD,EAAO,EAIPD,EAHkB,IAGYH,EAFZ,MAGpBjD,EAAQ8C,EACR3C,EAAQ0C,EACR5C,EAAMxK,EACN2K,EAAM5K,EACN0K,EAAQgD,EAAM,GACdtF,EAASU,OACT+E,EAAO,IAEPrD,EAAQ6C,EACR1C,EAAQ2C,EACR7C,EAAMzK,EACN4K,EAAM3K,EACNyK,EAAQ6C,EAAM,GACdnF,EAASU,OACT+E,EAAO,OAGHC,EAA+BC,GACrCpB,EAAmBmB,EAActD,EAAOC,EAAKC,EAAOC,EAAOC,OAErDiB,EAAiBrB,EAAMjO,QACvBsO,EAAsBL,EAAMzO,WAE5BiS,EAActD,EACduD,GAAevD,EAAQ,GAAKmB,EAE5BqC,EAAoBrD,EAAUmD,GAC9BG,EAAoBtD,EAAUoD,GAE9BG,EAAuB9Q,GAAOU,MAAMmQ,EAAWD,EAAWG,IAChED,EAAajP,gBAEP6J,EAAsB1L,GAAOgR,UAAUF,EAAcG,IACrDC,EAAqBlR,GAAOiC,MAAM2O,EAAWC,EAAWM,IAExDC,EAAkBvR,GAAM+N,MAAMT,EAAIpN,EAAG+Q,EAAcO,IACnD1P,EAAiB3B,GAAOgR,UAAUI,EAASE,IAE3CC,EAAcnR,GAAYC,MAAM8M,EAAKyD,EAAWY,IAChDC,EAAcrR,GAAYC,MAAM8M,EAAK0D,EAAWa,IAGhDC,EAAsB3R,GAAO4D,MAAMjC,EAAQ4P,GAG3CK,GAAuB5R,GAAO4D,MAAMwN,EAASG,GAAO3I,EACpDiJ,EAAsB7R,GAAO4D,MAAMwN,EAASK,GAAO7I,EAGnDkJ,EAA8BC,GAC9BC,EAA8BC,QAK/B9M,EAAoB2M,EAAatB,EADbxQ,GAAOC,KAAKmR,EAASc,IACgBN,EAAalB,GAElE,GAKJvL,EAAoB6M,EAAaF,EAAaV,EAASS,EAAalB,GAEhE,IAKT7F,EAASY,YAAYvJ,KAAKuJ,GAC1BZ,EAASW,WAAWtJ,KAAK+O,WAErB1M,EAAa,EACRxI,EAAI,EAAGA,EAAI8I,KAAwB9I,EAAG,KACvCmW,EAAmBH,EAAYhW,MACVgE,GAAO4D,MAAMjC,EAAQwQ,EAAG/O,GAAKuO,GAEtC/I,EAAa,KACvBwJ,EAAsBtH,EAASpG,OAAOF,MAC5CpE,GAAY4L,OAAOsB,EAAK6E,EAAG/O,EAAGgP,EAAG3G,YACjC2G,EAAGzN,GAAGxC,KAAKgQ,EAAGxN,IACV4L,EAAM,KAEFzK,EAAuBsM,EAAGzN,GAAGmB,GACnCsM,EAAGzN,GAAGmB,GAAG5G,OAAS4G,EAAG3G,OACrBiT,EAAGzN,GAAGmB,GAAG3G,OAAS2G,EAAG5G,OACrBkT,EAAGzN,GAAGmB,GAAGC,MAAQD,EAAGE,MACpBoM,EAAGzN,GAAGmB,GAAGE,MAAQF,EAAGC,QAEpBvB,GAINsG,EAAStG,WAAaA,cCrTR6N,EACdvH,EACAmF,EACAvN,EACAsI,EACArI,GAEAmI,EAAStG,WAAa,MAGhB8N,EAAYlS,GAAY4L,OAC5BtJ,EACAtC,GAAYC,MAAMsC,EAAKqI,EAAQE,IAAKlL,GAAOE,MAC3CqS,IAGIC,EAAYvC,EAAMwC,UAClBC,EAAYzC,EAAM0C,UAClBC,EAAY5S,GAAOU,MAAMgS,EAAGF,EAAGK,IAG/BC,EAAY9S,GAAO4D,MAAMgP,EAAG5S,GAAOU,MAAMgS,EAAGJ,EAAGtS,GAAOE,OACtDkD,EAAYpD,GAAO4D,MAAMgP,EAAG5S,GAAOU,MAAM4R,EAAGE,EAAGxS,GAAOE,OAEtDsC,EAAiByN,EAAMzO,SAAWwJ,EAAQxJ,SAG1CmD,EAAkBoO,MACxBpO,EAAGmB,GAAG3G,OAAS,EACfwF,EAAGmB,GAAGE,QAGF5C,GAAK,EAAG,KACJ4P,EAAYR,EACZlT,EAAYU,GAAOU,MAAM4R,EAAGU,EAAGC,OAClBjT,GAAO4D,MAAMtE,EAAGA,GAC1BkD,EAASA,YAKdyN,EAAMiD,aAAc,KAChBC,EAAalD,EAAMmD,UACnBC,EAAab,EACbc,EAAatT,GAAOU,MAAM2S,EAAIF,EAAII,OACrBvT,GAAO4D,MAAM0P,EAAItT,GAAOU,MAAM2S,EAAIf,EAAGtS,GAAOE,OAGtD,gBAKXyE,EAAGmB,GAAG5G,OAAS,EACfyF,EAAGmB,GAAGC,QACN+E,EAAStG,WAAa,EACtBsG,EAASU,OACTV,EAASY,YAAYpJ,UACrBwI,EAASW,WAAWtJ,KAAK6Q,GACzBlI,EAASpG,OAAO,GAAGC,GAAGxC,KAAKwC,QAG3BmG,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,QAKzC4H,GAAK,EAAG,KACJE,EAAYN,EACZpT,EAAYU,GAAOU,MAAM4R,EAAGU,EAAGC,OAClBjT,GAAO4D,MAAMtE,EAAGA,GAC1BkD,EAASA,YAKdyN,EAAMuD,aAAc,KAChBC,EAAaxD,EAAMyD,UACnBC,EAAajB,EACbkB,EAAa5T,GAAOU,MAAM+S,EAAIE,EAAIE,OACrB7T,GAAO4D,MAAMgQ,EAAI5T,GAAOU,MAAM4R,EAAGqB,EAAI3T,GAAOE,OAGtD,gBAKXyE,EAAGmB,GAAG5G,OAAS,EACfyF,EAAGmB,GAAGC,QACN+E,EAAStG,WAAa,EACtBsG,EAASU,OACTV,EAASY,YAAYpJ,UACrBwI,EAASW,WAAWtJ,KAAK6Q,GACzBlI,EAASpG,OAAO,GAAGC,GAAGxC,KAAKwC,QAG3BmG,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,SAKvC4I,EAAc9T,GAAO4D,MAAMgP,EAAGA,GAE9BI,EAAYe,GAClBf,EAAE3W,EAAK,EAAIyX,GAAQhB,EAAIN,EAAEnW,EAAI+G,EAAIsP,EAAErW,GACnC2W,EAAE9N,EAAK,EAAI4O,GAAQhB,EAAIN,EAAEtN,EAAI9B,EAAIsP,EAAExN,OAC7B5F,EAAYU,GAAOU,MAAM4R,EAAGU,EAAGC,SAClBjT,GAAO4D,MAAMtE,EAAGA,GAC1BkD,EAASA,QAIZvF,EAAY+W,GAA2BjR,KAAK6P,EAAE1N,EAAG0N,EAAEvW,GACrD2D,GAAO4D,MAAM3G,EAAG+C,GAAOU,MAAM4R,EAAGE,EAAGxS,GAAOE,OAAS,GACrDjD,EAAE8F,KAAK9F,EAAEZ,GAAIY,EAAEiI,GAEjBjI,EAAE4E,YAEF8C,EAAGmB,GAAG5G,OAAS,EACfyF,EAAGmB,GAAGC,QACN+E,EAAStG,WAAa,EACtBsG,EAASU,OACTV,EAASY,YAAYvJ,KAAKlF,GAC1B6N,EAASW,WAAWtJ,KAAKqQ,GACzB1H,EAASpG,OAAO,GAAGC,GAAGxC,KAAKwC,GAG3BmG,EAASpG,OAAO,GAAG+G,WAAWtJ,KAAK6I,EAAQE,eAsf7B+I,EACdnJ,EACAmF,EACAvN,EACAwR,EACAvR,GAE+BwR,GACtBC,QAAQtJ,EAAUmF,EAAOvN,EAAKwR,EAAUvR,GC7mBnD,SAAS0R,EAAgBC,EAAc7N,EAAe8N,OAG9C1I,EAAY0I,EAClB1I,EAAEvJ,kBACEkS,EAAO,EAILC,EAAOC,GAAuBpS,UAW9BqS,EAAO,EAAM,EAEV3Y,EAAI,EAAGA,EAAIyK,IAASzK,EAAG,KAExB4Y,EAAKH,EACLI,EAAKP,EAAGtY,GACR8Y,EAAKR,GAAItY,EAAI,GAAKyK,GAElB6M,EAAKtT,GAAOU,MAAMmU,EAAID,EAAIG,IAC1BnB,EAAK5T,GAAOU,MAAMoU,EAAIF,EAAII,IAI1BC,EAAuB,GAFnBjV,GAAOkV,QAAQ5B,EAAIM,GAG7BY,GAAQS,EAGRpJ,EAAExP,GAAK4Y,EAAeN,GAAQC,EAAGvY,EAAIwY,EAAGxY,EAAIyY,EAAGzY,GAC/CwP,EAAE3G,GAAK+P,EAAeN,GAAQC,EAAG1P,EAAI2P,EAAG3P,EAAI4P,EAAG5P,UAKjD2G,EAAEsJ,QAAQ,EAAMX,GACT3I,EC5CT,SAASuJ,EAAcC,EAAmBC,UACjCC,GAAOF,EAAYC,GAK5B,SAASE,GAAiBC,EAAsBC,UACvCD,EAAeC,EAAeD,EAAeC,WCkDtCC,GACdC,EACApT,EACAqT,OAIMC,EAAyC,EACzCC,EAAsB,WAErBhZ,EADYI,KAAK6Y,KAAK7Y,KAAKC,KAAKwY,GAAWG,EAAsBvT,IAAWqT,GACrD,EAAGC,GCxCnC,SAASjP,GAAiBC,EAAY/K,EAAWS,GAC/C,IAAMuK,EAASD,EAAM/K,GACrB+K,EAAM/K,GAAK+K,EAAMtK,GACjBsK,EAAMtK,GAAKuK,EAGb,SAASC,GAAmBjL,EAAMS,GAChC,OAAOT,EAAIS,EAGb,SAASyK,GACPH,GASA,QARAI,yDAAQ,EACRC,yDAAcL,EAAMjL,OAASqL,EAC7BE,yDAA+BJ,GAE3BK,EAAOH,EACLI,EAAkB,GACpBC,EAAM,IAED,CAEP,KAAOF,EAAO,EAAIF,EAAKA,IAAO,CAE5B,IAAMK,EAAQV,EAAMO,EAAOlK,KAAKsK,MAAMtK,KAAKM,UAAY0J,EAAME,KAC7DC,EAAMC,KAASJ,EACf,IAAK,IAAIO,EAAQL,EAAO,IAAO,CAG7B,KAAOD,EAAIN,IAAQY,GAAQF,KAE3B,KAAOJ,EAAII,EAAOV,IAAQK,MAE1B,GAAIO,GAASP,EACX,MAEFN,GAAcC,EAAOY,EAAOP,IAGhC,GAAY,IAARI,EACF,MAEFF,EAAOF,EACPA,EAAMG,IAAQC,GAGhB,OAAOT,EAGT,SAASmP,GACPnP,OACAI,yDAAQ,EAIR,OAAOD,GAASH,EAAOI,yDAHTJ,EAAMjL,OAASqL,yDACEF,IAKjC,SAASkP,GACPpP,EACAqP,GAKA,QAJAta,yDAAiBiL,EAAMjL,OAEnBua,EAAI,EAECvK,EAAI,EAAGA,EAAIhQ,IAAUgQ,EAExBsK,EAAUrP,EAAM+E,MAKhBA,IAAMuK,EAMVvP,GAAcC,EAAOsP,IAAKvK,KALtBuK,GAQN,OAAOA,EAGT,SAASC,GACPvP,EACAI,EACAoP,EACAC,EACAnP,GAGA,IADA,IAAIX,EAAQ6P,EAAOpP,EACZT,EAAQ,GAAG,CAChB,IAAM+P,EAAOrZ,KAAKsK,MAAMhB,EAAQ,GAC5BgQ,EAAKvP,EAAQsP,EAEbpP,EAAIN,EAAM2P,GAAKF,IACjBrP,IAAUuP,EACVhQ,GAAS+P,EAAO,GAEhB/P,EAAQ+P,EAGZ,OAAOtP,EAGT,SAASwP,GACP5P,EACAI,EACAoP,EACAC,EACAnP,GAGA,IADA,IAAIX,EAAQ6P,EAAOpP,EACZT,EAAQ,GAAG,CAChB,IAAM+P,EAAOrZ,KAAKsK,MAAMhB,EAAQ,GAC5BgQ,EAAKvP,EAAQsP,EAEZpP,EAAImP,EAAKzP,EAAM2P,IAIlBhQ,EAAQ+P,GAHRtP,IAAUuP,EACVhQ,GAAS+P,EAAO,GAKpB,OAAOtP,EAGT,SAASyP,GAAc7P,EAAYI,EAAe0P,EAAiBN,GAEjE,IADA,IAAIO,EAAOD,EACJ1P,IAAU2P,GACfhQ,GAAcC,EAAOI,IAAS2P,KAC1BA,IAASP,EACXO,EAAOD,EACE1P,IAAU0P,IACnBA,EAAUC,GAKhB,SAASC,GACPhQ,EACAI,EACAoP,EACAlP,GAEA,GAAIF,IAAUoP,EACZ,OAAOA,EAGT,IADA,IAAIS,EAAS7P,IACJA,IAAUoP,GACZlP,EAAIN,EAAMiQ,GAASjQ,EAAMI,KAE5BL,GAAcC,IAASiQ,EAAQ7P,GAGnC,QAAS6P,EClNX,SAASC,GAAmBC,EAAgBC,OACpCC,EAAgBD,EAAOE,sBACzBD,EAAe,KACX3U,EAAS0U,EAAOG,YAChBC,EAAiBJ,EAAOK,uBAC1BL,EAAOM,cAAcC,KAAM,KACvBC,EAAcR,EAAOS,iBAC3BV,EAAOW,cAAcN,EAAgB9U,EAAQkV,EAAaP,QAE1DF,EAAOW,cAAcN,EAAgB9U,EAAQ,KAAM2U,IAUzD,SAASU,GAAUZ,EAAgBa,OAC3BC,EAAgBD,EAAME,WACtBC,EAAgBH,EAAMI,WACtB/K,EAAmB4K,EAAMI,KACzB7K,EAAmB2K,EAAME,KACzBC,EAAajL,EAAInL,EACjBqW,EAAa/K,EAAItL,EACjB4S,EAAakD,EAAMQ,WAAWC,IAC9B1D,EAAaiD,EAAMU,WAAWC,IAE9BC,EAAiBC,GAAkBC,OAAO,GAAK,GAAK,WAElDd,EAAMe,eAEV5B,EAAO6B,YAAYlE,EAAIC,EAAI6D,oBAIrBK,EAASjB,EACT5N,EAAa6O,EAAOC,mBACpBhP,EAAa+O,EAAOE,mBAC1BhC,EAAO6B,YAAY5O,EAAI0K,EAAI8D,GAC3BzB,EAAO6B,YAAY9O,EAAI6K,EAAI6D,GAC3BzB,EAAO6B,YAAY5O,EAAIF,EAAI0O,oBAKrB7M,EAAIqN,GACVrN,EAAE9I,IAAI,EAAK,EAAK,GAChBkU,EAAOkC,UAAUvE,EAAI,EAAK/I,GAC1BoL,EAAOkC,UAAUtE,EAAI,EAAKhJ,GAE1BA,EAAE9I,IAAI,GAAK,GAAK,IAChBkU,EAAO6B,YAAYlE,EAAIC,EAAIhJ,iBAK3BoL,EAAO6B,YAAYV,EAAIxD,EAAI8D,GAC3BzB,EAAO6B,YAAYlE,EAAIC,EAAI6D,GAC3BzB,EAAO6B,YAAYT,EAAIxD,EAAI6D,IAMjC,SAASU,GAAUnC,EAAgBoC,EAAoBX,OAC/CY,EAAiBD,EAAQE,kBAEvBD,EAAMT,mBAEJW,EAAwBF,EACxBG,EAAiBD,EAAOtO,IACxB1I,EAAiBgX,EAAOhY,SACxBkY,EAAe1Z,GAAO2Z,MAC5B1C,EAAO2C,gBAAgBH,EAAQjX,EAAQkX,EAAMhB,oBAKvC9J,EAAoB0K,EACpB5M,EAAakC,EAAK6D,UAClB9F,EAAaiC,EAAK+D,UACxBsE,EAAO6B,YAAYpM,EAAIC,EAAI+L,oBAKrBmB,EAAsBP,EACtB7S,EAAgBoT,EAAM5a,QACtBT,EAAqBqb,EAAMpb,WAC3Bqb,EAAsBC,GAAuBC,QACjD,IAAOtB,EAAM9V,EACb,IAAO8V,EAAMuB,EACb,IAAOvB,EAAMlc,EACbkc,EAAM3c,GAEJ2Q,EAAalO,EAAS,MAC1ByY,EAAOkC,UAAUzM,EAAI,EAAKgM,GAEtBmB,EAAMK,gBAAiB,KACnBvW,EAAKkW,EAAMM,aACjBlD,EAAO6B,YAAYnV,EAAI+I,EAAIoN,GAC3B7C,EAAOmD,WAAWzW,EAAI,GAAKmW,OAGxB,IAAI9d,EAAI,EAAGA,EAAIyK,IAASzK,EAAG,KACxB2Q,EAAanO,EAASxC,GAC5Bib,EAAO6B,YAAYpM,EAAIC,EAAI+L,GAC3BzB,EAAOkC,UAAUxM,EAAI,EAAK+L,GAC1BhM,EAAKC,KAGHkN,EAAMQ,gBAAiB,KACnBC,EAAKT,EAAMU,aACjBtD,EAAO6B,YAAYwB,EAAI5N,EAAIoN,GAC3B7C,EAAOmD,WAAWE,EAAI,GAAKR,oBAMvBU,EAAuBlB,EACvBjN,EAAsBmO,EAAKvb,QAC3BT,EAAqBgc,EAAK/b,WAChCwY,EAAOwD,iBAAiBjc,EAAU6N,EAAaqM,aAWrCgC,GAAczD,EAAgB0D,OACtCC,EAAQ3D,EAAO4D,WACfnC,EAAQoC,GAAsBlC,OAAO,EAAG,EAAG,QAE7CgC,MACG,IAAIpe,EAAmBme,EAAMI,WAAYve,EAAGA,EAAIA,EAAEwe,OAAQ,KACvDC,EAAkBze,EAAE2b,KAE1BlB,EAAOiE,cAAcD,OAEhB,IAAIE,EAAI3e,EAAE4e,iBAAkBD,EAAGA,EAAIA,EAAEH,OACnCxe,EAAE6e,eAGI7e,EAAE8e,WACX5C,EAAME,OAAO,GAAK,GAAK,IACvBQ,GAAUnC,EAAQkE,EAAGzC,QACZlc,EAAE8e,WACX5C,EAAME,OAAO,GAAK,GAAK,IACvBQ,GAAUnC,EAAQkE,EAAGzC,IACXlc,EAAE+e,WAIZ7C,EAAME,OAAO,GAAK,GAAK,IACvBQ,GAAUnC,EAAQkE,EAAGzC,KAJrBA,EAAME,OAAO,GAAK,GAAK,IACvBQ,GAAUnC,EAAQkE,EAAGzC,KAVrBA,EAAME,OAAO,GAAK,GAAK,IACvBQ,GAAUnC,EAAQkE,EAAGzC,IAgBzBzB,EAAOuE,aAAaP,SAIIL,MACrB,IAAI5Y,EAAI2Y,EAAMc,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAChDhE,GAAmBC,EAAQjV,QAI3B4Y,MACG,IAAIhW,EAAI+V,EAAMe,YAAa9W,EAAGA,EAAIA,EAAEoW,OACvCnD,GAAUZ,EAAQrS,QAmBlBgW,EAA+B,CACjClC,EAAME,OAAO,GAAK,GAAK,YACjBtE,EAAKqH,GAEFnf,EAAmBme,EAAMI,WAAYve,EAAGA,EAAIA,EAAEwe,UAChDxe,EAAE6e,eAIF,IAAIF,EAAI3e,EAAE4e,iBAAkBD,EAAGA,EAAIA,EAAEH,WACnC,IAAIhf,EAAI,EAAGA,EAAImf,EAAES,eAAgB5f,EAAG,KAGjC6f,EAFwBV,EAAEW,UAAU9f,GAEf+f,SAASF,KACpCvH,EAAG,GAAGvR,IAAI8Y,EAAK5W,WAAW5I,EAAGwf,EAAK5W,WAAWC,GAC7CoP,EAAG,GAAGvR,IAAI8Y,EAAK7W,WAAW3I,EAAGwf,EAAK5W,WAAWC,GAC7CoP,EAAG,GAAGvR,IAAI8Y,EAAK7W,WAAW3I,EAAGwf,EAAK7W,WAAWE,GAC7CoP,EAAG,GAAGvR,IAAI8Y,EAAK5W,WAAW5I,EAAGwf,EAAK7W,WAAWE,GAE7C+R,EAAO+E,YAAY1H,EAAI,EAAGoE,UAM9BkC,MACG,IAAIpe,EAAmBme,EAAMI,WAAYve,EAAGA,EAAIA,EAAEwe,OAAQ,KACvDC,EAAKgB,GACXhB,EAAGlb,EAAEoC,KAAK3F,EAAE2b,KAAKpY,GACjBkb,EAAGjZ,EAAEG,KAAK3F,EAAE0f,kBACZjF,EAAOkF,cAAclB,SAMnBL,MACG,IAAI/O,EAAI8O,EAAMyB,iBAAkBvQ,EAAGA,EAAIA,EAAEmP,OAC5CnP,EAAEwQ,KAAKpF,YCzMCqF,SAAYzf,0DAAM,EAAGC,yDAAK,EACpC8F,EAAIzF,KAAKM,gBACRX,EAAKD,GAAM+F,EAAI/F,WC5BN0f,GAAaC,EAAkBC,EAAcC,GAC3DC,GAAcC,KAAK,IAAIC,GAAUL,EAAUC,EAAMC,yOCjBnD,SAASI,GAAGtS,EAAG2Q,GACb,OAAO4B,OAAOvS,EAAG2Q,GCmTnB,SAAS6B,GAAeC,QACfA,EAAQ5f,EAAW,MACxB4f,GAAS5f,EAAW,UAEf4f,EAAQ5f,GAAY,MACzB4f,GAAS5f,EAAW,YAEf4f,ElBpSF,IAAM7Q,GAAc,KACd1K,GAAa,KACbhC,GAAwBgC,GAAaA,GACrCwb,GAAgB/f,KAAKggB,GAWrBrY,GAAuB,EAIvByD,GAAwB,EAKxB6U,GAAmB,GAKnBC,GAAoB,EAIpB7Z,GAAgB,KAIhB8Z,GAA0B,EAAI,IAAOJ,GAKrCza,GAA2B,EAAIe,GAG/B+Z,GAAiB,EAKjBC,GAAoB,GAIpBC,GAAuB,EAIvBC,GAAyB,GAIzBC,GAAmC,EAAI,IAAOT,GAI9CU,GAAoB,EACpBC,GAAmCD,GAAoBA,GAIvDE,GAAyB,GAAMZ,GAC/Ba,GAAgCD,GAAiBA,GAKjDE,GAAe,GACfC,GAAkB,IAKlBC,GAAiB,GAGjBC,GAA0B,IAG1BC,GAAoC,EAAI,IAAOlB,GAqC/CmB,GAAwB,gCAZvBC,yDAAQ,EAAGC,yDAAQ,EAAGC,yDAAW,uBAJrC,aACA,gBACG,OAGJF,MAAQA,OACRC,MAAQA,OACRC,SAAWA,sDAITC,KAAKH,MAAQ,IAAMG,KAAKF,MAAQ,IAAME,KAAKD,kBAKjB,CAAc,EAAG,EAAG,GAE5CE,GAAY,SACZC,GAAY,2CCzIZphB,GAAyB2f,GAAQ,IAEjC0B,GAAoB,EAAI1B,GAuDxB3H,GAASpY,KAAKC,KAEdyhB,GAAQ1hB,KAAK2hB,IAUbC,GAAQ5hB,KAAK6hB,IACbC,GAAQ9hB,KAAK+hB,IAEbC,GAAShiB,KAAKiiB,KACdC,GAAUliB,KAAKmiB,MA6Bftf,+BAaC3D,yDAAI,EAAK6I,yDAAI,mBAHrB/I,WACAA,SAGGE,EAAIA,OACJ6I,EAAIA,mDAIF,IAAIlF,EAAOye,KAAKpiB,EAAGoiB,KAAKvZ,iDAI1B7I,EAAI,OACJ6I,EAAI,EACFuZ,iCAGLpiB,EAAW6I,eACR7I,EAAIA,OACJ6I,EAAIA,EACFuZ,kCAGJc,eACEljB,EAAIkjB,EAAMljB,OACV6I,EAAIqa,EAAMra,EACRuZ,qCAGDrb,eACD/G,GAAK+G,EAAE/G,OACP6I,GAAK9B,EAAE8B,EACLuZ,uCAGCpiB,EAAW6I,eACd7I,GAAKA,OACL6I,GAAKA,EACHuZ,qCAGDrb,eACD/G,GAAK+G,EAAE/G,OACP6I,GAAK9B,EAAE8B,EACLuZ,uCAGCpiB,EAAW6I,eACd7I,GAAKA,OACL6I,GAAKA,EACHuZ,qCAGDjU,eACDnO,GAAKmO,OACLtF,GAAKsF,EACHiU,wCAGEjU,EAAWpH,eACf/G,GAAKmO,EAAIpH,EAAE/G,OACX6I,GAAKsF,EAAIpH,EAAE8B,EACTuZ,wCAGEjU,EAAWpH,eACf/G,GAAKmO,EAAIpH,EAAE/G,OACX6I,GAAKsF,EAAIpH,EAAE8B,EACTuZ,iCAGLrb,UACKqb,KAAKpiB,EAAI+G,EAAE/G,EAAIoiB,KAAKvZ,EAAI9B,EAAE8B,gCAG7B9B,UACGqb,KAAKpiB,EAAI+G,EAAE8B,EAAIuZ,KAAKvZ,EAAI9B,EAAE/G,uCAI3BA,EAAYoiB,KAAKpiB,EACrB6I,EAAYuZ,KAAKvZ,SACZ/H,KAAKC,KAAKf,EAAIA,EAAI6I,EAAIA,+CAIvB7I,EAAYoiB,KAAKpiB,EACrB6I,EAAYuZ,KAAKvZ,SACZ7I,EAAIA,EAAI6I,EAAIA,0CAIbrJ,EAAiB4iB,KAAKhb,YACxB5H,GAAU6F,GAAY,KAClB8d,EAAqB,EAAI3jB,OAC1BQ,GAAKmjB,OACLta,GAAKsa,SAEL3jB,8CAIDA,EAAiB4iB,KAAKhb,YACxB5H,GAAU6F,GAAY,KAClB8d,EAAqB,EAAI3jB,OAC1BQ,GAAKmjB,OACLta,GAAKsa,SAELf,wCAGEgB,OACH5T,EAAY1O,KAAK+hB,IAAIO,GACrBjV,EAAYrN,KAAK6hB,IAAIS,GACrBpjB,EAAYoiB,KAAKpiB,cAClBA,EAAIwP,EAAIxP,EAAImO,EAAIiU,KAAKvZ,OACrBA,EAAIsF,EAAInO,EAAIwP,EAAI4S,KAAKvZ,EACnBuZ,8CAGQ5S,EAAWrB,OACpBnO,EAAYoiB,KAAKpiB,cAClBA,EAAIwP,EAAIxP,EAAImO,EAAIiU,KAAKvZ,OACrBA,EAAIsF,EAAInO,EAAIwP,EAAI4S,KAAKvZ,EACnBuZ,8CAIAiB,SAASjB,KAAKpiB,IAAMqjB,SAASjB,KAAKvZ,uCAG/BsF,OACJnO,EAAYoiB,KAAKpiB,cAClBA,EAAImO,EAAIiU,KAAKvZ,OACbA,GAAKsF,EAAInO,EACPoiB,yCAGGjU,OACJnO,EAAYoiB,KAAKpiB,cAClBA,GAAKmO,EAAIiU,KAAKvZ,OACdA,EAAIsF,EAAInO,EACNoiB,sCAGArb,eACF/G,EAAIE,EAAMkiB,KAAKpiB,EAAG+G,EAAE/G,QACpB6I,EAAI3I,EAAMkiB,KAAKvZ,EAAG9B,EAAE8B,GAClBuZ,sCAGArb,eACF/G,EAAII,EAAMgiB,KAAKpiB,EAAG+G,EAAE/G,QACpB6I,EAAIzI,EAAMgiB,KAAKvZ,EAAG9B,EAAE8B,GAClBuZ,mDAIFpiB,EAAID,EAAMqiB,KAAKpiB,QACf6I,EAAI9I,EAAMqiB,KAAKvZ,GACbuZ,mDAIFpiB,GAAKoiB,KAAKpiB,OACV6I,GAAKuZ,KAAKvZ,EACRuZ,4CAIDpiB,EAAYoiB,KAAKpiB,cAClBA,GAAKoiB,KAAKvZ,OACVA,EAAI7I,EACFoiB,yCAGQ5iB,WACT8jB,EAAM,IAAIC,MAAc/jB,GACrBG,EAAI,EAAGA,EAAIH,IAAUG,EAC5B2jB,EAAI3jB,GAAK,IAAIgE,SAER2f,+BAGiBvc,EAAOmR,UAC/BA,EAAIlY,EAAID,EAAMgH,EAAE/G,GAChBkY,EAAIrP,EAAI9I,EAAMgH,EAAE8B,GACTqP,+BAGiBxY,EAAOS,EAAO+X,UACtCA,EAAIlY,EAAIE,EAAMR,EAAEM,EAAGG,EAAEH,GACrBkY,EAAIrP,EAAI3I,EAAMR,EAAEmJ,EAAG1I,EAAE0I,GACdqP,+BAGiBxY,EAAOS,EAAO+X,UACtCA,EAAIlY,EAAII,EAAMV,EAAEM,EAAGG,EAAEH,GACrBkY,EAAIrP,EAAIzI,EAAMV,EAAEmJ,EAAG1I,EAAE0I,GACdqP,iCAGmBnR,EAAOvG,EAAQC,EAAQyX,UACjDA,EAAIlY,EAAIO,EAAQwG,EAAE/G,EAAGQ,EAAGR,EAAGS,EAAGT,GAC9BkY,EAAIrP,EAAItI,EAAQwG,EAAE8B,EAAGrI,EAAGqI,EAAGpI,EAAGoI,GACvBqP,kCAGoBnR,EAAOqc,EAAiBlL,OAC7CsL,EAAMzc,EAAE/G,EACRyjB,EAAM1c,EAAE8B,EACR2G,EAAI1O,KAAK+hB,IAAIO,GACbjV,EAAIrN,KAAK6hB,IAAIS,UACnBlL,EAAIlY,EAAIwP,EAAIgU,EAAMrV,EAAIsV,EACtBvL,EAAIrP,EAAIsF,EAAIqV,EAAMhU,EAAIiU,EACfvL,gCAGIxY,EAAOS,UACXT,EAAEM,EAAIG,EAAEH,EAAIN,EAAEmJ,EAAI1I,EAAE0I,kCAGdnJ,EAAOS,UACbT,EAAEM,EAAIG,EAAE0I,EAAInJ,EAAEmJ,EAAI1I,EAAEH,kCAGA+G,EAAOoH,EAAW+J,OACvCsL,EAAMzc,EAAE/G,SACdkY,EAAIlY,EAAImO,EAAIpH,EAAE8B,EACdqP,EAAIrP,GAAKsF,EAAIqV,EACNtL,oCAGsBnR,EAAOmR,OAC9BsL,EAAMzc,EAAE/G,SACdkY,EAAIlY,EAAI+G,EAAE8B,EACVqP,EAAIrP,GAAK2a,EACFtL,kCAGoB/J,EAAWpH,EAAOmR,OACvCsL,EAAMzc,EAAE/G,SACdkY,EAAIlY,GAAKmO,EAAIpH,EAAE8B,EACfqP,EAAIrP,EAAIsF,EAAIqV,EACLtL,oCAGsBnR,EAAOmR,OAC9BsL,EAAMzc,EAAE/G,SACdkY,EAAIlY,GAAK+G,EAAE8B,EACXqP,EAAIrP,EAAI2a,EACDtL,gCAGkBxY,EAAOS,EAAO+X,UACvCA,EAAIlY,EAAIN,EAAEM,EAAIG,EAAEH,EAChBkY,EAAIrP,EAAInJ,EAAEmJ,EAAI1I,EAAE0I,EACTqP,gCAGkBxY,EAAOS,EAAO+X,UACvCA,EAAIlY,EAAIN,EAAEM,EAAIG,EAAEH,EAChBkY,EAAIrP,EAAInJ,EAAEmJ,EAAI1I,EAAE0I,EACTqP,gCAGkB/J,EAAWpH,EAAOmR,UAC3CA,EAAIlY,EAAI+G,EAAE/G,EAAImO,EACd+J,EAAIrP,EAAI9B,EAAE8B,EAAIsF,EACP+J,gCAGkBnR,EAAOoH,EAAW+J,UAC3CA,EAAIlY,EAAI+G,EAAE/G,EAAImO,EACd+J,EAAIrP,EAAI9B,EAAE8B,EAAIsF,EACP+J,oCAGsBxY,EAAOyO,EAAWhO,EAAO+X,UACtDA,EAAIlY,EAAIN,EAAEM,EAAImO,EAAIhO,EAAEH,EACpBkY,EAAIrP,EAAInJ,EAAEmJ,EAAIsF,EAAIhO,EAAE0I,EACbqP,oCAGsBxY,EAAOyO,EAAWhO,EAAO+X,UACtDA,EAAIlY,EAAIN,EAAEM,EAAImO,EAAIhO,EAAEH,EACpBkY,EAAIrP,EAAInJ,EAAEmJ,EAAIsF,EAAIhO,EAAE0I,EACbqP,sCAGwBxY,EAAOyO,EAAWpH,EAAOmR,OAClDsL,EAAczc,EAAE/G,SACtBkY,EAAIlY,EAAIN,EAAEM,EAAImO,EAAIpH,EAAE8B,EACpBqP,EAAIrP,EAAInJ,EAAEmJ,EAAIsF,EAAIqV,EACXtL,gCAGkBxY,EAAOS,EAAO+X,UACvCA,EAAIlY,EAAkB,IAAbN,EAAEM,EAAIG,EAAEH,GACjBkY,EAAIrP,EAAkB,IAAbnJ,EAAEmJ,EAAI1I,EAAE0I,GACVqP,gCAGkBxY,EAAOS,EAAO+X,UACvCA,EAAIlY,EAAkB,IAAbG,EAAEH,EAAIN,EAAEM,GACjBkY,EAAIrP,EAAkB,IAAb1I,EAAE0I,EAAInJ,EAAEmJ,GACVqP,qCAGSxY,EAAOS,UAChBT,EAAEM,IAAMG,EAAEH,GAAKN,EAAEmJ,IAAM1I,EAAE0I,qCAGhBnJ,EAAOS,OACjBujB,EAAchkB,EAAEM,EAAIG,EAAEH,EACtB2jB,EAAcjkB,EAAEmJ,EAAI1I,EAAE0I,SACrB/H,KAAKC,KAAK2iB,EAAMA,EAAMC,EAAMA,6CAGZjkB,EAAOS,OACxBujB,EAAchkB,EAAEM,EAAIG,EAAEH,EACtB2jB,EAAcjkB,EAAEmJ,EAAI1I,EAAE0I,SACrB6a,EAAMA,EAAMC,EAAMA,+BAGD5c,EAAOmR,UAC/BA,EAAIlY,GAAK+G,EAAE/G,EACXkY,EAAIrP,GAAK9B,EAAE8B,EACJqP,WAlVOvU,QAAyB,IAAIA,GAAO,EAAG,GACvCA,SAA0B,IAAIA,GAAO,EAAG,GACxCA,SAA0B,IAAIA,GAAO,EAAG,GAExCA,QAAe,IAAIA,GACnBA,QAAe,IAAIA,GACnBA,QAAe,IAAIA,GACnBA,QAAe,IAAIA,GA+U9B,IAAMigB,GAAgC,IAAIjgB,GAAO,EAAG,GAO9CkgB,+BASC7jB,yDAAI,EAAK6I,yDAAI,EAAKib,yDAAI,mBAJ9BhkB,WACAA,WACAA,SAGGE,EAAIA,OACJ6I,EAAIA,OACJib,EAAIA,mDAIF,IAAID,EAAOzB,KAAKpiB,EAAGoiB,KAAKvZ,EAAGuZ,KAAK0B,iDAIlC9jB,EAAI,OACJ6I,EAAI,OACJib,EAAI,EACF1B,oCAGFpiB,EAAW6I,EAAWib,eACtB9jB,EAAIA,OACJ6I,EAAIA,OACJib,EAAIA,EACF1B,kCAGJc,eACEljB,EAAIkjB,EAAMljB,OACV6I,EAAIqa,EAAMra,OACVib,EAAIZ,EAAMY,EACR1B,mDAIFpiB,GAAKoiB,KAAKpiB,OACV6I,GAAKuZ,KAAKvZ,OACVib,GAAK1B,KAAK0B,EACR1B,qCAGDrb,eACD/G,GAAK+G,EAAE/G,OACP6I,GAAK9B,EAAE8B,OACPib,GAAK/c,EAAE+c,EACL1B,wCAGEpiB,EAAW6I,EAAWib,eAC1B9jB,GAAKA,OACL6I,GAAKA,OACLib,GAAKA,EACH1B,qCAGDrb,eACD/G,GAAK+G,EAAE/G,OACP6I,GAAK9B,EAAE8B,OACPib,GAAK/c,EAAE+c,EACL1B,wCAGEpiB,EAAW6I,EAAWib,eAC1B9jB,GAAKA,OACL6I,GAAKA,OACLib,GAAKA,EACH1B,qCAGDjU,eACDnO,GAAKmO,OACLtF,GAAKsF,OACL2V,GAAK3V,EACHiU,uCAGM1iB,EAAQS,UACdT,EAAEM,EAAIG,EAAEH,EAAIN,EAAEmJ,EAAI1I,EAAE0I,EAAInJ,EAAEokB,EAAI3jB,EAAE2jB,oCAGTpkB,EAAQS,EAAQ+X,OACxC6L,EAAcrkB,EAAEM,EACpBgkB,EAAMtkB,EAAEmJ,EACRob,EAAMvkB,EAAEokB,EACJI,EAAc/jB,EAAEH,EACpBmkB,EAAMhkB,EAAE0I,EACRub,EAAMjkB,EAAE2jB,SACV5L,EAAIlY,EAAIgkB,EAAMI,EAAMH,EAAME,EAC1BjM,EAAIrP,EAAIob,EAAMC,EAAMH,EAAMK,EAC1BlM,EAAI4L,EAAIC,EAAMI,EAAMH,EAAME,EACnBhM,WA/FO2L,QAAyB,IAAIA,GAAO,EAAG,EAAG,GAE1CA,QAAe,IAAIA,OAkGxBQ,6CAGW,IAAI1gB,GAAO,EAAG,WACd,IAAIA,GAAO,EAAG,oDAG3B,IAAI0gB,GAAUve,KAAKsc,sCAepBkC,EAAcC,EAAcC,EAAcC,eAC3CC,GAAGhe,IAAI4d,EAAME,QACbG,GAAGje,IAAI6d,EAAME,GACXrC,mCAGH7O,EAAQqR,eACPF,GAAG5e,KAAKyN,QACRoR,GAAG7e,KAAK8e,GACNxC,sCAGAgB,OACD5T,EAAY1O,KAAK+hB,IAAIO,GACrBjV,EAAYrN,KAAK6hB,IAAIS,eACtBsB,GAAGhe,IAAI8I,EAAGrB,QACVwW,GAAGje,KAAKyH,EAAGqB,GACT4S,kCAGJc,eACEwB,GAAG5e,KAAKod,EAAMwB,SACdC,GAAG7e,KAAKod,EAAMyB,IACZvC,uDAIFsC,GAAGhe,IAAI,EAAG,QACVie,GAAGje,IAAI,EAAG,GACR0b,mDAIFsC,GAAGze,eACH0e,GAAG1e,UACDmc,+CAIAthB,KAAKmiB,MAAMb,KAAKsC,GAAG7b,EAAGuZ,KAAKsC,GAAG1kB,sCAG5BkY,OACHxY,EAAY0iB,KAAKsC,GAAG1kB,EACpBG,EAAYiiB,KAAKuC,GAAG3kB,EACpBwP,EAAY4S,KAAKsC,GAAG7b,EACpB5F,EAAYmf,KAAKuC,GAAG9b,EACtBgc,EAAcnlB,EAAIuD,EAAI9C,EAAIqP,SAClB,IAARqV,IACFA,EAAM,EAAIA,GAEZ3M,EAAIwM,GAAG1kB,EAAI6kB,EAAM5hB,EACjBiV,EAAIyM,GAAG3kB,GAAK6kB,EAAM1kB,EAClB+X,EAAIwM,GAAG7b,GAAKgc,EAAMrV,EAClB0I,EAAIyM,GAAG9b,EAAIgc,EAAMnlB,EACVwY,gCAGWgM,EAAaC,EAAajM,OACtC4M,EAAM1C,KAAKsC,GAAG1kB,EAClB+kB,EAAM3C,KAAKuC,GAAG3kB,EACVglB,EAAM5C,KAAKsC,GAAG7b,EAClBoc,EAAM7C,KAAKuC,GAAG9b,EACZgc,EAAMC,EAAMG,EAAMF,EAAMC,SAChB,IAARH,IACFA,EAAM,EAAMA,GAEd3M,EAAIlY,EAAI6kB,GAAOI,EAAMf,EAAMa,EAAMZ,GACjCjM,EAAIrP,EAAIgc,GAAOC,EAAMX,EAAMa,EAAMd,GAC1BhM,gDAIFwM,GAAGQ,eACHP,GAAGO,UACD9C,mDAIF+C,WAAW/C,MACTA,sCAGAgD,eACFV,GAAGW,QAAQD,EAAEV,SACbC,GAAGU,QAAQD,EAAET,IACXvC,sCAGAgD,eACFV,GAAGhd,QAAQ0d,EAAEV,SACbC,GAAGjd,QAAQ0d,EAAET,IACXvC,sCAxGK7O,EAAQqR,UACb,IAAIP,GAAUiB,MAAM/R,EAAIqR,oCAGjBN,EAAcC,EAAcC,EAAcC,UACjD,IAAIJ,GAAUkB,QAAQjB,EAAMC,EAAMC,EAAMC,qCAGhCrB,UACR,IAAIiB,GAAUmB,SAASpC,gCAkGpBgC,EAAYlN,OAChBuN,EAAeL,EAAEV,GACrBgB,EAAeN,EAAET,UACnBzM,EAAIwM,GAAG1kB,EAAID,EAAM0lB,EAAKzlB,GACtBkY,EAAIwM,GAAG7b,EAAI9I,EAAM0lB,EAAK5c,GACtBqP,EAAIyM,GAAG3kB,EAAID,EAAM2lB,EAAK1lB,GACtBkY,EAAIyM,GAAG9b,EAAI9I,EAAM2lB,EAAK7c,GACfqP,gCAGkBkN,EAAYre,EAAOmR,OACtCuN,EAAOL,EAAEV,GACTgB,EAAON,EAAET,GACTnB,EAAMzc,EAAE/G,EACRyjB,EAAM1c,EAAE8B,SACdqP,EAAIlY,EAAIylB,EAAKzlB,EAAIwjB,EAAMkC,EAAK1lB,EAAIyjB,EAChCvL,EAAIrP,EAAI4c,EAAK5c,EAAI2a,EAAMkC,EAAK7c,EAAI4a,EACzBvL,iCAGmBkN,EAAYre,EAAOmR,OACvCuN,EAAOL,EAAEV,GACTgB,EAAON,EAAET,GACTnB,EAAMzc,EAAE/G,EACRyjB,EAAM1c,EAAE8B,SACdqP,EAAIlY,EAAIylB,EAAKzlB,EAAIwjB,EAAMiC,EAAK5c,EAAI4a,EAChCvL,EAAIrP,EAAI6c,EAAK1lB,EAAIwjB,EAAMkC,EAAK7c,EAAI4a,EACzBvL,gCAGI/B,EAAYE,EAAY6B,OAC7ByN,EAAOxP,EAAEuO,GACTkB,EAAOzP,EAAEwO,GACTkB,EAAOxP,EAAEqO,GACToB,EAAOzP,EAAEsO,UACfzM,EAAIwM,GAAG1kB,EAAI2lB,EAAK3lB,EAAI6lB,EAAK7lB,EACzBkY,EAAIwM,GAAG7b,EAAI8c,EAAK9c,EAAIgd,EAAKhd,EACzBqP,EAAIyM,GAAG3kB,EAAI4lB,EAAK5lB,EAAI8lB,EAAK9lB,EACzBkY,EAAIyM,GAAG9b,EAAI+c,EAAK/c,EAAIid,EAAKjd,EAClBqP,gCAGI/B,EAAYE,EAAY6B,OAC7B6N,EAAS5P,EAAEuO,GAAG1kB,EACdgmB,EAAS7P,EAAEuO,GAAG7b,EACdod,EAAS9P,EAAEwO,GAAG3kB,EACdkmB,EAAS/P,EAAEwO,GAAG9b,EACdsd,EAAS9P,EAAEqO,GAAG1kB,EACdomB,EAAS/P,EAAEqO,GAAG7b,EACdwd,EAAShQ,EAAEsO,GAAG3kB,EACdsmB,EAASjQ,EAAEsO,GAAG9b,SACpBqP,EAAIwM,GAAG1kB,EAAI+lB,EAASI,EAASF,EAASG,EACtClO,EAAIwM,GAAG7b,EAAImd,EAASG,EAASD,EAASE,EACtClO,EAAIyM,GAAG3kB,EAAI+lB,EAASM,EAASJ,EAASK,EACtCpO,EAAIyM,GAAG9b,EAAImd,EAASK,EAASH,EAASI,EAC/BpO,iCAGK/B,EAAYE,EAAY6B,OAC9B6N,EAAS5P,EAAEuO,GAAG1kB,EACdgmB,EAAS7P,EAAEuO,GAAG7b,EACdod,EAAS9P,EAAEwO,GAAG3kB,EACdkmB,EAAS/P,EAAEwO,GAAG9b,EACdsd,EAAS9P,EAAEqO,GAAG1kB,EACdomB,EAAS/P,EAAEqO,GAAG7b,EACdwd,EAAShQ,EAAEsO,GAAG3kB,EACdsmB,EAASjQ,EAAEsO,GAAG9b,SACpBqP,EAAIwM,GAAG1kB,EAAI+lB,EAASI,EAASH,EAASI,EACtClO,EAAIwM,GAAG7b,EAAIod,EAASE,EAASD,EAASE,EACtClO,EAAIyM,GAAG3kB,EAAI+lB,EAASM,EAASL,EAASM,EACtCpO,EAAIyM,GAAG9b,EAAIod,EAASI,EAASH,EAASI,EAC/BpO,WA3LOmM,YAA8B,IAAIA,OAgMvCkC,6CAGG,IAAI1C,GAAO,EAAG,EAAG,WACjB,IAAIA,GAAO,EAAG,EAAG,WACjB,IAAIA,GAAO,EAAG,EAAG,oDAGtB,IAAI0C,GAAUzgB,KAAKsc,qCAGrB7O,EAASqR,EAAS4B,eAClB9B,GAAG5e,KAAKyN,QACRoR,GAAG7e,KAAK8e,QACR6B,GAAG3gB,KAAK0gB,GACNpE,kCAGJc,eACEwB,GAAG5e,KAAKod,EAAMwB,SACdC,GAAG7e,KAAKod,EAAMyB,SACd8B,GAAG3gB,KAAKod,EAAMuD,IACZrE,uDAIFsC,GAAGgC,OAAO,EAAG,EAAG,QAChB/B,GAAG+B,OAAO,EAAG,EAAG,QAChBD,GAAGC,OAAO,EAAG,EAAG,GACdtE,mDAIFsC,GAAGze,eACH0e,GAAG1e,eACHwgB,GAAGxgB,UACDmc,sCAGAgD,eACFV,GAAGW,QAAQD,EAAEV,SACbC,GAAGU,QAAQD,EAAET,SACb8B,GAAGpB,QAAQD,EAAEqB,IACXrE,qCAGc8B,EAAaC,EAAaC,EAAalM,OACtD4M,EAAM1C,KAAKsC,GAAG1kB,EACdglB,EAAM5C,KAAKsC,GAAG7b,EACd8d,EAAMvE,KAAKsC,GAAGZ,EACdiB,EAAM3C,KAAKuC,GAAG3kB,EACdilB,EAAM7C,KAAKuC,GAAG9b,EACd+d,EAAMxE,KAAKuC,GAAGb,EACd+C,EAAMzE,KAAKqE,GAAGzmB,EACd8mB,EAAM1E,KAAKqE,GAAG5d,EACdke,EAAM3E,KAAKqE,GAAG3C,EAChBe,EACFC,GAAOG,EAAM8B,EAAMH,EAAME,GAAO9B,GAAO4B,EAAMC,EAAM9B,EAAMgC,GAAOJ,GAAO5B,EAAM+B,EAAM7B,EAAM4B,UAC/E,IAARhC,IACFA,EAAM,EAAMA,GAEd3M,EAAIlY,EACF6kB,GACCX,GAAOe,EAAM8B,EAAMH,EAAME,GACxB3C,GAAOyC,EAAMC,EAAM9B,EAAMgC,GACzB3C,GAAOW,EAAM+B,EAAM7B,EAAM4B,IAC7B3O,EAAIrP,EACFgc,GACCC,GAAOX,EAAM4C,EAAM3C,EAAM0C,GACxB9B,GAAOZ,EAAMyC,EAAM3C,EAAM6C,GACzBJ,GAAOzC,EAAM4C,EAAM3C,EAAM0C,IAC7B3O,EAAI4L,EACFe,GACCC,GAAOG,EAAMb,EAAMwC,EAAMzC,GACxBa,GAAO4B,EAAM1C,EAAMa,EAAMX,GACzBuC,GAAO5B,EAAMZ,EAAMc,EAAMf,IACtBhM,kCAGagM,EAAaC,EAAajM,OACxC4M,EAAM1C,KAAKsC,GAAG1kB,EACd+kB,EAAM3C,KAAKuC,GAAG3kB,EACdglB,EAAM5C,KAAKsC,GAAG7b,EACdoc,EAAM7C,KAAKuC,GAAG9b,EAChBgc,EAAcC,EAAMG,EAAMF,EAAMC,SACxB,IAARH,IACFA,EAAM,EAAMA,GAEd3M,EAAIlY,EAAI6kB,GAAOI,EAAMf,EAAMa,EAAMZ,GACjCjM,EAAIrP,EAAIgc,GAAOC,EAAMX,EAAMa,EAAMd,GAC1BhM,uCAGIkN,OACL1lB,EAAI0iB,KAAKsC,GAAG1kB,EACZG,EAAIiiB,KAAKuC,GAAG3kB,EACZwP,EAAI4S,KAAKsC,GAAG7b,EACZ5F,EAAImf,KAAKuC,GAAG9b,EAEdgc,EAAMnlB,EAAIuD,EAAI9C,EAAIqP,EACV,IAARqV,IACFA,EAAM,EAAMA,GAGdO,EAAEV,GAAG1kB,EAAI6kB,EAAM5hB,EACfmiB,EAAET,GAAG3kB,GAAK6kB,EAAM1kB,EAChBilB,EAAEV,GAAGZ,EAAI,EACTsB,EAAEV,GAAG7b,GAAKgc,EAAMrV,EAChB4V,EAAET,GAAG9b,EAAIgc,EAAMnlB,EACf0lB,EAAET,GAAGb,EAAI,EACTsB,EAAEqB,GAAGzmB,EAAI,EACTolB,EAAEqB,GAAG5d,EAAI,EACTuc,EAAEqB,GAAG3C,EAAI,0CAGKsB,OACVP,EAAchB,GAAOmD,QAAQ5E,KAAKsC,GAAIb,GAAOoD,UAAU7E,KAAKuC,GAAIvC,KAAKqE,GAAI5C,GAAOhgB,OACxE,IAARghB,IACFA,EAAM,EAAIA,OAGNC,EAAc1C,KAAKsC,GAAG1kB,EAC1B+kB,EAAc3C,KAAKuC,GAAG3kB,EACtB6mB,EAAczE,KAAKqE,GAAGzmB,EAClBilB,EAAc7C,KAAKuC,GAAG9b,EAC1Bie,EAAc1E,KAAKqE,GAAG5d,EAClBke,EAAc3E,KAAKqE,GAAG3C,EAE5BsB,EAAEV,GAAG1kB,EAAI6kB,GAAOI,EAAM8B,EAAMD,EAAMA,GAClC1B,EAAEV,GAAG7b,EAAIgc,GAAOgC,EAAMC,EAAM/B,EAAMgC,GAClC3B,EAAEV,GAAGZ,EAAIe,GAAOE,EAAM+B,EAAMD,EAAM5B,GAElCG,EAAET,GAAG3kB,EAAIolB,EAAEV,GAAG7b,EACduc,EAAET,GAAG9b,EAAIgc,GAAOC,EAAMiC,EAAMF,EAAMA,GAClCzB,EAAET,GAAGb,EAAIe,GAAOgC,EAAM9B,EAAMD,EAAMgC,GAElC1B,EAAEqB,GAAGzmB,EAAIolB,EAAEV,GAAGZ,EACdsB,EAAEqB,GAAG5d,EAAIuc,EAAET,GAAGb,EACdsB,EAAEqB,GAAG3C,EAAIe,GAAOC,EAAMG,EAAMF,EAAMA,sCAGL5O,EAAYpP,EAAQmR,OAC3CsL,EAAczc,EAAE/G,EACpByjB,EAAc1c,EAAE8B,EAChBqe,EAAcngB,EAAE+c,SAClB5L,EAAIlY,EAAImW,EAAEuO,GAAG1kB,EAAIwjB,EAAMrN,EAAEwO,GAAG3kB,EAAIyjB,EAAMtN,EAAEsQ,GAAGzmB,EAAIknB,EAC/ChP,EAAIrP,EAAIsN,EAAEuO,GAAG7b,EAAI2a,EAAMrN,EAAEwO,GAAG9b,EAAI4a,EAAMtN,EAAEsQ,GAAG5d,EAAIqe,EAC/ChP,EAAI4L,EAAI3N,EAAEuO,GAAGZ,EAAIN,EAAMrN,EAAEwO,GAAGb,EAAIL,EAAMtN,EAAEsQ,GAAG3C,EAAIoD,EACxChP,oCAGuB/B,EAAYnW,EAAW6I,EAAWib,EAAW5L,UAC3EA,EAAIlY,EAAImW,EAAEuO,GAAG1kB,EAAIA,EAAImW,EAAEwO,GAAG3kB,EAAI6I,EAAIsN,EAAEsQ,GAAGzmB,EAAI8jB,EAC3C5L,EAAIrP,EAAIsN,EAAEuO,GAAG7b,EAAI7I,EAAImW,EAAEwO,GAAG9b,EAAIA,EAAIsN,EAAEsQ,GAAG5d,EAAIib,EAC3C5L,EAAI4L,EAAI3N,EAAEuO,GAAGZ,EAAI9jB,EAAImW,EAAEwO,GAAGb,EAAIjb,EAAIsN,EAAEsQ,GAAG3C,EAAIA,EACpC5L,mCAGqB/B,EAAYpP,EAAOmR,OACzCsL,EAAczc,EAAE/G,EACpByjB,EAAc1c,EAAE8B,SAClBqP,EAAIlY,EAAImW,EAAEuO,GAAG1kB,EAAIwjB,EAAMrN,EAAEwO,GAAG3kB,EAAIyjB,EAChCvL,EAAIrP,EAAIsN,EAAEuO,GAAG7b,EAAI2a,EAAMrN,EAAEwO,GAAG9b,EAAI4a,EACzBvL,mCAGqB/B,EAAYnW,EAAW6I,EAAWqP,UAC9DA,EAAIlY,EAAImW,EAAEuO,GAAG1kB,EAAIA,EAAImW,EAAEwO,GAAG3kB,EAAI6I,EAC9BqP,EAAIrP,EAAIsN,EAAEuO,GAAG7b,EAAI7I,EAAImW,EAAEwO,GAAG9b,EAAIA,EACvBqP,WAxKOqO,YAA8B,IAAIA,OA6KvC/iB,+BAMCod,yDAAQ,mBAHhB9gB,WACAA,SAGGqO,EAAIrN,KAAK6hB,IAAI/B,QACbpR,EAAI1O,KAAK+hB,IAAIjC,oDAIX,IAAIpd,GAAQsC,KAAKsc,mCAGrBc,eACE/U,EAAI+U,EAAM/U,OACVqB,EAAI0T,EAAM1T,EACR4S,sCAGAxB,eACFzS,EAAIrN,KAAK6hB,IAAI/B,QACbpR,EAAI1O,KAAK+hB,IAAIjC,GACXwB,uDAIFjU,EAAI,OACJqB,EAAI,EACF4S,+CAIAthB,KAAKmiB,MAAMb,KAAKjU,EAAGiU,KAAK5S,oCAGV0I,UACrBA,EAAIlY,EAAIoiB,KAAK5S,EACb0I,EAAIrP,EAAIuZ,KAAKjU,EACN+J,mCAGcA,UACrBA,EAAIlY,GAAKoiB,KAAKjU,EACd+J,EAAIrP,EAAIuZ,KAAK5S,EACN0I,kCAGIxU,EAAU6C,EAAU2R,OAKzBiP,EAAczjB,EAAE8L,EACpB4X,EAAc1jB,EAAEyK,EACZkZ,EAAc9gB,EAAEiJ,EACpB8X,EAAc/gB,EAAE4H,SAClB+J,EAAI/J,EAAIiZ,EAAMC,EAAMF,EAAMG,EAC1BpP,EAAI1I,EAAI2X,EAAME,EAAMD,EAAME,EACnBpP,iCAGKxU,EAAU6C,EAAU2R,OAK1BiP,EAAczjB,EAAE8L,EACpB4X,EAAc1jB,EAAEyK,EACZkZ,EAAc9gB,EAAEiJ,EACpB8X,EAAc/gB,EAAE4H,SAClB+J,EAAI/J,EAAIgZ,EAAMG,EAAMF,EAAMC,EAC1BnP,EAAI1I,EAAI2X,EAAME,EAAMD,EAAME,EACnBpP,gCAGkBxU,EAAUqD,EAAOmR,OACpCiP,EAAczjB,EAAE8L,EACpB4X,EAAc1jB,EAAEyK,EACZqV,EAAczc,EAAE/G,EACpByjB,EAAc1c,EAAE8B,SAClBqP,EAAIlY,EAAImnB,EAAM3D,EAAM4D,EAAM3D,EAC1BvL,EAAIrP,EAAIue,EAAM5D,EAAM2D,EAAM1D,EACnBvL,iCAGmBxU,EAAUqD,EAAOmR,OACrCiP,EAAczjB,EAAE8L,EACpB4X,EAAc1jB,EAAEyK,EACZqV,EAAczc,EAAE/G,EACpByjB,EAAc1c,EAAE8B,SAClBqP,EAAIlY,EAAImnB,EAAM3D,EAAM4D,EAAM3D,EAC1BvL,EAAIrP,GAAKue,EAAM5D,EAAM2D,EAAM1D,EACpBvL,WA7FO1U,YAA4B,IAAIA,OAmGrCO,4CAGU,IAAIJ,UACL,IAAIH,oDAGf,IAAIO,GAAc+B,KAAKsc,mCAG3Bc,eACEvd,EAAEG,KAAKod,EAAMvd,QACbjC,EAAEoC,KAAKod,EAAMxf,GACX0e,uDAIFzc,EAAEM,eACFvC,EAAE6jB,cACAnF,iDAGWoF,EAAc9jB,eAC3BiC,EAAEG,KAAK0hB,QACP9jB,EAAEoC,KAAKpC,GACL0e,8CAGQlX,EAASxL,eACnBiG,EAAEG,KAAKoF,QACPxH,EAAE8hB,SAAS9lB,GACT0iB,yCAGGoF,eACL7hB,EAAEG,KAAK0hB,GACLpF,2CAGKpiB,EAAW6I,eAClBlD,EAAEe,IAAI1G,EAAG6I,GACPuZ,yCAGGqF,eACL/jB,EAAEoC,KAAK2hB,GACLrF,8CAGQgB,eACV1f,EAAE8hB,SAASpC,GACThB,kDAIAA,KAAKzc,+CAILyc,KAAK1e,oDAIL0e,KAAK1e,EAAEgkB,qDAIPtF,KAAK1e,EAAEgkB,2CAGcC,EAAgB5gB,EAAOmR,OAI7C0P,EAAgBD,EAAEjkB,EAAE8L,EACxBqY,EAAgBF,EAAEjkB,EAAEyK,EAChBqV,EAAczc,EAAE/G,EACpByjB,EAAc1c,EAAE8B,SAClBqP,EAAIlY,EAAI4nB,EAAQpE,EAAMqE,EAAQpE,EAAMkE,EAAEhiB,EAAE3F,EACxCkY,EAAIrP,EAAIgf,EAAQrE,EAAMoE,EAAQnE,EAAMkE,EAAEhiB,EAAEkD,EACjCqP,iCAGsByP,EAAgB5gB,EAAOmR,OAM9C0P,EAAgBD,EAAEjkB,EAAE8L,EACxBqY,EAAgBF,EAAEjkB,EAAEyK,EAChB2Z,EAAc/gB,EAAE/G,EAAI2nB,EAAEhiB,EAAE3F,EACxB+nB,EAAchhB,EAAE8B,EAAI8e,EAAEhiB,EAAEkD,SAC9BqP,EAAIlY,EAAI4nB,EAAQE,EAAMD,EAAQE,EAC9B7P,EAAIrP,GAAKgf,EAAQC,EAAMF,EAAQG,EACxB7P,gCAGI/B,EAAgBE,EAAgB6B,UAC3C1U,GAAMwkB,MAAM7R,EAAEzS,EAAG2S,EAAE3S,EAAGwU,EAAIxU,GAC1BC,GAAOskB,MAAMzkB,GAAM+N,MAAM4E,EAAEzS,EAAG2S,EAAE1Q,EAAGuS,EAAIvS,GAAIwQ,EAAExQ,EAAGuS,EAAIvS,GAC7CuS,iCAGK/B,EAAgBE,EAAgB6B,UAC5C1U,GAAM0kB,OAAO/R,EAAEzS,EAAG2S,EAAE3S,EAAGwU,EAAIxU,GAC3BF,GAAMC,OAAO0S,EAAEzS,EAAGC,GAAOU,MAAMgS,EAAE1Q,EAAGwQ,EAAExQ,EAAGuS,EAAIvS,GAAIuS,EAAIvS,GAC9CuS,WA1GOnU,YAAkC,IAAIA,OAkH3CokB,sDACY,IAAIxkB,WACb,IAAIA,UACL,IAAIA,WACZ7D,WACDA,gBACKA,SAGFsoB,GAAK,OACL1oB,EAAI,OACJ2oB,OAAS,mDAIP,IAAIF,GAAUriB,KAAKsc,mCAGvBc,eACEoF,YAAYxiB,KAAKod,EAAMoF,kBACvBjV,GAAGvN,KAAKod,EAAM7P,SACd7D,EAAE1J,KAAKod,EAAM1T,QACb4Y,GAAKlF,EAAMkF,QACX1oB,EAAIwjB,EAAMxjB,OACV2oB,OAASnF,EAAMmF,OACbjG,0CAGIxD,EAAiB2J,OACtBC,EAAiB,EAAMD,EAC7B3J,EAAGjZ,EAAE3F,EAAIwoB,EAAiBpG,KAAK/O,GAAGrT,EAAIuoB,EAAOnG,KAAK5S,EAAExP,EACpD4e,EAAGjZ,EAAEkD,EAAI2f,EAAiBpG,KAAK/O,GAAGxK,EAAI0f,EAAOnG,KAAK5S,EAAE3G,MAC9C+X,EAAQ4H,EAAiBpG,KAAKgG,GAAKG,EAAOnG,KAAK1iB,SACrDkf,EAAGlb,EAAE8hB,SAAS5E,GAEdhC,EAAGjZ,EAAE+B,QAAQlE,GAAM+N,MAAMqN,EAAGlb,EAAG0e,KAAKkG,YAAa3kB,GAAOE,OACjD+a,kCAGD6J,OAEAF,GAAgBE,EAAQrG,KAAKiG,SAAW,EAAMjG,KAAKiG,QACnDG,EAAyB,EAAID,OAC9BlV,GAAGrT,EAAIwoB,EAAiBpG,KAAK/O,GAAGrT,EAAIuoB,EAAOnG,KAAK5S,EAAExP,OAClDqT,GAAGxK,EAAI2f,EAAiBpG,KAAK/O,GAAGxK,EAAI0f,EAAOnG,KAAK5S,EAAE3G,OAClDuf,GAAKI,EAAiBpG,KAAKgG,GAAKG,EAAOnG,KAAK1iB,OAC5C2oB,OAASI,0CAIRxlB,EAAIsf,GAAYzhB,KAAKsK,MAAMgX,KAAKgG,GAAK7F,SACtC6F,IAAMnlB,OACNvD,GAAKuD,WkBxpCDylB,+BAWCniB,yDAAI,GAAKqX,yDAAI,GAAKzd,yDAAI,GAAKT,yDAAI,mBALvCI,WACAA,WACAA,WACAA,SAGGyG,EAAIA,OACJqX,EAAIA,OACJzd,EAAIA,OACJT,EAAIA,mDAIF,IAAIgpB,GAAU5iB,KAAKsc,mCAGvBc,eACE3c,EAAI2c,EAAM3c,OACVqX,EAAIsF,EAAMtF,OACVzd,EAAI+iB,EAAM/iB,OACVT,EAAIwjB,EAAMxjB,EACR0iB,qCAGD/F,UACC+F,KAAK7b,IAAM8V,EAAM9V,GAAK6b,KAAKxE,IAAMvB,EAAMuB,GAAKwE,KAAKjiB,IAAMkc,EAAMlc,GAAKiiB,KAAK1iB,IAAM2c,EAAM3c,0CAIxE,IAAX0iB,KAAK7b,GAAsB,IAAX6b,KAAKxE,GAAsB,IAAXwE,KAAKjiB,GAAsB,IAAXiiB,KAAK1iB,8BAG1D6G,EAAWqX,EAAWzd,OAAWT,yDAAY0iB,KAAK1iB,OAC/Cie,QAAQpX,EAAGqX,EAAGzd,EAAGT,sCAGb6G,EAAWqX,EAAWzd,eAC1BoG,EAAIA,EAAI,SACRqX,EAAIA,EAAI,SACRzd,EAAIA,EAAI,IACNiiB,yCAGG7b,EAAWqX,EAAWzd,EAAWT,eACtC6G,EAAIA,EAAI,SACRqX,EAAIA,EAAI,SACRzd,EAAIA,EAAI,SACRT,EAAIA,EAAI,IACN0iB,oCAGFuG,EAAYC,EAAYC,eACxBtiB,EAAIoiB,OACJ/K,EAAIgL,OACJzoB,EAAI0oB,EACFzG,qCAGDuG,EAAYC,EAAYC,EAAYC,eACrCviB,EAAIoiB,OACJ/K,EAAIgL,OACJzoB,EAAI0oB,OACJnpB,EAAIopB,EACF1G,qCAGD/F,eACD9V,GAAK8V,EAAM9V,OACXqX,GAAKvB,EAAMuB,OACXzd,GAAKkc,EAAMlc,OACXT,GAAK2c,EAAM3c,EACT0iB,iCAGW/F,EAAanE,UAC/BA,EAAI3R,EAAI6b,KAAK7b,EAAI8V,EAAM9V,EACvB2R,EAAI0F,EAAIwE,KAAKxE,EAAIvB,EAAMuB,EACvB1F,EAAI/X,EAAIiiB,KAAKjiB,EAAIkc,EAAMlc,EACvB+X,EAAIxY,EAAI0iB,KAAK1iB,EAAI2c,EAAM3c,EAChBwY,kCAGDmE,eACD9V,GAAK8V,EAAM9V,OACXqX,GAAKvB,EAAMuB,OACXzd,GAAKkc,EAAMlc,OACXT,GAAK2c,EAAM3c,EACT0iB,iCAGW/F,EAAanE,UAC/BA,EAAI3R,EAAI6b,KAAK7b,EAAI8V,EAAM9V,EACvB2R,EAAI0F,EAAIwE,KAAKxE,EAAIvB,EAAMuB,EACvB1F,EAAI/X,EAAIiiB,KAAKjiB,EAAIkc,EAAMlc,EACvB+X,EAAIxY,EAAI0iB,KAAK1iB,EAAI2c,EAAM3c,EAChBwY,kCAGD/J,eACD5H,GAAK4H,OACLyP,GAAKzP,OACLhO,GAAKgO,OACLzO,GAAKyO,EACHiU,iCAGWjU,EAAW+J,UAC7BA,EAAI3R,EAAI6b,KAAK7b,EAAI4H,EACjB+J,EAAI0F,EAAIwE,KAAKxE,EAAIzP,EACjB+J,EAAI/X,EAAIiiB,KAAKjiB,EAAIgO,EACjB+J,EAAIxY,EAAI0iB,KAAK1iB,EAAIyO,EACV+J,8BAGL6Q,EAAgBC,GAClBN,EAAQO,UAAU7G,KAAM2G,EAAUC,iDAkBpBP,yDAAgBrG,KAAK1iB,SAC5BgpB,EAAQQ,gBAAgB9G,KAAK7b,EAAG6b,KAAKxE,EAAGwE,KAAKjiB,EAAGsoB,uCAhBxCU,EAAcC,EAAcJ,OACrCK,EAAKL,GAAYI,EAAO7iB,EAAI4iB,EAAO5iB,GACnC+iB,EAAKN,GAAYI,EAAOxL,EAAIuL,EAAOvL,GACnC2L,EAAKP,GAAYI,EAAOjpB,EAAIgpB,EAAOhpB,GACnCqpB,EAAKR,GAAYI,EAAO1pB,EAAIypB,EAAOzpB,GACzCypB,EAAO5iB,GAAK8iB,EACZF,EAAOvL,GAAK0L,EACZH,EAAOhpB,GAAKopB,EACZJ,EAAOzpB,GAAK8pB,EACZJ,EAAO7iB,GAAK8iB,EACZD,EAAOxL,GAAK0L,EACZF,EAAOjpB,GAAKopB,EACZH,EAAO1pB,GAAK8pB,0CAOSjjB,EAAWqX,EAAWzd,OAAWT,yDAAI,SAE1D6G,GAAK,IACLqX,GAAK,IACLzd,GAAK,IAEDT,EAAI,iBACS6G,cAAKqX,cAAKzd,cAAKT,qBAEhB6G,cAAKqX,cAAKzd,gBAvJZuoB,QAA0B,IAAIA,GAAQ,EAAG,EAAG,EAAG,GAE/CA,OAAyB,IAAIA,GAAQ,EAAG,EAAG,GAC3CA,SAA2B,IAAIA,GAAQ,EAAG,EAAG,GAC7CA,QAA0B,IAAIA,GAAQ,EAAG,EAAG,OAsKxCe,mGAGXlL,QACFmL,YAAcnL,4CAIZ6D,KAAKsH,gDAGFnL,QACLmL,aAAenL,qCAGXA,QACJmL,cAAgBnL,WCtMZoL,kDACD7pB,SAID8pB,QAAUC,YAAYC,4DAOtBF,QAAUC,YAAYC,MAEtB1H,sDAMEyH,YAAYC,MAAQ1H,KAAKwH,iBChBzBG,yBAICC,0BAFF,OAGHC,QAAUrqB,EAAgBoqB,yDAI1BpnB,QAAU,EACRwf,kCAGJ8H,GACC9H,KAAKxf,QAAUwf,KAAK6H,QAAQzqB,YACzByqB,QAAQ7H,KAAKxf,SAAWsnB,OAExBD,QAAQ1J,KAAK2J,KAElB9H,KAAKxf,yCAKc,IAAjBwf,KAAKxf,cACD,IAAI2H,QAEV6X,KAAKxf,YACDsnB,EAAU9H,KAAK6H,QAAQ7H,KAAKxf,qBAC7BqnB,QAAQ7H,KAAKxf,SAAW,KACtBsnB,4CAIA9H,KAAKxf,iBnB5BHunB,mDACmBxmB,GAAOymB,UAAU,mBACxBhI,KAAKiI,sBAClB,gBACCvqB,SAGJqF,SAAW,yCAGb+d,UACCA,EAAM9gB,aAAe8gB,EAAMmH,eACxBjoB,WAAaggB,KAAKiI,cAClBA,SAAS,GAAGvkB,KAAKod,EAAMmH,SAAS,SAChCA,SAAS,GAAGvkB,KAAKod,EAAMmH,SAAS,UAEhCjoB,WAAa8gB,EAAM9gB,gBAErBQ,QAAUsgB,EAAMtgB,aAChBuC,SAAW+d,EAAM/d,SACfid,iDAIFhgB,WAAaggB,KAAKiI,cAClBznB,QAAU,OACVuC,SAAW,EACTid,sCAGAnF,EAAgBtL,GACvBsL,EAAMqN,mBAAmBlI,KAAMzQ,6CAGfxP,EAAoBiI,EAAejE,QAC9C/D,WAAaD,OACbS,QAAUwH,OACVjF,SAAWgB,qCAGPlD,WACLsnB,EAAY,EACZC,EAAoB7mB,GAAO4D,MAAM6a,KAAKhgB,WAAW,GAAIa,GAChDtD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BP,EAAgBuE,GAAO4D,MAAM6a,KAAKhgB,WAAWzC,GAAIsD,GACnD7D,EAAQorB,IACVD,EAAY5qB,EACZ6qB,EAAYprB,UAITmrB,2CAGQtnB,WACXsnB,EAAY,EACZC,EAAoB7mB,GAAO4D,MAAM6a,KAAKhgB,WAAW,GAAIa,GAChDtD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BP,EAAgBuE,GAAO4D,MAAM6a,KAAKhgB,WAAWzC,GAAIsD,GACnD7D,EAAQorB,IACVD,EAAY5qB,EACZ6qB,EAAYprB,UAITgjB,KAAKhgB,WAAWmoB,mDAIhBnI,KAAKxf,0CAGJ+O,UAEDyQ,KAAKhgB,WAAWuP,YAId8Y,iDACF3qB,eACD,cACoC,CAAC,EAAG,EAAG,eACP,CAAC,EAAG,EAAG,QAG5C4qB,OAAS,wDAITA,OAAS,OACTtgB,MAAQ,EACNgY,cAIEuI,iDACwB,IAAIR,eACJ,IAAIA,mBACJ,IAAIpmB,mBACJ,IAAIA,kBAC5B,wDAGJnC,OAAOoI,aACPnI,OAAOmI,aACPlI,WAAWylB,mBACXxlB,WAAWwlB,mBACXtiB,UAAW,EACTmd,cAIEwI,iDACe,IAAIjnB,eACJ,IAAIA,iBACnB7D,oBACE,OAGN+E,SAAW,wDAIXF,OAAOsB,eACPrB,OAAOqB,eACPpB,SAAW,OACXE,WAAa,EACXqd,cAKEyI,GAAb,mCACqC,IAAIV,eACJ,IAAIA,mBACJ,IAAIpmB,mBACJ,IAAIA,qBACP,IAAIJ,IAIzBmnB,GAMX,kCALyB,IAAInnB,eACH,IAAIA,eACrB7D,oBACI,OAGNkG,OAAS,GAgBLtE,GAAc,iDAXjB,aACA,gBACG,iDAGJC,MAAQ,OACR4C,MAAQ,OACRE,SAAW,YAMPsmB,6CACW,IAAIpnB,WACJ,IAAIA,UACL,IAAIA,UACrB7D,gBACK,cACA,OAGFJ,EAAI,yCAGNwjB,eACEhf,GAAG4B,KAAKod,EAAMhf,SACdE,GAAG0B,KAAKod,EAAM9e,SACdE,EAAEwB,KAAKod,EAAM5e,QACb5E,EAAIwjB,EAAMxjB,OACVmD,OAASqgB,EAAMrgB,YACfC,OAASogB,EAAMpgB,OACbsf,cAIE4I,kDACD,YACuB,IAAID,aACJ,IAAIA,aACJ,IAAIA,QAI9B3oB,WAAa,CAACggB,KAAK6I,KAAM7I,KAAK8I,KAAM9I,KAAK+I,kDAI9C3pB,EACAI,EACAE,EACAD,EACAE,QAKKa,QAAUpB,EAAM4I,cACfjI,EAA8BigB,KAAKhgB,WAChCzC,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BoH,EAAqB5E,EAASxC,GACpCoH,EAAElE,OAASrB,EAAMqB,OAAOlD,GACxBoH,EAAEjE,OAAStB,EAAMsB,OAAOnD,OAClByrB,EAAkBxpB,EAAOqC,UAAU8C,EAAElE,QACrCwoB,EAAkBxpB,EAAOoC,UAAU8C,EAAEjE,QAC3CiB,GAAYC,MAAMlC,EAAYspB,EAASrkB,EAAE7C,IACzCH,GAAYC,MAAMjC,EAAYspB,EAAStkB,EAAE3C,IACzCT,GAAOU,MAAM0C,EAAE3C,GAAI2C,EAAE7C,GAAI6C,EAAEzC,GAC3ByC,EAAErH,EAAI,KAKJ0iB,KAAKxf,QAAU,EAAG,KACd0oB,EAAkB9pB,EAAMkpB,OACxBa,EAAkBnJ,KAAKoJ,aACzBD,EAAU,GAAMD,GAAW,EAAIA,EAAUC,GAAWA,EAAUlmB,WAE3DzC,QAAU,MAKE,IAAjBwf,KAAKxf,QAAe,KAChBmE,EAAqB5E,EAAS,GACpC4E,EAAElE,OAAS,EACXkE,EAAEjE,OAAS,MACLsoB,EAAkBxpB,EAAOqC,UAAU,GACnConB,EAAkBxpB,EAAOoC,UAAU,GACzCF,GAAYC,MAAMlC,EAAYspB,EAASrkB,EAAE7C,IACzCH,GAAYC,MAAMjC,EAAYspB,EAAStkB,EAAE3C,IACzCT,GAAOU,MAAM0C,EAAE3C,GAAI2C,EAAE7C,GAAI6C,EAAEzC,GAC3ByC,EAAErH,EAAI,OACDkD,QAAU,sCAIRpB,GACTA,EAAMkpB,OAAStI,KAAKoJ,YACpBhqB,EAAM4I,MAAQgY,KAAKxf,gBACbT,EAA8BigB,KAAKhgB,WAChCzC,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAClC6B,EAAMqB,OAAOlD,GAAKwC,EAASxC,GAAGkD,OAC9BrB,EAAMsB,OAAOnD,GAAKwC,EAASxC,GAAGmD,kDAIfoV,OACX9N,EAAQgY,KAAKxf,WACL,IAAVwH,EACFzG,GAAOC,KAAKwe,KAAK6I,KAAK3mB,EAAG4T,QACpB,GAAc,IAAV9N,EAAa,KAChBqhB,EAAc9nB,GAAOU,MAAM+d,KAAK8I,KAAK5mB,EAAG8d,KAAK6I,KAAK3mB,EAAG4T,GACvCvU,GAAOkV,QAAQ4S,EAAK9nB,GAAOC,KAAKwe,KAAK6I,KAAK3mB,EAAGX,GAAOE,OAC9D,EAERF,GAAO+nB,UAAUD,EAAKvT,GAGtBvU,GAAOgR,UAAU8W,EAAKvT,QAGxBA,EAAIjS,iBAECiS,0CAuBOA,OACR9N,EAAQgY,KAAKxf,eAML,IAAVwH,EACF8N,EAAIpS,KAAKsc,KAAK6I,KAAK3mB,GACA,IAAV8F,EACT8N,EAAIxR,IACF0b,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK3mB,EAAEtE,EAAIoiB,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAK5mB,EAAEtE,EACxDoiB,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK3mB,EAAEuE,EAAIuZ,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAK5mB,EAAEuE,GAI1DqP,EAAIjS,UAECiS,2CAGQtJ,EAAYG,UACnBqT,KAAKxf,cACN,aAIA,EACHgM,EAAG9I,KAAKsc,KAAK6I,KAAK/mB,IAClB6K,EAAGjJ,KAAKsc,KAAK6I,KAAK7mB,eAGf,EACHwK,EAAG5O,EAAIoiB,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK/mB,GAAGlE,EAAIoiB,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAKhnB,GAAGlE,EACjE4O,EAAG/F,EAAIuZ,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK/mB,GAAG2E,EAAIuZ,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAKhnB,GAAG2E,EACjEkG,EAAG/O,EAAIoiB,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK7mB,GAAGpE,EAAIoiB,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAK9mB,GAAGpE,EACjE+O,EAAGlG,EAAIuZ,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK7mB,GAAGyE,EAAIuZ,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAK9mB,GAAGyE,aAG9D,EACHkG,EAAG/O,EAAI4O,EAAG5O,EACRoiB,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK/mB,GAAGlE,EAC3BoiB,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAKhnB,GAAGlE,EAC3BoiB,KAAK+I,KAAKzrB,EAAI0iB,KAAK+I,KAAKjnB,GAAGlE,EAC7B+O,EAAGlG,EAAI+F,EAAG/F,EACRuZ,KAAK6I,KAAKvrB,EAAI0iB,KAAK6I,KAAK/mB,GAAG2E,EAC3BuZ,KAAK8I,KAAKxrB,EAAI0iB,KAAK8I,KAAKhnB,GAAG2E,EAC3BuZ,KAAK+I,KAAKzrB,EAAI0iB,KAAK+I,KAAKjnB,GAAG2E,8CAUZ,IAAjBuZ,KAAKxf,QACAe,GAAOmB,WAAWsd,KAAK6I,KAAK3mB,EAAG8d,KAAK8I,KAAK5mB,GACtB,IAAjB8d,KAAKxf,QACPe,GAAOkV,QACZlV,GAAOU,MAAM+d,KAAK8I,KAAK5mB,EAAG8d,KAAK6I,KAAK3mB,EAAGX,GAAOE,MAC9CF,GAAOU,MAAM+d,KAAK+I,KAAK7mB,EAAG8d,KAAK6I,KAAK3mB,EAAGX,GAAOiD,OAG3C,uCAID+kB,EAAavJ,KAAK6I,KAAK3mB,EACvBsnB,EAAaxJ,KAAK8I,KAAK5mB,EACvBmnB,EAAc9nB,GAAOU,MAAMunB,EAAID,EAAIX,EAAUa,OAG7CC,GAAiBnoB,GAAO4D,MAAMokB,EAAIF,MACpCK,GAAS,cAENb,KAAKvrB,EAAI,YACTkD,QAAU,OAKXmpB,EAAgBpoB,GAAO4D,MAAMqkB,EAAIH,MACnCM,GAAS,cAENb,KAAKxrB,EAAI,OACTkD,QAAU,YACVqoB,KAAKnlB,KAAKsc,KAAK8I,UAKhBc,EAAkB,GAAKD,EAAQD,QAChCb,KAAKvrB,EAAIqsB,EAAQC,OACjBd,KAAKxrB,EAAIosB,EAAQE,OACjBppB,QAAU,uCAIT+oB,EAAavJ,KAAK6I,KAAK3mB,EACvBsnB,EAAaxJ,KAAK8I,KAAK5mB,EACvB2nB,EAAa7J,KAAK+I,KAAK7mB,EAMvBmnB,EAAc9nB,GAAOU,MAAMunB,EAAID,EAAIX,EAAUa,OAC7CK,EAAgBvoB,GAAO4D,MAAMokB,EAAIF,GAEjCM,EADgBpoB,GAAO4D,MAAMqkB,EAAIH,GAEjCK,GAAiBI,EAMjBC,EAAcxoB,GAAOU,MAAM4nB,EAAIN,EAAIX,EAAUoB,OAC7CC,EAAgB1oB,GAAO4D,MAAMokB,EAAIQ,GAEjCG,EADgB3oB,GAAO4D,MAAM0kB,EAAIE,GAEjCI,GAAiBF,EAMjBG,EAAc7oB,GAAOU,MAAM4nB,EAAIL,EAAIZ,EAAUyB,OAC7CC,EAAgB/oB,GAAO4D,MAAMqkB,EAAIY,GAEjCG,EADgBhpB,GAAO4D,MAAM0kB,EAAIO,GAEjCI,GAAiBF,EAGjBG,EAAelpB,GAAOkV,QAAQ4S,EAAKU,GAEnCW,EAAiBD,EAAOlpB,GAAOkV,QAAQ+S,EAAIK,GAC3Cc,EAAiBF,EAAOlpB,GAAOkV,QAAQoT,EAAIN,GAC3CqB,EAAiBH,EAAOlpB,GAAOkV,QAAQ8S,EAAIC,MAG7CE,GAAS,GAAKS,GAAS,OACpBtB,KAAKvrB,EAAI,OACTkD,QAAU,OAIZ,GAAImpB,EAAQ,GAAKD,EAAQ,GAAKkB,GAAU,EAAG,KACxChB,EAAkB,GAAOD,EAAQD,QAClCb,KAAKvrB,EAAIqsB,EAAQC,OACjBd,KAAKxrB,EAAIosB,EAAQE,OACjBppB,QAAU,OAIZ,GAAI0pB,EAAQ,GAAKC,EAAQ,GAAKQ,GAAU,EAAG,KACxCE,EAAkB,GAAOX,EAAQC,QAClCtB,KAAKvrB,EAAI4sB,EAAQW,OACjB9B,KAAKzrB,EAAI6sB,EAAQU,OACjBrqB,QAAU,OACVsoB,KAAKplB,KAAKsc,KAAK+I,WAIjB,GAAIY,GAAS,GAAKa,GAAS,OACzB1B,KAAKxrB,EAAI,OACTkD,QAAU,OACVqoB,KAAKnlB,KAAKsc,KAAK8I,WAIjB,GAAIoB,GAAS,GAAKK,GAAS,OACzBxB,KAAKzrB,EAAI,OACTkD,QAAU,OACVqoB,KAAKnlB,KAAKsc,KAAK+I,WAIjB,GAAIwB,EAAQ,GAAKC,EAAQ,GAAKE,GAAU,EAAG,KACxCI,EAAkB,GAAOP,EAAQC,QAClC1B,KAAKxrB,EAAIitB,EAAQO,OACjB/B,KAAKzrB,EAAIktB,EAAQM,OACjBtqB,QAAU,OACVqoB,KAAKnlB,KAAKsc,KAAK+I,UACf,KAECgC,EAAmB,GAAOL,EAASC,EAASC,QAC7C/B,KAAKvrB,EAAIotB,EAASK,OAClBjC,KAAKxrB,EAAIqtB,EAASI,OAClBhC,KAAKzrB,EAAIstB,EAASG,OAClBvqB,QAAU,YAIJooB,SAAgB,IAAIrnB,GACpBqnB,SAAgB,IAAIrnB,GACpBqnB,SAAgB,IAAIrnB,GAGrC,IAAM1B,GAAkC,IAAI+oB,GACtCzoB,GAA+C,CAAC,EAAG,EAAG,GACtDE,GAA+C,CAAC,EAAG,EAAG,GACtDoD,GAAyB,IAAIlC,GAC7BR,GAAyB,IAAIQ,GAC7B4B,GAA8B,IAAI5B,GAClCG,GAAgC,IAAIH,GACpCQ,GAAgC,IAAIR,GAmJpC8C,GAAkB,IAAI9C,GACtBgD,GAAwB,IAAIqkB,GAC5BnkB,GAAmB,IAAIlD,GACvBmD,GAAmB,IAAInD,GACvBqD,GAAkB,IAAIrD,GACtB0D,GAAkB,IAAI1D,GACtBiE,GAAuB,IAAIjE,GAC3BkE,GAAuB,IAAIlE,GCzoBpBypB,+CACI,oBACQ,eACL,eACA,cACqB,cACA,+CAGjChL,KAAKiL,oBACFA,aAAe,OACfC,KAAOlL,KAAKmL,QAAWnL,KAAKoL,SAAW,EAAMpL,KAAKqL,QAAU,GAAOrL,KAAKsL,QAAU,IAElFtL,KAAKkL,mBAGNluB,QACDkuB,KAAOluB,OACPiuB,aAAe,OACfE,QAAsB,IAAZnL,KAAKkL,UACfE,QAAWpL,KAAKkL,OAAS,EAAK,SAC9BG,OAAUrL,KAAKkL,OAAS,GAAM,SAC9BI,OAAUtL,KAAKkL,OAAS,GAAM,0CAI5BlL,KAAKmL,sBAGHnuB,QACJmuB,QAAUnuB,OACViuB,aAAe,wCAIbjL,KAAKoL,sBAGHpuB,QACJouB,QAAUpuB,OACViuB,aAAe,uCAIbjL,KAAKqL,qBAGJruB,QACHquB,OAASruB,OACTiuB,aAAe,uCAIbjL,KAAKsL,qBAGJtuB,QACHsuB,OAAStuB,OACTiuB,aAAe,WAKXM,6CACqB,IAAIP,0CAE/BQ,eACExlB,IAAMwlB,EAAExlB,IACNga,4CAIA,IAAIuL,GAAc7nB,KAAKsc,yCAIvBA,KAAK3Y,GAAGrB,kBAGThJ,QACDqK,GAAGrB,IAAMhJ,WAcLyuB,qDACmB,IAAIlqB,sBAClB7D,wBACCA,YACU,IAAI6tB,QAGxBG,cAAgB,OAChBC,eAAiB,iDAQjB3e,WAAWnJ,eACX6nB,cAAgB,OAChBC,eAAiB,OACjBzlB,GAAGF,IAAM,+BAGXwlB,eACExe,WAAWtJ,KAAK8nB,EAAExe,iBAClB0e,cAAgBF,EAAEE,mBAClBC,eAAiBH,EAAEG,oBACnBzlB,GAAGxC,KAAK8nB,EAAEtlB,IACR8Z,yCAhBQ5iB,UACRD,EAAYC,GAAQ,SAACG,UAA+B,IAAIkuB,cA0CtDG,iDAC0BH,GAAgBzD,UAAU3hB,qBAChC,IAAI9E,mBACL,IAAIA,gCAErB,gDAGN,IAAIhE,EAAI,EAAGA,EAAI8I,KAAwB9I,OAErC0I,OAAO1I,GAAGqK,aAEZqF,YAAYpJ,eACZmJ,WAAWnJ,eACXkJ,aACAhH,WAAa,+BAGfylB,QACEzlB,WAAaylB,EAAEzlB,eACf,IAAIxI,EAAI,EAAGA,EAAI8I,KAAwB9I,OAErC0I,OAAO1I,GAAGmG,KAAK8nB,EAAEvlB,OAAO1I,gBAE1B0P,YAAYvJ,KAAK8nB,EAAEve,kBACnBD,WAAWtJ,KAAK8nB,EAAExe,iBAClBD,KAAOye,EAAEze,KACPiT,4CAIA,IAAI4L,GAAaloB,KAAKsc,eAIpB6L,iDACe,IAAItqB,eACFA,GAAOymB,UAAU3hB,qBACZ5I,EAAkB4I,iDAUjDgG,EACApI,EACA6nB,EACA5nB,EACA6nB,MAE4B,IAAxB1f,EAAStG,kBAITsG,EAASU,KAAmC,MACzC7J,OAAOoB,IAAI,EAAG,OACb/B,EAAiBZ,GAAYC,MACjCqC,EACAoI,EAASW,WACT6e,EAAgBG,qBAEZxpB,EAAiBb,GAAYC,MACjCsC,EACAmI,EAASpG,OAAO,GAAG+G,WACnB6e,EAAgBI,qBAEd1qB,GAAOuL,kBAAkBvK,EAAQC,GAAUvB,IAC7CM,GAAOU,MAAMO,EAAQD,EAAQyd,KAAK9c,QAAQmL,oBAGtC6d,EAAa3qB,GAAO4qB,UACxB5pB,EACAupB,EACA9L,KAAK9c,OACL2oB,EAAgBO,iBAEZC,EAAa9qB,GAAO+qB,UACxB9pB,EACAupB,EACA/L,KAAK9c,OACL2oB,EAAgBU,iBAElBhrB,GAAOiC,MAAM0oB,EAAIG,EAAIrM,KAAK/Z,OAAO,SAC5BumB,YAAY,GAAKjrB,GAAO4D,MAAM5D,GAAOU,MAAMoqB,EAAIH,EAAI3qB,GAAOE,MAAOue,KAAK9c,aACtE,OAAImJ,EAASU,KAAiC,CACnD3L,GAAM+N,MAAMlL,EAAI3C,EAAG+K,EAASY,YAAa+S,KAAK9c,gBACxCuP,EAAqB9Q,GAAYC,MACrCqC,EACAoI,EAASW,WACT6e,EAAgBY,yBAGTlvB,EAAI,EAAGA,EAAI8O,EAAStG,aAAcxI,EAAG,KACtCmvB,EAAoB/qB,GAAYC,MACpCsC,EACAmI,EAASpG,OAAO1I,GAAGyP,WACnB6e,EAAgBc,wBAEZ5gB,EACJ+f,EAAUvqB,GAAO4D,MAAM5D,GAAOU,MAAMyqB,EAAWja,EAAYlR,GAAOE,MAAOue,KAAK9c,QAC1EgpB,EAAa3qB,GAAO4qB,UACxBO,EACA3gB,EACAiU,KAAK9c,OACL2oB,EAAgBO,iBAEZC,EAAa9qB,GAAO+qB,UACxBI,EACAX,EACA/L,KAAK9c,OACL2oB,EAAgBU,iBAElBhrB,GAAOiC,MAAM0oB,EAAIG,EAAIrM,KAAK/Z,OAAO1I,SAC5BivB,YAAYjvB,GAAKgE,GAAO4D,MAAM5D,GAAOU,MAAMoqB,EAAIH,EAAI3qB,GAAOE,MAAOue,KAAK9c,cAExE,OAAImJ,EAASU,KAAiC,CACnD3L,GAAM+N,MAAMjL,EAAI5C,EAAG+K,EAASY,YAAa+S,KAAK9c,gBACxCuP,EAAqB9Q,GAAYC,MACrCsC,EACAmI,EAASW,WACT6e,EAAgBY,yBAGTlvB,EAAI,EAAGA,EAAI8O,EAAStG,aAAcxI,EAAG,KACtCmvB,EAAoB/qB,GAAYC,MACpCqC,EACAoI,EAASpG,OAAO1I,GAAGyP,WACnB6e,EAAgBc,wBAEZ5gB,EACJggB,EAAUxqB,GAAO4D,MAAM5D,GAAOU,MAAMyqB,EAAWja,EAAYlR,GAAOE,MAAOue,KAAK9c,QAC1EmpB,EAAa9qB,GAAO4qB,UACxBO,EACA3gB,EACAiU,KAAK9c,OACL2oB,EAAgBU,iBAEZL,EAAa3qB,GAAO+qB,UACxBI,EACAZ,EACA9L,KAAK9c,OACL2oB,EAAgBO,iBAElB7qB,GAAOiC,MAAM0oB,EAAIG,EAAIrM,KAAK/Z,OAAO1I,SAC5BivB,YAAYjvB,GAAKgE,GAAO4D,MAAM5D,GAAOU,MAAMiqB,EAAIG,EAAI9qB,GAAOE,MAAOue,KAAK9c,aAIxEA,OAAOmC,oBAhHDwmB,uBAAsB,IAAItqB,GAC1BsqB,uBAAsB,IAAItqB,GAC1BsqB,mBAAkB,IAAItqB,GACtBsqB,mBAAkB,IAAItqB,GACtBsqB,2BAA0B,IAAItqB,GAC9BsqB,0BAAyB,IAAItqB,OAuKjCqrB,4CACU,IAAIrrB,WACE,IAAIgqB,0CAM1BzK,eACEnc,EAAEjB,KAAKod,EAAMnc,QACbuB,GAAGxC,KAAKod,EAAM5a,IACZ8Z,yCAPQ5iB,UACRD,EAAYC,GAAQ,SAACG,UAA4B,IAAIqvB,cAWnDC,6CACW,IAAItrB,WACJ,IAAIA,oBACZ7D,SAGPovB,YAAc,yCAGhBtB,eACErV,GAAGzS,KAAK8nB,EAAErV,SACVC,GAAG1S,KAAK8nB,EAAEpV,SACV0W,YAActB,EAAEsB,YACd9M,cAME+M,iDACe,IAAIxrB,iBACnB7D,SAGJsvB,SAAW,yCAGbxB,eACEtoB,OAAOQ,KAAK8nB,EAAEtoB,aACd8pB,SAAWxB,EAAEwB,SACXhN,cAKEiN,qDACmB,IAAI1rB,mBACJ,IAAIA,uBAEA,IAAIA,uBACJ,IAAIA,0CAEjCiqB,eACEhlB,WAAW9C,KAAK8nB,EAAEhlB,iBAClBD,WAAW7C,KAAK8nB,EAAEjlB,YAChByZ,gDAKFA,KAAKxZ,WAAW0mB,YAGhBlN,KAAKzZ,WAAW2mB,WAGjBlN,KAAKzZ,WAAW3I,EAAIoiB,KAAKxZ,WAAW5I,GAGpCoiB,KAAKzZ,WAAWE,EAAIuZ,KAAKxZ,WAAWC,8CAQjClF,GAAOiC,MAAMwc,KAAKxZ,WAAYwZ,KAAKzZ,WAAYyZ,KAAKmN,4DAKpD5rB,GAAO6rB,MAAMpN,KAAKxZ,WAAYwZ,KAAKzZ,WAAYyZ,KAAKqN,8DAOpD,GAFYrN,KAAKzZ,WAAW3I,EAAIoiB,KAAKxZ,WAAW5I,GACpCoiB,KAAKzZ,WAAWE,EAAIuZ,KAAKxZ,WAAWC,qCAKhD2W,eACF5W,WAAW5I,EAAIE,EAAMkiB,KAAKxZ,WAAW5I,EAAGwf,EAAK5W,WAAW5I,QACxD4I,WAAWC,EAAI3I,EAAMkiB,KAAKxZ,WAAWC,EAAG2W,EAAK5W,WAAWC,QACxDF,WAAW3I,EAAII,EAAMgiB,KAAKzZ,WAAW3I,EAAGwf,EAAK7W,WAAW3I,QACxD2I,WAAWE,EAAIzI,EAAMgiB,KAAKzZ,WAAWE,EAAG2W,EAAK7W,WAAWE,GACtDuZ,sCAIAsN,EAAeC,eACjB/mB,WAAW5I,EAAIE,EAAMwvB,EAAM9mB,WAAW5I,EAAG2vB,EAAM/mB,WAAW5I,QAC1D4I,WAAWC,EAAI3I,EAAMwvB,EAAM9mB,WAAWC,EAAG8mB,EAAM/mB,WAAWC,QAC1DF,WAAW3I,EAAII,EAAMsvB,EAAM/mB,WAAW3I,EAAG2vB,EAAMhnB,WAAW3I,QAC1D2I,WAAWE,EAAIzI,EAAMsvB,EAAM/mB,WAAWE,EAAG8mB,EAAMhnB,WAAWE,GACxDuZ,sCASA5C,WACH4C,KAAKxZ,WAAW5I,GAAKwf,EAAK5W,WAAW5I,GAGrCoiB,KAAKxZ,WAAWC,GAAK2W,EAAK5W,WAAWC,GAGrC2W,EAAK7W,WAAW3I,GAAKoiB,KAAKzZ,WAAW3I,GAGrCwf,EAAK7W,WAAWE,GAAKuZ,KAAKzZ,WAAWE,mCAOnCtH,EAAyBE,OAC3BmuB,GAAgB7f,GAChB8f,EAAe9f,GAEb+X,EAAcrmB,EAAM8W,GAAGvY,EACvB+nB,EAActmB,EAAM8W,GAAG1P,EACvBinB,EAAcruB,EAAM+W,GAAGxY,EAAIyB,EAAM8W,GAAGvY,EACpC+vB,EAActuB,EAAM+W,GAAG3P,EAAIpH,EAAM8W,GAAG1P,EACpCmnB,EAAiBjwB,EAAM+vB,GACvBG,EAAiBlwB,EAAMgwB,GAEvBzqB,EAAiB/D,EAAO+D,UAE1B0qB,EAAS3qB,OAEPyiB,EAAM1F,KAAKxZ,WAAW5I,GAAKoiB,KAAKzZ,WAAW3I,EAAI8nB,SAC1C,MAEJ,KACCoI,EAAgB,EAAIJ,EACtBrjB,GAAc2V,KAAKxZ,WAAW5I,EAAI8nB,GAAOoI,EACzC3iB,GAAc6U,KAAKzZ,WAAW3I,EAAI8nB,GAAOoI,EAGzC/hB,GAAK,KAEL1B,EAAKc,EAAI,KACL4iB,EAAa1jB,EACnBA,EAAKc,EACLA,EAAK4iB,EACLhiB,EAAI,KAIF1B,EAAKmjB,IACPtqB,EAAOtF,EAAImO,EACX7I,EAAOuD,EAAI,EACX+mB,EAAOnjB,GAMLmjB,GAFJC,EAAO3vB,EAAM2vB,EAAMtiB,WAGV,KAIP0iB,EAAS5qB,OAEP0iB,EAAM3F,KAAKxZ,WAAWC,GAAKuZ,KAAKzZ,WAAWE,EAAIkf,SAC1C,MAEJ,KACCmI,EAAgB,EAAIH,EACtBtjB,GAAc2V,KAAKxZ,WAAWC,EAAIkf,GAAOmI,EACzC3iB,GAAc6U,KAAKzZ,WAAWE,EAAIkf,GAAOmI,EAGzC/hB,GAAK,KAEL1B,EAAKc,EAAI,KACL4iB,EAAa1jB,EACnBA,EAAKc,EACLA,EAAK4iB,EACLhiB,EAAI,KAIF1B,EAAKmjB,IACPtqB,EAAOtF,EAAI,EACXsF,EAAOuD,EAAIsF,EACXyhB,EAAOnjB,GAMLmjB,GAFJC,EAAO3vB,EAAM2vB,EAAMtiB,WAGV,UAMPqiB,EAAO,GAAKnuB,EAAMytB,YAAcU,IAKpCruB,EAAO6tB,SAAWQ,EAEX,wCAGG1pB,WACNA,EAAMlG,EAAIoiB,KAAKxZ,WAAW5I,GAAKoiB,KAAKzZ,WAAW3I,EAAIkG,EAAMlG,GAGzDkG,EAAM2C,EAAIuZ,KAAKxZ,WAAWC,GAAKuZ,KAAKzZ,WAAWE,EAAI3C,EAAM2C,uCAMnDqa,WACNd,KAAKzZ,WAAW3I,EAAIkjB,EAAMta,WAAW5I,GAGrCoiB,KAAKzZ,WAAWE,EAAIqa,EAAMta,WAAWC,GAGrCqa,EAAMva,WAAW3I,EAAIoiB,KAAKxZ,WAAW5I,GAGrCkjB,EAAMva,WAAWE,EAAIuZ,KAAKxZ,WAAWC,qCA1I5B6mB,EAAeC,EAAezX,UAC3CA,EAAIkY,SAASV,EAAOC,GACbzX,WA8MLnO,GAA8C,IAAI4gB,GAClDxgB,GAAoD,IAAIsgB,GACxDpgB,GAAgD,IAAIugB,GCzrB7CyF,yBASU5kB,uBAAAA,YARL,IAAI4jB,eACW,iBACA,iBACA,iBACtB,iBAEqB,oDAKvBiB,UAAY,6CAIM,OAAhBlO,KAAKmO,2CAIW,OAAnBnO,KAAKkO,gBACD,IAAI/lB,aAEL6X,KAAKkO,wBAGDlxB,MACY,OAAnBgjB,KAAKkO,gBACD,IAAI/lB,WAEP+lB,UAAYlxB,WAIRoxB,iDACoB,qBAMI,2BAEhB,eAEA,IAAIzG,GAAsC,6CAmBvDvK,EAAciR,OACZxlB,EAA+CmX,KAAK6H,QAAQjgB,YAClEiB,EAAMylB,KAAKtO,KAAKuO,QAET1lB,EAAM2lB,WAAa,GAAG,KACrBC,EAA6B5lB,EAAM6lB,SAC5B,OAATD,GAIAA,EAAKrR,KAAKuR,YAAYvR,MACpBqR,EAAKG,cACSP,EAASI,eAKzB5lB,EAAMylB,KAAKG,EAAKN,QAChBtlB,EAAMylB,KAAKG,EAAKI,wCAMVzR,EAActH,OACpBjN,EAA+CmX,KAAK6H,QAAQjgB,YAClEiB,EAAMylB,KAAKtO,KAAKuO,QAET1lB,EAAM2lB,WAAa,GAAG,KACrBC,EAA6B5lB,EAAM6lB,MAC5B,OAATD,GAIAA,EAAKrR,KAAKuR,YAAYvR,KACpBqR,EAAKG,SACP9Y,EAAIqI,KAAKsQ,IAET5lB,EAAMylB,KAAKG,EAAKN,QAChBtlB,EAAMylB,KAAKG,EAAKI,8CAMb/qB,EAAWuqB,OACdxlB,EAA+CmX,KAAK6H,QAAQjgB,YAClEiB,EAAMylB,KAAKtO,KAAKuO,QAET1lB,EAAM2lB,WAAa,GAAG,KACrBC,EAA6B5lB,EAAM6lB,SAC5B,OAATD,GAIAA,EAAKrR,KAAK0R,YAAYhrB,MACpB2qB,EAAKG,cACSP,EAASI,eAKzB5lB,EAAMylB,KAAKG,EAAKN,QAChBtlB,EAAMylB,KAAKG,EAAKI,yCAOtBxvB,EACAgvB,OAEMlY,EAAa9W,EAAM8W,GACnBC,EAAa/W,EAAM+W,GACnBjS,EAAY5C,GAAOU,MAAMmU,EAAID,EAAIiY,EAAcW,KAErD5qB,EAAEf,gBAGIuB,EAAYpD,GAAO+nB,UAAUnlB,EAAGiqB,EAAcY,KAC9CC,EAAgB1tB,GAAO2tB,KAAKvqB,EAAGypB,EAAce,SAK/CrC,EAAsBztB,EAAMytB,YAG1BsC,EAAsBhB,EAAciB,cACtCC,EAAcnZ,EAAGvY,EAAIkvB,GAAe1W,EAAGxY,EAAIuY,EAAGvY,GAC9C2xB,EAAcpZ,EAAG1P,EAAIqmB,GAAe1W,EAAG3P,EAAI0P,EAAG1P,GAClD2oB,EAAY5oB,WAAW5I,EAAIE,EAAMqY,EAAGvY,EAAG0xB,GACvCF,EAAY5oB,WAAWC,EAAI3I,EAAMqY,EAAG1P,EAAG8oB,GACvCH,EAAY7oB,WAAW3I,EAAII,EAAMmY,EAAGvY,EAAG0xB,GACvCF,EAAY7oB,WAAWE,EAAIzI,EAAMmY,EAAG1P,EAAG8oB,OAEjC1mB,EAA+CmX,KAAK6H,QAAQjgB,YAClEiB,EAAMylB,KAAKtO,KAAKuO,QAET1lB,EAAM2lB,WAAa,GAAG,KACrBC,EAA6B5lB,EAAM6lB,SAC5B,OAATD,GAICnoB,EAAkBmoB,EAAKrR,KAAMgS,QAM5BhiB,EAAYqhB,EAAKrR,KAAKoS,YACtBC,EAAYhB,EAAKrR,KAAKsS,kBAE1B/xB,EAAM4D,GAAO4D,MAAMR,EAAGpD,GAAOU,MAAMkU,EAAI/I,EAAG7L,GAAOE,QAAUF,GAAO4D,MAAM8pB,EAAOQ,GAChE,MAIbhB,EAAKG,SAAU,KACXe,EAA2BvB,EAAcwB,WAC/CD,EAASxZ,GAAGzS,KAAKrE,EAAM8W,IACvBwZ,EAASvZ,GAAG1S,KAAKrE,EAAM+W,IACvBuZ,EAAS7C,YAAcA,MAEjB9vB,EAAgBqxB,EAASsB,EAAUlB,MAE3B,IAAVzxB,SAKAA,EAAQ,IAEV8vB,EAAc9vB,EACdsyB,EAAMnZ,EAAGvY,EAAIkvB,GAAe1W,EAAGxY,EAAIuY,EAAGvY,GACtC2xB,EAAMpZ,EAAG1P,EAAIqmB,GAAe1W,EAAG3P,EAAI0P,EAAG1P,GACtC2oB,EAAY5oB,WAAW5I,EAAIE,EAAMqY,EAAGvY,EAAG0xB,GACvCF,EAAY5oB,WAAWC,EAAI3I,EAAMqY,EAAG1P,EAAG8oB,GACvCH,EAAY7oB,WAAW3I,EAAII,EAAMmY,EAAGvY,EAAG0xB,GACvCF,EAAY7oB,WAAWE,EAAIzI,EAAMmY,EAAG1P,EAAG8oB,SAGzC1mB,EAAMylB,KAAKG,EAAKN,QAChBtlB,EAAMylB,KAAKG,EAAKI,oDASI,OAApB7O,KAAK6P,WAAqB,KACtBpB,EAAsBzO,KAAK6P,uBAC5BA,WAAapB,EAAKqB,OACvBrB,EAAKqB,OAAS,KACdrB,EAAKN,OAAS,KACdM,EAAKI,OAAS,KACdJ,EAAKsB,OAAS,EACPtB,SAGF,IAAIR,GAAcG,EAAc4B,8CAGhCvB,GACPA,EAAKqB,OAAS9P,KAAK6P,WACnBpB,EAAKN,OAAS,KACdM,EAAKI,OAAS,KACdJ,EAAKsB,QAAU,EACftB,EAAK7mB,aACAioB,WAAapB,sCAGRrR,EAAc6S,OAClBxB,EAAsBzO,KAAKkQ,eAG3BC,EAAcxR,GACdyR,EAAczR,UACpB8P,EAAKrR,KAAK5W,WAAW5I,EAAIwf,EAAK5W,WAAW5I,EAAIuyB,EAC7C1B,EAAKrR,KAAK5W,WAAWC,EAAI2W,EAAK5W,WAAWC,EAAI2pB,EAC7C3B,EAAKrR,KAAK7W,WAAW3I,EAAIwf,EAAK7W,WAAW3I,EAAIuyB,EAC7C1B,EAAKrR,KAAK7W,WAAWE,EAAI2W,EAAK7W,WAAWE,EAAI2pB,EAC7C3B,EAAKwB,SAAWA,EAChBxB,EAAKsB,OAAS,OAETM,WAAW5B,GAETA,uCAGIA,QAGN6B,WAAW7B,QACX8B,SAAS9B,qCAGNA,EAAqBrR,EAAcoT,MAGvC/B,EAAKrR,KAAKqT,SAASrT,UACd,OAGJkT,WAAW7B,OAGV0B,EAAcxR,GACdyR,EAAczR,GACpB8P,EAAKrR,KAAK5W,WAAW5I,EAAIwf,EAAK5W,WAAW5I,EAAIuyB,EAC7C1B,EAAKrR,KAAK5W,WAAWC,EAAI2W,EAAK5W,WAAWC,EAAI2pB,EAC7C3B,EAAKrR,KAAK7W,WAAW3I,EAAIwf,EAAK7W,WAAW3I,EAAIuyB,EAC7C1B,EAAKrR,KAAK7W,WAAWE,EAAI2W,EAAK7W,WAAWE,EAAI2pB,MAGvC1C,EAAc9O,GAAoB4R,EAAa5yB,EAC/C+vB,EAAc/O,GAAoB4R,EAAa/pB,SAEjDinB,EAAM,EACRe,EAAKrR,KAAK5W,WAAW5I,GAAK8vB,EAE1Be,EAAKrR,KAAK7W,WAAW3I,GAAK8vB,EAGxBC,EAAM,EACRc,EAAKrR,KAAK5W,WAAWC,GAAKknB,EAE1Bc,EAAKrR,KAAK7W,WAAWE,GAAKknB,OAGvB0C,WAAW5B,IACT,qCAGEiC,QACP1Q,KAAK2Q,iBAEa,OAAhB3Q,KAAKuO,mBACFA,OAASmC,YACTnC,OAAOuB,OAAS,cAKjBc,EAAmBF,EAAKtT,KAC1ByT,EAAyB7Q,KAAKuO,QAC1BsC,EAAQjC,UAAU,KAClBT,EAAwBjmB,EAAO2oB,EAAQ1C,QACvCU,EAAwB3mB,EAAO2oB,EAAQhC,QAEvC9Y,EAAe8a,EAAQzT,KAAK0T,eAE5BC,EAAuB3C,EAAc4C,eAC3CD,EAAa/C,SAAS6C,EAAQzT,KAAMwT,OAC9BK,EAAuBF,EAAaD,eAGpCI,EAAe,EAAID,EAGnBE,EAA0B,GAAKF,EAAelb,GAGhDqb,SACEhU,EAAegR,EAAciD,OAC/BC,SAEAnD,EAAOS,UACTxR,EAAK4Q,SAAS4C,EAAUzC,EAAO/Q,MAC/BgU,EAAQhU,EAAK0T,eAAiBK,IAE9B/T,EAAK4Q,SAAS4C,EAAUzC,EAAO/Q,MAC/BkU,EAAUnD,EAAO/Q,KAAK0T,eAEtBM,EADUhU,EAAK0T,eACGQ,EAAUH,OAI1BI,YACA1C,EAAOD,UACTxR,EAAK4Q,SAAS4C,EAAU/B,EAAOzR,MAC/BmU,EAAQnU,EAAK0T,eAAiBK,IAE9B/T,EAAK4Q,SAAS4C,EAAU/B,EAAOzR,MAC/BkU,EAAUzC,EAAOzR,KAAK0T,eAEtBS,EADUnU,EAAK0T,eACGQ,EAAUH,GAI1BD,EAAOE,GAASF,EAAOK,QAMzBV,EADEO,EAAQG,EACApD,EAEAU,MAKR2C,EAAkCX,EAAQf,OAC1C2B,EAA2BzR,KAAKkQ,eACtCuB,EAAU3B,OAAS0B,EACnBC,EAAUrU,KAAK4Q,SAAS4C,EAAUC,EAAQzT,MAC1CqU,EAAU1B,OAASc,EAAQd,OAAS,EAElB,OAAdyB,GAEEA,EAAUrD,SAAW0C,EACvBW,EAAUrD,OAASsD,EAEnBD,EAAU3C,OAAS4C,EAGrBA,EAAUtD,OAAS0C,EACnBY,EAAU5C,OAAS6B,EACnBG,EAAQf,OAAS2B,EACjBf,EAAKZ,OAAS2B,IAGdA,EAAUtD,OAAS0C,EACnBY,EAAU5C,OAAS6B,EACnBG,EAAQf,OAAS2B,EACjBf,EAAKZ,OAAS2B,OACTlD,OAASkD,WAIZhD,EAA6BiC,EAAKZ,OACtB,OAATrB,GAAe,KACdjwB,EAAIwhB,KAAK0R,QAAQjD,GAEjBN,EAAwBjmB,EAAO1J,EAAE2vB,QACjCU,EAAwB3mB,EAAO1J,EAAEqwB,QAEvCrwB,EAAEuxB,OAAS,EAAI7xB,EAASiwB,EAAO4B,OAAQlB,EAAOkB,QAC9CvxB,EAAE4e,KAAK4Q,SAASG,EAAO/Q,KAAMyR,EAAOzR,MAEpCqR,EAAOjwB,EAAEsxB,2CAMFY,MACLA,IAAS1Q,KAAKuO,YAKZuB,EAAwB5nB,EAAOwoB,EAAKZ,QACpC6B,EAAoC7B,GAAUA,EAAOA,OACrDe,EAAyB3oB,EAAO4nB,EAAO3B,SAAWuC,EAAOZ,EAAOjB,OAASiB,EAAO3B,WAElE,OAAhBwD,EAAsB,CAEpBA,EAAYxD,SAAW2B,EACzB6B,EAAYxD,OAAS0C,EAErBc,EAAY9C,OAASgC,EAEvBA,EAAQf,OAAS6B,OACZpB,SAAST,WAGVvgB,EAA8BoiB,EACjB,OAAVpiB,GAAgB,KAGf4e,EAAwBjmB,GAF9BqH,EAAQyQ,KAAK0R,QAAQniB,IAEsB4e,QACrCU,EAAwB3mB,EAAOqH,EAAMsf,QAE3Ctf,EAAM6N,KAAK4Q,SAASG,EAAO/Q,KAAMyR,EAAOzR,MACxC7N,EAAMwgB,OAAS,EAAI7xB,EAASiwB,EAAO4B,OAAQlB,EAAOkB,QAElDxgB,EAAQA,EAAMugB,kBAGXvB,OAASsC,EACdA,EAAQf,OAAS,UACZS,SAAST,aAlCTvB,OAAS,qCAwCVxa,MAGFA,EAAE6a,UAAY7a,EAAEgc,OAAS,SACpBhc,MAGHE,EAAmB/L,EAAO6L,EAAEoa,QAC5ByD,EAAmB1pB,EAAO6L,EAAE8a,QAE5BgD,EAAkBD,EAAE7B,OAAS9b,EAAE8b,cAGjC8B,EAAU,EACL7R,KAAK8R,YAAY/d,EAAGE,EAAG2d,GAIvBC,GAAW,EACX7R,KAAK+R,YAAYhe,EAAGE,EAAG2d,GAGzB7d,sCAGGA,EAAkBE,EAAkB2d,OACxCI,EAAmB9pB,EAAO0pB,EAAEzD,QAC5B8D,EAAmB/pB,EAAO0pB,EAAE/C,eAGlC+C,EAAEzD,OAASpa,EACX6d,EAAE9B,OAAS/b,EAAE+b,OACb/b,EAAE+b,OAAS8B,EAGM,OAAbA,EAAE9B,OACA8B,EAAE9B,OAAO3B,SAAWpa,EACtB6d,EAAE9B,OAAO3B,OAASyD,EAGlBA,EAAE9B,OAAOjB,OAAS+C,OAGfrD,OAASqD,EAIZI,EAAEjC,OAASkC,EAAElC,QACf6B,EAAE/C,OAASmD,EACXje,EAAE8a,OAASoD,EACXA,EAAEnC,OAAS/b,EACXA,EAAEqJ,KAAK4Q,SAAS/Z,EAAEmJ,KAAM6U,EAAE7U,MAC1BwU,EAAExU,KAAK4Q,SAASja,EAAEqJ,KAAM4U,EAAE5U,MAE1BrJ,EAAEgc,OAAS,EAAI7xB,EAAS+V,EAAE8b,OAAQkC,EAAElC,QACpC6B,EAAE7B,OAAS,EAAI7xB,EAAS6V,EAAEgc,OAAQiC,EAAEjC,UAEpC6B,EAAE/C,OAASoD,EACXle,EAAE8a,OAASmD,EACXA,EAAElC,OAAS/b,EACXA,EAAEqJ,KAAK4Q,SAAS/Z,EAAEmJ,KAAM4U,EAAE5U,MAC1BwU,EAAExU,KAAK4Q,SAASja,EAAEqJ,KAAM6U,EAAE7U,MAE1BrJ,EAAEgc,OAAS,EAAI7xB,EAAS+V,EAAE8b,OAAQiC,EAAEjC,QACpC6B,EAAE7B,OAAS,EAAI7xB,EAAS6V,EAAEgc,OAAQkC,EAAElC,SAG/B6B,sCAGG7d,EAAkBE,EAAkB2d,OACxCM,EAAmBhqB,EAAO+L,EAAEka,QAC5BgE,EAAmBjqB,EAAO+L,EAAE4a,eAGlC5a,EAAEka,OAASpa,EACXE,EAAE6b,OAAS/b,EAAE+b,OACb/b,EAAE+b,OAAS7b,EAGM,OAAbA,EAAE6b,OACA7b,EAAE6b,OAAO3B,SAAWpa,EACtBE,EAAE6b,OAAO3B,OAASla,EAGlBA,EAAE6b,OAAOjB,OAAS5a,OAGfsa,OAASta,EAIZie,EAAEnC,OAASoC,EAAEpC,QACf9b,EAAE4a,OAASqD,EACXne,EAAEoa,OAASgE,EACXA,EAAErC,OAAS/b,EACXA,EAAEqJ,KAAK4Q,SAAS4D,EAAExU,KAAM+U,EAAE/U,MAC1BnJ,EAAEmJ,KAAK4Q,SAASja,EAAEqJ,KAAM8U,EAAE9U,MAE1BrJ,EAAEgc,OAAS,EAAI7xB,EAAS0zB,EAAE7B,OAAQoC,EAAEpC,QACpC9b,EAAE8b,OAAS,EAAI7xB,EAAS6V,EAAEgc,OAAQmC,EAAEnC,UAEpC9b,EAAE4a,OAASsD,EACXpe,EAAEoa,OAAS+D,EACXA,EAAEpC,OAAS/b,EACXA,EAAEqJ,KAAK4Q,SAAS4D,EAAExU,KAAM8U,EAAE9U,MAC1BnJ,EAAEmJ,KAAK4Q,SAASja,EAAEqJ,KAAM+U,EAAE/U,MAE1BrJ,EAAEgc,OAAS,EAAI7xB,EAAS0zB,EAAE7B,OAAQmC,EAAEnC,QACpC9b,EAAE8b,OAAS,EAAI7xB,EAAS6V,EAAEgc,OAAQoC,EAAEpC,SAG/B9b,6CAIa,OAAhB+L,KAAKuO,OACA,EAGFvO,KAAKuO,OAAOwB,iDAmBC,OAAhB/P,KAAKuO,cACA,MAIH6D,EADsBpS,KAAKuO,OACHnR,KAAK0T,sBAET1C,EAAciE,YAAYrS,KAAKuO,QAetC6D,iDAcIhE,EAAckE,kBAAkBtS,KAAKuO,kDAI5CE,MACH,OAATA,IAISzO,KAAKuO,QAIdE,EAAKG,eASHT,EAAwBjmB,EAAOumB,EAAKN,QACpCU,EAAwB3mB,EAAOumB,EAAKI,aAQrC0D,kBAAkBpE,QAClBoE,kBAAkB1D,4CAGTJ,MACD,OAATA,IAIAA,EAAKG,cASHT,EAAwBjmB,EAAOumB,EAAKN,QACpCU,EAAwB3mB,EAAOumB,EAAKI,QASrBT,EAAciD,OAC9BrD,SAASG,EAAO/Q,KAAMyR,EAAOzR,WAO7BoV,gBAAgBrE,QAChBqE,gBAAgB3D,uFAqCMT,EAAcqE,kBAAkBzS,KAAKuO,OAAQ,kDAuFnEmE,+CAuBKC,GACVvE,EAAcwE,gBAAgB5S,KAAKuO,OAAQoE,yCA5QflE,MACf,OAATA,SACK,KAGLA,EAAKG,gBACA,MAGL7Y,EAAe0Y,EAAKrR,KAAK0T,sBAC7B/a,GAAQqY,EAAciE,YAAY5D,EAAKN,SAC/BC,EAAciE,YAAY5D,EAAKI,kDA8BbJ,UACb,OAATA,GAAiBA,EAAKG,SACjB,EAKF,EAAI1wB,EAFakwB,EAAckE,kBAAkB7D,EAAKN,QACrCC,EAAckE,kBAAkB7D,EAAKI,mDA4F3BJ,EAA4BoE,MACjD,OAATpE,SACKoE,KAGLpE,EAAKsB,QAAU,SACV8C,MAKH1E,EAAwBjmB,EAAOumB,EAAKN,eAGnCjwB,EAAS20B,EADQh1B,EADMqK,EAAOumB,EAAKI,QACFkB,OAAS5B,EAAO4B,iDA+FxBtB,EAA4BkE,MAC/C,OAATlE,KAIAA,EAAKsB,QAAU,QAMb5B,EAA+BM,EAAKN,OACpCU,EAA+BJ,EAAKI,OAC1CT,EAAcwE,gBAAgBzE,EAAQwE,GACtCvE,EAAcwE,gBAAgB/D,EAAQ8D,GAEtClE,EAAKrR,KAAK5W,WAAWlB,QAAQqtB,GAC7BlE,EAAKrR,KAAK7W,WAAWjB,QAAQqtB,aA9xBfvE,OAAM,IAAI7sB,GACV6sB,OAAM,IAAI7sB,GACV6sB,WAAU,IAAI7sB,GACd6sB,iBAAgB,IAAInB,GACpBmB,cAAa,IAAIvB,GACjBuB,kBAAiB,IAAInB,GACrBmB,UAAS,IAAInB,GAkKtBmB,aAAY,MC/KR0E,GACX,WAAmBtzB,EAA8BC,yBAA9BD,cAA8BC,GAMtCszB,sDAC4B,eAEH,IAAI3E,qBACzB,mBAED,oBACuC,oBAEvC,oBAC4B,iDAK9BhR,EAAc6S,OAClB+C,EAAuBhT,KAAKiT,OAAOC,YAAY9V,EAAM6S,WACzDjQ,KAAK7C,kBACFgW,WAAWH,GACTA,uCAIIA,QACNI,aAAaJ,KAChBhT,KAAK7C,kBACF8V,OAAOI,aAAaL,qCAKjBA,EAAsB5V,EAAcoT,GACpBxQ,KAAKiT,OAAOK,UAAUN,EAAO5V,EAAMoT,SAEpD2C,WAAWH,sCAKTA,QACJG,WAAWH,kDAsBThT,KAAK7C,kDAuFD7f,EAAQS,QAEdw1B,YAAc,OAGdC,2CAGAC,YAAc,EAGnBjrB,EAASwX,KAAK0T,aAAc,EAAG1T,KAAKuT,YAAarqB,QAG5CyqB,uBAAuBr2B,EAAGS,qEAQ1B,IAAIR,EAAI,EAAGA,EAAIyiB,KAAKyT,cAAel2B,EAAG,KACnCq2B,EAAmC5T,KAAK6T,aAAat2B,MACxC,OAAfq2B,OASEE,EAAkBF,EAAWxW,UAE9B2W,YAAY32B,OAAS,OAErB61B,OAAOe,OAAOF,EAAS9T,KAAK+T,iBAC5B,IAAI5tB,EAAI,EAAGA,EAAI6Z,KAAK+T,YAAY32B,SAAU+I,EAAG,KAC1C6sB,EAAuBhT,KAAK+T,YAAY5tB,MAE1C6sB,EAAM3pB,OAASuqB,EAAWvqB,UAM1B7J,SACAC,YACAuzB,EAAM3pB,KAAOuqB,EAAWvqB,MAC1B7J,EAASwzB,EACTvzB,EAASm0B,IAETp0B,EAASo0B,EACTn0B,EAASuzB,GAIPhT,KAAKuT,cAAgBvT,KAAK0T,aAAat2B,YACpCs2B,aAAa1T,KAAKuT,aAAe,IAAIT,GAAOtzB,EAAQC,OACpD,KACCw0B,EAAkBjU,KAAK0T,aAAa1T,KAAKuT,aAC/CU,EAAKz0B,OAASA,EACdy0B,EAAKx0B,OAASA,IAGdugB,KAAKuT,+DAKUj2B,EAAQS,WACvBiK,EAAQgY,KAAKuT,YACfh2B,EAAI,EACJ4I,EAAI,EACD5I,EAAIyK,GAAO,KACVksB,EAAyBlU,KAAK0T,aAAan2B,OACjDD,EAAE6I,GAAK+tB,EAAY10B,OAAOywB,SAC1BlyB,EAAEoI,GAAK+tB,EAAYz0B,OAAOwwB,WACxB9pB,IACA5I,EAGKA,EAAIyK,GAAO,KACVisB,EAAkBjU,KAAK0T,aAAan2B,MAExC02B,EAAKz0B,OAAO6J,OAAS6qB,EAAY10B,OAAO6J,MACxC4qB,EAAKx0B,OAAO4J,OAAS6qB,EAAYz0B,OAAO4J,aAIxC9L,kCAOF6f,EAAciR,QACb4E,OAAOkB,MAAM/W,EAAMiR,sCAGfvqB,EAAWuqB,QACf4E,OAAOmB,WAAWtwB,EAAOuqB,mCAW9BhvB,EACAgvB,QAEK4E,OAAOoB,QAAQh1B,EAAOgvB,kDAKpBrO,KAAKiT,OAAOqB,4DAKZtU,KAAKiT,OAAOsB,gEAKZvU,KAAKiT,OAAOuB,mDAMT7B,QACLM,OAAOwB,YAAY9B,sCAGfK,QACJa,aAAa7T,KAAKyT,aAAeT,IACpChT,KAAKyT,iDAGIT,OACLz1B,EAAYyiB,KAAK6T,aAAaa,QAAQ1B,GACxCz1B,GAAK,SACFs2B,aAAat2B,GAAK,eClUhBkM,GAAc,gDAxBlB,eACG,aACF,aACA,gBACG,iBACC,oBACG,OAGRwC,KAAO,OACPE,QAAU,iDAIVF,KAAO,OACPE,QAAU,OACV5M,MAAQ,OACR4C,MAAQ,OACRE,SAAW,OACXyJ,UAAY,OACZE,aAAe,YAMlBtB,GAAuB,IAAI/I,GAC3BgJ,GAAuB,IAAIhJ,GAC3BgzB,GAA0B,IAAIpzB,GAC9BqzB,GAA0B,IAAIrzB,GAC9BszB,GAA0B,IAAItzB,GAC9BuzB,GAAyB,IAAIvzB,GAC7BwzB,GAAyB,IAAIxzB,GAGtByzB,GAMX,mCALkB,IAAIjN,eACJ,IAAIA,eACJ,IAAIhC,eACJ,IAAIA,aACfroB,SAEAkM,KAAO,GAaHqrB,GAIX,2CAFIv3B,SAGGiM,EAAI,GAWAurB,mDAGkB,IAAInP,iBACJ,IAAIA,oCAED,IAAIxkB,eACV,IAAIA,gDAG5BnC,EACAI,EACAuK,EACAtK,EACAwK,EACAI,QAEK8qB,SAAW31B,OACX41B,SAAW31B,MACVuI,EAAgB5I,EAAM4I,WAGvBqtB,SAAS3xB,KAAKqG,QACdurB,SAAS5xB,KAAKuG,OAEbhG,EAAmByG,GACnBxG,EAAmByG,WACpB0qB,SAASzqB,aAAa3G,EAAKoG,QAC3BirB,SAAS1qB,aAAa1G,EAAKmG,GAElB,IAAVrC,EAAa,MACVoS,aACCmb,EAAsBvV,KAAKmV,SAAStzB,UAAUzC,EAAMqB,OAAO,IAC3D+0B,EAAsBxV,KAAKoV,SAASvzB,UAAUzC,EAAMsB,OAAO,IAC3D6B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,IACrDnyB,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,IAC3DrzB,GAAOU,MAAMO,EAAQD,EAAQyd,KAAKyV,YAC5B1pB,EAAYiU,KAAKyV,OAAOryB,wBAEvBsyB,aAAa7xB,UAEbkI,EACF,GAAI3M,EAAMqB,OAAO,KAAOrB,EAAMqB,OAAO,GAAI,MAEzC2Z,aACCub,EAAuB3V,KAAKoV,SAASvzB,UAAUzC,EAAMsB,OAAO,IAC5Dk1B,EAAuB5V,KAAKoV,SAASvzB,UAAUzC,EAAMsB,OAAO,IAElEa,GACGgR,UAAUhR,GAAOU,MAAM2zB,EAAcD,EAAcp0B,GAAOE,MAAOue,KAAKyV,QACtEpnB,oBACGnL,EAAiB9B,GAAM+N,MAAMjL,EAAI5C,EAAG0e,KAAKyV,OAAQZ,IAEvDtzB,GAAOiC,MAAMmyB,EAAcC,EAAc5V,KAAK0V,kBACxClzB,EAAiBb,GAAYC,MAAMsC,EAAK8b,KAAK0V,aAAcd,IAE3DW,EAAsBvV,KAAKmV,SAAStzB,UAAUzC,EAAMqB,OAAO,IAC3D8B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,IAEvD5oB,EAAYxK,GAAO4D,MAAM5D,GAAOU,MAAMM,EAAQC,EAAQjB,GAAOE,MAAOyB,UACpE6I,EAAI,SACD0pB,OAAOpwB,UACZ0G,GAAKA,GAEAA,OAGFqO,aACCyb,EAAuB7V,KAAKmV,SAAStzB,UAAUzC,EAAMqB,OAAO,IAC5Dq1B,EAAuB9V,KAAKmV,SAAStzB,UAAUzC,EAAMqB,OAAO,IAElEc,GACGgR,UAAUhR,GAAOU,MAAM6zB,EAAcD,EAAct0B,GAAOE,MAAOue,KAAKyV,QACtEpnB,oBACGnL,EAAiB9B,GAAM+N,MAAMlL,EAAI3C,EAAG0e,KAAKyV,OAAQZ,IAEvDtzB,GAAOiC,MAAMqyB,EAAcC,EAAc9V,KAAK0V,kBACxCnzB,EAAiBZ,GAAYC,MAAMqC,EAAK+b,KAAK0V,aAAcf,IAE3Da,EAAsBxV,KAAKoV,SAASvzB,UAAUzC,EAAMsB,OAAO,IAC3D8B,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,IAEvD7oB,EAAYxK,GAAO4D,MAAM5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MAAOyB,UACpE6I,EAAI,SACD0pB,OAAOpwB,UACZ0G,GAAKA,GAEAA,4CAIOtL,EAAkBC,EAAkBiJ,OAC9C1F,EAAmByG,GACnBxG,EAAmByG,WACpB0qB,SAASzqB,aAAa3G,EAAK0F,QAC3B2rB,SAAS1qB,aAAa1G,EAAKyF,OAE5BqW,KAAK5F,OAA8C,KAC/C2b,EAAgB30B,GAAMC,OAAO4C,EAAI3C,EAAG0e,KAAKyV,OAAQX,IACjDkB,EAAgB50B,GAAMC,OAC1B6C,EAAI5C,EACJC,GAAOC,KAAKwe,KAAKyV,OAAQl0B,GAAOE,MAChCszB,IAGFt0B,EAAO,GAAKuf,KAAKmV,SAASh0B,WAAW40B,GACrCr1B,EAAO,GAAKsf,KAAKoV,SAASj0B,WAAW60B,OAE/BT,EAAsBvV,KAAKmV,SAAStzB,UAAUpB,EAAO,IACrD+0B,EAAsBxV,KAAKoV,SAASvzB,UAAUnB,EAAO,IAErD6B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,IACrDnyB,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,WAEhCrzB,GAAO4D,MAChC5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MACpCue,KAAKyV,QAGF,OAAIzV,KAAK5F,OAA6C,KACrDlX,EAAiB9B,GAAM+N,MAAMlL,EAAI3C,EAAG0e,KAAKyV,OAAQZ,IACjDtyB,EAAiBZ,GAAYC,MAAMqC,EAAK+b,KAAK0V,aAAcf,IAE3DqB,EAAgB50B,GAAMC,OAC1B6C,EAAI5C,EACJC,GAAOC,KAAK0B,EAAQ3B,GAAOE,MAC3BszB,IAGFt0B,EAAO,IAAM,EACbC,EAAO,GAAKsf,KAAKoV,SAASj0B,WAAW60B,OAE/BR,EAAsBxV,KAAKoV,SAASvzB,UAAUnB,EAAO,IACrD8B,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,WAEhCrzB,GAAO4D,MAAM5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MAAOyB,GAE9E,OAAI8c,KAAK5F,OAA6C,KACrDlX,EAAiB9B,GAAM+N,MAAMjL,EAAI5C,EAAG0e,KAAKyV,OAAQZ,IACjDryB,EAAiBb,GAAYC,MAAMsC,EAAK8b,KAAK0V,aAAcd,IAE3DmB,EAAgB30B,GAAMC,OAC1B4C,EAAI3C,EACJC,GAAOC,KAAK0B,EAAQ3B,GAAOE,MAC3BqzB,IAGFp0B,EAAO,IAAM,EACbD,EAAO,GAAKuf,KAAKmV,SAASh0B,WAAW40B,OAE/BR,EAAsBvV,KAAKmV,SAAStzB,UAAUpB,EAAO,IACrD8B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,WAEhCpzB,GAAO4D,MAAM5D,GAAOU,MAAMM,EAAQC,EAAQjB,GAAOE,MAAOyB,UAKrFzC,EAAO,IAAM,EACbC,EAAO,IAAM,EACN,mCAGAD,EAAgBC,EAAgBiJ,OACjC1F,EAAmByG,GACnBxG,EAAmByG,eACpB0qB,SAASzqB,aAAa3G,EAAK0F,QAC3B2rB,SAAS1qB,aAAa1G,EAAKyF,GAExBqW,KAAK5F,mBAEHmb,EAAsBvV,KAAKmV,SAAStzB,UAAUpB,GAC9C+0B,EAAsBxV,KAAKoV,SAASvzB,UAAUnB,GAE9C6B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,IACrDnyB,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,WAChCrzB,GAAO4D,MAChC5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MACpCue,KAAKyV,mBAODvyB,EAAiB9B,GAAM+N,MAAMlL,EAAI3C,EAAG0e,KAAKyV,OAAQZ,IACjDtyB,EAAiBZ,GAAYC,MAAMqC,EAAK+b,KAAK0V,aAAcf,IAE3Da,EAAsBxV,KAAKoV,SAASvzB,UAAUnB,GAC9C8B,EAAiBb,GAAYC,MAAMsC,EAAKsxB,EAAaZ,WAEhCrzB,GAAO4D,MAAM5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MAAOyB,cAK7EA,EAAiB9B,GAAM+N,MAAMjL,EAAI5C,EAAG0e,KAAKyV,OAAQZ,IACjDryB,EAAiBb,GAAYC,MAAMsC,EAAK8b,KAAK0V,aAAcd,IAE3DW,EAAsBvV,KAAKmV,SAAStzB,UAAUpB,GAC9C8B,EAAiBZ,GAAYC,MAAMqC,EAAKsxB,EAAaZ,WAEhCpzB,GAAO4D,MAAM5D,GAAOU,MAAMM,EAAQC,EAAQjB,GAAOE,MAAOyB,kBAM5E,YAKTsG,GAAyB,IAAI+d,GAC7Bhd,GAAyB,IAAI8d,GAC7B5d,GAAiC,IAAI8d,GACrCzd,GAAkC,IAAI0d,GACtCxd,GAAuB,IAAIkqB,GAC3B7pB,GAAoC,CAAC,GACrCC,GAAoC,CAAC,GACrCtB,GAA0B,IAAI+b,GAC9B7b,GAA0B,IAAI6b,GC5T9BrZ,GAAgC,IAAInL,GACpCqL,GAAgC,IAAIrL,GA6BpC8L,GAAwC,IAAI9L,GAC5CiM,GAA6C,IAAIjM,GACjDgN,GAAiD,IAAIhN,GCxBrD6N,GAA0C,IAAI7N,GAC9C+N,GAAqC,IAAI/N,GACzCmO,GAAgC,IAAInO,GACpCoO,GAAgC,IAAIpO,GAsCpCyO,GAAkC,IAAIzO,GACtC2O,GAAwC,IAAI3O,GAkF5CuP,GAAuC,IAAIvP,GAwD3CyQ,GAAmC4a,GAAa5E,UAAU,GAC1D1U,GAAkCsZ,GAAa5E,UAAU,GACzDxU,GAAkCoZ,GAAa5E,UAAU,GACzDvW,GAAsC,CAAC,GACvCG,GAAsC,CAAC,GACvCU,GAA2C,IAAI/Q,GAC/CiR,GAA0C,IAAIjR,GAC9CmR,GAAyC,IAAInR,GAC7CsR,GAAqC,IAAItR,GACzCqR,GAAsC,IAAIrR,GAC1CkS,GAAuC,IAAIlS,GAC3CwR,GAAkC,IAAIxR,GACtC0R,GAAkC,IAAI1R,GC9LtCuS,GAAqC,IAAIvS,GACzC6S,GAAqC,IAAI7S,GACzCiT,GAAqC,IAAIjT,GACzCuT,GAAsC,IAAIvT,GAC1C6T,GAAsC,IAAI7T,GAC1C+T,GAAqC,IAAI/T,GACzCgU,GAAqC,IAAIhU,GACzC+S,GAA2C,IAAIiX,GA2I/C0K,GAKJ,8CAHQ,kBACKv4B,SAGNgQ,WAAa,GAIhBwoB,GAAN,qCACuB,gBACD,cACZ,GAGJC,GAWJ,+BAVK,UACA,UACS,IAAI50B,WACJ,IAAIA,eACA,IAAIA,oBACC,IAAIA,oBACb7D,qBACS,IAAI6D,oBACb7D,SAGPyV,YAAc,OACdC,YAAc,GAUjBgjB,qDACiC,IAAIF,aACZ,IAAIv0B,oBACF,IAAIJ,aACX,IAAIA,aACJ,IAAIA,aACJ,IAAIA,aACJ,IAAIA,kBACC,IAAIA,kBACJ,IAAIA,kBACJ,IAAIA,iBACL,IAAIA,mDAGA,IAAIA,qBACJ,IAAIA,iBACzB7D,kBACD,OAGHqF,SAAW,4CAchBsJ,EACAmF,EACAvN,EACAwR,EACAvR,GAEAvC,GAAY00B,OAAOpyB,EAAKC,EAAK8b,KAAKtG,MAElC/X,GAAYC,MAAMoe,KAAKtG,KAAMjE,EAAS1F,WAAYiQ,KAAKsW,kBAElDC,KAAK7yB,KAAK8N,EAAMmD,gBAChBkU,KAAKnlB,KAAK8N,EAAMwC,gBAChB8U,KAAKplB,KAAK8N,EAAM0C,gBAChB6U,KAAKrlB,KAAK8N,EAAMyD,eAEfuhB,EAAsBhlB,EAAMiD,aAC5BgiB,EAAsBjlB,EAAMuD,aAE5BpG,EAAgBpN,GAAOU,MAAM+d,KAAK8I,KAAM9I,KAAK6I,KAAMuN,EAAaM,SACtE/nB,EAAMvL,iBACDuzB,UAAUryB,IAAIqK,EAAMlI,GAAIkI,EAAM/Q,OAC7Bg5B,EAAkBr1B,GAAO4D,MAC7B6a,KAAK2W,UACLp1B,GAAOU,MAAM+d,KAAKsW,YAAatW,KAAK6I,KAAMtnB,GAAOE,OAE/Co1B,EAAU,EACVC,EAAU,EACVC,GAAU,EACVC,GAAU,KAGVR,EAAY,KACRS,EAAgB11B,GAAOU,MAAM+d,KAAK6I,KAAM7I,KAAKuW,KAAMH,EAAac,SACtED,EAAM7zB,iBACD+zB,UAAU7yB,IAAI2yB,EAAMxwB,GAAIwwB,EAAMr5B,GACnCm5B,EAAUx1B,GAAOkV,QAAQwgB,EAAOtoB,IAAU,EAC1CkoB,EAAUt1B,GAAO4D,MACf6a,KAAKmX,UACL51B,GAAOU,MAAM+d,KAAKsW,YAAatW,KAAKuW,KAAMh1B,GAAOE,UAKjDg1B,EAAY,KACRW,EAAgB71B,GAAOU,MAAM+d,KAAK+I,KAAM/I,KAAK8I,KAAMsN,EAAaiB,SACtED,EAAMh0B,iBACDk0B,UAAUhzB,IAAI8yB,EAAM3wB,GAAI2wB,EAAMx5B,GACnCo5B,EAAUz1B,GAAOkV,QAAQ9H,EAAOyoB,GAAS,EACzCN,EAAUv1B,GAAO4D,MACf6a,KAAKsX,UACL/1B,GAAOU,MAAM+d,KAAKsW,YAAatW,KAAK8I,KAAMvnB,GAAOE,OAKjD+0B,GAAcC,EACZM,GAAWC,QACRO,QAAUV,GAAW,GAAKD,GAAW,GAAKE,GAAW,EACtD9W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAKmX,gBACvBO,aAAah0B,KAAKsc,KAAKsX,kBAEvBE,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,YAEhC0xB,QACJQ,QAAUV,GAAW,GAAMD,GAAW,GAAKE,GAAW,EACvD9W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAKmX,gBACvBO,aAAah0B,KAAKsc,KAAK2W,kBAEvBa,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAKsX,WAAWjyB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,YAEhC2xB,QACJO,QAAUT,GAAW,GAAMD,GAAW,GAAKD,GAAW,EACvD5W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAKsX,kBAEvBE,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAKmX,WAAW9xB,kBAGpCkyB,QAAUV,GAAW,GAAKD,GAAW,GAAKE,GAAW,EACtD9W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAK2W,kBAEvBa,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAKsX,WAAWjyB,eAClCqyB,aAAah0B,KAAKsc,KAAKmX,WAAW9xB,YAGlCmxB,EACLO,QACGQ,QAAUV,GAAW,GAAKD,GAAW,EACtC5W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAKmX,gBACvBO,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,iBAElCmyB,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,kBAGpCkyB,QAAUV,GAAW,GAAKD,GAAW,EACtC5W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,iBAElCmyB,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAKmX,WAAW9xB,YAGlCoxB,EACLO,QACGO,QAAUX,GAAW,GAAKE,GAAW,EACtC9W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAKsX,kBAEvBE,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,mBAGzBY,QAAUX,GAAW,GAAKE,GAAW,EACtC9W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,kBAEvBa,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAKsX,WAAWjyB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,mBAI3BY,QAAUX,GAAW,EACtB5W,KAAKuX,cACFC,SAAS9zB,KAAKsc,KAAK2W,gBACnBc,aAAa/zB,KAAKsc,KAAK2W,WAAWtxB,eAClCqyB,aAAah0B,KAAKsc,KAAK2W,WAAWtxB,iBAElCmyB,SAAS9zB,KAAKsc,KAAK2W,WAAWtxB,eAC9BoyB,aAAa/zB,KAAKsc,KAAK2W,gBACvBe,aAAah0B,KAAKsc,KAAK2W,kBAK3BgB,WAAW3vB,MAAQyN,EAASjV,YAC5B,IAAIjD,EAAI,EAAGA,EAAIkY,EAASjV,UAAWjD,EAClCyiB,KAAK2X,WAAW53B,SAAS3C,QAAUG,QAChCo6B,WAAW53B,SAASoe,KAAK,IAAI5c,IAEhCye,KAAK2X,WAAW9pB,QAAQzQ,QAAUG,QAC/Bo6B,WAAW9pB,QAAQsQ,KAAK,IAAI5c,IAEnCI,GAAYC,MAAMoe,KAAKtG,KAAMjE,EAASzV,WAAWzC,GAAIyiB,KAAK2X,WAAW53B,SAASxC,IAC9E6D,GAAM+N,MAAM6Q,KAAKtG,KAAKpY,EAAGmU,EAAS3H,UAAUvQ,GAAIyiB,KAAK2X,WAAW9pB,QAAQtQ,SAGrEwF,SAAW0S,EAAS1S,SAAWyO,EAAMzO,SAE1CsJ,EAAStG,WAAa,MAEhB6xB,EAAqB5X,KAAK6X,sBAAsBzB,EAAa0B,mBAG/DF,EAAS7qB,QAIT6qB,EAASlqB,WAAasS,KAAKjd,eAIzBg1B,EAAwB/X,KAAKgY,yBAAyB5B,EAAa6B,wBACrEF,EAAYhrB,MAAmCgrB,EAAYrqB,WAAasS,KAAKjd,eAQ7Em1B,EAHEC,EAAgB,IAChBC,EAAgB,KAIpBF,MADEH,EAAYhrB,KACA6qB,EACLG,EAAYrqB,WAAayqB,EAAgBP,EAASlqB,WAAa0qB,EAC1DL,EAEAH,MAGVS,EAAqBjC,EAAakC,KAClCC,EAAsBnC,EAAaoC,YACrCN,EAAYnrB,KAA+B,CAC7CV,EAASU,eAGLob,EAAY,EACZC,EAAoB7mB,GAAO4D,MAAM6a,KAAKwX,SAAUxX,KAAK2X,WAAW9pB,QAAQ,IACnEtQ,EAAI,EAAGA,EAAIyiB,KAAK2X,WAAW3vB,QAASzK,EAAG,KACxCP,EAAgBuE,GAAO4D,MAAM6a,KAAKwX,SAAUxX,KAAK2X,WAAW9pB,QAAQtQ,IACtEP,EAAQorB,IACVA,EAAYprB,EACZmrB,EAAY5qB,OAIVwT,EAAaoX,EACbnX,GAAcD,EAAK,GAAKiP,KAAK2X,WAAW3vB,MAExCywB,EAAoBJ,EAAG,GAC7BI,EAAI9zB,EAAEjB,KAAKsc,KAAK2X,WAAW53B,SAASgR,IACpC0nB,EAAIvyB,GAAGmB,GAAG5G,OAAS,EACnBg4B,EAAIvyB,GAAGmB,GAAG3G,OAASqQ,EACnB0nB,EAAIvyB,GAAGmB,GAAGC,QACVmxB,EAAIvyB,GAAGmB,GAAGE,YAEJmxB,EAAoBL,EAAG,GAC7BK,EAAI/zB,EAAEjB,KAAKsc,KAAK2X,WAAW53B,SAASiR,IACpC0nB,EAAIxyB,GAAGmB,GAAG5G,OAAS,EACnBi4B,EAAIxyB,GAAGmB,GAAG3G,OAASsQ,EACnB0nB,EAAIxyB,GAAGmB,GAAGC,QACVoxB,EAAIxyB,GAAGmB,GAAGE,QAENyY,KAAKuX,SACPgB,EAAGxnB,GAAK,EACRwnB,EAAGvnB,GAAK,EACRunB,EAAGtqB,GAAGvK,KAAKsc,KAAK6I,MAChB0P,EAAGrqB,GAAGxK,KAAKsc,KAAK8I,MAChByP,EAAGr1B,OAAOQ,KAAKsc,KAAK2W,aAEpB4B,EAAGxnB,GAAK,EACRwnB,EAAGvnB,GAAK,EACRunB,EAAGtqB,GAAGvK,KAAKsc,KAAK8I,MAChByP,EAAGrqB,GAAGxK,KAAKsc,KAAK6I,MAChB0P,EAAGr1B,OAAOQ,KAAKsc,KAAK2W,WAAWtxB,eAE5B,CACLgH,EAASU,WAEH0rB,EAAoBJ,EAAG,GAC7BI,EAAI9zB,EAAEjB,KAAKsc,KAAK6I,MAChB4P,EAAIvyB,GAAGmB,GAAG5G,OAAS,EACnBg4B,EAAIvyB,GAAGmB,GAAG3G,OAASw3B,EAAY3oB,MAC/BkpB,EAAIvyB,GAAGmB,GAAGC,QACVmxB,EAAIvyB,GAAGmB,GAAGE,YAEJmxB,EAAoBL,EAAG,GAC7BK,EAAI/zB,EAAEjB,KAAKsc,KAAK8I,MAChB4P,EAAIxyB,GAAGmB,GAAG5G,OAAS,EACnBi4B,EAAIxyB,GAAGmB,GAAG3G,OAASw3B,EAAY3oB,MAC/BmpB,EAAIxyB,GAAGmB,GAAGC,QACVoxB,EAAIxyB,GAAGmB,GAAGE,QAEVgxB,EAAGxnB,GAAKmnB,EAAY3oB,MACpBgpB,EAAGvnB,IAAMunB,EAAGxnB,GAAK,GAAKiP,KAAK2X,WAAW3vB,MACtCuwB,EAAGtqB,GAAGvK,KAAKsc,KAAK2X,WAAW53B,SAASw4B,EAAGxnB,KACvCwnB,EAAGrqB,GAAGxK,KAAKsc,KAAK2X,WAAW53B,SAASw4B,EAAGvnB,KACvCunB,EAAGr1B,OAAOQ,KAAKsc,KAAK2X,WAAW9pB,QAAQ0qB,EAAGxnB,KAG5CwnB,EAAGI,YAAYr0B,IAAIi0B,EAAGr1B,OAAOuD,GAAI8xB,EAAGr1B,OAAOtF,GAC3C26B,EAAGK,YAAYl1B,KAAK60B,EAAGI,aAAatzB,UACpCkzB,EAAGplB,YAAc5R,GAAO4D,MAAMozB,EAAGI,YAAaJ,EAAGtqB,IACjDsqB,EAAGnlB,YAAc7R,GAAO4D,MAAMozB,EAAGK,YAAaL,EAAGrqB,QAG3CmF,EAA8B+iB,EAAayC,cAC3CtlB,EAA8B6iB,EAAa0C,mBAI5CpyB,EAAoB2M,EAAaglB,EAAIE,EAAGI,YAAaJ,EAAGplB,YAAaolB,EAAGxnB,IAEpE1K,IAKJK,EAAoB6M,EAAaF,EAAaklB,EAAGK,YAAaL,EAAGnlB,YAAamlB,EAAGvnB,IAE7E3K,SAKL6xB,EAAYnrB,MACdV,EAASY,YAAYvJ,KAAK60B,EAAGr1B,QAC7BmJ,EAASW,WAAWtJ,KAAK60B,EAAGtqB,MAE5B5B,EAASY,YAAYvJ,KAAK+R,EAAS3H,UAAUyqB,EAAGxnB,KAChD1E,EAASW,WAAWtJ,KAAK+R,EAASzV,WAAWu4B,EAAGxnB,cAG9ChL,EAAa,EACRxI,EAAI,EAAGA,EAAI8I,KAAwB9I,KACvBgE,GAAO4D,MACxBozB,EAAGr1B,OACH3B,GAAOU,MAAMsR,EAAYhW,GAAGoH,EAAG4zB,EAAGtqB,GAAI1M,GAAOE,QAG7Bue,KAAKjd,SAAU,KACzB4Q,EAAsBtH,EAASpG,OAAOF,OAExCmyB,EAAYnrB,MACdpL,GAAY4L,OAAOyS,KAAKtG,KAAMnG,EAAYhW,GAAGoH,EAAGgP,EAAG3G,YACnD2G,EAAGzN,GAAGxC,KAAK6P,EAAYhW,GAAG2I,MAE1ByN,EAAG3G,WAAWtJ,KAAK6P,EAAYhW,GAAGoH,GAClCgP,EAAGzN,GAAGmB,GAAGC,MAAQiM,EAAYhW,GAAG2I,GAAGmB,GAAGE,MACtCoM,EAAGzN,GAAGmB,GAAGE,MAAQgM,EAAYhW,GAAG2I,GAAGmB,GAAGC,MACtCqM,EAAGzN,GAAGmB,GAAG5G,OAAS8S,EAAYhW,GAAG2I,GAAGmB,GAAG3G,OACvCiT,EAAGzN,GAAGmB,GAAG3G,OAAS6S,EAAYhW,GAAG2I,GAAGmB,GAAG5G,UAGvCsF,EAINsG,EAAStG,WAAaA,mDAGF+P,OACdmF,EAAiBnF,EACvBmF,EAAKlO,OACLkO,EAAK1L,MAAQyQ,KAAKuX,QAAU,EAAI,EAChCtc,EAAKvN,WAAaC,OAEb,IAAIpQ,EAAI,EAAGA,EAAIyiB,KAAK2X,WAAW3vB,QAASzK,EAAG,KACxCwO,EAAYxK,GAAO4D,MACvB6a,KAAKwX,SACLj2B,GAAOU,MAAM+d,KAAK2X,WAAW53B,SAASxC,GAAIyiB,KAAK6I,KAAMtnB,GAAOE,OAE1DsK,EAAIkP,EAAKvN,aACXuN,EAAKvN,WAAa3B,UAIfkP,mDAMgBnF,OACjBmF,EAAiBnF,EACvBmF,EAAKlO,OACLkO,EAAK1L,OAAS,EACd0L,EAAKvN,YAAcC,WAEborB,EAAe3C,EAAa4C,OAAO10B,KAAK0b,KAAKwX,SAAS/wB,EAAGuZ,KAAKwX,SAAS55B,GAEpEL,EAAI,EAAGA,EAAIyiB,KAAK2X,WAAW3vB,QAASzK,EAAG,KACxCiB,EAAY+C,GAAOC,KAAKwe,KAAK2X,WAAW9pB,QAAQtQ,GAAI64B,EAAa6C,KAUjEltB,EAAYjO,EARCyD,GAAO4D,MACxB3G,EACA+C,GAAOU,MAAM+d,KAAK2X,WAAW53B,SAASxC,GAAIyiB,KAAK6I,KAAMtnB,GAAOE,OAE3CF,GAAO4D,MACxB3G,EACA+C,GAAOU,MAAM+d,KAAK2X,WAAW53B,SAASxC,GAAIyiB,KAAK8I,KAAMvnB,GAAOE,WAI1DsK,EAAIiU,KAAKjd,gBAEXkY,EAAKlO,OACLkO,EAAK1L,MAAQhS,EACb0d,EAAKvN,WAAa3B,EACXkP,KAIL1Z,GAAO4D,MAAM3G,EAAGu6B,IAAS,MAEzBx3B,GAAO4D,MAAM5D,GAAOU,MAAMzD,EAAGwhB,KAAK0X,aAAcn2B,GAAOE,MAAOue,KAAKwX,WAClE3Y,oBAMDtd,GAAO4D,MAAM5D,GAAOU,MAAMzD,EAAGwhB,KAAKyX,aAAcl2B,GAAOE,MAAOue,KAAKwX,WAClE3Y,YAMD9S,EAAIkP,EAAKvN,aACXuN,EAAKlO,OACLkO,EAAK1L,MAAQhS,EACb0d,EAAKvN,WAAa3B,UAIfkP,WAzaMmb,WAAU,IAAI70B,GACd60B,WAAU,IAAI70B,GACd60B,WAAU,IAAI70B,GACd60B,QAAOxJ,GAAa5E,UAAU,GAC9BoO,QAAO,IAAID,GACXC,iBAAgBxJ,GAAa5E,UAAU,GACvCoO,iBAAgBxJ,GAAa5E,UAAU,GACvCoO,cAAa,IAAIH,GACjBG,iBAAgB,IAAIH,GAyWpBG,OAAM,IAAI70B,GACV60B,UAAS,IAAI70B,GA2D9B,IAAMmU,GAAmD,IAAI0gB,GarnBhD8C,GAUX,iCAROx7B,WAGHA,gBAGc,IAAI6D,QAGf43B,KAAO,OACPC,EAAI,GAgBSC,yBAORtsB,EAAmBhJ,2BAFpBrG,SAGJ0c,OAASrN,OACThK,SAAWgB,yCAMb+c,eAEE/d,SAAW+d,EAAM/d,SACfid,8CAMAA,KAAK5F,gBCnDVkf,GAA2B,IAAI/3B,GAGxBg4B,kCAGCx1B,yDAAS,oCACcA,QAHZ,IAAIxC,6DAMvB6jB,OAAcrhB,yDAAiBic,KAAKjd,qBACjC0J,IAAI/I,KAAK0hB,QACTriB,SAAWgB,EACTic,4CAKA,IAAIuZ,GAAgB71B,KAAKsc,mCAG7Bc,kDACQA,QAINrU,IAAI/I,KAAKod,EAAMrU,KACbuT,oDAKA,oCAOCwZ,EAAwBj2B,OAC1ByX,EAAiBrZ,GAAYC,MAAM43B,EAAWxZ,KAAKvT,IAAK8sB,EAAcE,oBACtE54B,EAAYU,GAAOU,MAAMsB,EAAGyX,EAAQue,EAAcG,sBACjDn4B,GAAO4D,MAAMtE,EAAGA,IAAMtC,EAAKyhB,KAAKjd,kDAGzByZ,EAAiBjZ,EAAWL,EAAgBy2B,OAElD3e,EAASrZ,GAAYC,MAAM4a,EAAIwD,KAAKvT,IAAK6sB,WAC/C/3B,GAAOU,MAAMsB,EAAGyX,EAAQ9X,GACjBA,EAAOE,YAAc4c,KAAKjd,yCAgBnC5D,EACAE,EACAm6B,EACAG,OAEMvU,EAAmBzjB,GAAYC,MACnC43B,EACAxZ,KAAKvT,IACL8sB,EAAcK,oBAEV7tB,EAAYxK,GAAOU,MAAM5C,EAAM8W,GAAIiP,EAAUmU,EAAcM,aAC3D97B,EAAYwD,GAAO4D,MAAM4G,EAAGA,GAAKxN,EAAKyhB,KAAKjd,UAG3CoB,EAAY5C,GAAOU,MAAM5C,EAAM+W,GAAI/W,EAAM8W,GAAIojB,EAAcO,aAC3D1sB,EAAY7L,GAAO4D,MAAM4G,EAAG5H,GAC5BoiB,EAAahlB,GAAO4D,MAAMhB,EAAGA,GAC7BU,EAAQuI,EAAIA,EAAImZ,EAAKxoB,KAGvB8G,EAAQ,GAAK0hB,EAAKtjB,UACb,MAIL3F,IAAc8P,EAAI0J,GAAOjS,WAGzB,GAAKvH,GAAKA,GAAK+B,EAAMytB,YAAcvG,IACrCjpB,GAAKipB,EACLpnB,EAAO6tB,SAAW1vB,EAClBiE,GAAO4qB,UAAUpgB,EAAGzO,EAAG6G,EAAGhF,EAAO+D,QAAQmL,iBAClC,uCASC+O,EAAcoc,EAAwBG,OAC1Cp2B,EAAY5B,GAAYC,MAAM43B,EAAWxZ,KAAKvT,IAAK8sB,EAAcQ,iBACvE3c,EAAK5W,WAAWlC,IAAIf,EAAE3F,EAAIoiB,KAAKjd,SAAUQ,EAAEkD,EAAIuZ,KAAKjd,UACpDqa,EAAK7W,WAAWjC,IAAIf,EAAE3F,EAAIoiB,KAAKjd,SAAUQ,EAAEkD,EAAIuZ,KAAKjd,8CAI1Ci3B,EAAsBC,OAC1BC,EAAoB37B,EAAKyhB,KAAKjd,UACpCi3B,EAASb,KAAOc,EAAUxb,GAAQyb,EAClCF,EAAShf,OAAOtX,KAAKsc,KAAKvT,KAG1ButB,EAASZ,EAAIY,EAASb,MAAQ,GAAMe,EAAY34B,GAAO4D,MAAM6a,KAAKvT,IAAKuT,KAAKvT,iDAG3DumB,EAAwBzjB,GACzCyjB,EAAMhzB,WAAagzB,EAAM/K,SACzB+K,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAKvT,KAC9BumB,EAAMxyB,QAAU,EAChBwyB,EAAMjwB,SAAWid,KAAKjd,sDAGHG,EAAgB2D,EAAgB2V,EAAiBpP,OAC9D7J,EAAY5B,GAAYC,MAAM4a,EAAIwD,KAAKvT,IAAK,IAAIlL,IAChDoW,IAAcpW,GAAO4D,MAAMjC,EAAQK,GAAKsD,MAE1C8Q,GAAKqI,KAAKjd,SAAWE,UAEhB,KAEL0U,EAAIqI,KAAKjd,gBAEXqK,EAAE1J,KAAKH,GACAkb,GAAQuB,KAAKjd,SAAWid,KAAKjd,aAIhCo3B,EAAana,KAAKjd,SAAWid,KAAKjd,SAClCq3B,EAAaziB,EAAIA,EACjB5B,EAAeokB,GAAMzZ,GAAO/I,EAAIqI,KAAKjd,UAAY0b,GAAQ,GAAK9G,EAAIb,GAAOqjB,EAAKC,GAC9EC,GAAiB,EAAI,EAAKja,GAAM+Z,EAAKC,EAAI,KAAQrkB,SAEvD3I,EAAExP,EAAI2F,EAAE3F,EAAIsF,EAAOtF,EAAIy8B,EACvBjtB,EAAE3G,EAAIlD,EAAEkD,EAAIvD,EAAOuD,EAAI4zB,EAEhBtkB,SArJwBsjB,IAiClBE,sBAAqB,IAAIh4B,GACzBg4B,iBAAgB,IAAIh4B,GAuBpBg4B,sBAAqB,IAAIh4B,GACzBg4B,eAAc,IAAIh4B,GAClBg4B,eAAc,IAAIh4B,GA0ClBg4B,mBAAkB,IAAIh4B,GbjGvC,IAAM+4B,GAA2B,IAAI/4B,GAC/Bg5B,GAAyC,IAAIh5B,GAC7Ci5B,GAAgC,IAAIj5B,GACpCk5B,GAA6B,IAAIl5B,GAGjC0U,GAAyB,IAAI1U,GAC7B+U,GAAuB,IAAI/U,GAC3BgV,GAAuB,IAAIhV,GAoDpBm5B,oEAOyB12B,gBANN,IAAIzC,GAAO,EAAG,gBACrB,CAAC,IAAIA,gBACN,CAAC,IAAIA,cACjB,uEAQD,IAAIm5B,GAAiBh3B,KAAKsc,mCAG9Bc,2CACQA,QAIN/Q,WAAWrM,KAAKod,EAAM/Q,iBACtBvP,QAAUsgB,EAAMtgB,aAChBR,WAAauB,GAAOymB,UAAUhI,KAAKxf,cACnCsN,UAAYvM,GAAOymB,UAAUhI,KAAKxf,aAClC,IAAIjD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,OAC7ByC,WAAWzC,GAAGmG,KAAKod,EAAM9gB,WAAWzC,SACpCuQ,UAAUvQ,GAAGmG,KAAKod,EAAMhT,UAAUvQ,WAElCyiB,oDAKA,2DAaF2a,2BAAAA,qBACqB,iBAAfA,EAAK,GAAG,GAAiB,KAC5B56B,EAAqB46B,EAAK,MAC5B56B,EAAS3C,OAAS,GAAM,QACpB,IAAI+K,aAEL6X,KAAK4a,MACV,SAACrrB,SAAuB,CACtB3R,EAAGmC,EAAiB,EAARwP,GACZ9I,EAAG1G,EAAiB,EAARwP,EAAY,MAE1BxP,EAAS3C,OAAS,OAGd2C,EAAiB46B,EAAK,GACtB3yB,EAAgB2yB,EAAK,IAAM56B,EAAS3C,cACnC4iB,KAAK4a,MAAK,SAACrrB,UAAsBxP,EAASwP,KAAQvH,gCAIxDjI,EAAiCiI,MAEhCA,EAAQ,SACHgY,KAAK6a,SAAS,EAAG,WAGtBr8B,EAAYwJ,EAGV8yB,EAAW,GACRv9B,EAAI,EAAGA,EAAIiB,IAAKjB,EAAG,SACToH,EAAI5E,EAASxC,GAEjBw9B,GAAS,EACH50B,EAAI,EAAGA,EAAI20B,EAAG19B,SAAU+I,KACrC5E,GAAOuL,kBAAkBnI,EAAGm2B,EAAG30B,IAAM,GAAMpB,IAAiB,GAAMA,IAAgB,CACpFg2B,GAAS,QAKTA,GACFD,EAAG3c,KAAKxZ,OAIZnG,EAAIs8B,EAAG19B,QACC,SAGC4iB,KAAK6a,SAAS,EAAK,WAOxBG,EAAK,EACLC,EAAaH,EAAG,GAAGl9B,EACdL,EAAI,EAAGA,EAAIiB,IAAKjB,EAAG,KACpBK,EAAYk9B,EAAGv9B,GAAGK,GACpBA,EAAIq9B,GAAOr9B,IAAMq9B,GAAMH,EAAGv9B,GAAGkJ,EAAIq0B,EAAGE,GAAIv0B,KAC1Cu0B,EAAKz9B,EACL09B,EAAKr9B,WAIHs9B,EAAiB,GACnBC,EAAI,EACJC,EAAaJ,IAER,CACPE,EAAKC,GAAKC,UAEN/C,EAAK,EACAlyB,EAAI,EAAGA,EAAI3H,IAAK2H,KACnBkyB,IAAO+C,OAKLj3B,EAAY5C,GAAOU,MAAM64B,EAAGzC,GAAKyC,EAAGI,EAAKC,IAAKT,EAAeW,SAC7D12B,EAAYpD,GAAOU,MAAM64B,EAAG30B,GAAI20B,EAAGI,EAAKC,IAAKT,EAAeY,SAC5DluB,EAAY7L,GAAOkV,QAAQtS,EAAGQ,GAChCyI,EAAI,IACNirB,EAAKlyB,GAIG,IAANiH,GAAWzI,EAAE3D,gBAAkBmD,EAAEnD,kBACnCq3B,EAAKlyB,QAbLkyB,EAAKlyB,OAiBPg1B,EACFC,EAAK/C,EAEDA,IAAO2C,aAKRx6B,QAAU26B,OACVn7B,WAAauB,GAAOymB,UAAUhI,KAAKxf,cACnCsN,UAAYvM,GAAOymB,UAAUhI,KAAKxf,aAGlC,IAAIjD,EAAI,EAAGA,EAAI49B,IAAK59B,OAClByC,WAAWzC,GAAGmG,KAAKo3B,EAAGI,EAAK39B,SAI7B,IAAIA,EAAI,EAAGA,EAAI49B,IAAK59B,EAAG,KACpBg+B,EAAmBvb,KAAKhgB,WAAWzC,GACnCi+B,EAAmBxb,KAAKhgB,YAAYzC,EAAI,GAAK49B,GAC7ChrB,EAAe5O,GAAOU,MAAMu5B,EAAUD,EAAUh6B,GAAOE,MAE7DF,GAAOgR,UAAUpC,EAAM6P,KAAKlS,UAAUvQ,IAAI8Q,uBAI5CuH,EAAgBoK,KAAKhgB,WAAYm7B,EAAGnb,KAAKjQ,YAElCiQ,sCAQAyb,EAAYC,EAAY1gB,OAAawD,yDAAQ,UAC/Che,QAAU,OACVR,WAAauB,GAAOymB,UAAU,QAC9Bla,UAAYvM,GAAOymB,UAAU,QAC7BhoB,WAAW,GAAGsE,KAAKm3B,GAAKC,QACxB17B,WAAW,GAAGsE,IAAIm3B,GAAKC,QACvB17B,WAAW,GAAGsE,IAAIm3B,EAAIC,QACtB17B,WAAW,GAAGsE,KAAKm3B,EAAIC,QACvB5tB,UAAU,GAAGxJ,IAAI,GAAI,QACrBwJ,UAAU,GAAGxJ,IAAI,EAAG,QACpBwJ,UAAU,GAAGxJ,IAAI,EAAG,QACpBwJ,UAAU,GAAGxJ,KAAK,EAAG,QACrByL,WAAWlM,UAEZmX,EAAQ,MACLjL,WAAWrM,KAAKsX,OAEfwB,EAAkB,IAAI7a,GAC5B6a,EAAGmf,YAAY3gB,GACfwB,EAAGof,iBAAiBpd,OAGf,IAAIjhB,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAClCoE,GAAYC,MAAM4a,EAAIwD,KAAKhgB,WAAWzC,GAAIyiB,KAAKhgB,WAAWzC,IAC1D6D,GAAM+N,MAAMqN,EAAGlb,EAAG0e,KAAKlS,UAAUvQ,GAAIyiB,KAAKlS,UAAUvQ,WAIjDyiB,uCAMCxD,EAAiBjZ,WACnBs4B,EAAiBl6B,GAAY4L,OAAOiP,EAAIjZ,EAAGm3B,EAAeoB,oBAEvDv+B,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,KACdgE,GAAO4D,MACzB6a,KAAKlS,UAAUvQ,GACfgE,GAAOU,MAAM45B,EAAQ7b,KAAKhgB,WAAWzC,GAAIgE,GAAOE,OAExC,SACD,SAIJ,0CAGO+a,EAAiBjZ,EAAWL,EAAgBy2B,WAElDkC,EAASl6B,GAAY4L,OAAOiP,EAAIjZ,EAAG+2B,IACrCyB,GAAepuB,GACbquB,EAAuBzB,GAAuC72B,KAAKm4B,GAEhEt+B,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BkS,EAAMlO,GAAO4D,MACjB6a,KAAKlS,UAAUvQ,GACfgE,GAAOU,MAAM45B,EAAQ7b,KAAKhgB,WAAWzC,GAAIgE,GAAOE,OAE9CgO,EAAMssB,IACRA,EAActsB,EACdusB,EAAqBt4B,KAAKsc,KAAKlS,UAAUvQ,QAIzCw+B,EAAc,EAAG,SACbE,EAAczB,GAA8B92B,KAAKs4B,GACnDE,EAAeH,EAAcA,EACxBx+B,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BkF,EAAWlB,GAAOU,MAAM45B,EAAQ7b,KAAKhgB,WAAWzC,GAAIk9B,IACpD0B,EAAY15B,EAASzB,gBACvBk7B,EAAeC,IACjBF,EAAYv4B,KAAKjB,GACjBy5B,EAAeC,UAInB/6B,GAAM+N,MAAMqN,EAAGlb,EAAG26B,EAAa/4B,GAC/BA,EAAOE,YACA1E,KAAKC,KAAKu9B,UAEjB96B,GAAM+N,MAAMqN,EAAGlb,EAAG06B,EAAsB94B,GACjC64B,kCAaX58B,EACAE,EACAmd,EACAmd,WAGMxjB,EAAaxU,GAAY4L,OAAOiP,EAAInd,EAAM8W,GAAIukB,EAAe0B,cAC7DhmB,EAAazU,GAAY4L,OAAOiP,EAAInd,EAAM+W,GAAIskB,EAAe2B,cAC7Dx7B,EAAYU,GAAOU,MAAMmU,EAAID,EAAIukB,EAAe4B,aAElDC,EAAQ,EACVC,EAAQn9B,EAAMytB,YAEZvd,GAAS,EAEJhS,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAI/Bk/B,EAAoBl7B,GAAO4D,MAC/B6a,KAAKlS,UAAUvQ,GACfgE,GAAOU,MAAM+d,KAAKhgB,WAAWzC,GAAI4Y,EAAI5U,GAAOE,OAExCi7B,EAAsBn7B,GAAO4D,MAAM6a,KAAKlS,UAAUvQ,GAAIsD,MAExC,IAAhB67B,MACED,EAAY,SACP,OAOLC,EAAc,GAAKD,EAAYF,EAAQG,GAGzCH,EAAQE,EAAYC,EACpBntB,EAAQhS,GACCm/B,EAAc,GAAKD,EAAYD,EAAQE,IAGhDF,EAAQC,EAAYC,MAQpBF,EAAQD,SACH,SAMPhtB,GAAS,IACXpQ,EAAO6tB,SAAWuP,EAClBn7B,GAAM+N,MAAMqN,EAAGlb,EAAG0e,KAAKlS,UAAUyB,GAAQpQ,EAAO+D,SACzC,uCASCka,EAAcZ,EAAiBmd,WACnC4C,EAAgB56B,GAAYC,MAAM4a,EAAIwD,KAAKhgB,WAAW,GAAIod,EAAK5W,YAC/Dg2B,EAAgBpf,EAAK7W,WAAW7C,KAAK64B,GAElCh/B,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BoH,EAAYhD,GAAYC,MAAM4a,EAAIwD,KAAKhgB,WAAWzC,GAAIm9B,EAAeiC,iBAC3Ep7B,GAAOq7B,KAAKj4B,EAAG43B,EAAOA,GACtBh7B,GAAOs7B,KAAKl4B,EAAG63B,EAAOA,OAGlBr4B,EAAY6b,KAAKjd,SACvBw5B,EAAMO,UAAU34B,EAAGA,GACnBq4B,EAAMO,UAAU54B,EAAGA,uCAST61B,EAAsBC,WA2B1Bjf,EAAiB0f,EAAesC,qBAAqBn5B,UACvDkS,EAAO,EACPqjB,EAAI,EAIFrtB,EAAY2uB,EAAeuC,gBAAgBp5B,UAGxCtG,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAClCwO,EAAEkX,QAAQjD,KAAKhgB,WAAWzC,IAE5BwO,EAAE2K,QAAQ,EAAIsJ,KAAKxf,iBAEb08B,EAAiB,EAAI,EAElB3/B,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAE/BsX,EAAatT,GAAOU,MAAM+d,KAAKhgB,WAAWzC,GAAIwO,EAAG2uB,EAAeyC,kBAChEhoB,EAAa5T,GAAOU,MACxB+d,KAAKhgB,YAAYzC,EAAI,GAAKyiB,KAAKxf,SAC/BuL,EACA2uB,EAAe0C,kBAGXlL,EAAY3wB,GAAOkV,QAAQ5B,EAAIM,GAE/BqB,EAAuB,GAAM0b,EACnCnc,GAAQS,EAGRwE,EAAOiI,QACL1hB,GAAO87B,MAAM7mB,EAAe0mB,EAAQ37B,GAAOskB,MAAMhR,EAAIM,EAAI5T,GAAOE,MAAOF,GAAOiD,WAG1E84B,EAAczoB,EAAGjX,EACjB2/B,EAAc1oB,EAAGpO,EACjB+2B,EAAcroB,EAAGvX,EACjB6/B,EAActoB,EAAG1O,EAKvB2yB,GAAK,IAAO8D,EAAShL,GAHCoL,EAAMA,EAAME,EAAMF,EAAME,EAAMA,GAC9BD,EAAMA,EAAME,EAAMF,EAAME,EAAMA,IAMtDzD,EAASb,KAAOc,EAAUlkB,EAI1BiF,EAAOtE,QAAQ,EAAIX,GACnBxU,GAAOskB,MAAM7K,EAAQjP,EAAGiuB,EAAShf,QAGjCgf,EAASZ,EAAIa,EAAUb,EAGvBY,EAASZ,GACPY,EAASb,MACR53B,GAAO4D,MAAM60B,EAAShf,OAAQgf,EAAShf,QAAUzZ,GAAO4D,MAAM6V,EAAQA,2CAOpE,IAAIzd,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,UAC5BwT,EAAKxT,EACLyT,GAAMzT,EAAI,GAAKyiB,KAAKxf,QACpB+C,EAAYyc,KAAKhgB,WAAW+Q,GAC5BoD,EAAY5S,GAAOU,MAAM+d,KAAKhgB,WAAWgR,GAAKzN,EAAGm3B,EAAegD,cAE7Dv3B,EAAI,EAAGA,EAAI6Z,KAAKxf,UAAW2F,KAC9BA,IAAM4K,GAAM5K,IAAM6K,OAIhBrM,EAAYpD,GAAOU,MAAM+d,KAAKhgB,WAAWmG,GAAI5C,EAAGm3B,EAAeiD,iBACnDp8B,GAAOkV,QAAQtC,EAAGxP,GAC5B,SACC,SAKN,6CAGUquB,EAAwBzjB,GACzCyjB,EAAMhzB,WAAaggB,KAAKhgB,WACxBgzB,EAAMxyB,QAAUwf,KAAKxf,QACrBwyB,EAAMjwB,SAAWid,KAAKjd,sDASHG,EAAgB2D,EAAgB2V,EAAiBpP,WAE9DwwB,EAAkBx8B,GAAMC,OAC5Bmb,EAAGlb,EACH4B,EACAw3B,EAAemD,gCAEXC,EAAkBj3B,EAAStF,GAAO4D,MAAMjC,EAAQsZ,EAAGjZ,GAEnDw6B,EAAmB,GACrBC,EAAY,EACZC,GAAa,EACbC,GAAa,EAEbC,GAAgB,EACX5gC,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,CACrCwgC,EAAOxgC,GAAKgE,GAAO4D,MAAMy4B,EAAS5d,KAAKhgB,WAAWzC,IAAMugC,MAClDM,EAAuBL,EAAOxgC,IAAM0F,GACtC1F,EAAI,IACF6gC,EACGD,IACHF,EAAY1gC,EAAI,EAChBygC,KAGEG,IACFD,EAAY3gC,EAAI,EAChBygC,MAING,EAAgBC,SAEVJ,QACD,KACCG,EAAe,KAEXE,EAAiB3D,EAAe4D,sCACjCC,YAAYF,EAAI,GACrB18B,GAAYC,MAAM4a,EAAI6hB,EAAGrjB,OAAQ5N,GAC1BixB,EAAGlF,YAGH,OAEN,GACgB,IAAf8E,EACFA,EAAYje,KAAKxf,QAAU,EAE3B09B,EAAYle,KAAKxf,QAAU,UAsB7B6V,EAlBEmoB,GAAsBP,EAAY,GAAKje,KAAKxf,QAC5Ci+B,GAAsBP,EAAY,GAAKle,KAAKxf,QAC5Ck+B,GAAsB,EAAIX,EAAOE,KAAeF,EAAOS,GAAcT,EAAOE,IAC5EU,GAAsB,EAAIZ,EAAOG,KAAeH,EAAOU,GAAcV,EAAOG,IAE5EU,EAAkBlE,EAAemE,+BAA+Bv6B,IACpE0b,KAAKhgB,WAAWi+B,GAAWrgC,GAAK,EAAI8gC,GAAc1e,KAAKhgB,WAAWw+B,GAAY5gC,EAAI8gC,EAClF1e,KAAKhgB,WAAWi+B,GAAWx3B,GAAK,EAAIi4B,GAAc1e,KAAKhgB,WAAWw+B,GAAY/3B,EAAIi4B,GAE9EI,EAAkBpE,EAAeqE,+BAA+Bz6B,IACpE0b,KAAKhgB,WAAWk+B,GAAWtgC,GAAK,EAAI+gC,GAAc3e,KAAKhgB,WAAWy+B,GAAY7gC,EAAI+gC,EAClF3e,KAAKhgB,WAAWk+B,GAAWz3B,GAAK,EAAIk4B,GAAc3e,KAAKhgB,WAAWy+B,GAAYh4B,EAAIk4B,GAIhF5oB,EAAO,EACLiF,EAAiB0f,EAAesE,8BAA8Bn7B,UAChEuS,EAAa4J,KAAKhgB,WAAWw+B,GAI7BjhC,EAAYihC,EACTjhC,IAAMkhC,GAAY,CAGrBpoB,GAFF9Y,GAAKA,EAAI,GAAKyiB,KAAKxf,WACTi+B,EACHK,EAEA9e,KAAKhgB,WAAWzC,OAGjBiZ,EACJ,KAAQJ,EAAGxY,EAAIghC,EAAQhhC,IAAMyY,EAAG5P,EAAIm4B,EAAQn4B,IAAM2P,EAAG3P,EAAIm4B,EAAQn4B,IAAM4P,EAAGzY,EAAIghC,EAAQhhC,IACxFmY,GAAQS,EAERwE,EAAOpd,GAAM4Y,GAAgBooB,EAAQhhC,EAAIwY,EAAGxY,EAAIyY,EAAGzY,GAAM,EACzDod,EAAOvU,GAAM+P,GAAgBooB,EAAQn4B,EAAI2P,EAAG3P,EAAI4P,EAAG5P,GAAM,EAEzD2P,EAAKC,SAIP2E,EAAOtE,QAAQ,EAAIX,GACnBpU,GAAYC,MAAM4a,EAAIxB,EAAQ5N,GAEvB2I,SA7kByBsjB,IAwCnBqB,WAAU,IAAIn5B,GACdm5B,WAAU,IAAIn5B,GAwKdm5B,sBAAqB,IAAIn5B,GA4DzBm5B,gBAAe,IAAIn5B,GACnBm5B,gBAAe,IAAIn5B,GACnBm5B,eAAc,IAAIn5B,GAsElBm5B,mBAAkB,IAAIn5B,GAkBtBm5B,wBAAuB,IAAIn5B,GAC3Bm5B,mBAAkB,IAAIn5B,GACtBm5B,oBAAmB,IAAIn5B,GACvBm5B,oBAAmB,IAAIn5B,GA4FvBm5B,gBAAe,IAAIn5B,GACnBm5B,gBAAe,IAAIn5B,GA+BnBm5B,kCAAiC,IAAIn5B,GACrCm5B,6BAA4B,IAAIxB,GAChCwB,kCAAiC,IAAIn5B,GACrCm5B,kCAAiC,IAAIn5B,GACrCm5B,iCAAgC,IAAIn5B,Gc7iBrD,IAAM09B,GAAuB,IAAI19B,GAC3B29B,GAAuB,IAAI39B,GAC3B49B,GAAsB,IAAI59B,GAC1B69B,GAAsB,IAAI79B,GAKnB89B,oEASsBr7B,eARJ,IAAIzC,eACJ,IAAIA,eACJ,IAAIA,eACJ,IAAIA,mBAClB,kBACA,4DAOX0M,EAAQC,eACL8F,UAAUtQ,KAAKuK,QACfiG,UAAUxQ,KAAKwK,QACfuG,cAAe,OACfM,cAAe,EACbiL,4CAKA,IAAIqf,GAAc37B,KAAKsc,mCAG3Bc,kDACQA,QAIN9M,UAAUtQ,KAAKod,EAAM9M,gBACrBE,UAAUxQ,KAAKod,EAAM5M,gBACrBS,UAAUjR,KAAKod,EAAMnM,gBACrBM,UAAUvR,KAAKod,EAAM7L,gBACrBR,aAAeqM,EAAMrM,kBACrBM,aAAe+L,EAAM/L,aAEnBiL,oDAKA,oCAICxD,EAAiBjZ,UAClB,0CAGOiZ,EAAiBjZ,EAAWL,EAAgBy2B,OAElD1rB,EAAKtM,GAAYC,MAAM4a,EAAIwD,KAAKhM,UAAWirB,IAC3C/wB,EAAKvM,GAAYC,MAAM4a,EAAIwD,KAAK9L,UAAWgrB,IAE3Cr+B,EAAIU,GAAOU,MAAMsB,EAAG0K,EAAIkxB,IACxBpzB,EAAIxK,GAAOU,MAAMiM,EAAID,EAAImxB,IACzBE,EAAK/9B,GAAO4D,MAAMtE,EAAGkL,MACvBuzB,EAAK,EAAG,KACJ/zB,EAAKhK,GAAO4D,MAAM4G,EAAGA,GACvBuzB,EAAK/zB,EACPhK,GAAOU,MAAMsB,EAAG2K,EAAIrN,GAEpBA,EAAEyC,WAAWg8B,EAAK/zB,EAAIQ,UAG1B7I,EAAOQ,KAAK7C,GACLqC,EAAOE,4CAmBhBjE,EACAE,EACAmd,EACAmd,OAGMxjB,EAAaxU,GAAY4L,OAAOiP,EAAInd,EAAM8W,GAAIkpB,EAAYjD,cAC1DhmB,EAAazU,GAAY4L,OAAOiP,EAAInd,EAAM+W,GAAIipB,EAAYhD,cAC1Dx7B,EAAYU,GAAOU,MAAMmU,EAAID,EAAIkpB,EAAY/C,aAE7CruB,EAAa+R,KAAKhM,UAClB9F,EAAa8R,KAAK9L,UAClBC,EAAY5S,GAAOU,MAAMiM,EAAID,EAAIoxB,EAAYE,aAC7Cr8B,EAAiB/D,EAAO+D,OAAOoB,IAAI6P,EAAE1N,GAAI0N,EAAEvW,GAAGyQ,gBAK9CouB,EAAoBl7B,GAAO4D,MAAMjC,EAAQ3B,GAAOU,MAAMgM,EAAIkI,EAAI5U,GAAOE,OACrEi7B,EAAsBn7B,GAAO4D,MAAMjC,EAAQrC,MAE7B,IAAhB67B,SACK,MAGH/yB,EAAY8yB,EAAYC,KAC1B/yB,EAAI,GAAKtK,EAAMytB,YAAcnjB,SACxB,MAGHrI,EAAYC,GAAO4qB,UAAUhW,EAAIxM,EAAG9I,EAAGw+B,EAAYG,aAInDr7B,EAAY5C,GAAOU,MAAMiM,EAAID,EAAIoxB,EAAYvF,aAC7CvT,EAAahlB,GAAO4D,MAAMhB,EAAGA,MACxB,IAAPoiB,SACK,MAGHxa,EAAYxK,GAAO4D,MAAM5D,GAAOU,MAAMX,EAAG2M,EAAI1M,GAAOE,MAAO0C,GAAKoiB,UAClExa,EAAI,GAAK,EAAIA,IAIjB5M,EAAO6tB,SAAWrjB,EAClBvI,GAAM+N,MAAMqN,EAAGlb,EAAGnC,EAAO+D,OAAQ/D,EAAO+D,QACpCu5B,EAAY,GACdt9B,EAAO+D,OAAOmC,UAET,wCAOG+X,EAAcZ,EAAiBmd,OACnC1rB,EAAatM,GAAYC,MAAM4a,EAAIwD,KAAKhM,UAAWqrB,EAAYI,kBAC/DvxB,EAAavM,GAAYC,MAAM4a,EAAIwD,KAAK9L,UAAWmrB,EAAYK,kBAErEn+B,GAAOq7B,KAAK3uB,EAAIC,EAAIkP,EAAK5W,YACzBjF,GAAOs7B,KAAK5uB,EAAIC,EAAIkP,EAAK7W,gBAEnBpC,EAAY6b,KAAKjd,SACvBqa,EAAK5W,WAAWs2B,UAAU34B,EAAGA,GAC7BiZ,EAAK7W,WAAWw2B,UAAU54B,EAAGA,uCAInB61B,EAAsBC,GAChCD,EAASb,KAAO,EAChB53B,GAAOiC,MAAMwc,KAAKhM,UAAWgM,KAAK9L,UAAW8lB,EAAShf,QACtDgf,EAASZ,EAAI,6CAGIpG,EAAwBzjB,GACzCyjB,EAAMhzB,WAAagzB,EAAM/K,SACzB+K,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAKhM,WAC9Bgf,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAK9L,WAC9B8e,EAAMxyB,QAAU,EAChBwyB,EAAMjwB,SAAWid,KAAKjd,sDAGHG,EAAgB2D,EAAgB2V,EAAiBpP,UACpEA,EAAEvJ,UACK,SA7KsBw1B,IA+EhBgG,gBAAe,IAAI99B,GACnB89B,gBAAe,IAAI99B,GACnB89B,eAAc,IAAI99B,GAClB89B,eAAc,IAAI99B,GAClB89B,eAAc,IAAI99B,GAClB89B,eAAc,IAAI99B,GAyDlB89B,oBAAmB,IAAI99B,GACvB89B,oBAAmB,IAAI99B,OChJ3Bo+B,oEASuB37B,gBARX,aACb,iBACc,IAAIzC,kBACJ,IAAIA,sBACV,qBACA,gGAYJo5B,2BAAAA,qBACc,iBAAfA,EAAK,GAAG,GAAiB,KAC5B56B,EAAqB46B,EAAK,MAC5B56B,EAAS3C,OAAS,GAAM,QACpB,IAAI+K,aAEL6X,KAAK4f,aACV,SAACrwB,SAAuB,CACtB3R,EAAGmC,EAAiB,EAARwP,GACZ9I,EAAG1G,EAAiB,EAARwP,EAAY,MAE1BxP,EAAS3C,OAAS,OAGd2C,EAAiB46B,EAAK,GACtB3yB,EAAgB2yB,EAAK,IAAM56B,EAAS3C,cACnC4iB,KAAK4f,aAAY,SAACrwB,UAAsBxP,EAASwP,KAAQvH,uCAIhDjI,EAAiCiI,MAE/CA,EAAQ,SACHgY,UASJxf,QAAUwH,EAAQ,OAClBhI,WAAauB,GAAOymB,UAAUhI,KAAKxf,aACnC,IAAIjD,EAAI,EAAGA,EAAIyK,IAASzK,OACtByC,WAAWzC,GAAGmG,KAAK3D,EAASxC,gBAE9ByC,WAAWgI,GAAOtE,KAAKsc,KAAKhgB,WAAW,SACvC0b,aAAahY,KAAKsc,KAAKhgB,WAAWggB,KAAKxf,QAAU,SACjDsb,aAAapY,KAAKsc,KAAKhgB,WAAW,SAClCyb,iBAAkB,OAClBG,iBAAkB,EAChBoE,sEASM2a,2BAAAA,qBACa,iBAAfA,EAAK,GAAG,GAAiB,KAC5B56B,EAAqB46B,EAAK,MAC5B56B,EAAS3C,OAAS,GAAM,QACpB,IAAI+K,aAEL6X,KAAK6f,cACV,SAACtwB,SAAuB,CACtB3R,EAAGmC,EAAiB,EAARwP,GACZ9I,EAAG1G,EAAiB,EAARwP,EAAY,MAE1BxP,EAAS3C,OAAS,OAGd2C,EAAiB46B,EAAK,GACtB3yB,EAAgB2yB,EAAK,IAAM56B,EAAS3C,cACnC4iB,KAAK6f,cAAa,SAACtwB,UAAsBxP,EAASwP,KAAQvH,wCAIhDjI,EAAiCiI,QAS/CxH,QAAUwH,OACVhI,WAAauB,GAAOymB,UAAUhgB,OAC9B,IAAIzK,EAAI,EAAGA,EAAIyK,IAASzK,OACtByC,WAAWzC,GAAGmG,KAAK3D,EAASxC,gBAE9Bke,iBAAkB,OAClBG,iBAAkB,OAElBF,aAAa7X,eACbiY,aAAajY,UAEXmc,2CAKK8f,eACPpkB,aAAahY,KAAKo8B,QAClBrkB,iBAAkB,EAChBuE,2CAKK+f,eACPjkB,aAAapY,KAAKq8B,QAClBnkB,iBAAkB,EAChBoE,4CAKA,IAAI2f,GAAej8B,KAAKsc,mCAG5Bc,kDACQA,QAIN+e,cAAa,SAACtwB,UAAsBuR,EAAM9gB,WAAWuP,KAAQuR,EAAMtgB,cACnEkb,aAAahY,KAAKod,EAAMpF,mBACxBI,aAAapY,KAAKod,EAAMhF,mBACxBL,gBAAkBqF,EAAMrF,qBACxBG,gBAAkBkF,EAAMlF,gBAEtBoE,oDAMAA,KAAKxf,QAAU,uCAIX2P,EAAmBZ,GAE9BY,EAAKpN,SAAWid,KAAKjd,SAErBoN,EAAK6D,UAAUtQ,KAAKsc,KAAKhgB,WAAWuP,IACpCY,EAAK+D,UAAUxQ,KAAKsc,KAAKhgB,WAAWuP,EAAQ,IAExCA,EAAQ,GACVY,EAAKwE,UAAUjR,KAAKsc,KAAKhgB,WAAWuP,EAAQ,IAC5CY,EAAKsE,cAAe,IAEpBtE,EAAKwE,UAAUjR,KAAKsc,KAAKtE,cACzBvL,EAAKsE,aAAeuL,KAAKvE,iBAGvBlM,EAAQyQ,KAAKxf,QAAU,GACzB2P,EAAK8E,UAAUvR,KAAKsc,KAAKhgB,WAAWuP,EAAQ,IAC5CY,EAAK4E,cAAe,IAEpB5E,EAAK8E,UAAUvR,KAAKsc,KAAKlE,cACzB3L,EAAK4E,aAAeiL,KAAKpE,mDAMnBY,EAAiBjZ,UAClB,0CAMOiZ,EAAiBjZ,EAAWL,EAAgBy2B,OAElDxpB,EAAOwvB,EAAaK,wCACrBC,aAAa9vB,EAAMwpB,GACjBxpB,EAAK+vB,gBAAgB1jB,EAAIjZ,EAAGL,EAAQ,mCAY7C/D,EACAE,EACAmd,EACAmd,OAIMwG,EAAyBR,EAAaS,2BAE5CD,EAAUnsB,UAAUtQ,KAAKsc,KAAKhgB,WAAW25B,IACzCwG,EAAUjsB,UAAUxQ,KAAKsc,KAAKhgB,YAAY25B,EAAa,GAAK3Z,KAAKxf,UAE1D2/B,EAAU9L,QAAQl1B,EAAQE,EAAOmd,EAAI,uCAOlCY,EAAcZ,EAAiBmd,OAGnC4B,EAAmBvb,KAAKhgB,WAAW25B,GACnC6B,EAAmBxb,KAAKhgB,YAAY25B,EAAa,GAAK3Z,KAAKxf,SAE3DyN,EAAatM,GAAYC,MAAM4a,EAAI+e,EAAUoE,EAAaF,kBAC1DvxB,EAAavM,GAAYC,MAAM4a,EAAIgf,EAAUmE,EAAaD,kBAEhEn+B,GAAOq7B,KAAK3uB,EAAIC,EAAIkP,EAAK5W,YACzBjF,GAAOs7B,KAAK5uB,EAAIC,EAAIkP,EAAK7W,gDAKfyzB,EAAsBC,GAChCD,EAASb,KAAO,EAChBa,EAAShf,OAAOnX,UAChBm2B,EAASZ,EAAI,6CAGIpG,EAAwBzjB,GAGzCyjB,EAAMhzB,WAAagzB,EAAM/K,SACzB+K,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAKhgB,WAAWuP,IACrCA,EAAQ,EAAIyQ,KAAKxf,QACnBwyB,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAKhgB,WAAWuP,EAAQ,IAEjDyjB,EAAMhzB,WAAW,GAAG0D,KAAKsc,KAAKhgB,WAAW,IAE3CgzB,EAAMxyB,QAAU,EAChBwyB,EAAMjwB,SAAWid,KAAKjd,sDAGHG,EAAgB2D,EAAgB2V,EAAiBpP,UACpEA,EAAEvJ,UACK,SAnQuBw1B,IAyLjBsG,+BAA8B,IAAIN,GAelCM,uBAAsB,IAAIN,GAmB1BM,oBAAmB,IAAIp+B,GACvBo+B,oBAAmB,IAAIp+B,OClN3B8+B,uDAII,gBAIJ,sBAKE,mDAGJ,IAAIA,GAAW38B,KAAKsc,mCAGxBc,qBAEEwf,aAAexf,EAAMwf,kBACrBC,SAAWzf,EAAMyf,cACjBC,qBAAa1f,EAAM0f,0BAAc,EAC/BxgB,cAvBOqgB,WAA8B,IAAIA,OAwDvCI,GAwBX,kCArBkB,mBAGF,mBAGL/iC,qBAGGA,iBAGJA,mBAIC,cAGO,IAAI2iC,QAGfK,SAAW,QACXC,YAAc,OACd1G,QAAU,GAKN2G,yBAMChmB,EAAoB+e,uBALhB,IAAI1M,mBAEU,OAIvBrS,QAAUA,OACV+e,WAAaA,OACb/e,QAAQimB,QAAQC,YAAY9gB,KAAK5C,KAAM4C,KAAKpF,QAAQmmB,OAAOn2B,eAAgB+uB,QAC3Erc,SAAW0C,KAAKpF,QAAQmmB,OAAOC,QAAQC,iBAAiBC,aAAahO,YACxElT,KAAK5C,KACL4C,qDAKGpF,QAAQmmB,OAAOC,QAAQC,iBAAiBC,aAAa7N,aAAarT,KAAK1C,+CAIvE1C,QAAQmmB,OAAOC,QAAQC,iBAAiBC,aAAaC,WAAWnhB,KAAK1C,8CAMhE8jB,EAAyBC,EAAyB7Q,MACxD4Q,IAAeC,OACZzmB,QAAQimB,QAAQC,YAAY9gB,KAAK5C,KAAMgkB,EAAYphB,KAAK2Z,iBACxD/e,QAAQmmB,OAAOC,QAAQC,iBAAiBC,aAAa5N,UACxDtT,KAAK1C,SACL0C,KAAK5C,KACLoT,OAEG,KAEClD,EAAgBsT,EAAeU,oBAC/B/T,EAAgBqT,EAAeW,yBAChC3mB,QAAQimB,QAAQC,YAAYxT,EAAO8T,EAAYphB,KAAK2Z,iBACpD/e,QAAQimB,QAAQC,YAAYvT,EAAO8T,EAAYrhB,KAAK2Z,iBACpDvc,KAAK4Q,SAASV,EAAOC,QACrB3S,QAAQmmB,OAAOC,QAAQC,iBAAiBC,aAAa5N,UACxDtT,KAAK1C,SACL0C,KAAK5C,KACLoT,aArBSoQ,uBAAsB,IAAI3T,GAC1B2T,uBAAsB,IAAI3T,OA+B9BuU,yBAuBCC,EAAcxkC,4CAtBdS,oBACCA,uBACGA,gBAEW,uBAIZA,mBAEwB,iBAMT,IAAI2iC,oBAErB,kBAEK,UAGXqB,oBAAYzkC,EAAIg9B,uBAAW,OAC3B0H,qBAAa1kC,EAAIyjC,wBAAY,QAC7BkB,wBAAgB3kC,EAAI0jC,2BAAe,OACnCI,OAASU,OACTZ,QAAU5jC,EAAI4d,MAAMgnB,aACpBC,WAAa7kC,EAAI4d,MAAMT,YAEvB2nB,aAAe9kC,EAAI4d,MAAM9X,cACzBi/B,qBAAa/kC,EAAIgzB,wBAAY,UAC7BgS,SAASv+B,eAAKzG,EAAIilC,sBAAU7B,GAAS8B,cACrCC,qBAAanlC,EAAIolC,6GAWfriB,KAAK8hB,qDAOL9hB,KAAK6gB,0CAIJyB,GACJA,IAAWtiB,KAAKoiB,kBACbrB,OAAOwB,UAAS,QAChBH,WAAaE,6CAObtiB,KAAKoiB,iDAMAF,QACPD,SAASv+B,KAAKw+B,QAEdM,0DAKExiB,KAAKiiB,oDAMR9xB,EAAO6P,KAAK+gB,OAAO0B,iBAEhBtyB,GAAM,KACLuyB,EAAUvyB,EAAKuyB,QACfC,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,cACrBH,IAAa3iB,MAAQ6iB,IAAa7iB,MACpC0iB,EAAQK,mBAGV5yB,EAAOA,EAAKiI,UAIT4qB,wDAMEhjB,KAAK+gB,gDAML/gB,KAAKzD,oDAMLyD,KAAKgiB,+CAIFhpB,QACLgpB,WAAahpB,oCAKVzV,UACDyc,KAAK6gB,QAAQoC,UAAUjjB,KAAK+gB,OAAOn2B,eAAgBrH,2CAG5CA,EAAWL,EAAgBy2B,UAEhC3Z,KAAK6gB,QAAQX,gBAAgBlgB,KAAK+gB,OAAOn2B,eAAgBrH,EAAGL,EAAQy2B,mCASvEx6B,EAAyBE,EAAuBs6B,UAC/C3Z,KAAK6gB,QAAQxM,QAAQl1B,EAAQE,EAAO2gB,KAAK+gB,OAAOn2B,eAAgB+uB,6CAM7DK,yDAAuB,IAAId,eAChC2H,QAAQtC,YAAYvE,EAAUha,KAAK0hB,WAEjC1H,qCAKEC,QACJyH,UAAYzH,8CAKVja,KAAK0hB,uDAKL1hB,KAAK2hB,+CAKFjB,QACLiB,WAAajB,kDAKX1gB,KAAK4hB,qDAKCjB,QACRiB,cAAgBjB,kCAMfhH,UAEC3Z,KAAK3C,UAAUsc,GAAYvc,gDAKJ,IAA1B4C,KAAK3C,UAAUjgB,aACX,IAAI+K,UAGP,IAAI5K,EAAI,EAAGA,EAAIyiB,KAAK6gB,QAAQqC,kBAAmB3lC,OAC7C8f,UAAU9f,GAAK,IAAIqjC,GAAe5gB,KAAMziB,gDAM1C,IAAIA,EAAI,EAAGA,EAAIyiB,KAAK3C,UAAUjgB,SAAUG,OACtC8f,UAAU9f,GAAGqK,aAEfyV,UAAUjgB,OAAS,6CAInB,IAAIG,EAAI,EAAGA,EAAIyiB,KAAK3C,UAAUjgB,SAAUG,OACtC8f,UAAU9f,GAAG4lC,mDAIH/B,EAAyBC,EAAyB7Q,OAC9D,IAAIjzB,EAAI,EAAGA,EAAIyiB,KAAK3C,UAAUjgB,SAAUG,OACtC8f,UAAU9f,GAAG6lC,YAAYhC,EAAYC,EAAY7Q,+CAlNjDxQ,KAAK3C,UAAUjgB,gBCrGbimC,GAqDX,iDA9CoB,IAAI9hC,cAGhB7D,wBAGkB,IAAI6D,wBAGZ7D,uBAKFA,wBAKCA,qBAIJ,cAGL,sBAGQ,eAMP,eAGA,gBAGO,uBAGDA,SAGR8gB,MAAQ,OACR8kB,gBAAkB,OAClBC,cAAgB,OAChBC,eAAiB,OACjBC,aAAe,GAKXC,yBAuDCC,EAAgBznB,8DApDb,oBACD,wBACI,qBACH,4BACO,qBACP,kBACH,qBAEI,YAEA,IAAIva,cAEH,IAAIA,gBAEF,IAAIokB,yBAEK,IAAIxkB,0BACZ7D,iBAED,IAAI6D,iBACZ7D,gBAGa,iBACA,wBAEU,yBACjB,mBAEiB,wBACI,iBAE7BA,mBACGA,aAGNA,gBACGA,yBAESA,0BACCA,wBACFA,qBAEHA,oBAEI,2BAG0B,4BACxB,OAIbkmC,uBAAeD,EAAGE,4BAClBC,8BAAsBH,EAAGI,mCACzBC,0BAAkBL,EAAGM,gCACrBC,sBAAcP,EAAGQ,2BACjBC,uBAAeT,EAAGU,4BAElBrD,QAAU9kB,OAEVxC,KAAKnW,EAAEG,eAAKigC,EAAGve,wBAAY7jB,GAAO+iC,WAElC5qB,KAAKpY,EAAE8hB,mBAASugB,EAAGnlB,qBAAS,QAG1B+lB,MAAM7gC,KAAKsc,KAAKtG,WAGlB8qB,QAAQte,YAAYriB,eACpB2gC,QAAQvzB,GAAGvN,KAAKsc,KAAKtG,KAAKnW,QAC1BihC,QAAQp3B,EAAE1J,KAAKsc,KAAKtG,KAAKnW,QACzBihC,QAAQxe,GAAKhG,KAAKwkB,QAAQlnC,EAAI0iB,KAAKtG,KAAKpY,EAAEgkB,gBAC1Ckf,QAAQve,OAAS,OAEjBwe,iBAAiB/gC,eAAKigC,EAAGe,8BAAkBnjC,GAAO+iC,WAElDK,4BAAoBhB,EAAGL,+BAAmB,OAG1CsB,0BAAkBjB,EAAGJ,6BAAiB,OACtCsB,2BAAmBlB,EAAGH,8BAAkB,OACxCsB,yBAAiBnB,EAAGF,4BAAgB,OAKpCsB,QAAQlhC,eACRmhC,SAAW,OAEXC,YAAc,OAEd7qB,iBAASupB,EAAG52B,0BAEb42B,EAAG52B,WACAm4B,OAAS,OACTC,UAAY,SAEZD,OAAS,OACTC,UAAY,QAGdC,IAAM,OACNC,OAAS,OAETrD,WAAa2B,EAAG1T,yDAMT3yB,OAA4BS,yDAAI,SACxCT,aAAa+7B,GACRrZ,KAAKslB,0BAA0BhoC,EAAGS,GAElCiiB,KAAKulB,iBAAiBjoC,4CAWhBL,MACX+iB,KAAKghB,QAAQwE,iBACT,IAAIr9B,UAGNyS,EAAqB,IAAI4mB,GAAUxhB,KAAM/iB,UAE3C+iB,KAAKokB,cACPxpB,EAAQ6qB,gBAGV7qB,EAAQ2B,OAASyD,KAAK0lB,mBACjBA,cAAgB9qB,IACnBoF,KAAK2lB,eAKH/qB,EAAQ8mB,UAAY,QACjBkE,qBAKF5E,QAAQ6E,cAAe,EAErBjrB,oDAYiBC,OAAgBof,yDAAU,EAC5Ch9B,EAAoBymC,EAAOoC,uCACjC7oC,EAAI4d,MAAQA,EACZ5d,EAAIg9B,QAAUA,EACPja,KAAKulB,iBAAiBtoC,0CAUhB2d,MACToF,KAAKghB,QAAQwE,iBACT,IAAIr9B,cAORsmB,EAAyBzO,KAAK0lB,cAC9BK,EAAwB,KAEZ,OAATtX,GAAe,IAChBA,IAAS7T,EAAS,CAChBmrB,EACFA,EAAIxpB,OAAS3B,EAAQ2B,YAEhBmpB,cAAgB9qB,EAAQ2B,aAMjCwpB,EAAMtX,EACNA,EAAOA,EAAKlS;;QAQVpM,EAA6B6P,KAAKgmB,cAC/B71B,GAAM,KACL/C,EAAI+C,EAAKuyB,QACfvyB,EAAOA,EAAKiI,SAENuqB,EAAsBv1B,EAAEw1B,cACxBC,EAAsBz1B,EAAE01B,cAE1BloB,IAAY+nB,GAAY/nB,IAAYioB,QAGjC7B,QAAQC,iBAAiBgF,QAAQ74B,GAItC4S,KAAKokB,cACPxpB,EAAQsrB,iBAIVtrB,EAAQ2B,OAAS,KACjB3B,EAAQhT,UAENoY,KAAK2lB,oBAGFC,wDAQSxgB,EAAc5G,QACvB2nB,eAAe/gB,EAASxnB,EAAGwnB,EAAS3e,EAAG+X,0CAG/B5gB,EAAW6I,EAAW+X,MAC/BwB,KAAKghB,QAAQwE,iBACT,IAAIr9B,WAGPuR,KAAKpY,EAAE8hB,SAAS5E,QAChB9E,KAAKnW,EAAEe,IAAI1G,EAAG6I,QAEZ89B,MAAM7gC,KAAKsc,KAAKtG,MAGvB/X,GAAYC,MAAMoe,KAAKtG,KAAMsG,KAAKwkB,QAAQte,YAAalG,KAAKwkB,QAAQp3B,QAC/Do3B,QAAQlnC,EAAIkhB,OAEZgmB,QAAQvzB,GAAGvN,KAAKsc,KAAKwkB,QAAQp3B,QAC7Bo3B,QAAQxe,GAAKxH,MAEb,IAAI9B,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,OAC1DG,EAAE0pB,mBAAmBpmB,KAAKtG,KAAMsG,KAAKtG,KAAMnY,GAAO+iC,WAG/CtD,QAAQC,iBAAiBoF,uDAGnB7pB,QACN8pB,gBAAgB9pB,EAAGjZ,EAAGiZ,EAAG8I,0DAMvBtF,KAAKtG,kDAMLsG,KAAKtG,KAAKnW,sCAGP6hB,QACLkhB,gBAAgBlhB,EAAUpF,KAAKsF,kDAGxB1nB,EAAW6I,QAClB0/B,eAAevoC,EAAG6I,EAAGuZ,KAAKsF,sDAMxBtF,KAAKwkB,QAAQlnC,mCAGbkhB,QACF8nB,gBAAgBtmB,KAAKumB,cAAe/nB,mDAKlCwB,KAAKwkB,QAAQp3B,kDAKb4S,KAAKwkB,QAAQte,sDAKJvhB,QACX6hC,oBAAoB7hC,EAAE/G,EAAG+G,EAAE8B,+CAGd7I,EAAW6I,OACzBuZ,KAAK5F,SAILxc,EAAIA,EAAI6I,EAAIA,EAAI,QACb87B,UAAS,QAGXkC,iBAAiBngC,IAAI1G,EAAG6I,uDAMtBuZ,KAAKykB,4DAKKviC,OACb8d,KAAK5F,SAILlY,EAAIA,EAAI,QACLqgC,UAAS,QAGXoC,kBAAoBziC,uDAMlB8d,KAAK2kB,wDAGAhB,UACZA,EAAG52B,KAAOiT,KAAKnD,UACf8mB,EAAGM,WAAajkB,KAAKgkB,gBACrBL,EAAGnlB,MAAQwB,KAAKsF,WAChBqe,EAAGH,eAAiBxjB,KAAK6kB,iBACzBlB,EAAGF,aAAezjB,KAAK8kB,eACvBnB,EAAGL,gBAAkBtjB,KAAK2kB,kBAC1BhB,EAAGI,cAAgB/jB,KAAK8jB,oBACxBH,EAAGE,OAAS7jB,KAAK4jB,aACjBD,EAAGQ,MAAQnkB,KAAKkkB,YAChBP,EAAGJ,cAAgBvjB,KAAK4kB,gBACxBjB,EAAGe,eAAehhC,KAAKsc,KAAKymB,qBAC5B9C,EAAGve,SAAS1hB,KAAKsc,KAAKumB,eACtB5C,EAAG1T,SAAWjQ,KAAK0mB,cACZ/C,qCASEgD,EAAW7iC,OAAW8iC,iEAC3B5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFa,QAAQnnC,GAAK+oC,EAAM/oC,OACnBmnC,QAAQt+B,GAAKkgC,EAAMlgC,OACnBu+B,WACFlhC,EAAMlG,EAAIoiB,KAAKwkB,QAAQp3B,EAAExP,GAAK+oC,EAAMlgC,GAAK3C,EAAM2C,EAAIuZ,KAAKwkB,QAAQp3B,EAAE3G,GAAKkgC,EAAM/oC,+CAOjE+oC,OAAWC,iEACxB5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFa,QAAQnnC,GAAK+oC,EAAM/oC,OACnBmnC,QAAQt+B,GAAKkgC,EAAMlgC,wCAQhBogC,OAAgBD,iEACtB5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFc,UAAY6B,+CAUFC,EAAahjC,OAAW8iC,iEACrC5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFO,iBAAiB7mC,GAAKoiB,KAAKmlB,UAAY2B,EAAQlpC,OAC/C6mC,iBAAiBh+B,GAAKuZ,KAAKmlB,UAAY2B,EAAQrgC,OAC/Ck+B,mBACH3kB,KAAKqlB,SACHvhC,EAAMlG,EAAIoiB,KAAKwkB,QAAQp3B,EAAExP,GAAKkpC,EAAQrgC,GAAK3C,EAAM2C,EAAIuZ,KAAKwkB,QAAQp3B,EAAE3G,GAAKqgC,EAAQlpC,wDAO9DkpC,OAAaF,iEAClC5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFO,iBAAiB7mC,GAAKoiB,KAAKmlB,UAAY2B,EAAQlpC,OAC/C6mC,iBAAiBh+B,GAAKuZ,KAAKmlB,UAAY2B,EAAQrgC,gDAOpCqgC,OAAiBF,iEAC/B5mB,KAAK5F,SAILwsB,IAAS5mB,KAAKkkB,kBACX3B,UAAS,GAIZviB,KAAKkkB,mBACFS,mBAAqB3kB,KAAKqlB,OAASyB,6CAOnC9mB,KAAKklB,mDAOVllB,KAAKolB,IAAMplB,KAAKklB,OAAS3jC,GAAO4D,MAAM6a,KAAKwkB,QAAQte,YAAalG,KAAKwkB,QAAQte,iDAMrElN,UACVA,EAAKmgB,KAAOnZ,KAAKklB,OACjBlsB,EAAKogB,EACHpZ,KAAKolB,IAAMplB,KAAKklB,OAAS3jC,GAAO4D,MAAM6a,KAAKwkB,QAAQte,YAAalG,KAAKwkB,QAAQte,aAC/ElN,EAAKgC,OAAOtX,KAAKsc,KAAKwkB,QAAQte,aACvBlN,sCAUGghB,MACNha,KAAKghB,QAAQwE,iBACT,IAAIr9B,aAGR6X,KAAK5F,aAIJ+qB,UAAY,OACZC,IAAM,OACNC,OAAS,OAETH,OAASlL,EAASb,KACnBnZ,KAAKklB,QAAU,SACZA,OAAS,QAGXC,UAAY,EAAInlB,KAAKklB,OAEtBlL,EAASZ,EAAI,IAAMpZ,KAAK8jB,2BACrBsB,IAAMpL,EAASZ,EAAIpZ,KAAKklB,OAAS3jC,GAAO4D,MAAM60B,EAAShf,OAAQgf,EAAShf,aAExEqqB,OAAS,EAAIrlB,KAAKolB,SAInB2B,EAAoBrD,EAAOsD,wBAAwBtjC,KAAKsc,KAAKwkB,QAAQp3B,QACtEo3B,QAAQte,YAAYxiB,KAAKs2B,EAAShf,QACvCrZ,GAAYC,MAAMoe,KAAKtG,KAAMsG,KAAKwkB,QAAQte,YAAalG,KAAKwkB,QAAQp3B,QAC/Do3B,QAAQvzB,GAAGvN,KAAKsc,KAAKwkB,QAAQp3B,GAGlC7L,GAAO0lC,YACLjnB,KAAKykB,iBACLzkB,KAAK2kB,kBACLpjC,GAAOU,MAAM+d,KAAKwkB,QAAQp3B,EAAG25B,EAAWxlC,GAAOE,MAC/Cue,KAAKykB,mEAaFS,OAAS,OACTC,UAAY,OACZC,IAAM,OACNC,OAAS,OACTb,QAAQte,YAAYriB,cAGrBmc,KAAK5F,YAAuC4F,KAAK5F,mBAC9CoqB,QAAQvzB,GAAGvN,KAAKsc,KAAKtG,KAAKnW,QAC1BihC,QAAQp3B,EAAE1J,KAAKsc,KAAKtG,KAAKnW,aACzBihC,QAAQxe,GAAKhG,KAAKwkB,QAAQlnC,WAO3B4oB,EAAsBwd,EAAOwD,4BAA4BrjC,UACtD6Y,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,UACtC,IAAhBG,EAAEglB,eAIA1H,EAAuBtd,EAAEyqB,YAAYzD,EAAO0D,+BAC7ClC,QAAUlL,EAASb,KACxBjT,EAAYtoB,GAAKo8B,EAAShf,OAAOpd,EAAIo8B,EAASb,KAC9CjT,EAAYzf,GAAKuzB,EAAShf,OAAOvU,EAAIuzB,EAASb,UACzCiM,KAAOpL,EAASZ,EAInBpZ,KAAKklB,OAAS,QACXC,UAAY,EAAInlB,KAAKklB,OAC1Bhf,EAAYtoB,GAAKoiB,KAAKmlB,UACtBjf,EAAYzf,GAAKuZ,KAAKmlB,iBAGjBD,OAAS,OACTC,UAAY,GAGfnlB,KAAKolB,IAAM,IAAMplB,KAAK8jB,0BAEnBsB,KAAOplB,KAAKklB,OAAS3jC,GAAO4D,MAAM+gB,EAAaA,QAE/Cmf,OAAS,EAAIrlB,KAAKolB,WAElBA,IAAM,OACNC,OAAS,OAIV0B,EAAoBrD,EAAO2D,0BAA0B3jC,KAAKsc,KAAKwkB,QAAQp3B,QACxEo3B,QAAQte,YAAYxiB,KAAKwiB,GAC9BvkB,GAAYC,MAAMoe,KAAKtG,KAAMsG,KAAKwkB,QAAQte,YAAalG,KAAKwkB,QAAQp3B,QAC/Do3B,QAAQvzB,GAAGvN,KAAKsc,KAAKwkB,QAAQp3B,GAGlC7L,GAAO0lC,YACLjnB,KAAKykB,iBACLzkB,KAAK2kB,kBACLpjC,GAAOU,MAAM+d,KAAKwkB,QAAQp3B,EAAG25B,EAAWxlC,GAAOE,MAC/Cue,KAAKykB,wDAOmBz3B,EAAgB8I,UACnCnU,GAAYC,MAAMoe,KAAKtG,KAAM1M,EAAY8I,0CAMrBwxB,EAAiBxxB,UACrC1U,GAAM+N,MAAM6Q,KAAKtG,KAAKpY,EAAGgmC,EAAaxxB,yCAMnByxB,EAAgBzxB,UACnCnU,GAAY4L,OAAOyS,KAAKtG,KAAM6tB,EAAYzxB,0CAMtB0xB,EAAiB1xB,UACrC1U,GAAMC,OAAO2e,KAAKtG,KAAKpY,EAAGkmC,EAAa1xB,2DAMFyxB,EAAgBzxB,UACrDvU,GAAO0lC,YACZjnB,KAAKykB,iBACLzkB,KAAK2kB,kBACLpjC,GAAOU,MAAMslC,EAAYvnB,KAAKwkB,QAAQp3B,EAAG7L,GAAOE,MAChDqU,2DAO0C9I,EAAgB8I,UACrDkK,KAAKynB,gCAAgCznB,KAAK0nB,cAAc16B,EAAY8I,GAAMA,qDAK1EkK,KAAK4kB,yDAIGrB,QACVqB,gBAAkBrB,qDAKhBvjB,KAAK6kB,2DAIIrB,QACXqB,iBAAmBrB,mDAKjBxjB,KAAK8kB,uDAIE6C,QACT7C,eAAiB6C,kCAIhB56B,MACFiT,KAAKghB,QAAQwE,iBACT,IAAIr9B,SAGR6X,KAAK5F,SAAWrN,QAIfqN,OAASrN,OAET64B,oBAED5lB,KAAK5F,cACFqqB,iBAAiB5gC,eACjB8gC,kBAAoB,OACpBH,QAAQxe,GAAKhG,KAAKwkB,QAAQlnC,OAC1BknC,QAAQvzB,GAAGvN,KAAKsc,KAAKwkB,QAAQp3B,QAC7Bw6B,4BAGFrF,UAAS,QAETwC,QAAQlhC,eACRmhC,SAAW,UAGZ6C,EAA2B7nB,KAAKgmB,cAC7B6B,GAAI,KACHC,EAAqBD,EAC3BA,EAAKA,EAAGzvB,UACH4oB,QAAQC,iBAAiBgF,QAAQ6B,EAAIpF,cAEvCsD,cAAgB,SAGhB,IAAItpB,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,OAC1DG,EAAEsmB,yDAMGhjB,KAAK5F,yCAIJ2tB,QACHnE,aAAemE,4CAKb/nB,KAAK4jB,wDAKKmE,QACZ/D,gBAAkB+D,EAClBA,QACExF,UAAS,sDAMTviB,KAAKgkB,iDAML+D,GACHA,QACG7D,aAAc,OACde,YAAc,SAEdf,aAAc,OACde,YAAc,OACdR,iBAAiB5gC,eACjB8gC,kBAAoB,OACpBI,QAAQlhC,eACRmhC,SAAW,4CAOXhlB,KAAKkkB,8CAgBJ6D,MACJ/nB,KAAKghB,QAAQwE,iBACT,IAAIr9B,SAGR4/B,IAAS/nB,KAAKpD,mBAIbwnB,aAAe2D,EAEhBA,MAEG,IAAIrrB,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,OAC1DG,EAAE+oB,oBAGC,KAEA,IAAI/oB,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,OAC1DG,EAAEwpB,yBAGA2B,EAA2B7nB,KAAKgmB,cAC7B6B,GAAI,KACHC,EAAqBD,EAC3BA,EAAKA,EAAGzvB,UACH4oB,QAAQC,iBAAiBgF,QAAQ6B,EAAIpF,cAEvCsD,cAAgB,gDAMhBhmB,KAAKokB,sDAKG2D,GACX/nB,KAAK8jB,sBAAwBiE,SAI5BjE,oBAAsBiE,OAEtBpD,kBAAoB,OAEpBiB,kEAKE5lB,KAAK8jB,oEAKL9jB,KAAK0lB,4DAKL1lB,KAAK/C,4DAOL+C,KAAKgmB,uDAKLhmB,KAAKzD,oDAKLyD,KAAKgiB,+CAIFhpB,QACLgpB,WAAahpB,4CAKXgH,KAAKghB,0DAONtyB,EAAmBg1B,EAAOsE,0BAChCt5B,EAAIpN,EAAE8hB,SAASpD,KAAKwkB,QAAQxe,IAC5B5kB,GAAM+N,MAAMT,EAAIpN,EAAG0e,KAAKwkB,QAAQte,YAAaxX,EAAInL,GACjDhC,GAAOU,MAAM+d,KAAKwkB,QAAQvzB,GAAIvC,EAAInL,EAAGmL,EAAInL,WAGnCitB,EAAuBjvB,GAAOU,MAClC+d,KAAKwkB,QAAQp3B,EACb4S,KAAKwkB,QAAQvzB,GACbyyB,EAAOuE,oCAGAvrB,EAAsBsD,KAAK0lB,cAAehpB,EAAGA,EAAIA,EAAEH,OAC1DG,EAAE0pB,mBAAmB13B,EAAKsR,KAAKtG,KAAM8W,uDAKlC9W,KAAKpY,EAAE8hB,SAASpD,KAAKwkB,QAAQlnC,GAClC8D,GAAM+N,MAAM6Q,KAAKtG,KAAKpY,EAAG0e,KAAKwkB,QAAQte,YAAalG,KAAKtG,KAAKnW,GAC7DhC,GAAOU,MAAM+d,KAAKwkB,QAAQp3B,EAAG4S,KAAKtG,KAAKnW,EAAGyc,KAAKtG,KAAKnW,yCAKxCud,cAERd,KAAK5F,YAAuC0G,EAAM1G,SAG/C4F,KAAKkoB,uBAAuBpnB,kDAGdA,OAEhB,IAAIqnB,EAAyBnoB,KAAK/C,YAAakrB,EAAIA,EAAKA,EAAG/vB,QAC1D+vB,EAAGrnB,QAAUA,IACVqnB,EAAG9uB,MAAM+uB,0BACL,SAKN,kCAGD/hB,QAEDme,QAAQ6D,QAAQhiB,QAChBme,QAAQp3B,EAAE1J,KAAKsc,KAAKwkB,QAAQvzB,SAC5BuzB,QAAQlnC,EAAI0iB,KAAKwkB,QAAQxe,QACzBtM,KAAKpY,EAAE8hB,SAASpD,KAAKwkB,QAAQlnC,GAClC8D,GAAM+N,MAAM6Q,KAAKtG,KAAKpY,EAAG0e,KAAKwkB,QAAQte,YAAalG,KAAKtG,KAAKnW,GAC7DhC,GAAOU,MAAM+d,KAAKwkB,QAAQp3B,EAAG4S,KAAKtG,KAAKnW,EAAGyc,KAAKtG,KAAKnW,sDAK7Cyc,KAAKrC,qEAILqC,KAAKsoB,2BA9zBC5E,mCAAgD,IAAIjD,GAgXpDiD,2BAAkC,IAAIniC,GA8CtCmiC,+BAAsC,IAAIniC,GAC1CmiC,6BAAoC,IAAIniC,GACxCmiC,4BAAuC,IAAIxK,GA4V3CwK,6BAAyC,IAAI/hC,GAC7C+hC,sCAA6C,IAAIniC,OC7/BrDgnC,yBAeClvB,yBAdoB,eAYL,eACA,UAEpBA,MAAQA,iDAIRmvB,OAAS,UACTC,KAAO,UACPrwB,KAAO,0CAlBL4H,KAAKwoB,qBAGJxrC,QAEHwrC,OAASxrC,WAoCI0rC,GAgBpB,WAAY37B,uCAXI,4BASG,OAGZA,KAAOA,GAMM47B,yBAgBR1rC,uCAda,iBACA,kBACO,IAAIsrC,GAAYvoB,mBAChB,IAAIuoB,GAAYvoB,yBAIjC,2BACM,kBAEH,oBAEN,OAKL5F,OAASnd,EAAI8P,UACb67B,QAAQ9nB,MAAQ7jB,EAAIuc,WACpBqvB,QAAQ/nB,MAAQ7jB,EAAIqc,WACpBwvB,QAAU7rC,EAAIqc,WACdyvB,QAAU9rC,EAAIuc,WAEd4uB,mBAAqBrrC,EAAQE,EAAI+rC,kBAAkB,QAEnDhH,WAAajlC,EAAQE,EAAIgzB,SAAU,yDAKjCjQ,KAAK5F,iDAKL4F,KAAK8oB,kDAKL9oB,KAAK+oB,iDAiBL/oB,KAAKzD,oDAKLyD,KAAKgiB,+CAIFhpB,QACLgpB,WAAahpB,4CAKXgH,KAAK8oB,QAAQlsB,YAAcoD,KAAK+oB,QAAQnsB,gEAOxCoD,KAAKooB,uDAKFzV,aC3LDsW,mFACqB,IAAI1nC,kBACJ,IAAIA,YAC3B,gBACK,iBACC,mEAMJ2nC,EAAYC,EAAYC,EAAaC,QACzC/vB,MAAQ4vB,OACR1vB,MAAQ2vB,OACR7vB,MAAMgwB,cAAcF,EAASppB,KAAKupB,mBAClC/vB,MAAM8vB,cAAcD,EAASrpB,KAAKwpB,mBAClCpsC,OAASmE,GAAOmB,WAAW0mC,EAASC,QACpCI,YAAc,OACdC,aAAe,SAlBgBhB,IAsB3BiB,0BA+BC1sC,yCACJA,kBA/BQ,mBACC,WACR,mBAGyB,IAAIsE,oBACJ,IAAIA,aAC5B,cACE,aACD,aAGA,aACA,QACY,IAAIA,UACH,IAAIA,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,WACD,SAEc,IAAIH,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,KAKxBqoC,cAAgB7sC,EAAQE,EAAIwsC,YAAa,KACzCI,eAAiB9sC,EAAQE,EAAIysC,aAAc,KAE3CI,eAAepmC,KAAKzG,EAAIssC,gBACxBQ,eAAermC,KAAKzG,EAAIusC,gBACxBQ,SAAW/sC,EAAIG,wEAGG0Y,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAC7CA,EAAIlY,EAAIqsC,EAASjqB,KAAKkqB,UAAYlqB,KAAKmqB,IAAIvsC,EAC3CkY,EAAIrP,EAAIwjC,EAASjqB,KAAKkqB,UAAYlqB,KAAKmqB,IAAI1jC,EACpCqP,4CAGSm0B,UACT,mDAIAjqB,KAAK8pB,gEAIL9pB,KAAK+pB,iDAGJ3sC,QACH4sC,SAAW5sC,0CAIT4iB,KAAKgqB,8CAGDI,QACNR,cAAgBQ,gDAIdpqB,KAAK4pB,sDAGES,QACTR,eAAiBQ,mDAIfrqB,KAAK6pB,+DAKU7wB,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBnZ,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,SAC5DrqC,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEnCnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,WAE9BzB,IAAIvsC,EAAIyuB,EAAGzuB,EAAIoiB,KAAK4rB,KAAKhuC,EAAIsuB,EAAGtuB,EAAIoiB,KAAK0rB,KAAK9tC,OAC9CusC,IAAI1jC,EAAI4lB,EAAG5lB,EAAIuZ,KAAK4rB,KAAKnlC,EAAIylB,EAAGzlB,EAAIuZ,KAAK0rB,KAAKjlC,MAG7CrJ,EAAiB4iB,KAAKmqB,IAAInlC,SAC5B5H,EAAS2H,QACNolC,IAAIzzB,QAAQ,EAAItZ,QAEhB+sC,IAAItmC,cAILgoC,EAAetqC,GAAOkV,QAAQuJ,KAAK0rB,KAAM1rB,KAAKmqB,KAE9C2B,EAAevqC,GAAOkV,QAAQuJ,KAAK4rB,KAAM5rB,KAAKmqB,KAEhD4B,EACF/rB,KAAK2qB,WAAa3qB,KAAK6qB,QAAUgB,EAAOA,EAAO7rB,KAAK4qB,WAAa5qB,KAAK8qB,QAAUgB,EAAOA,UAGpF5G,OAAqB,IAAZ6G,EAAgB,EAAIA,EAAU,EAExC/rB,KAAK4pB,cAAgB,EAAG,KACpBhY,EAAYx0B,EAAS4iB,KAAKgqB,SAG1BgC,EAAgB,EAAIvtB,GAAQuB,KAAK4pB,cAGjC/oC,EAAY,EAAImf,KAAKklB,OAASllB,KAAK6pB,eAAiBmC,EAGpDC,EAAYjsB,KAAKklB,OAAS8G,EAAQA,EAGlCvc,EAAYzW,EAAKjB,KAAKm0B,QACvBC,QAAU1c,GAAK5uB,EAAI4uB,EAAIwc,QACvBE,QAA2B,IAAjBnsB,KAAKmsB,QAAgB,EAAInsB,KAAKmsB,QAAU,OAClDC,OAASxa,EAAInC,EAAIwc,EAAIjsB,KAAKmsB,QAE/BJ,GAAW/rB,KAAKmsB,aACXjH,OAAqB,IAAZ6G,EAAgB,EAAIA,EAAU,YAEvCI,QAAU,OACVC,OAAS,KAGZpzB,EAAKjB,KAAKs0B,aAAc,MAErBnC,WAAalxB,EAAKjB,KAAKu0B,YAGtB/3B,EAAYhT,GAAO87B,MACvBrd,KAAKkqB,UACLlqB,KAAKmqB,IACLR,EAAgB4C,6BAIlBtB,EAAG3nC,WAAW0c,KAAK2qB,WAAYp2B,GAE/BzS,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAE/C62B,EAAG/nC,WAAW2c,KAAK4qB,WAAYr2B,GAE/BvS,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,aAE1C21B,UAAY,EAInBlxB,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CsqC,EAAcjrC,GAAO0lC,YACzBgE,EACAnpC,EACAke,KAAK0rB,KACL/B,EAAgB8C,gCAGZC,EAAcnrC,GAAO0lC,YACzBmE,EACAppC,EACAge,KAAK4rB,KACLjC,EAAgBgD,gCAGZC,EAAerrC,GAAO4D,MAAM6a,KAAKmqB,IAAK5oC,GAAOU,MAAMyqC,EAAKF,EAAKjrC,GAAOE,OAEpEqlC,GAAmB9mB,KAAKklB,QAAU0H,EAAO5sB,KAAKosB,OAASpsB,KAAKmsB,QAAUnsB,KAAKkqB,gBAC5EA,WAAapD,MAGZvyB,EAAYhT,GAAO87B,MAAMyJ,EAAS9mB,KAAKmqB,IAAKR,EAAgBkD,8BAGlE5B,EAAG3nC,WAAW0c,KAAK2qB,WAAYp2B,GAE/BzS,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAE/C62B,EAAG/nC,WAAW2c,KAAK4qB,WAAYr2B,GAE/BvS,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAG/CyE,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAKZgX,MACnBgH,KAAK4pB,cAAgB,SAEhB,MAGH1d,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAGzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAG3BroC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEhD1oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhDv3B,EAAY2L,KAAKmqB,IACvB91B,EAAEzW,EAAIyuB,EAAGzuB,EAAIoF,EAAGpF,EAAIsuB,EAAGtuB,EAAIkF,EAAGlF,EAC9ByW,EAAE5N,EAAI4lB,EAAG5lB,EAAIzD,EAAGyD,EAAIylB,EAAGzlB,EAAI3D,EAAG2D,MAK1BmrB,EAFmB5R,KAAKmqB,IAAI/mC,YAEP4c,KAAKgqB,SAC9BpY,EAAIzzB,EAAQyzB,GAAI3S,GAAwBA,QAElC6nB,GAAmB9mB,KAAKklB,OAAStT,EAEjCrd,EAAYhT,GAAO87B,MAAMyJ,EAASzyB,EAAGs1B,EAAgBmD,qCAG3D5gB,EAAG5oB,WAAW0c,KAAK2qB,WAAYp2B,GAE/By2B,GAAMhrB,KAAK6qB,QAAUtpC,GAAOkV,QAAQ3T,EAAIyR,GAExC8X,EAAGhpB,WAAW2c,KAAK4qB,WAAYr2B,GAE/B42B,GAAMnrB,KAAK8qB,QAAUvpC,GAAOkV,QAAQzT,EAAIuR,GAGxCyE,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3BxtC,EAAMi0B,GAAK7sB,UA3Se4jC,IA4FpBgB,+BAA8B,IAAIpoC,GA6GlCooC,kCAAiC,IAAIpoC,GACrCooC,kCAAiC,IAAIpoC,GACrCooC,gCAA+B,IAAIpoC,GA8CnCooC,gCAA+B,IAAIpoC,OC7RvCwrC,8EACQ,iBAEL,iBAEC,gEAMPtL,QACDuL,OAAO7uB,KAAKsjB,GAEU,IAAvBzhB,KAAKgtB,OAAO5vC,YACTkc,MAAQmoB,EACmB,IAAvBzhB,KAAKgtB,OAAO5vC,cAChBoc,MAAQioB,UAjBiBiH,IAsBvBuE,0BAgBChwC,kCACJA,kBAfQ,mBACC,cAGL,iBAIG,YAIY,IAAIsE,KAWxB2rC,SAAWjwC,EAAI+vC,SACfpD,cAAgB7sC,EAAQE,EAAIwsC,YAAa,KACzCI,eAAiB9sC,EAAQE,EAAIysC,aAAc,KAE3CyD,gBAAkB1vC,EAAkBR,EAAI+vC,OAAO5vC,UAC/C0Q,UAAYvM,GAAOymB,UAAU/qB,EAAI+vC,OAAO5vC,UACxCgwC,SAAW,KACXC,SAAW9rC,GAAOymB,UAAU/qB,EAAI+vC,OAAO5vC,YAEtCkwC,EAA0B,IAAIrE,GACpCqE,EAAI7D,YAAc8D,EAAK3D,cACvB0D,EAAI5D,aAAe6D,EAAK1D,iBAEnB2D,aAAe,MAEf,IAAIjwC,EAAI,EAAGA,EAAIgwC,EAAKL,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAe8L,EAAKL,SAAS3vC,GAC7B6a,EAAem1B,EAAKL,UAAU3vC,EAAI,GAAKgwC,EAAKL,SAAS9vC,QAErDqwC,EAAiBhM,EAAKhkB,iBACtBiwB,EAAiBt1B,EAAKqF,mBAEvB0vB,gBAAgB5vC,GAAKgE,GAAOmB,WAAW+qC,EAAQC,KAE/CF,cAAgBjsC,GAAOkV,QAAQg3B,EAAQC,GAE5CJ,EAAIriC,WAAWw2B,EAAMrpB,EAAMq1B,EAAQC,KAC9BN,SAAS7vC,GAAKkkC,EAAKkM,WAAWC,YAAYN,YAG5CE,cAAgB,oEAGE13B,UAChBA,qCAGgBA,UAChBA,2CAGsBm0B,EAAgBn0B,UACtCA,4CAGSm0B,UACT,uCAGIG,QACNR,cAAgBQ,MAEhB,IAAI7sC,EAAI,EAAGA,EAAIyiB,KAAKotB,SAAShwC,SAAUG,OACrC6vC,SAAS7vC,GAAGswC,aAAazD,iDAKzBpqB,KAAK4pB,sDAGES,QACTR,eAAiBQ,MAEjB,IAAI9sC,EAAI,EAAGA,EAAIyiB,KAAKotB,SAAShwC,SAAUG,OACrC6vC,SAAS7vC,GAAGuwC,gBAAgBzD,oDAK5BrqB,KAAK6pB,+DAGU7wB,OACjB,IAAIzb,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkrC,EAAezoB,KAAKktB,UAAU3vC,EAAIyiB,KAAKktB,SAAS9vC,OAAS,GAAK4iB,KAAKktB,SAAS9vC,QAC5Egb,EAAe4H,KAAKktB,UAAU3vC,EAAI,GAAKyiB,KAAKktB,SAAS9vC,QACrD2wC,EAAiB/0B,EAAK+xB,UAAUtC,EAAK8B,eAAen9B,EACpDsgC,EAAiB10B,EAAK+xB,UAAU3yB,EAAKmyB,eAAen9B,EACpD4gC,EAAgBhuB,KAAKqtB,SAAS9vC,GAEpCgE,GAAOU,MAAMyrC,EAAQK,EAAQC,MAG3Bh1B,EAAKjB,KAAKs0B,aAAc,MACrBnC,WAAalxB,EAAKjB,KAAKu0B,YAEvB,IAAI/uC,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAezhB,KAAKktB,SAAS3vC,GAC7B0wC,EAAiBj1B,EAAKkyB,WAAWzJ,EAAK8I,eAAe5lC,EACrDqpC,EAAgBhuB,KAAKqtB,SAAS9vC,GAEpC0wC,EAAOrwC,GAAK6jC,EAAK0D,UAAY6I,EAAMvnC,EAAI,GAAMuZ,KAAKkqB,UAClD+D,EAAOxnC,GAAKg7B,EAAK0D,WAAa6I,EAAMpwC,EAAI,GAAMoiB,KAAKkqB,qBAGhDA,UAAY,mDAIIlxB,WACnBk1B,EAAa,EACbC,EAAe,EAEV5wC,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAezhB,KAAKktB,SAAS3vC,GAC7B0wC,EAAiBj1B,EAAKkyB,WAAWzJ,EAAK8I,eAAe5lC,EACrDqpC,EAAgBhuB,KAAKqtB,SAAS9vC,GAEpC2wC,GAAcF,EAAMhtC,gBAAkBygC,EAAK2M,UAC3CD,GAAgB5sC,GAAOkV,QAAQw3B,EAAQD,OAGnCpqC,GAAmB,EAAIuqC,EAAgBD,OAGxChE,WAAatmC,MAEb,IAAIrG,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAezhB,KAAKktB,SAAS3vC,GAC7B0wC,EAAiBj1B,EAAKkyB,WAAWzJ,EAAK8I,eAAe5lC,EACrDqpC,EAAgBhuB,KAAKqtB,SAAS9vC,GAEpC0wC,EAAOrwC,GAAK6jC,EAAK0D,UAAY6I,EAAMvnC,EAAI,GAAM7C,EAC7CqqC,EAAOxnC,GAAKg7B,EAAK0D,WAAa6I,EAAMpwC,EAAI,GAAMgG,oDAIzBoV,WACnBq1B,EAAY,EACZt4B,EAAO,EAEFxY,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAezhB,KAAKktB,SAAS3vC,GAC7B6a,EAAe4H,KAAKktB,UAAU3vC,EAAI,GAAKyiB,KAAKktB,SAAS9vC,QACrDqwC,EAAiBz0B,EAAK+xB,UAAUtJ,EAAK8I,eAAen9B,EACpDsgC,EAAiB10B,EAAK+xB,UAAU3yB,EAAKmyB,eAAen9B,EAEpD4gC,EAAgBzsC,GAAOU,MAAMyrC,EAAQD,EAAQztB,KAAKsuB,SAEpDC,EAAeP,EAAMhpC,SACrBupC,EAAOtrC,KACTsrC,EAAO,QAGJzgC,UAAUvQ,GAAGK,EAAIowC,EAAMvnC,EAAI8nC,OAC3BzgC,UAAUvQ,GAAGkJ,GAAKunC,EAAMpwC,EAAI2wC,EAEjCF,GAAaE,EAEbx4B,GAAQxU,GAAOkV,QAAQg3B,EAAQC,GAGjC33B,GAAQ,WAGFy4B,EAAqB,IADDxuB,KAAKwtB,aAAez3B,GACAs4B,EAC1CnjC,GAAO,EAEF3N,EAAI,EAAGA,EAAIyiB,KAAKktB,SAAS9vC,SAAUG,EAAG,KACvCkkC,EAAezhB,KAAKktB,SAAS3vC,GAC7BkwC,EAAiBz0B,EAAK+xB,UAAUtJ,EAAK8I,eAAen9B,EACpDqhC,GAAkBlxC,EAAI,GAAKyiB,KAAKktB,SAAS9vC,OAEzC4wC,EAAgBzsC,GAAOskB,MAAM7F,KAAKlS,UAAUvQ,GAAIyiB,KAAKlS,UAAU2gC,GAASzuB,KAAKsuB,SACnFN,EAAMt3B,QAAQ83B,OAERE,EAAkBV,EAAMhtC,gBAC1B0tC,EAAUnwC,EAAK0gB,KACjB+uB,EAAMt3B,QAAQuI,GAAyBnI,GAAO43B,IAE5CA,EAAUnwC,EAAKwG,MACjBmG,GAAO,GAGTuiC,EAAO7vC,GAAKowC,EAAMpwC,EAClB6vC,EAAOhnC,GAAKunC,EAAMvnC,SAGbyE,SA5MsBy9B,ICXpBgG,mFACqB,IAAIptC,kBAEJ,IAAIA,cAEzB,cAEC,mEAMDqtC,EAAYC,EAAYC,QAC5Bx1B,MAAQs1B,OACRp1B,MAAQq1B,OACRv1B,MAAMgwB,cAAcwF,EAAQ9uB,KAAKupB,mBACjC/vB,MAAM8vB,cAAcwF,EAAQ9uB,KAAKwpB,qBAjBFd,IAqB3BqG,0BA8BC9xC,yCACJA,mBA9B0B,IAAIsE,oBACJ,IAAIA,qBAGH,IAAIA,sBACpB,eACN,gBACC,aAGH,aACA,SACa,IAAIA,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,iBACuB,IAAI0gB,mBACrB,SAEO,IAAI7gB,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,SACP,IAAI0gB,KAKrB6nB,eAAepmC,KAAKzG,EAAIssC,gBACxBQ,eAAermC,KAAKzG,EAAIusC,gBAExBwF,gBAAgBnrC,YAChBorC,WAAalyC,EAAQE,EAAIiyC,SAAU,KACnCC,YAAcpyC,EAAQE,EAAImyC,UAAW,KAErCC,aAAaxrC,wFAGImV,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAGtB2F,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAG1CipC,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAIjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAWhD0D,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd4E,EAAa1vB,KAAK2vB,OACxBD,EAAEptB,GAAG1kB,EAAI0xC,EAAKC,EAAKC,EAAK1sC,EAAG2D,EAAI3D,EAAG2D,EAAIgpC,EAAKzsC,EAAGyD,EAAIzD,EAAGyD,EACrDipC,EAAEptB,GAAG7b,GAAK+oC,EAAK1sC,EAAGlF,EAAIkF,EAAG2D,EAAIgpC,EAAKzsC,EAAGpF,EAAIoF,EAAGyD,EAC5CipC,EAAEntB,GAAG3kB,EAAI8xC,EAAEptB,GAAG7b,EACdipC,EAAEntB,GAAG9b,EAAI6oC,EAAKC,EAAKC,EAAK1sC,EAAGlF,EAAIkF,EAAGlF,EAAI6xC,EAAKzsC,EAAGpF,EAAIoF,EAAGpF,EAErD8xC,EAAE3sB,WAAW/C,KAAKqvB,mBAEbO,cAAgBJ,EAAKC,EACtBzvB,KAAK4vB,cAAgB,SAClBA,cAAgB,EAAI5vB,KAAK4vB,eAG5B52B,EAAKjB,KAAKs0B,aAAc,MAGrB2C,gBAAgBt4B,QAAQsC,EAAKjB,KAAKu0B,cAClCuD,kBAAoB72B,EAAKjB,KAAKu0B,YAG7B/3B,EAAYyL,KAAKgvB,gBAGvB/D,EAAG3nC,WAAWgsC,EAAI/6B,GAElBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAKyL,KAAK6vB,kBAEhDzE,EAAG/nC,WAAWksC,EAAIh7B,GAElBvS,GAAMytC,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAKyL,KAAK6vB,4BAE3Cb,gBAAgBnrC,eAChBgsC,iBAAmB,EAI1B72B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CotC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEdrb,EAAYzW,EAAKjB,KAAKm0B,GAIpBU,EAAe5qC,EAAKF,EACtBglC,GAAmB9mB,KAAK4vB,cAAgBhD,EAEtCkD,EAAqB9vB,KAAK6vB,iBAC1BE,EAAqBtgB,EAAIzP,KAAKmvB,iBAC/BU,iBAAmB1xC,EAAQ6hB,KAAK6vB,iBAAmB/I,GAAUiJ,EAAYA,GAG9EjuC,GAAM0tC,GAFN1I,EAAU9mB,KAAK6vB,iBAAmBC,GAGlC9tC,GAAMytC,EAAK3I,MAMLkJ,EAAkBzuC,GAAOU,MAC7BV,GAAO0lC,YAAYmE,EAAIppC,EAAIge,KAAK4rB,KAAMrqC,GAAOE,MAC7CF,GAAO0lC,YAAYgE,EAAInpC,EAAIke,KAAK0rB,KAAMnqC,GAAOiD,MAC7CuqC,EAAgBkB,oCAIZC,EAAmBjuB,GACtBkuB,MAAMnwB,KAAKqvB,aAAcW,EAASjB,EAAgBqB,qCAClD/qC,UAEGgrC,EAActB,EAAgBuB,uCAAuC5sC,KACzEsc,KAAKgvB,sBAGFA,gBAAgB/rB,QAAQitB,OAEvBH,EAAqBtgB,EAAIzP,KAAKivB,WAEhCjvB,KAAKgvB,gBAAgBhuC,gBAAkB+uC,EAAaA,SACjDf,gBAAgB5rC,iBAChB4rC,gBAAgBt4B,QAAQq5B,IAI/BxuC,GAAOU,MAAM+d,KAAKgvB,gBAAiBqB,EAAaH,GAGhDjF,EAAG3nC,WAAWgsC,EAAIY,GAElBpuC,GAAM0tC,EAAKjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMwE,GAGrC9E,EAAG/nC,WAAWksC,EAAIW,GAElBluC,GAAMytC,EAAKluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMsE,GAIvCl3B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAGZgX,UAChB,qCAGgBlD,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAC7CA,EAAIlY,EAAIqsC,EAASjqB,KAAKgvB,gBAAgBpxC,EACtCkY,EAAIrP,EAAIwjC,EAASjqB,KAAKgvB,gBAAgBvoC,EAC/BqP,4CAGSm0B,UACTA,EAASjqB,KAAK6vB,kEAId7vB,KAAK8pB,gEAIL9pB,KAAK+pB,mDAGFpD,QACLsI,WAAatI,+CAIX3mB,KAAKivB,gDAGDpI,QACNsI,YAActI,gDAIZ7mB,KAAKmvB,mBA3PqBxG,IAkIpBoG,sCAAqC,IAAIxtC,GACzCwtC,uCAAsC,IAAIxtC,GAC1CwtC,0CAAyC,IAAIxtC,OCxJjDgvC,4EAKH,gCAL0B7H,IAYvB8H,0BA+DCvzC,SAoBNwzC,EAAqBC,2BAnBnBzzC,2CAnD0B,IAAIsE,oBACJ,IAAIA,oBACJ,IAAIA,oBACJ,IAAIA,kBAEN,IAAIA,kBACJ,IAAIA,uBAEhB,sBACA,eAEP,YACH,cAEE,aAGD,aACA,aACA,aACA,UACM,IAAIA,WACJ,IAAIA,WACJ,IAAIA,WACJ,IAAIA,UACd,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WACW,IAAIA,YACJ,IAAIA,WACd,UACA,UACA,UACA,WACC,SAEO,IAAIH,UACJ,IAAIA,UACJ,IAAIA,UACJ,IAAIA,aACD,IAAIG,aACJ,IAAIA,aACJ,IAAIA,aACJ,IAAIA,KAKhBovC,SAAW1zC,EAAI2zC,SACfC,SAAW5zC,EAAI6zC,SAEfC,QAAUxD,EAAKoD,SAAS9zB,YACxBm0B,QAAUzD,EAAKsD,SAASh0B,YAiBxBo0B,QAAU1D,EAAKoD,SAASp3B,aACxBuvB,QAAUyE,EAAKoD,SAASl3B,eAGvBxV,EAAMspC,EAAKzE,QAAQpvB,KACnBsxB,EAAKuC,EAAKzE,QAAQtE,QAAQlnC,EAC1B4zC,EAAM3D,EAAK0D,QAAQv3B,KACnBy3B,EAAK5D,EAAK0D,QAAQzM,QAAQlnC,SAE5BiwC,EAAKwD,QAAyC,KAC1CK,EAAWn0C,EAAI2zC,SAChBS,eAAe3tC,KAAK0tC,EAAStH,kBAC7BA,eAAepmC,KAAK0tC,EAASrH,kBAC7BuH,kBAAoBF,EAASG,mBAC7BC,aAAa3tC,UAElB4sC,EAAczF,EAAKmG,EAAK5D,EAAK+D,sBACxB,KACCG,EAAYx0C,EAAI2zC,SACjBS,eAAe3tC,KAAK+tC,EAAU3H,kBAC9BA,eAAepmC,KAAK+tC,EAAU1H,kBAC9BuH,kBAAoBG,EAAUF,mBAC9BC,aAAa9tC,KAAK+tC,EAAUC,mBAG3BC,EAAKpE,EAAK8D,eAEV7kC,EAAKpL,GAAMC,OACf6vC,EAAI5vC,EACJC,GAAOskB,MACLzkB,GAAM+N,MAAMlL,EAAI3C,EAAGisC,EAAKzD,eAAgBvoC,GAAOE,MAC/CF,GAAOU,MAAMgC,EAAIV,EAAG2tC,EAAI3tC,EAAGhC,GAAOiD,MAClCjD,GAAOE,MAETF,GAAOE,MAGTgvC,EAAclvC,GAAO4D,MAAM5D,GAAOU,MAAMuK,EAAImlC,EAAIpwC,GAAOE,MAAO8rC,EAAKiE,gBAGhEI,QAAUrE,EAAKsD,SAASt3B,aACxBwvB,QAAUwE,EAAKsD,SAASp3B,eAGvBvV,EAAmBqpC,EAAKxE,QAAQrvB,KAChCyxB,EAAaoC,EAAKxE,QAAQvE,QAAQlnC,EAClCu0C,EAAmBtE,EAAKqE,QAAQl4B,KAChCo4B,EAAavE,EAAKqE,QAAQpN,QAAQlnC,SAEpCiwC,EAAKyD,QAAyC,KAC1CI,EAAWn0C,EAAI6zC,SAChBiB,eAAeruC,KAAK0tC,EAAStH,kBAC7BC,eAAermC,KAAK0tC,EAASrH,kBAC7BiI,kBAAoBZ,EAASG,mBAC7BU,aAAapuC,UAElB6sC,EAAcvF,EAAK2G,EAAKvE,EAAKyE,sBACxB,KACCP,EAAYx0C,EAAI6zC,SACjBiB,eAAeruC,KAAK+tC,EAAU3H,kBAC9BC,eAAermC,KAAK+tC,EAAU1H,kBAC9BiI,kBAAoBP,EAAUF,mBAC9BU,aAAavuC,KAAK+tC,EAAUC,mBAG3BQ,EAAK3E,EAAKwE,eAEVplC,EAAavL,GAAMC,OACvBwwC,EAAIvwC,EACJC,GAAOskB,MACLzkB,GAAM+N,MAAMjL,EAAI5C,EAAGisC,EAAKxD,eAAgBxoC,GAAOE,MAC/CF,GAAOU,MAAMiC,EAAIX,EAAGsuC,EAAItuC,EAAGhC,GAAOiD,MAClCjD,GAAOE,MAETF,GAAOE,MAGTivC,EAAcnvC,GAAO4D,MAAM5D,GAAOU,MAAM0K,EAAIulC,EAAI3wC,GAAOE,MAAO8rC,EAAK0E,uBAGhEE,QAAUp1C,EAAQE,EAAIotC,MAAO,KAE7B+H,WAAa3B,EAAclD,EAAK4E,QAAUzB,IAE1CxG,UAAY,gFASKlxB,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxB8H,SAAWryB,KAAKixB,QAAQ1G,mBACxB+H,SAAWtyB,KAAK4xB,QAAQrH,mBACxBgI,MAAM7uC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBAChCssB,MAAM9uC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBAChCusB,MAAM/uC,KAAKsc,KAAKixB,QAAQzM,QAAQte,kBAChCwsB,MAAMhvC,KAAKsc,KAAK4xB,QAAQpN,QAAQte,kBAChCysB,KAAO3yB,KAAK8oB,QAAQ3D,eACpByN,KAAO5yB,KAAK+oB,QAAQ5D,eACpB0N,KAAO7yB,KAAKixB,QAAQ9L,eACpB2N,KAAO9yB,KAAK4xB,QAAQzM,eACpB4N,KAAO/yB,KAAK8oB,QAAQzD,YACpB2N,KAAOhzB,KAAK+oB,QAAQ1D,YACpB4N,KAAOjzB,KAAKixB,QAAQ5L,YACpB6N,KAAOlzB,KAAK4xB,QAAQvM,WAEnB2F,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CipC,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CivC,EAAan4B,EAAK+xB,UAAU/qB,KAAKqyB,UAAU/0C,EAC3C61C,EAAan6B,EAAKkyB,WAAWlrB,KAAKqyB,UAAU1tC,EAC9CyuC,EAAap6B,EAAKkyB,WAAWlrB,KAAKqyB,UAAUnwC,EAE1C4vC,EAAa94B,EAAK+xB,UAAU/qB,KAAKsyB,UAAUh1C,EAC3C+1C,EAAar6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAU3tC,EAC9C2uC,EAAat6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAUpwC,EAG1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAC/BoI,EAAYvzB,KAAKwzB,KAAKpwB,SAAS+tB,GAC/BsC,EAAYzzB,KAAK0zB,KAAKtwB,SAAS0uB,WAE5B5M,OAAS,MAEVllB,KAAK+wB,aACF4C,OAAO9vC,eACP+vC,MAAQ,OACRC,MAAQ,OACR3O,QAAUllB,KAAK+yB,KAAO/yB,KAAKizB,SAC3B,KAEC5+B,EAAYjT,GAAM+N,MAAMokC,EAAIvzB,KAAKwxB,aAAchB,EAAYsD,6BAEjEvyC,GAAOU,MAAM+d,KAAKqxB,eAAgBrxB,KAAKyyB,MAAOzyB,KAAK+zB,aAC7CC,EAAa5yC,GAAM+N,MAAMokC,EAAIvzB,KAAK+zB,QAASvD,EAAYyD,8BAE7D1yC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKuyB,MAAOvyB,KAAKyrB,aAC7C3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAAS+E,EAAY0D,mCAExDP,OAAOjwC,KAAK2Q,QAEZw/B,MAAQtyC,GAAOkV,QAAQu9B,EAAI3/B,QAE3Bu/B,MAAQryC,GAAOkV,QAAQ3T,EAAIuR,QAC3B6wB,QACHllB,KAAK6yB,KACL7yB,KAAK2yB,KACL3yB,KAAKizB,KAAOjzB,KAAK6zB,MAAQ7zB,KAAK6zB,MAC9B7zB,KAAK+yB,KAAO/yB,KAAK4zB,MAAQ5zB,KAAK4zB,aAG9B5zB,KAAKgxB,aACFmD,OAAOtwC,eACPuwC,MAAQp0B,KAAKmyB,aACbkC,MAAQr0B,KAAKmyB,aACbjN,QAAUllB,KAAKmyB,QAAUnyB,KAAKmyB,SAAWnyB,KAAKgzB,KAAOhzB,KAAKkzB,UAC1D,KAEC7+B,EAAYjT,GAAM+N,MAAMskC,EAAIzzB,KAAKiyB,aAAczB,EAAYsD,6BAEjEvyC,GAAOU,MAAM+d,KAAK+xB,eAAgB/xB,KAAK0yB,MAAO1yB,KAAKs0B,aAC7CC,EAAanzC,GAAM+N,MAAMskC,EAAIzzB,KAAKs0B,QAAS9D,EAAYgE,8BAE7DjzC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAKwyB,MAAOxyB,KAAK2rB,aAC7C3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS6E,EAAYiE,8BAE7DlzC,GAAO87B,MAAMrd,KAAKmyB,QAAS99B,EAAG2L,KAAKm0B,aAE9BE,MAAQr0B,KAAKmyB,QAAU5wC,GAAOkV,QAAQ89B,EAAIlgC,QAE1C+/B,MAAQp0B,KAAKmyB,QAAU5wC,GAAOkV,QAAQzT,EAAIqR,QAC1C6wB,QACHllB,KAAKmyB,QAAUnyB,KAAKmyB,SAAWnyB,KAAK8yB,KAAO9yB,KAAK4yB,MAChD5yB,KAAKkzB,KAAOlzB,KAAKq0B,MAAQr0B,KAAKq0B,MAC9Br0B,KAAKgzB,KAAOhzB,KAAKo0B,MAAQp0B,KAAKo0B,WAI7BlP,OAASllB,KAAKklB,OAAS,EAAI,EAAIllB,KAAKklB,OAAS,EAE9ClsB,EAAKjB,KAAKs0B,cAEZpB,EAAG5nC,WAAW2c,KAAK2yB,KAAO3yB,KAAKkqB,UAAWlqB,KAAK2zB,QAC/C7xC,GAAMke,KAAK+yB,KAAO/yB,KAAKkqB,UAAYlqB,KAAK4zB,MAExCxI,EAAG/nC,WAAW2c,KAAK4yB,KAAO5yB,KAAKkqB,UAAWlqB,KAAKm0B,QAC/CnyC,GAAMge,KAAKgzB,KAAOhzB,KAAKkqB,UAAYlqB,KAAKo0B,MAExCjB,EAAG7vC,WAAW0c,KAAK6yB,KAAO7yB,KAAKkqB,UAAWlqB,KAAK2zB,QAC/CP,GAAMpzB,KAAKizB,KAAOjzB,KAAKkqB,UAAYlqB,KAAK6zB,MAExCR,EAAG/vC,WAAW0c,KAAK8yB,KAAO9yB,KAAKkqB,UAAWlqB,KAAKm0B,QAC/Cb,GAAMtzB,KAAKkzB,KAAOlzB,KAAKkqB,UAAYlqB,KAAKq0B,YAEnCnK,UAAY,EAInBlxB,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,EAEnCgX,EAAKkyB,WAAWlrB,KAAKqyB,UAAUnwC,EAAIkxC,EAEnCp6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAUpwC,EAAIoxC,mDAGZt6B,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAC1CixC,EAAan6B,EAAKkyB,WAAWlrB,KAAKqyB,UAAU1tC,EAC9CyuC,EAAap6B,EAAKkyB,WAAWlrB,KAAKqyB,UAAUnwC,EAC1CmxC,EAAar6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAU3tC,EAC9C2uC,EAAat6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAUpwC,EAG5C0qC,EACFrrC,GAAO4D,MAAM6a,KAAK2zB,OAAQpyC,GAAOU,MAAMgpC,EAAIkI,EAAI5xC,GAAOE,OACtDF,GAAO4D,MAAM6a,KAAKm0B,OAAQ5yC,GAAOU,MAAMmpC,EAAIiI,EAAI9xC,GAAOE,OACxDmrC,GAAQ5sB,KAAK4zB,MAAQ9xC,EAAKke,KAAK6zB,MAAQT,GAAMpzB,KAAKo0B,MAAQpyC,EAAKge,KAAKq0B,MAAQf,OAEtExM,GAAmB9mB,KAAKklB,OAAS0H,OAClC1C,WAAapD,EAGlBmE,EAAG5nC,WAAW2c,KAAK2yB,KAAO7L,EAAS9mB,KAAK2zB,QACxC7xC,GAAMke,KAAK+yB,KAAOjM,EAAU9mB,KAAK4zB,MAEjCxI,EAAG/nC,WAAW2c,KAAK4yB,KAAO9L,EAAS9mB,KAAKm0B,QACxCnyC,GAAMge,KAAKgzB,KAAOlM,EAAU9mB,KAAKo0B,MAEjCjB,EAAG7vC,WAAW0c,KAAK6yB,KAAO/L,EAAS9mB,KAAK2zB,QACxCP,GAAMpzB,KAAKizB,KAAOnM,EAAU9mB,KAAK6zB,MAEjCR,EAAG/vC,WAAW0c,KAAK8yB,KAAOhM,EAAS9mB,KAAKm0B,QACxCb,GAAMtzB,KAAKkzB,KAAOpM,EAAU9mB,KAAKq0B,MAGjCr7B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,EAEnCgX,EAAKkyB,WAAWlrB,KAAKqyB,UAAUnwC,EAAIkxC,EAEnCp6B,EAAKkyB,WAAWlrB,KAAKsyB,UAAUpwC,EAAIoxC,mDASZt6B,OAkBnBy3B,EAAqBC,EAIrBgE,EAAaC,EAAaC,EAAaC,EArBrC3oB,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EACzCw3C,EAAa97B,EAAK+xB,UAAU/qB,KAAKqyB,UAAUjlC,EAC7C+jC,EAAan4B,EAAK+xB,UAAU/qB,KAAKqyB,UAAU/0C,EACzCy3C,EAAa/7B,EAAK+xB,UAAU/qB,KAAKsyB,UAAUllC,EAC7C0kC,EAAa94B,EAAK+xB,UAAU/qB,KAAKsyB,UAAUh1C,EAGzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAC/BoI,EAAYvzB,KAAKwzB,KAAKpwB,SAAS+tB,GAC/BsC,EAAYzzB,KAAK0zB,KAAKtwB,SAAS0uB,GAE3BkD,EAAc,EAIdC,EAAej1B,KAAK2zB,OACxBuB,EAAel1B,KAAKm0B,OAElBhb,EAAO,SAEPnZ,KAAK+wB,QACPkE,EAAKpxC,UACL6wC,EAAM,EACNE,EAAM,EACNzb,GAAQnZ,KAAK+yB,KAAO/yB,KAAKizB,KAEzBxC,EAAczF,EAAKmG,EAAKnxB,KAAKsxB,sBACxB,KAECj9B,EAAYjT,GAAM+N,MACtBokC,EACAvzB,KAAKwxB,aACLhB,EAAY2E,8BAGRnB,EAAa5yC,GAAM+N,MAAMokC,EAAIvzB,KAAK+zB,QAASvD,EAAY4E,+BAEvDtyC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAAS+E,EAAY6E,+BAE7DJ,EAAKvxC,KAAK2Q,GAEVugC,EAAMrzC,GAAOkV,QAAQu9B,EAAI3/B,GAEzBqgC,EAAMnzC,GAAOkV,QAAQ3T,EAAIuR,GACzB8kB,GAAQnZ,KAAK6yB,KAAO7yB,KAAK2yB,KAAO3yB,KAAKizB,KAAO2B,EAAMA,EAAM50B,KAAK+yB,KAAO2B,EAAMA,MAGpE/C,EAAK3xB,KAAK+zB,QAEVvnC,EAAapL,GAAMC,OACvBkyC,EACAhyC,GAAOskB,MAAM/iB,EAAIvB,GAAOU,MAAMiqB,EAAI4oB,EAAIvzC,GAAOE,MAAOF,GAAOE,MAC3DF,GAAOE,MAGTgvC,EAAclvC,GAAO4D,MAAM5D,GAAOU,MAAMuK,EAAImlC,EAAIpwC,GAAOE,MAAOue,KAAKwxB,qBAGjExxB,KAAKgxB,QACPkE,EAAKrxC,UACL8wC,EAAM30B,KAAKmyB,QACX0C,EAAM70B,KAAKmyB,QACXhZ,GAAQnZ,KAAKmyB,QAAUnyB,KAAKmyB,SAAWnyB,KAAKgzB,KAAOhzB,KAAKkzB,MAExDxC,EAAcvF,EAAK2G,EAAK9xB,KAAKgyB,sBACxB,KAEC39B,EAAYjT,GAAM+N,MACtBskC,EACAzzB,KAAKiyB,aACLzB,EAAY2E,8BAGRZ,EAAanzC,GAAM+N,MAAMskC,EAAIzzB,KAAKs0B,QAAS9D,EAAY8E,+BAEvDtyC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS6E,EAAY+E,+BAE7Dh0C,GAAO87B,MAAMrd,KAAKmyB,QAAS99B,EAAG6gC,GAE9BL,EAAM70B,KAAKmyB,QAAU5wC,GAAOkV,QAAQ89B,EAAIlgC,GAExCsgC,EAAM30B,KAAKmyB,QAAU5wC,GAAOkV,QAAQzT,EAAIqR,GACxC8kB,GACEnZ,KAAKmyB,QAAUnyB,KAAKmyB,SAAWnyB,KAAK8yB,KAAO9yB,KAAK4yB,MAChD5yB,KAAKkzB,KAAO2B,EAAMA,EAClB70B,KAAKgzB,KAAO2B,EAAMA,MAGdzC,EAAKlyB,KAAKs0B,QAEV3nC,EAAavL,GAAMC,OACvBoyC,EACAlyC,GAAOskB,MAAM7iB,EAAIzB,GAAOU,MAAMoqB,EAAI0oB,EAAIxzC,GAAOE,MAAOF,GAAOE,MAC3DF,GAAOE,MAGTivC,EAAcnvC,GAAO4D,MAAM5D,GAAOU,MAAM0K,EAAIulC,EAAI3wC,GAAOE,MAAOue,KAAKiyB,kBAG/DrgB,EAAY6e,EAAczwB,KAAKmyB,QAAUzB,EAAc1wB,KAAKoyB,WAE9DtL,EAAU,SACV3N,EAAO,IACT2N,GAAWlV,EAAIuH,GAIjBjN,EAAG7oB,WAAW2c,KAAK2yB,KAAO7L,EAASmO,GACnCjK,GAAMhrB,KAAK+yB,KAAOjM,EAAU4N,EAE5BroB,EAAGhpB,WAAW2c,KAAK4yB,KAAO9L,EAASoO,GACnC/J,GAAMnrB,KAAKgzB,KAAOlM,EAAU6N,EAE5BG,EAAGxxC,WAAW0c,KAAK6yB,KAAO/L,EAASmO,GACnC9D,GAAMnxB,KAAKizB,KAAOnM,EAAU8N,EAE5BG,EAAGzxC,WAAW0c,KAAK8yB,KAAOhM,EAASoO,GACnCpD,GAAM9xB,KAAKkzB,KAAOpM,EAAU+N,EAG5B77B,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAElCnyB,EAAK+xB,UAAU/qB,KAAKqyB,UAAU/0C,EAAI6zC,EAElCn4B,EAAK+xB,UAAU/qB,KAAKsyB,UAAUh1C,EAAIw0C,EAG3BkD,EAAcjwC,sCAGE+Q,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAGtCvU,GAAO87B,MAAM4M,EAASjqB,KAAKkqB,UAAWlqB,KAAK2zB,OAAQ79B,6CAG1Cm0B,UAGTA,EAASjqB,KAAKkqB,UAAYlqB,KAAK4zB,iDAI/B5zB,KAAK2wB,oDAIL3wB,KAAK6wB,mDAIL7wB,KAAKmyB,yCAGL9H,QAEF8H,QAAU9H,SA5gBc1B,IA8KhB6H,+BAA8B,IAAIjvC,GAClCivC,gCAA+B,IAAIjvC,GACnCivC,gCAA+B,IAAIjvC,GACnCivC,gCAA+B,IAAIjvC,GACnCivC,gCAA+B,IAAIjvC,GAyKnCivC,gCAA+B,IAAIjvC,GACnCivC,iCAAgC,IAAIjvC,GACpCivC,iCAAgC,IAAIjvC,GACpCivC,iCAAgC,IAAIjvC,GACpCivC,iCAAgC,IAAIjvC,OC5VxCi0C,oFACqB,IAAIj0C,GAAO,EAAG,mBAE9B,aAEL,cAEC,qBAEO,oEAMRqtC,EAAYC,QAChBv1B,MAAQs1B,OACRp1B,MAAQq1B,OAGRv1B,MAAMgwB,cAActpB,KAAKxG,MAAM+sB,cAAevmB,KAAKy1B,kBAElDC,EAAiB11B,KAAK1G,MAAMgM,WAC5BqwB,EAAiB31B,KAAKxG,MAAM8L,gBAC7BswB,cAAgBD,EAASD,SAxBGhN,IA4BxBmN,0BA8BC54C,yCACJA,mBA7B0B,IAAIsE,qBACpB,oBACiB,IAAIA,sBACpB,eACN,gBACC,uBACO,cAGV,aACA,SACa,IAAIA,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,mBACL,IAAIA,oBACpB,eACJ,eACA,YACH,YACA,iBACuB,IAAI0gB,mBACrB,SAEO,IAAI7gB,UACJ,IAAIA,SACH,IAAI6gB,KAKrB6zB,eAAepyC,KAAK3G,EAAQE,EAAIw4C,aAAcl0C,GAAO+iC,SACrD0K,gBAAgBnrC,YAChBorC,WAAalyC,EAAQE,EAAIiyC,SAAU,KACnCC,YAAcpyC,EAAQE,EAAImyC,UAAW,KACrC2G,mBAAqBh5C,EAAQE,EAAI+4C,iBAAkB,qEAGjClgC,OACjBhN,EAAwBkX,KAAK8oB,QAAQvC,qBAC3CzwB,EAAIlY,EAAIkL,EAAIlL,EACZkY,EAAIrP,EAAIqC,EAAIrC,EACLqP,qCAGgBA,OACjBhN,EAAwBkX,KAAK+oB,QAAQxC,qBAC3CzwB,EAAIlY,EAAIkL,EAAIlL,EACZkY,EAAIrP,EAAIqC,EAAIrC,EACLqP,2CAGsBm0B,EAAgBn0B,UAEtCvU,GAAO87B,MAAM4M,EAAQjqB,KAAKgvB,gBAAiBl5B,6CAGlCm0B,UACTA,EAASjqB,KAAK6vB,yDAGP4F,GACTl0C,GAAO00C,WAAWR,EAAcz1B,KAAK81B,uBACnChN,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjBuT,eAAepyC,KAAK+xC,qDAKpBz1B,KAAK81B,wDAGGF,GACXA,IAAkB51B,KAAKk2B,uBACpBpN,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB2T,gBAAkBN,qDAKlB51B,KAAKk2B,oDAGFvP,QAELsI,WAAatI,+CAIX3mB,KAAKivB,gDAGDpI,QAENsI,YAActI,gDAIZ7mB,KAAKmvB,4DAGUn2B,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBnZ,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAI3BroC,EAAa1B,GAAM+N,MACvBk8B,EACA9pC,GAAOU,MAAM+d,KAAK81B,eAAgB91B,KAAKyqB,eAAgBlpC,GAAOE,MAC9Due,KAAK0rB,MAGD1oC,EAAa5B,GAAM+N,MAAMo8B,EAAIhqC,GAAOC,KAAKwe,KAAK0qB,eAAgBnpC,GAAOE,MAAOue,KAAK4rB,MAUjF0D,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAGd4E,EAAa1vB,KAAK2vB,OACxBD,EAAEptB,GAAG1kB,EAAI0xC,EAAKC,EAAKC,EAAK1sC,EAAG2D,EAAI3D,EAAG2D,EAAIgpC,EAAKzsC,EAAGyD,EAAIzD,EAAGyD,EACrDipC,EAAEptB,GAAG7b,GAAK+oC,EAAK1sC,EAAGlF,EAAIkF,EAAG2D,EAAIgpC,EAAKzsC,EAAGpF,EAAIoF,EAAGyD,EAC5CipC,EAAEntB,GAAG3kB,EAAI8xC,EAAEptB,GAAG7b,EACdipC,EAAEntB,GAAG9b,EAAI6oC,EAAKC,EAAKC,EAAK1sC,EAAGlF,EAAIkF,EAAGlF,EAAI6xC,EAAKzsC,EAAGpF,EAAIoF,EAAGpF,EAGrD8xC,EAAE3sB,WAAW/C,KAAKqvB,mBAEbO,cAAgBJ,EAAKC,EACtBzvB,KAAK4vB,cAAgB,SAClBA,cAAgB,EAAI5vB,KAAK4vB,eAIhCruC,GAAOU,MACLV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5Bwb,KAAKm2B,oBAEFC,eAAiBjL,EAAKH,EAAKhrB,KAAKk2B,gBAEjCl9B,EAAKjB,KAAKs0B,aAAc,MAGrB2C,gBAAgBt4B,QAAQsC,EAAKjB,KAAKu0B,cAClCuD,kBAAoB72B,EAAKjB,KAAKu0B,YAG7B/3B,EAAYyL,KAAKgvB,gBAEvB/D,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQ3T,EAAIyR,GAAKyL,KAAK6vB,kBAEzCzE,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,GAAMluC,GAAOkV,QAAQzT,EAAIuR,GAAKyL,KAAK6vB,4BAEpCb,gBAAgBnrC,eAChBgsC,iBAAmB,EAI1B72B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CotC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEdrb,EAAYzW,EAAKjB,KAAKm0B,GACtBmK,EAAgBr9B,EAAKjB,KAAKkyB,OAIxB2C,EAAe5qC,EAAKF,EAAKu0C,EAAQr2B,KAAK+1B,mBAAqB/1B,KAAKo2B,eAClEtP,GAAmB9mB,KAAK4vB,cAAgBhD,EAEtCkD,EAAqB9vB,KAAK6vB,iBAC1BE,EAAqBtgB,EAAIzP,KAAKmvB,iBAC/BU,iBAAmB1xC,EAAQ6hB,KAAK6vB,iBAAmB/I,GAAUiJ,EAAYA,GAG9EjuC,GAAM0tC,GAFN1I,EAAU9mB,KAAK6vB,iBAAmBC,GAGlC9tC,GAAMytC,EAAK3I,MAKLhkC,EAAKkd,KAAK0rB,KACV1oC,EAAKgd,KAAK4rB,KAGVoE,EAAUzuC,GAAOskB,MACrBtkB,GAAOU,MACLV,GAAOskB,MAAMulB,EAAI7pC,GAAO+0C,QAAQt0C,EAAIgB,EAAIzB,GAAOE,MAAOF,GAAOE,MAC7DF,GAAOskB,MAAMolB,EAAI1pC,GAAO+0C,QAAQx0C,EAAIgB,EAAIvB,GAAOiD,MAAOjD,GAAOiD,MAC7DjD,GAAOg1C,MAETh1C,GAAO87B,MAAMgZ,EAAQr2B,KAAK+1B,mBAAoB/1B,KAAKm2B,cAAe50C,GAAOi1C,MACzEX,EAAa5F,oCAITwG,EAAqBx0B,GACxBkuB,MAAMnwB,KAAKqvB,aAAcW,EAAS6F,EAAaa,uCAC/CrxC,UAEGsxC,EAAgBd,EAAae,yCAAyClzC,KAC1Esc,KAAKgvB,sBAGFA,gBAAgB/rB,QAAQwzB,OAEvB1G,EAAqBtgB,EAAIzP,KAAKivB,WAEhCjvB,KAAKgvB,gBAAgBhuC,gBAAkB+uC,EAAaA,SACjDf,gBAAgB5rC,iBAEhB4rC,gBAAgBt4B,QAAQq5B,IAI/BxuC,GAAOU,MAAM+d,KAAKgvB,gBAAiB2H,EAAeF,GAGlDxL,EAAG3nC,WAAWgsC,EAAImH,GAElB30C,GAAM0tC,EAAKjuC,GAAOkV,QAAQ3T,EAAI2zC,GAG9BrL,EAAG/nC,WAAWksC,EAAIkH,GAElBz0C,GAAMytC,EAAKluC,GAAOkV,QAAQzT,EAAIyzC,GAIhCz9B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAGZgX,UAChB,SA/RuB2vB,IAuMjBkN,sCAAqC,IAAIt0C,GACzCs0C,yCAAwC,IAAIt0C,GAC5Cs0C,4CAA2C,IAAIt0C,OCrPnDs1C,6EACe,IAAIt1C,cAEnB,gBAEG,iBAEC,iCAPoBmnC,IAcxBoO,0BAyBC75C,yCACJA,mBAzB0B,IAAIsE,eACT,IAAIA,mBACjB,mBACC,WACR,cAGoB,IAAIA,gBACpB,YACH,aAGC,aACA,SACa,IAAIA,oBACM,IAAIA,gBACzB,YACH,WACiB,IAAI0gB,SACR,IAAI1gB,UACJ,IAAIH,aACA,IAAIG,SACP,IAAI0gB,KAKrB80B,UAAUrzC,KAAK3G,EAAQE,EAAImN,OAAQ7I,GAAO+iC,OAE/C3iC,GAAY4L,OAAOggC,EAAKxE,QAAQn+B,eAAgB2iC,EAAKwJ,UAAWxJ,EAAKxD,kBAEhEkF,WAAalyC,EAAQE,EAAIiyC,SAAU,KAEnChF,UAAUrmC,YAEV+lC,cAAgB7sC,EAAQE,EAAIwsC,YAAa,KAEzCI,eAAiB9sC,EAAQE,EAAIysC,aAAc,KAG3CsN,OAAS,IACT7K,QAAU,kEAGP/hC,GACH4V,KAAK+oB,QAAQjsB,gBACXisB,QAAQxG,UAAS,QAEnBwU,UAAUrzC,KAAK0G,8CAIb4V,KAAK+2B,8CAGF7H,QACLD,WAAaC,+CAIXlvB,KAAKivB,gDAGD7E,QACNR,cAAgBQ,gDAIdpqB,KAAK4pB,sDAGES,QACTR,eAAiBQ,mDAIfrqB,KAAK6pB,+DAGU7wB,QACjBwxB,SAAWxqB,KAAK+oB,QAAQwB,mBACxBG,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzC0kB,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B2F,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBhZ,EAAKrT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EACnC+9B,EAAKnyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EACnC8tC,EAAKpyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EACtC3C,EAAKgX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAElCqpC,EAAKvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAExBhS,EAAOnZ,KAAK+oB,QAAQqF,UAGpBpC,EAAQ,EAAIvtB,GAAQuB,KAAK4pB,cAGzB/oC,EAAI,EAAIs4B,EAAOnZ,KAAK6pB,eAAiBmC,EAGrCC,EAAI9S,GAAQ6S,EAAQA,GAKpBvc,EAAIzW,EAAKjB,KAAKm0B,QAEfC,QAAU1c,GAAK5uB,EAAI4uB,EAAIwc,GACP,IAAjBjsB,KAAKmsB,eACFA,QAAU,EAAInsB,KAAKmsB,cAErB6K,OAASvnB,EAAIwc,EAAIjsB,KAAKmsB,QAG3B5qC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,UAK7B8D,EAAI1vB,KAAK2vB,IACfD,EAAEptB,GAAG1kB,EAAIoiB,KAAK4qB,WAAa5qB,KAAK8qB,QAAU9qB,KAAK4rB,KAAKnlC,EAAIuZ,KAAK4rB,KAAKnlC,EAAIuZ,KAAKmsB,QAC3EuD,EAAEptB,GAAG7b,GAAKuZ,KAAK8qB,QAAU9qB,KAAK4rB,KAAKhuC,EAAIoiB,KAAK4rB,KAAKnlC,EACjDipC,EAAEntB,GAAG3kB,EAAI8xC,EAAEptB,GAAG7b,EACdipC,EAAEntB,GAAG9b,EAAIuZ,KAAK4qB,WAAa5qB,KAAK8qB,QAAU9qB,KAAK4rB,KAAKhuC,EAAIoiB,KAAK4rB,KAAKhuC,EAAIoiB,KAAKmsB,QAE3EuD,EAAE3sB,WAAW/C,KAAKklB,aAGb+R,IAAIr5C,EAAIyuB,EAAGzuB,EAAIoiB,KAAK4rB,KAAKhuC,EAAIoiB,KAAK+2B,UAAUn5C,OAC5Cq5C,IAAIxwC,EAAI4lB,EAAG5lB,EAAIuZ,KAAK4rB,KAAKnlC,EAAIuZ,KAAK+2B,UAAUtwC,OAE5CwwC,IAAIvgC,QAAQsJ,KAAKg3B,QAGtBh1C,GAAM,IAEFgX,EAAKjB,KAAKs0B,mBACPnC,UAAUxzB,QAAQsC,EAAKjB,KAAKu0B,SAEjClB,EAAGxtC,GAAKoiB,KAAK4qB,WAAa5qB,KAAKkqB,UAAUtsC,EACzCwtC,EAAG3kC,GAAKuZ,KAAK4qB,WAAa5qB,KAAKkqB,UAAUzjC,EACzCzE,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAM5rB,KAAKkqB,iBAE/CA,UAAUrmC,UAIjBmV,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBoyB,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAI1C0qC,EAAerrC,GAAO0lC,YAC1BmE,EACAppC,EACAge,KAAK4rB,KACLkL,EAAaI,iCAGTpQ,EAAkB7kB,GAAQkuB,MAC9BnwB,KAAKklB,OACL3jC,GACGskB,MACC+mB,EACArrC,GAAOskB,MACL7F,KAAKi3B,IACL11C,GAAO87B,MAAMrd,KAAKmsB,QAASnsB,KAAKkqB,UAAW3oC,GAAOE,MAClDF,GAAOE,MAETF,GAAOE,MAER4D,UACHyxC,EAAaK,oCAITrH,EAAagH,EAAaM,sCAAsC1zC,KAAKsc,KAAKkqB,gBAE3EA,UAAUjnB,QAAQ6jB,OACjBiJ,EAAqB/2B,EAAKjB,KAAKm0B,GAAKlsB,KAAKivB,WAC3CjvB,KAAKkqB,UAAUlpC,gBAAkB+uC,EAAaA,QAC3C7F,UAAUxzB,QAAQq5B,EAAa/vB,KAAKkqB,UAAUllC,UAGrDzD,GAAOU,MAAM+d,KAAKkqB,UAAW4F,EAAYhJ,GAGzCsE,EAAG/nC,WAAW2c,KAAK4qB,WAAY9D,GAC/B9kC,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAM9E,GAG/C9tB,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAGZgX,UAChB,qCAGgBlD,UACvBA,EAAIlY,EAAIoiB,KAAK+2B,UAAUn5C,EACvBkY,EAAIrP,EAAIuZ,KAAK+2B,UAAUtwC,EAChBqP,qCAGgBA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UACtCvU,GAAO87B,MAAM4M,EAAQjqB,KAAKkqB,UAAWp0B,6CAG5Bm0B,UACT,sCAGGtX,QACLokB,UAAUzxC,QAAQqtB,UApOOgW,IAyJjBmO,mCAAkC,IAAIv1C,GACtCu1C,sCAAqC,IAAIv1C,GACzCu1C,yCAAwC,IAAIv1C,OCxIhD81C,mFACqB,IAAI91C,kBAEJ,IAAIA,gBAEN,IAAIA,GAAO,EAAG,oBAE3B,iBAEH,qBAEK,qBAEA,iBAEL,kBAEE,eAEH,mEAMFqtC,EAAYC,EAAYC,EAAgB7zB,QAC5C3B,MAAQs1B,OACRp1B,MAAQq1B,OACRv1B,MAAMgwB,cAAcwF,EAAQ9uB,KAAKupB,mBACjC/vB,MAAM8vB,cAAcwF,EAAQ9uB,KAAKwpB,mBACjClwB,MAAMg+B,eAAer8B,EAAM+E,KAAKu3B,iBAChCC,eAAiBx3B,KAAKxG,MAAM8L,WAAatF,KAAK1G,MAAMgM,kBA/BpBojB,IAmC5B+O,0BA4CCx6C,yCACJA,mBA3C0B,IAAIsE,oBACJ,IAAIA,mBACL,IAAIA,mBACJ,IAAIA,sBAClB,cACU,IAAIkgB,GAAO,EAAG,EAAG,oBAC7B,uBACI,uBACA,oBACH,iBACH,mBACC,mBACA,8BAIL,aACA,mBACuB,IAAIlgB,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,WACgB,IAAIA,GAAO,EAAG,YACd,IAAIA,GAAO,EAAG,UACjC,SACA,SACA,SACA,QACiB,IAAI4iB,UACH,IAAIA,UACJ,IAAIlC,iBACf,SAES,IAAI7gB,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,UACP,IAAIA,UACJ,IAAIA,KAKrBuoC,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAchoC,GAAO+iC,SACrDyF,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAcjoC,GAAO+iC,SACrDoN,cAAchuC,KAAK3G,EAAQE,EAAIs6C,WAAY,IAAIh2C,GAAO,EAAG,KAAK8M,gBACnE9M,GAAO+nB,UAAUikB,EAAKmE,cAAenE,EAAKmK,iBACrCnG,iBAAmBx0C,EAAQE,EAAIu6C,eAAgB,KAC/CG,mBAAqB56C,EAAQE,EAAI26C,iBAAkB,KACnDC,mBAAqB96C,EAAQE,EAAI66C,iBAAkB,KACnDC,gBAAkBh7C,EAAQE,EAAI+6C,cAAe,KAC7CC,aAAel7C,EAAQE,EAAIi7C,WAAY,KACvCC,cAAgBp7C,EAAQE,EAAIm7C,aAAa,KACzCC,cAAgBt7C,EAAQE,EAAIq7C,aAAa,iFAMxBt/B,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBnZ,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAIjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhD/qC,EAAYU,GAAOskB,MACvBtkB,GAAOU,MAAMoqB,EAAIH,EAAI3qB,GAAOE,MAC5BF,GAAOU,MAAMe,EAAIF,EAAIvB,GAAOiD,MAC5BizC,EAAiBc,6BAGbjJ,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,WAKlB1pC,GAAM+N,MAAMk8B,EAAIrrB,KAAK0xB,cAAe1xB,KAAKyV,aAEpC+iB,KAAOj3C,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOue,KAAKyV,aAE7DgjB,KAAOl3C,GAAOkV,QAAQzT,EAAIgd,KAAKyV,aAE/BijB,YAAcpJ,EAAKC,EAAKC,EAAKxvB,KAAKw4B,KAAOx4B,KAAKw4B,KAAO/I,EAAKzvB,KAAKy4B,KAAOz4B,KAAKy4B,KAC5Ez4B,KAAK04B,YAAc,SAChBA,YAAc,EAAI14B,KAAK04B,aAO9Bt3C,GAAM+N,MAAMk8B,EAAIrrB,KAAK03B,cAAe13B,KAAK24B,aAGpCC,KAAOr3C,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOue,KAAK24B,aAE7DE,KAAOt3C,GAAOkV,QAAQzT,EAAIgd,KAAK24B,aAG/BhJ,IAAIrtB,GAAG1kB,EAAI0xC,EAAKC,EAAKC,EAAKxvB,KAAK44B,KAAO54B,KAAK44B,KAAOnJ,EAAKzvB,KAAK64B,KAAO74B,KAAK64B,UAExElJ,IAAIrtB,GAAG7b,EAAI+oC,EAAKxvB,KAAK44B,KAAOnJ,EAAKzvB,KAAK64B,UAEtClJ,IAAIrtB,GAAGZ,EAAI8tB,EAAKxvB,KAAK44B,KAAO54B,KAAKw4B,KAAO/I,EAAKzvB,KAAK64B,KAAO74B,KAAKy4B,UAC9D9I,IAAIptB,GAAG3kB,EAAIoiB,KAAK2vB,IAAIrtB,GAAG7b,OAEvBkpC,IAAIptB,GAAG9b,EAAI+oC,EAAKC,EACC,IAAlBzvB,KAAK2vB,IAAIptB,GAAG9b,SAETkpC,IAAIptB,GAAG9b,EAAI,QAGbkpC,IAAIptB,GAAGb,EAAI8tB,EAAKxvB,KAAKw4B,KAAO/I,EAAKzvB,KAAKy4B,UACtC9I,IAAItrB,GAAGzmB,EAAIoiB,KAAK2vB,IAAIrtB,GAAGZ,OACvBiuB,IAAItrB,GAAG5d,EAAIuZ,KAAK2vB,IAAIptB,GAAGb,OAEvBiuB,IAAItrB,GAAG3C,EAAI4tB,EAAKC,EAAKC,EAAKxvB,KAAKw4B,KAAOx4B,KAAKw4B,KAAO/I,EAAKzvB,KAAKy4B,KAAOz4B,KAAKy4B,KAQ3Ez4B,KAAKm4B,cAAe,KAEhBW,EAA2Bv3C,GAAO4D,MAAM6a,KAAKyV,OAAQ50B,GACvDlD,EAAMqiB,KAAK63B,mBAAqB73B,KAAK23B,oBAAsB,EAAI5yC,QAC5Dg0C,eACID,GAAoB94B,KAAK23B,uBAC9B33B,KAAK+4B,oBACFA,oBACA7O,UAAUxoB,EAAI,GAEZo3B,GAAoB94B,KAAK63B,uBAC9B73B,KAAK+4B,oBACFA,oBACA7O,UAAUxoB,EAAI,SAGhBq3B,oBACA7O,UAAUxoB,EAAI,aAGhBq3B,oBACA7O,UAAUxoB,EAAI,KAGhB1B,KAAKq4B,qBACHW,eAAiB,GAGpBhgC,EAAKjB,KAAKs0B,aAAc,MAGrBnC,UAAUxzB,QAAQsC,EAAKjB,KAAKu0B,cAC5B0M,gBAAkBhgC,EAAKjB,KAAKu0B,YAG3B/3B,EAAYhT,GAAOskB,MACvBtkB,GAAO87B,MAAMrd,KAAKkqB,UAAUtsC,EAAGoiB,KAAK24B,OAAQp3C,GAAOE,MACnDF,GAAO87B,MAAMrd,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,EAAG1B,KAAKyV,OAAQl0B,GAAOiD,MACzEizC,EAAiBlL,6BAGb0M,EACJj5B,KAAKkqB,UAAUtsC,EAAIoiB,KAAK44B,KACxB54B,KAAKkqB,UAAUzjC,GACduZ,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,GAAK1B,KAAKw4B,KAE5CU,EACJl5B,KAAKkqB,UAAUtsC,EAAIoiB,KAAK64B,KACxB74B,KAAKkqB,UAAUzjC,GACduZ,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,GAAK1B,KAAKy4B,KAGlDxN,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,EAAKyJ,YAENhP,UAAUrmC,eACVm1C,eAAiB,EAIxBhgC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDASZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CotC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,WAGhB9qB,KAAKq4B,mBAAiBr4B,KAAK+4B,aAA6C,KAEpEnM,EACJrrC,GAAO4D,MAAM6a,KAAKyV,OAAQl0B,GAAOU,MAAMmpC,EAAIH,EAAI1pC,GAAOE,OACtDue,KAAKy4B,KAAOz2C,EACZge,KAAKw4B,KAAO12C,EACVglC,EAAU9mB,KAAK04B,aAAe14B,KAAKi4B,aAAerL,GAChDkD,EAAa9vB,KAAKg5B,eAClBjJ,EAAa/2B,EAAKjB,KAAKm0B,GAAKlsB,KAAK+3B,qBAClCiB,eAAiB76C,EAAQ6hB,KAAKg5B,eAAiBlS,GAAUiJ,EAAYA,GAC1EjJ,EAAU9mB,KAAKg5B,eAAiBlJ,MAG1Bv7B,EAAYhT,GAAO87B,MACvByJ,EACA9mB,KAAKyV,OACLgiB,EAAiB5K,8BAEboM,EAAKnS,EAAU9mB,KAAKw4B,KACpBU,EAAKpS,EAAU9mB,KAAKy4B,KAG1BxN,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,EAAKyJ,MAKPC,EACJ53C,GAAO4D,MAAM6a,KAAK24B,OAAQp3C,GAAOU,MAAMmpC,EAAIH,EAAI1pC,GAAOE,OACtDue,KAAK64B,KAAO72C,EACZge,KAAK44B,KAAO92C,EAERs3C,EAAUp3C,EAAKF,KAEjBke,KAAKm4B,mBAAiBn4B,KAAK+4B,aAA+C,KAItEM,EACJ93C,GAAO4D,MAAM6a,KAAKyV,OAAQl0B,GAAOU,MAAMmpC,EAAIH,EAAI1pC,GAAOE,OACtDue,KAAKy4B,KAAOz2C,EACZge,KAAKw4B,KAAO12C,EAIRw3C,EAAK7B,EAAiB8B,8BAA8B71C,KAAKsc,KAAKkqB,WAE9DsP,EAAMx5B,KAAK2vB,IAAI8J,SAClBN,GACAC,GACAC,EACD5B,EAAiBiC,qCAGdxP,UAAUjnB,QAAQu2B,OAEnBx5B,KAAK+4B,kBACF7O,UAAUxoB,EAAI1jB,EAAMgiB,KAAKkqB,UAAUxoB,EAAG,OAClC1B,KAAK+4B,oBACT7O,UAAUxoB,EAAI5jB,EAAMkiB,KAAKkqB,UAAUxoB,EAAG,QAKvCI,GAAOq3B,GAAWn5B,KAAKkqB,UAAUxoB,EAAI43B,EAAG53B,GAAK1B,KAAK2vB,IAAItrB,GAAGzmB,EACzDmkB,GAAOq3B,GAAWp5B,KAAKkqB,UAAUxoB,EAAI43B,EAAG53B,GAAK1B,KAAK2vB,IAAItrB,GAAG5d,EAEzDkzC,EAAM35B,KAAK2vB,IAAIiK,QAAQ93B,EAAKC,EAAK01B,EAAiBoC,gCACxDF,EAAI/7C,GAAK07C,EAAG17C,EACZ+7C,EAAIlzC,GAAK6yC,EAAG7yC,OAEPyjC,UAAUtsC,EAAI+7C,EAAI/7C,OAElBssC,UAAUzjC,EAAIkzC,EAAIlzC,EAGvB+yC,EAAI57C,EAAIoiB,KAAKkqB,UAAUtsC,EAAI07C,EAAG17C,EAC9B47C,EAAI/yC,EAAIuZ,KAAKkqB,UAAUzjC,EAAI6yC,EAAG7yC,EAC9B+yC,EAAI93B,EAAI1B,KAAKkqB,UAAUxoB,EAAI43B,EAAG53B,MAGxBnN,EAAYhT,GAAOskB,MACvBtkB,GAAO87B,MAAMmc,EAAI57C,EAAGoiB,KAAK24B,OAAQp3C,GAAOE,MACxCF,GAAO87B,MAAMmc,EAAI93B,EAAG1B,KAAKyV,OAAQl0B,GAAOiD,MACxCizC,EAAiB5K,8BAGboM,EAAKO,EAAI57C,EAAIoiB,KAAK44B,KAAOY,EAAI/yC,EAAI+yC,EAAI93B,EAAI1B,KAAKw4B,KAE9CU,EAAKM,EAAI57C,EAAIoiB,KAAK64B,KAAOW,EAAI/yC,EAAI+yC,EAAI93B,EAAI1B,KAAKy4B,KAGpDxN,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,EAAKyJ,MACN,KAGCY,EAAM95B,KAAK2vB,IAAIiK,SAClBT,GACAC,EACD3B,EAAiBsC,qCAEd7P,UAAUtsC,GAAKk8C,EAAIl8C,OACnBssC,UAAUzjC,GAAKqzC,EAAIrzC,MAGlB8N,EAAYhT,GAAO87B,MACvByc,EAAIl8C,EACJoiB,KAAK24B,OACLlB,EAAiB5K,8BAGboM,EAAKa,EAAIl8C,EAAIoiB,KAAK44B,KAAOkB,EAAIrzC,EAE7ByyC,EAAKY,EAAIl8C,EAAIoiB,KAAK64B,KAAOiB,EAAIrzC,EAGnCwkC,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,EAAKyJ,EAIblgC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAeZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAEzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAE3BmE,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAGdhoC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEhD1oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhD/qC,EAAYU,GAAOU,MACvBV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5BizC,EAAiBuC,8BAIb/+B,EAAe7Z,GAAM+N,MAAMk8B,EAAIrrB,KAAK0xB,cAAe1xB,KAAKyV,QAExD7pB,EAAKrK,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOwZ,GAEtDpP,EAAKtK,GAAOkV,QAAQzT,EAAIiY,GAExB8d,EAAe33B,GAAM+N,MAAMk8B,EAAIrrB,KAAK03B,cAAe13B,KAAK24B,QAGxDltC,EAAKlK,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOs3B,GAEtDxtB,EAAKhK,GAAOkV,QAAQzT,EAAI+1B,GAG1B+N,EAAU2Q,EAAiBwC,mCAGzBC,EAAe34C,GAAO4D,MAAM4zB,EAAMl4B,GAElCs5C,EAAOhP,EAAKH,EAAKhrB,KAAKuxB,iBAExByD,EAAcr3C,EAAMu8C,GAClBE,EAAez8C,EAAMw8C,GAEvB9V,GAAS,EACTgW,EAAK,KACLr6B,KAAKm4B,cAAe,KAEhBmC,EAAsB/4C,GAAO4D,MAAM8V,EAAMpa,GAC3ClD,EAAMqiB,KAAK63B,mBAAqB73B,KAAK23B,oBAAsB,EAAI5yC,IAEjEs1C,EAAKl8C,EAAQm8C,GAAcr7B,GAAwBA,IACnD+1B,EAAch3C,EAAMg3C,EAAar3C,EAAM28C,IACvCjW,GAAS,GACAiW,GAAet6B,KAAK23B,oBAE7B0C,EAAKl8C,EACHm8C,EAAct6B,KAAK23B,mBAAqB5yC,IACvCka,GACD,GAEF+1B,EAAch3C,EAAMg3C,EAAah1B,KAAK23B,mBAAqB2C,GAC3DjW,GAAS,GACAiW,GAAet6B,KAAK63B,qBAE7BwC,EAAKl8C,EACHm8C,EAAct6B,KAAK63B,mBAAqB9yC,GACxC,EACAka,IAEF+1B,EAAch3C,EAAMg3C,EAAasF,EAAct6B,KAAK63B,oBACpDxT,GAAS,MAITA,EAAQ,KAEJkW,EAAMjL,EAAKC,EAAKC,EAAK/jC,EAAKA,EAAKgkC,EAAKlkC,EAAKA,EAEzCivC,EAAMhL,EAAK/jC,EAAKgkC,EAAKlkC,EAErBkvC,EAAMjL,EAAK/jC,EAAKG,EAAK6jC,EAAKlkC,EAAKM,EAEjC6uC,EAAMlL,EAAKC,EACH,IAARiL,IAEFA,EAAM,OAGFC,EAAMnL,EAAK5jC,EAAK6jC,EAAK5jC,EAErB+uC,EAAMtL,EAAKC,EAAKC,EAAK5jC,EAAKA,EAAK6jC,EAAK5jC,EAAKA,EAGzC6jC,EAAI1vB,KAAK66B,KAEfnL,EAAEptB,GAAGgC,OAAOi2B,EAAKC,EAAKC,GAEtB/K,EAAEntB,GAAG+B,OAAOk2B,EAAKE,EAAKC,GAEtBjL,EAAErrB,GAAGC,OAAOm2B,EAAKE,EAAKC,GAQtB9T,EAAU4I,EAAE+J,SAASS,GAAOC,GAAOE,EAAIvT,OAClC,KAECyT,EAAMjL,EAAKC,EAAKC,EAAK/jC,EAAKA,EAAKgkC,EAAKlkC,EAAKA,EAEzCivC,EAAMhL,EAAK/jC,EAAKgkC,EAAKlkC,EAEvBmvC,EAAMlL,EAAKC,EACH,IAARiL,IACFA,EAAM,OAIFI,EAAK96B,KAAK+6B,KAEhBD,EAAGx4B,GAAGhe,IAAIi2C,EAAKC,GAEfM,EAAGv4B,GAAGje,IAAIk2C,EAAKE,OAGTM,EAAWF,EAAGG,OAAOf,GAAOC,EAAM1C,EAAiByD,qCACzDpU,EAAQlpC,EAAIo9C,EAASp9C,EACrBkpC,EAAQrgC,EAAIu0C,EAASv0C,EACrBqgC,EAAQplB,EAAI,MAIRnN,EAAYhT,GAAOskB,MACvBtkB,GAAO87B,MAAMyJ,EAAQlpC,EAAGm7B,EAAMx3B,GAAOE,MACrCF,GAAO87B,MAAMyJ,EAAQplB,EAAGzG,EAAM1Z,GAAOiD,MACrCizC,EAAiB3K,8BAGbmM,EAAKnS,EAAQlpC,EAAI6N,EAAKq7B,EAAQrgC,EAAIqgC,EAAQplB,EAAI9V,EAE9CstC,EAAKpS,EAAQlpC,EAAI2N,EAAKu7B,EAAQrgC,EAAIqgC,EAAQplB,EAAI7V,SAGpDqgB,EAAG5oB,WAAWgsC,EAAI/6B,GAClBy2B,GAAMwE,EAAKyJ,EAEX5sB,EAAGhpB,WAAWksC,EAAIh7B,GAClB42B,GAAMsE,EAAKyJ,EAGXlgC,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3B6J,GAAejwC,IAAiBq1C,GAAgBv7B,sCAGhC/I,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAE7CA,EAAIlY,EACFqsC,GACCjqB,KAAKkqB,UAAUtsC,EAAIoiB,KAAK24B,OAAO/6C,GAAKoiB,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,GAAK1B,KAAKyV,OAAO73B,GAC7FkY,EAAIrP,EACFwjC,GACCjqB,KAAKkqB,UAAUtsC,EAAIoiB,KAAK24B,OAAOlyC,GAAKuZ,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,GAAK1B,KAAKyV,OAAOhvB,GACtFqP,4CAGSm0B,UACTA,EAASjqB,KAAKkqB,UAAUzjC,mDAIxBuZ,KAAK8pB,gEAIL9pB,KAAK+pB,8DAIL/pB,KAAK0xB,iEAIL1xB,KAAKuxB,mEAUN/kC,EAAKwT,KAAK8oB,QAAQpB,cACtB1nB,KAAK8pB,eACL2N,EAAiB0D,0BAGbxuC,EAAKqT,KAAK+oB,QAAQrB,cACtB1nB,KAAK+pB,eACL0N,EAAiB2D,0BAGbv6C,EAAYU,GAAOU,MAAM0K,EAAIH,EAAIirC,EAAiB4D,yBAElDpgC,EAAO+E,KAAK8oB,QAAQwS,eACxBt7B,KAAK0xB,cACL+F,EAAiB8D,mCAISh6C,GAAO4D,MAAMtE,EAAGoa,+CAKtC2zB,EAAa5uB,KAAK8oB,QAClB+F,EAAa7uB,KAAK+oB,QAGxBxnC,GAAOU,MAAM+d,KAAK8pB,eAAgB8E,EAAGpK,QAAQte,YAAalG,KAAKyrB,aACzD3oC,EAAa1B,GAAM+N,MAAMy/B,EAAGl1B,KAAKpY,EAAG0e,KAAKyrB,QAASzrB,KAAK0rB,MAE7DnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB8E,EAAGrK,QAAQte,YAAalG,KAAK2rB,aACzD3oC,EAAa5B,GAAM+N,MAAM0/B,EAAGn1B,KAAKpY,EAAG0e,KAAK2rB,QAAS3rB,KAAK4rB,MAEvDp/B,EAAajL,GAAOskB,MAAM+oB,EAAGpK,QAAQp3B,EAAGtK,EAAIvB,GAAOE,MAEnDkL,EAAapL,GAAOskB,MAAMgpB,EAAGrK,QAAQp3B,EAAGpK,EAAIzB,GAAOiD,MAEnD3D,EAAYU,GAAOU,MAAM0K,EAAIH,EAAIjL,GAAOg1C,MAExCt7B,EAAO2zB,EAAG0M,eAAet7B,KAAK0xB,cAAe1xB,KAAKyV,QAElDwV,EAAK2D,EAAGnK,iBACR2G,EAAKyD,EAAGpK,iBACR3iC,EAAK8sC,EAAGjK,kBACR3iC,EAAK6sC,EAAGlK,yBAIZpjC,GAAO4D,MAAMtE,EAAGU,GAAO+0C,QAAQx0C,EAAImZ,EAAM1Z,GAAOE,OAChDF,GAAO4D,MACL8V,EACA1Z,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAIgB,EAAIzB,GAAOE,MACtCF,GAAO0lC,YAAYgE,EAAInpC,EAAIgB,EAAIvB,GAAOiD,MACtCjD,GAAOE,uDAONue,KAAKm4B,kDAGFpQ,GACNA,IAAS/nB,KAAKm4B,qBACXrP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB4V,cAAgBpQ,OAChBmC,UAAUxoB,EAAI,kDAKd1B,KAAK23B,kEAIL33B,KAAK63B,qDAGJtb,EAAeC,GACnBD,IAAUvc,KAAK23B,oBAAsBnb,IAAUxc,KAAK63B,0BACjD/O,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjBoV,mBAAqBpb,OACrBsb,mBAAqBrb,OACrB0N,UAAUxoB,EAAI,mDAKd1B,KAAKq4B,kDAGFtQ,GACNA,IAAS/nB,KAAKq4B,qBACXvP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB8V,cAAgBtQ,yCAIXyT,GACRA,IAAUx7B,KAAKi4B,oBACZnP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB0V,aAAeuD,kDAKfx7B,KAAKi4B,sDAGGtR,GACXA,IAAU3mB,KAAK+3B,uBACZjP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjBwV,gBAAkBpR,qDAKlB3mB,KAAK+3B,sDAGA9N,UACLA,EAASjqB,KAAKg5B,sBA/tBarQ,IA4DrB8O,+BAA8B,IAAIl2C,GAClCk2C,+BAA8B,IAAIl2C,GAoKlCk2C,gCAA+B,IAAIl2C,GACnCk2C,kCAAiC,IAAIl2C,GACrCk2C,iCAAgC,IAAIh2B,GACpCg2B,kCAAiC,IAAIh2B,GACrCg2B,kCAAiC,IAAIl2C,GAiKrCk2C,gCAA+B,IAAIl2C,GACnCk2C,sCAAqC,IAAIh2B,GACzCg2B,uCAAsC,IAAIl2C,GAC1Ck2C,gCAA+B,IAAIl2C,GA+MnCk2C,4BAA2B,IAAIl2C,GAC/Bk2C,4BAA2B,IAAIl2C,GAC/Bk2C,2BAA0B,IAAIl2C,GAC9Bk2C,8BAA6B,IAAIl2C,OCtpBrCk6C,oFACsB,IAAIl6C,IAAQ,EAAG,mBAEf,IAAIA,GAAO,EAAG,kBAEf,IAAIA,IAAQ,EAAG,kBAEf,IAAIA,GAAO,EAAG,aAEpC,YAEA,UAEF,IAIDynC,kBAAmB,mEAIxB4F,EACAC,EACA6M,EACAC,EACAC,EACAC,EACA13C,QAEKmV,MAAQs1B,OACRp1B,MAAQq1B,OACRiN,cAAcp4C,KAAKg4C,QACnBK,cAAcr4C,KAAKi4C,QACnBriC,MAAMgwB,cAAcsS,EAAS57B,KAAKupB,mBAClC/vB,MAAM8vB,cAAcuS,EAAS77B,KAAKwpB,mBAClCwS,QAAUz6C,GAAOmB,WAAWk5C,EAASF,QACrCO,QAAU16C,GAAOmB,WAAWm5C,EAASF,QACrCtR,MAAQlmC,SArCqBukC,IA0CzBwT,0BAoCCj/C,yCACJA,oBApC2B,IAAIsE,qBACJ,IAAIA,eAE3B,cACA,mBAGsB,IAAIA,oBACJ,IAAIA,gBAEzB,YACH,cACE,aAGD,aACA,SACa,IAAIA,UACJ,IAAIA,UACJ,IAAIA,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBAEzB,eACA,YACH,YACA,WACD,SAEc,IAAIH,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,KAKxB46C,gBAAgBz4C,KAAK3G,EAAQE,EAAI6+C,cAAe,IAAIv6C,IAAQ,EAAG,OAC/D66C,gBAAgB14C,KAAK3G,EAAQE,EAAI8+C,cAAe,IAAIx6C,GAAO,EAAG,OAC9DuoC,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAc,IAAIhoC,IAAQ,EAAG,OAC7DwoC,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAc,IAAIjoC,GAAO,EAAG,OAE5D86C,UAAYt/C,EAAQE,EAAI++C,QAAS,KACjCM,UAAYv/C,EAAQE,EAAIg/C,QAAS,KAGjC9J,QAAUp1C,EAAQE,EAAIotC,MAAO,KAE7B+H,WAAar1C,EAAQE,EAAI++C,QAAS,GAAKzO,EAAK4E,QAAUp1C,EAAQE,EAAIg/C,QAAS,KAE3E/R,UAAY,gFAMKlxB,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBnZ,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,SAC5DrqC,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEnCnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,WAI9B2Q,KAAK74C,KAAKwoB,GAAIjJ,QAAQjD,KAAK0rB,MAAMpmC,QAAQ0a,KAAKm8B,sBAE9CK,KAAK94C,KAAK2oB,GAAIpJ,QAAQjD,KAAK4rB,MAAMtmC,QAAQ0a,KAAKo8B,qBAE7CJ,EAAkBh8B,KAAKu8B,KAAKv3C,SAC5Bi3C,EAAkBj8B,KAAKw8B,KAAKx3C,SAE9Bg3C,EAAU,GAAKj3C,QACZw3C,KAAK7lC,QAAQ,EAAIslC,QAEjBO,KAAK14C,UAGRo4C,EAAU,GAAKl3C,QACZy3C,KAAK9lC,QAAQ,EAAIulC,QAEjBO,KAAK34C,cAIN44C,EAAcl7C,GAAOkV,QAAQuJ,KAAK0rB,KAAM1rB,KAAKu8B,MAC7CG,EAAcn7C,GAAOkV,QAAQuJ,KAAK4rB,KAAM5rB,KAAKw8B,MAE7ClN,EAAatvB,KAAK2qB,WAAa3qB,KAAK6qB,QAAU4R,EAAMA,EACpDlN,EAAavvB,KAAK4qB,WAAa5qB,KAAK8qB,QAAU4R,EAAMA,UAErDxX,OAASoK,EAAKtvB,KAAKmyB,QAAUnyB,KAAKmyB,QAAU5C,EAE7CvvB,KAAKklB,OAAS,SACXA,OAAS,EAAIllB,KAAKklB,QAGrBlsB,EAAKjB,KAAKs0B,aAAc,MAErBnC,WAAalxB,EAAKjB,KAAKu0B,YAItBqQ,EAAap7C,GAAO87B,OACvBrd,KAAKkqB,UACNlqB,KAAKu8B,KACLL,EAAcU,8BAGVC,EAAat7C,GAAO87B,OACvBrd,KAAKmyB,QAAUnyB,KAAKkqB,UACrBlqB,KAAKw8B,KACLN,EAAcY,8BAIhB7R,EAAG5nC,WAAW2c,KAAK2qB,WAAYgS,GAC/B76C,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMiR,GAE/CvR,EAAG/nC,WAAW2c,KAAK4qB,WAAYiS,GAC/B76C,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMiR,aAE1C3S,UAAY,EAInBlxB,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAQZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CsqC,EAAcjrC,GAAO0lC,YACzBgE,EACAnpC,EACAke,KAAK0rB,KACLwQ,EAAczP,gCAGVC,EAAcnrC,GAAO0lC,YACzBmE,EACAppC,EACAge,KAAK4rB,KACLsQ,EAAcvP,gCAGVC,GACHrrC,GAAO4D,MAAM6a,KAAKu8B,KAAM/P,GAAOxsB,KAAKmyB,QAAU5wC,GAAO4D,MAAM6a,KAAKw8B,KAAM9P,GACnE5F,GAAmB9mB,KAAKklB,OAAS0H,OAClC1C,WAAapD,MAGZ6V,EAAap7C,GAAO87B,OACvByJ,EACD9mB,KAAKu8B,KACLL,EAAca,+BAGVF,EAAat7C,GAAO87B,OACvBrd,KAAKmyB,QAAUrL,EAChB9mB,KAAKw8B,KACLN,EAAcc,+BAGhB/R,EAAG5nC,WAAW2c,KAAK2qB,WAAYgS,GAC/B76C,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMiR,GAE/CvR,EAAG/nC,WAAW2c,KAAK4qB,WAAYiS,GAC/B76C,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMiR,GAG/C7jC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAMZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAGzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAIhDqR,EAAKj9B,KAAKu8B,KAAK74C,KAAKwoB,GAAIjJ,QAAQngB,GAAIwC,QAAQ0a,KAAKm8B,iBAEjDe,EAAKl9B,KAAKw8B,KAAK94C,KAAK2oB,GAAIpJ,QAAQjgB,GAAIsC,QAAQ0a,KAAKo8B,iBAEjDJ,EAAkBiB,EAAGj4C,SACrBi3C,EAAkBiB,EAAGl4C,SAEvBg3C,EAAU,GAAKj3C,GACjBk4C,EAAGvmC,QAAQ,EAAIslC,GAEfiB,EAAGp5C,UAGDo4C,EAAU,GAAKl3C,GACjBm4C,EAAGxmC,QAAQ,EAAIulC,GAEfiB,EAAGr5C,cAIC44C,EAAcl7C,GAAOkV,QAAQ3T,EAAIm6C,GACjCP,EAAcn7C,GAAOkV,QAAQzT,EAAIk6C,GAEjC5N,EAAatvB,KAAK2qB,WAAa3qB,KAAK6qB,QAAU4R,EAAMA,EACpDlN,EAAavvB,KAAK4qB,WAAa5qB,KAAK8qB,QAAU4R,EAAMA,EAEtDvjB,EAAemW,EAAKtvB,KAAKmyB,QAAUnyB,KAAKmyB,QAAU5C,EAElDpW,EAAO,IACTA,EAAO,EAAIA,OAGPvH,EAAY5R,KAAKoyB,WAAa4J,EAAUh8B,KAAKmyB,QAAU8J,EACvDjH,EAAsBr3C,EAAMi0B,GAE5BkV,GAAmB3N,EAAOvH,EAG1B+qB,EAAap7C,GAAO87B,OAAOyJ,EAASmW,EAAIf,EAAciB,+BAEtDN,EAAat7C,GAAO87B,OACvBrd,KAAKmyB,QAAUrL,EAChBoW,EACAhB,EAAckB,sCAIhBlxB,EAAG7oB,WAAW2c,KAAK2qB,WAAYgS,GAC/B3R,GAAMhrB,KAAK6qB,QAAUtpC,GAAOkV,QAAQ3T,EAAI65C,GAExCtwB,EAAGhpB,WAAW2c,KAAK4qB,WAAYiS,GAC/B1R,GAAMnrB,KAAK8qB,QAAUvpC,GAAOkV,QAAQzT,EAAI65C,GAGxC7jC,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3B6J,EAAcjwC,sCAGE+Q,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAG7CA,EAAIlY,EAAIqsC,EAASjqB,KAAKkqB,UAAYlqB,KAAKw8B,KAAK5+C,EAC5CkY,EAAIrP,EAAIwjC,EAASjqB,KAAKkqB,UAAYlqB,KAAKw8B,KAAK/1C,EACrCqP,4CAGSm0B,UACT,oDAIAjqB,KAAKm8B,kEAILn8B,KAAKo8B,4DAILp8B,KAAKq8B,sDAILr8B,KAAKs8B,oDAILt8B,KAAKmyB,wDAUN5uC,EAAIyc,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBoS,EAAcmB,uBAClEtxC,EAAIiU,KAAKm8B,uBACR56C,GAAOmB,WAAWa,EAAGwI,mDAUtBxI,EAAIyc,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBmS,EAAcoB,uBAClEvxC,EAAIiU,KAAKo8B,uBACR76C,GAAOmB,WAAWa,EAAGwI,uCAGlB4mB,QACLwpB,gBAAgB72C,QAAQqtB,QACxBypB,gBAAgB92C,QAAQqtB,UA1WEgW,IAuDlBuT,gCAA+B,IAAI36C,GACnC26C,gCAA+B,IAAI36C,GAqGnC26C,kCAAiC,IAAI36C,GACrC26C,kCAAiC,IAAI36C,GACrC26C,iCAAgC,IAAI36C,GACpC26C,iCAAgC,IAAI36C,GAqDpC26C,iCAAgC,IAAI36C,GACpC26C,iCAAgC,IAAI36C,GA0HpC26C,yBAAwB,IAAI36C,GAY5B26C,yBAAwB,IAAI36C,OCtXhCg8C,mFACqB,IAAIh8C,GAAO,EAAG,kBAEd,IAAIA,GAAO,EAAG,oBAE7B,iBAEH,eAED,eAEA,iBAEC,eAED,mBAEI,mEAMNqtC,EAAYC,EAAYC,QAC5Bx1B,MAAQs1B,OACRp1B,MAAQq1B,OACRv1B,MAAMgwB,cAAcwF,EAAQ9uB,KAAKupB,mBACjC/vB,MAAM8vB,cAAcwF,EAAQ9uB,KAAKwpB,mBACjCgO,eAAiBx3B,KAAKxG,MAAM8L,WAAatF,KAAK1G,MAAMgM,kBA5BrBojB,IAgC3B8U,0BAqCCvgD,yCACJA,mBApC0B,IAAIsE,oBACJ,IAAIA,eACT,IAAIkgB,oBAChB,mBAED,qBACG,iBACJ,mBAEC,qBACG,iBACJ,iBACA,aAGJ,aACA,SACa,IAAIlgB,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,WACiB,IAAI4iB,iBACjB,0BAGS,IAAI/iB,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,SACP,IAAI0gB,KAKrB6nB,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAchoC,GAAO+iC,SACrDyF,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAcjoC,GAAO+iC,SACrDiN,iBAAmBx0C,EAAQE,EAAIu6C,eAAgB,KAE/CtN,UAAUrmC,YACVm1C,eAAiB,IAEjByE,aAAe1gD,EAAQE,EAAIygD,WAAY,KACvCC,aAAe5gD,EAAQE,EAAI2gD,WAAY,KACvCC,iBAAmB9gD,EAAQE,EAAI6gD,eAAgB,KAC/C7F,aAAel7C,EAAQE,EAAIi7C,WAAY,KACvCC,cAAgBp7C,EAAQE,EAAIm7C,aAAa,KACzCC,cAAgBt7C,EAAQE,EAAIq7C,aAAa,KACzCS,6FAKiB//B,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtB2F,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CipC,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAG1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,SAC5DrqC,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEnCnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,UAW7B0D,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd/G,EAAyByL,EAAKC,IAAO,UAEtCvK,OAAO5iB,GAAG1kB,EAAI0xC,EAAKC,EAAKvvB,KAAK0rB,KAAKjlC,EAAIuZ,KAAK0rB,KAAKjlC,EAAI+oC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIuZ,KAAK4rB,KAAKnlC,EAAIgpC,OACrFvK,OAAO3iB,GAAG3kB,GAAKoiB,KAAK0rB,KAAKjlC,EAAIuZ,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIuZ,KAAK4rB,KAAKhuC,EAAI6xC,OAC5EvK,OAAO7gB,GAAGzmB,GAAKoiB,KAAK0rB,KAAKjlC,EAAI+oC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIgpC,OAChDvK,OAAO5iB,GAAG7b,EAAIuZ,KAAKklB,OAAO3iB,GAAG3kB,OAC7BsnC,OAAO3iB,GAAG9b,EAAI6oC,EAAKC,EAAKvvB,KAAK0rB,KAAK9tC,EAAIoiB,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKhuC,EAAIoiB,KAAK4rB,KAAKhuC,EAAI6xC,OACrFvK,OAAO7gB,GAAG5d,EAAIuZ,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKhuC,EAAI6xC,OAC/CvK,OAAO5iB,GAAGZ,EAAI1B,KAAKklB,OAAO7gB,GAAGzmB,OAC7BsnC,OAAO3iB,GAAGb,EAAI1B,KAAKklB,OAAO7gB,GAAG5d,OAC7By+B,OAAO7gB,GAAG3C,EAAI8tB,EAAKC,OAEnBiJ,YAAclJ,EAAKC,EACpBzvB,KAAK04B,YAAc,SAChBA,YAAc,EAAI14B,KAAK04B,aAGzB14B,KAAKq4B,gBAAiBtU,SACpBiV,eAAiB,GAGpBh5B,KAAKm4B,gBAAkBpU,EAAe,KAClCga,EAAqB5S,EAAKH,EAAKhrB,KAAKuxB,iBACtC5zC,EAAMqiB,KAAK29B,aAAe39B,KAAKy9B,cAAgB,EAAI5+B,QAChDk6B,eACIgF,GAAc/9B,KAAKy9B,kBACxBz9B,KAAK+4B,oBACF7O,UAAUxoB,EAAI,QAEhBq3B,gBACIgF,GAAc/9B,KAAK29B,kBACxB39B,KAAK+4B,oBACF7O,UAAUxoB,EAAI,QAEhBq3B,sBAEAA,oBACA7O,UAAUxoB,EAAI,aAGhBq3B,kBAGH//B,EAAKjB,KAAKs0B,aAAc,MAErBnC,UAAUxzB,QAAQsC,EAAKjB,KAAKu0B,cAC5B0M,gBAAkBhgC,EAAKjB,KAAKu0B,YAG3B/3B,EAAYipC,EAAgBjR,4BAA4BjoC,IAC5D0b,KAAKkqB,UAAUtsC,EACfoiB,KAAKkqB,UAAUzjC,GAIjBwkC,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAKyL,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,GAGhF0pB,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAKyL,KAAKg5B,eAAiBh5B,KAAKkqB,UAAUxoB,aAE3EwoB,UAAUrmC,eACVm1C,eAAiB,EAIxBhgC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAUZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CotC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd/G,EAAyByL,EAAKC,IAAO,KAGvCzvB,KAAKq4B,mBAAiBr4B,KAAK+4B,eAAgDhV,EAAe,KACtF6I,EAAe5qC,EAAKF,EAAKke,KAAKi4B,aAChCnR,GAAmB9mB,KAAK04B,YAAc9L,EACpCkD,EAAqB9vB,KAAKg5B,eAC1BjJ,EAAqB/2B,EAAKjB,KAAKm0B,GAAKlsB,KAAK69B,sBAC1C7E,eAAiB76C,EAAQ6hB,KAAKg5B,eAAiBlS,GAAUiJ,EAAYA,GAG1EjuC,GAAM0tC,GAFN1I,EAAU9mB,KAAKg5B,eAAiBlJ,GAGhC9tC,GAAMytC,EAAK3I,KAKX9mB,KAAKm4B,mBACLn4B,KAAK+4B,eACJhV,EACD,KAEMia,EAAgBz8C,GAAOU,MAC3BV,GAAO0lC,YAAYmE,EAAIppC,EAAIge,KAAK4rB,KAAMrqC,GAAOE,MAC7CF,GAAO0lC,YAAYgE,EAAInpC,EAAIke,KAAK0rB,KAAMnqC,GAAOiD,MAC7Cg5C,EAAgBS,kCAEZ5E,EAAgBr3C,EAAKF,EAIrBo8C,EAAqBl+B,KAAKklB,OAC7BuU,QAAQuE,EAAMpgD,EAAGogD,EAAMv3C,EAAG4yC,EAAOmE,EAAgBW,uCACjD94C,iBAEC2a,KAAK+4B,kBACF7O,UAAUjnB,QAAQi7B,QAClB,OAAIl+B,KAAK+4B,gBACa/4B,KAAKkqB,UAAUxoB,EAAIw8B,EAAWx8B,EACxC,EAAG,KAEZ08B,GAASJ,EAAMpgD,EAAIoiB,KAAKkqB,UAAUxoB,EAAI1B,KAAKklB,OAAO7gB,GAAGzmB,EACrDygD,GAASL,EAAMv3C,EAAIuZ,KAAKkqB,UAAUxoB,EAAI1B,KAAKklB,OAAO7gB,GAAG5d,EACrD63C,EAAqBt+B,KAAKklB,OAAO0U,QACrCwE,EACAC,EACAb,EAAgBe,uCAElBL,EAAWtgD,EAAI0gD,EAAW1gD,EAC1BsgD,EAAWz3C,EAAI63C,EAAW73C,EAC1By3C,EAAWx8B,GAAK1B,KAAKkqB,UAAUxoB,OAC1BwoB,UAAUtsC,GAAK0gD,EAAW1gD,OAC1BssC,UAAUzjC,GAAK63C,EAAW73C,OAC1ByjC,UAAUxoB,EAAI,YAEdwoB,UAAUjnB,QAAQi7B,QAEpB,OAAIl+B,KAAK+4B,gBACa/4B,KAAKkqB,UAAUxoB,EAAIw8B,EAAWx8B,EACxC,EAAG,KAEZ08B,GAASJ,EAAMpgD,EAAIoiB,KAAKkqB,UAAUxoB,EAAI1B,KAAKklB,OAAO7gB,GAAGzmB,EACrDygD,GAASL,EAAMv3C,EAAIuZ,KAAKkqB,UAAUxoB,EAAI1B,KAAKklB,OAAO7gB,GAAG5d,EACrD63C,EAAqBt+B,KAAKklB,OAAO0U,QACrCwE,EACAC,EACAb,EAAgBe,uCAElBL,EAAWtgD,EAAI0gD,EAAW1gD,EAC1BsgD,EAAWz3C,EAAI63C,EAAW73C,EAC1By3C,EAAWx8B,GAAK1B,KAAKkqB,UAAUxoB,OAC1BwoB,UAAUtsC,GAAK0gD,EAAW1gD,OAC1BssC,UAAUzjC,GAAK63C,EAAW73C,OAC1ByjC,UAAUxoB,EAAI,YAEdwoB,UAAUjnB,QAAQi7B,OAKrB3pC,EAAYipC,EAAgB3Q,6BAA6BvoC,IAC7D45C,EAAWtgD,EACXsgD,EAAWz3C,GAIbwkC,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAK2pC,EAAWx8B,GAGtD0pB,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAK2pC,EAAWx8B,OACjD,KAGCsuB,EAAkBzuC,GAAOU,MAC7BV,GAAO0lC,YAAYmE,EAAIppC,EAAIge,KAAK4rB,KAAMrqC,GAAOE,MAC7CF,GAAO0lC,YAAYgE,EAAInpC,EAAIke,KAAK0rB,KAAMnqC,GAAOiD,MAC7Cg5C,EAAgBvN,oCAGZwG,EAAqBz2B,KAAKklB,OAAO0U,SACpC5J,EAAQpyC,GACRoyC,EAAQvpC,EACT+2C,EAAgB9G,4CAGbxM,UAAUtsC,GAAK64C,EAAW74C,OAC1BssC,UAAUzjC,GAAKgwC,EAAWhwC,EAG/BwkC,EAAG3nC,WAAWgsC,EAAImH,GAClB30C,GAAM0tC,EAAKjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAM+K,GAGrCrL,EAAG/nC,WAAWksC,EAAIkH,GAClBz0C,GAAMytC,EAAKluC,GAAOkV,QAAQuJ,KAAK4rB,KAAM6K,GAIvCz9B,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAMZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAGzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAE7BiP,EAAe,EACfoE,EAAgB,EAEdza,EAAyB/jB,KAAK6qB,QAAU7qB,KAAK8qB,UAAY,KAI7D9qB,KAAKm4B,mBACLn4B,KAAK+4B,eACJhV,EACD,KACMvlB,EAAgB2sB,EAAKH,EAAKhrB,KAAKuxB,iBACjCkN,EAAe,SAEfz+B,KAAK+4B,aAA6C,KAE9CnnB,EAAYzzB,EAChBqgB,EAAQwB,KAAKy9B,cACZv+B,GACDA,IAEFu/B,GAAgBz+B,KAAK04B,YAAc9mB,EACnCwoB,EAAez8C,EAAMi0B,QAChB,OAAI5R,KAAK+4B,aAA8C,KACxDnnB,EAAYpT,EAAQwB,KAAKy9B,aAC7BrD,GAAgBxoB,EAGhBA,EAAIzzB,EAAQyzB,EAAI/S,IAAiBK,GAAyB,GAC1Du/B,GAAgBz+B,KAAK04B,YAAc9mB,OAC9B,OAAI5R,KAAK+4B,aAA8C,KACxDnnB,EAAYpT,EAAQwB,KAAK29B,aAC7BvD,EAAexoB,EAGfA,EAAIzzB,EAAQyzB,EAAI/S,GAAgB,EAAGK,IACnCu/B,GAAgBz+B,KAAK04B,YAAc9mB,EAGrCoZ,GAAMhrB,KAAK6qB,QAAU4T,EACrBtT,GAAMnrB,KAAK8qB,QAAU2T,EAKrBpT,EAAGjoB,SAAS4nB,GACZO,EAAGnoB,SAAS+nB,GAEZ5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAGhD8S,EAAOn9C,GAAOU,MAClBV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5Bg5C,EAAgBmB,iCAGlBH,EAAgBE,EAAK15C,aAEfsqC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd4E,EAAa1vB,KAAK2vB,IACxBD,EAAEptB,GAAG1kB,EAAI0xC,EAAKC,EAAKC,EAAK1sC,EAAG2D,EAAI3D,EAAG2D,EAAIgpC,EAAKzsC,EAAGyD,EAAIzD,EAAGyD,EACrDipC,EAAEptB,GAAG7b,GAAK+oC,EAAK1sC,EAAGlF,EAAIkF,EAAG2D,EAAIgpC,EAAKzsC,EAAGpF,EAAIoF,EAAGyD,EAC5CipC,EAAEntB,GAAG3kB,EAAI8xC,EAAEptB,GAAG7b,EACdipC,EAAEntB,GAAG9b,EAAI6oC,EAAKC,EAAKC,EAAK1sC,EAAGlF,EAAIkF,EAAGlF,EAAI6xC,EAAKzsC,EAAGpF,EAAIoF,EAAGpF,MAG/CkpC,EAAkB4I,EAAEuL,MACxByD,EAAK9gD,EACL8gD,EAAKj4C,EACL+2C,EAAgBvD,oCAChB50C,iBAGF6mB,EAAG5oB,WAAWgsC,EAAIxI,GAClBkE,GAAMwE,EAAKjuC,GAAOkV,QAAQ3T,EAAIgkC,GAG9Bza,EAAGhpB,WAAWksC,EAAIzI,GAClBqE,GAAMsE,EAAKluC,GAAOkV,QAAQzT,EAAI8jC,GAIhC9tB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3BqT,GAAiBz5C,IAAiBq1C,GAAgBv7B,sCAGlC/I,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAG7CA,EAAIlY,EAAIqsC,EAASjqB,KAAKkqB,UAAUtsC,EAChCkY,EAAIrP,EAAIwjC,EAASjqB,KAAKkqB,UAAUzjC,EACzBqP,4CAGSm0B,UACTA,EAASjqB,KAAKkqB,UAAUxoB,mDAIxB1B,KAAK8pB,gEAIL9pB,KAAK+pB,kEAIL/pB,KAAKuxB,gEAOLvxB,KAAK+oB,QAAQvE,QAAQlnC,EAAI0iB,KAAK8oB,QAAQtE,QAAQlnC,EAAI0iB,KAAKuxB,gEAOvDvxB,KAAK+oB,QAAQpE,kBAAoB3kB,KAAK8oB,QAAQnE,kEAI9C3kB,KAAKq4B,kDAGFtQ,GACNA,IAAS/nB,KAAKq4B,qBACXvP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB8V,cAAgBtQ,0CAIVkC,UACNA,EAASjqB,KAAKg5B,8DAIdh5B,KAAKi4B,uDAGIpR,GACZA,IAAW7mB,KAAK69B,wBACb/U,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjBsb,iBAAmBhX,sDAKnB7mB,KAAK69B,iEAIL79B,KAAKm4B,kDAGFpQ,GACNA,IAAS/nB,KAAKm4B,qBACXrP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB4V,cAAgBpQ,OAChBmC,UAAUxoB,EAAI,kDAKd1B,KAAKy9B,4DAILz9B,KAAK29B,+CAGJphB,EAAeC,GACnBD,IAAUvc,KAAKy9B,cAAgBjhB,IAAUxc,KAAK29B,oBAC3C7U,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB2H,UAAUxoB,EAAI,OACd+7B,aAAelhB,OACfohB,aAAenhB,yCAIVgf,GACRA,IAAUx7B,KAAKi4B,oBACZnP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB0V,aAAeuD,UA5hBW7S,IAwDpB6U,+BAA8B,IAAIj8C,GAqHlCi8C,gCAAuC,IAAIj8C,GAC3Ci8C,sCAA6C,IAAIj8C,GACjDi8C,oCAA2C,IAAIj8C,GAC/Ci8C,yCAAgD,IAAI/7B,GACpD+7B,yCAAgD,IAAIj8C,GACpDi8C,yCAAgD,IAAIj8C,GA0IpDi8C,mCAAkC,IAAIj8C,GACtCi8C,sCAAqC,IAAIj8C,OCtX7Cq9C,oFACqB,IAAIr9C,IAAQ,EAAG,kBAEf,IAAIA,GAAO,EAAG,eAElC,gCALsBmnC,IAYvBmW,0BA4BC5hD,yCACJA,mBA3B0B,IAAIsE,oBACJ,IAAIA,iBACxB,aACH,cACC,aAGD,aACA,QACY,IAAIA,UACH,IAAIA,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,WACD,qBAGc,IAAIH,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,KAKxBuoC,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAc,IAAIhoC,IAAQ,EAAG,OAC7DwoC,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAc,IAAIjoC,GAAO,EAAG,OAC5Du9C,YAAc/hD,EAAQE,EAAI8hD,UAAW,iFAKpB/lC,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBnZ,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,SAC5DrqC,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEnCnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,WAE9BzB,IAAIzmC,KAAK2oB,GAAIpJ,QAAQjD,KAAK4rB,MAAMtmC,QAAQ4mB,GAAI5mB,QAAQ0a,KAAK0rB,WAEzD1B,SAAWhqB,KAAKmqB,IAAInlC,aAEnB4sB,EAAY5R,KAAKgqB,SAAWhqB,KAAK8+B,oBAEhCE,QADHptB,EAAI,QAMJ5R,KAAKgqB,SAAWjlC,gBAGbolC,IAAItmC,eACJqhC,OAAS,YACTgF,UAAY,QAJZC,IAAIzzB,QAAQ,EAAIsJ,KAAKgqB,cAStBiV,EAAc19C,GAAOkV,QAAQuJ,KAAK0rB,KAAM1rB,KAAKmqB,KAC7C+U,EAAc39C,GAAOkV,QAAQuJ,KAAK4rB,KAAM5rB,KAAKmqB,KAC7C4B,EACJ/rB,KAAK2qB,WAAa3qB,KAAK6qB,QAAUoU,EAAMA,EAAMj/B,KAAK4qB,WAAa5qB,KAAK8qB,QAAUoU,EAAMA,UAEjFha,OAAqB,IAAZ6G,EAAgB,EAAIA,EAAU,EAExC/yB,EAAKjB,KAAKs0B,aAAc,MAErBnC,WAAalxB,EAAKjB,KAAKu0B,YAGtB/3B,EAAYhT,GAAO87B,MACvBrd,KAAKkqB,UACLlqB,KAAKmqB,IACL0U,EAAYtS,6BAGdtB,EAAG3nC,WAAW0c,KAAK2qB,WAAYp2B,GAC/BzS,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAE/C62B,EAAG/nC,WAAW2c,KAAK4qB,WAAYr2B,GAC/BvS,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,aAE1C21B,UAAY,EAInBlxB,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAI1CsqC,EAAcjrC,GAAO0lC,YACzBgE,EACAnpC,EACAke,KAAK0rB,KACLmT,EAAYpS,gCAGRC,EAAcnrC,GAAO0lC,YACzBmE,EACAppC,EACAge,KAAK4rB,KACLiT,EAAYlS,gCAGR/a,EAAY5R,KAAKgqB,SAAWhqB,KAAK8+B,YAEnClS,EAAerrC,GAAO4D,MAAM6a,KAAKmqB,IAAK5oC,GAAOU,MAAMyqC,EAAKF,EAAKjrC,GAAOE,OAGpEmwB,EAAI,IACNgb,GAAQ5zB,EAAKjB,KAAKkyB,OAASrY,OAGzBkV,GAAmB9mB,KAAKklB,OAAS0H,EAC/BkD,EAAqB9vB,KAAKkqB,eAC3BA,UAAYpsC,EAAM,EAAGkiB,KAAKkqB,UAAYpD,GAC3CA,EAAU9mB,KAAKkqB,UAAY4F,MAGrBv7B,EAAYhT,GAAO87B,MAAMyJ,EAAS9mB,KAAKmqB,IAAK0U,EAAYhS,8BAE9D5B,EAAG3nC,WAAW0c,KAAK2qB,WAAYp2B,GAC/BzS,GAAMke,KAAK6qB,QAAUtpC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAE/C62B,EAAG/nC,WAAW2c,KAAK4qB,WAAYr2B,GAC/BvS,GAAMge,KAAK8qB,QAAUvpC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAG/CyE,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAKZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAEzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhDv3B,EAAY2L,KAAKmqB,IAAIzmC,KAAK2oB,GAAIpJ,QAAQjgB,GAAIsC,QAAQ4mB,GAAI5mB,QAAQxC,GAE9D1F,EAAiBiX,EAAEjR,YACrBwuB,EAAYx0B,EAAS4iB,KAAK8+B,YAE9BltB,EAAIzzB,EAAQyzB,EAAG,EAAG3S,QAEZ6nB,GAAmB9mB,KAAKklB,OAAStT,EAEjCrd,EAAYhT,GAAO87B,MAAMyJ,EAASzyB,EAAGwqC,EAAY/R,qCAGvD5gB,EAAG5oB,WAAW0c,KAAK2qB,WAAYp2B,GAC/By2B,GAAMhrB,KAAK6qB,QAAUtpC,GAAOkV,QAAQ3T,EAAIyR,GAExC8X,EAAGhpB,WAAW2c,KAAK4qB,WAAYr2B,GAC/B42B,GAAMnrB,KAAK8qB,QAAUvpC,GAAOkV,QAAQzT,EAAIuR,GAGxCyE,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3B/tC,EAAS4iB,KAAK8+B,YAAc/5C,sCAGZ+Q,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAEtCvU,GAAO87B,MAAM4M,EAASjqB,KAAKkqB,UAAWlqB,KAAKmqB,IAAKr0B,6CAGvCm0B,UACT,mDAIAjqB,KAAK8pB,gEAIL9pB,KAAK+pB,oDAGD3sC,QACN0hD,YAAc1hD,gDAIZ4iB,KAAK8+B,2DAIL9+B,KAAKg/B,eA/PiBrW,IAoChBkW,+BAA8B,IAAIt9C,GAsFlCs9C,kCAAiC,IAAIt9C,GACrCs9C,kCAAiC,IAAIt9C,GACrCs9C,gCAA+B,IAAIt9C,GAqDnCs9C,gCAA+B,IAAIt9C,OCzLvC49C,mFACqB,IAAI59C,kBAEJ,IAAIA,oBAEnB,gBAEH,iBAEC,mEAMJqtC,EAAYC,EAAYC,QAC5Bx1B,MAAQs1B,OACRp1B,MAAQq1B,OACRv1B,MAAMgwB,cAAcwF,EAAQ9uB,KAAKupB,mBACjC/vB,MAAM8vB,cAAcwF,EAAQ9uB,KAAKwpB,mBACjCgO,eAAiBx3B,KAAKxG,MAAM8L,WAAatF,KAAK1G,MAAMgM,kBApBzBojB,IAwBvB0W,0BA+BCniD,yCACJA,kBA/BQ,mBACC,WACR,mBAGyB,IAAIsE,oBACJ,IAAIA,sBACnB,YACT,cACmB,IAAIkgB,GAAO,EAAG,EAAG,cAGnC,aACA,SACa,IAAIlgB,UACJ,IAAIA,oBACM,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,WACiB,IAAI4iB,UAER,IAAI/iB,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,SACP,IAAI4iB,KAKrBylB,cAAgB7sC,EAAQE,EAAIwsC,YAAa,KACzCI,eAAiB9sC,EAAQE,EAAIysC,aAAc,KAE3CI,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAchoC,GAAO+iC,SACrDyF,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAcjoC,GAAO+iC,SACrDiN,iBAAmBx0C,EAAQE,EAAIu6C,eAAgB,KAC/CtN,UAAUrmC,wFAKOmV,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtB2F,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CipC,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,SAC5DrqC,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEnCnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,SAC5DvqC,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,UAW7B0D,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd4E,EAAa1vB,KAAK2vB,OACxBD,EAAEptB,GAAG1kB,EAAI0xC,EAAKC,EAAKvvB,KAAK0rB,KAAKjlC,EAAIuZ,KAAK0rB,KAAKjlC,EAAI+oC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIuZ,KAAK4rB,KAAKnlC,EAAIgpC,EAChFC,EAAEntB,GAAG3kB,GAAKoiB,KAAK0rB,KAAKjlC,EAAIuZ,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIuZ,KAAK4rB,KAAKhuC,EAAI6xC,EACvEC,EAAErrB,GAAGzmB,GAAKoiB,KAAK0rB,KAAKjlC,EAAI+oC,EAAKxvB,KAAK4rB,KAAKnlC,EAAIgpC,EAC3CC,EAAEptB,GAAG7b,EAAIipC,EAAEntB,GAAG3kB,EACd8xC,EAAEntB,GAAG9b,EAAI6oC,EAAKC,EAAKvvB,KAAK0rB,KAAK9tC,EAAIoiB,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKhuC,EAAIoiB,KAAK4rB,KAAKhuC,EAAI6xC,EAChFC,EAAErrB,GAAG5d,EAAIuZ,KAAK0rB,KAAK9tC,EAAI4xC,EAAKxvB,KAAK4rB,KAAKhuC,EAAI6xC,EAC1CC,EAAEptB,GAAGZ,EAAIguB,EAAErrB,GAAGzmB,EACd8xC,EAAEntB,GAAGb,EAAIguB,EAAErrB,GAAG5d,EACdipC,EAAErrB,GAAG3C,EAAI8tB,EAAKC,EAEVzvB,KAAK4pB,cAAgB,EAAG,CAC1B8F,EAAE2P,aAAar/B,KAAKklB,YAEhBoa,EAAe9P,EAAKC,EAClBtU,EAAYmkB,EAAO,EAAI,EAAIA,EAAO,EAElC1tB,EAAYuZ,EAAKH,EAAKhrB,KAAKuxB,iBAG3BvF,EAAgB,EAAIvtB,GAAQuB,KAAK4pB,cAGjC/oC,EAAY,EAAIs6B,EAAInb,KAAK6pB,eAAiBmC,EAG1CC,EAAY9Q,EAAI6Q,EAAQA,EAGxBvc,EAAYzW,EAAKjB,KAAKm0B,QACvBC,QAAU1c,GAAK5uB,EAAI4uB,EAAIwc,QACvBE,QAA2B,IAAjBnsB,KAAKmsB,QAAgB,EAAInsB,KAAKmsB,QAAU,OAClDC,OAASxa,EAAInC,EAAIwc,EAAIjsB,KAAKmsB,QAE/BmT,GAAQt/B,KAAKmsB,aACRjH,OAAO7gB,GAAG3C,EAAa,IAAT49B,EAAa,EAAIA,EAAO,OAE3C5P,EAAE6P,gBAAgBv/B,KAAKklB,aAClBiH,QAAU,OACVC,OAAS,KAGZpzB,EAAKjB,KAAKs0B,aAAc,MAErBnC,UAAUxzB,QAAQsC,EAAKjB,KAAKu0B,aAG3B/3B,EAAY6qC,EAAY7S,4BAA4BjoC,IACxD0b,KAAKkqB,UAAUtsC,EACfoiB,KAAKkqB,UAAUzjC,GAIjBwkC,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAKyL,KAAKkqB,UAAUxoB,GAG1D0pB,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAKyL,KAAKkqB,UAAUxoB,aAErDwoB,UAAUrmC,UAIjBmV,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAQZgX,OACjBiyB,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CotC,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,WAEhB9qB,KAAK4pB,cAAgB,EAAG,KACpByP,EAAgBr3C,EAAKF,EAErB09C,GACHx/B,KAAKklB,OAAO7gB,GAAG3C,GAAK23B,EAAQr5B,KAAKosB,OAASpsB,KAAKmsB,QAAUnsB,KAAKkqB,UAAUxoB,QACtEwoB,UAAUxoB,GAAK89B,EAEpB19C,GAAM0tC,EAAKgQ,EACXx9C,GAAMytC,EAAK+P,MAGLxB,EAAgBz8C,GAAOU,MAC3BV,GAAO0lC,YAAYmE,EAAIppC,EAAIge,KAAK4rB,KAAMrqC,GAAOE,MAC7CF,GAAO0lC,YAAYgE,EAAInpC,EAAIke,KAAK0rB,KAAMnqC,GAAOiD,MAC7C46C,EAAYnB,kCAIRjD,EAAmB72B,GACtBs7B,SAASz/B,KAAKklB,OAAQ8Y,EAAMpgD,EAAGogD,EAAMv3C,EAAG24C,EAAYM,qCACpDr6C,eACE6kC,UAAUtsC,GAAKo9C,EAASp9C,OACxBssC,UAAUzjC,GAAKu0C,EAASv0C,MAGvB8N,EAAYymC,EAGlB/P,EAAG3nC,WAAWgsC,EAAI/6B,GAElBzS,GAAM0tC,EAAKjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAGrC62B,EAAG/nC,WAAWksC,EAAIh7B,GAElBvS,GAAMytC,EAAKluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,OAChC,KAECypC,EAAgBz8C,GAAOU,MAC3BV,GAAO0lC,YAAYmE,EAAIppC,EAAIge,KAAK4rB,KAAMrqC,GAAOE,MAC7CF,GAAO0lC,YAAYgE,EAAInpC,EAAIke,KAAK0rB,KAAMnqC,GAAOiD,MAC7C46C,EAAYnB,kCAER5E,EAAgBr3C,EAAKF,EAIrBglC,EAAkB3iB,GACrBw7B,UACC3/B,KAAKklB,OACL8Y,EAAMpgD,EACNogD,EAAMv3C,EACN4yC,EACA+F,EAAYjI,oCAEb9xC,eACE6kC,UAAUjnB,QAAQ6jB,OAGjBvyB,EAAY6qC,EAAYvS,6BAA6BvoC,IAAIwiC,EAAQlpC,EAAGkpC,EAAQrgC,GAGlFwkC,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAKuyB,EAAQplB,GAGnD0pB,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAKuyB,EAAQplB,GAIrD1I,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAOZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAEzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAE3BmE,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAGpBvpC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aAGxD6S,EAAuBpE,EAFrBp3C,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAIhD8D,EAAa1vB,KAAK2vB,OACxBD,EAAEptB,GAAG1kB,EAAI0xC,EAAKC,EAAKzsC,EAAG2D,EAAI3D,EAAG2D,EAAI+oC,EAAKxsC,EAAGyD,EAAIzD,EAAGyD,EAAIgpC,EACpDC,EAAEntB,GAAG3kB,GAAKkF,EAAG2D,EAAI3D,EAAGlF,EAAI4xC,EAAKxsC,EAAGyD,EAAIzD,EAAGpF,EAAI6xC,EAC3CC,EAAErrB,GAAGzmB,GAAKkF,EAAG2D,EAAI+oC,EAAKxsC,EAAGyD,EAAIgpC,EAC7BC,EAAEptB,GAAG7b,EAAIipC,EAAEntB,GAAG3kB,EACd8xC,EAAEntB,GAAG9b,EAAI6oC,EAAKC,EAAKzsC,EAAGlF,EAAIkF,EAAGlF,EAAI4xC,EAAKxsC,EAAGpF,EAAIoF,EAAGpF,EAAI6xC,EACpDC,EAAErrB,GAAG5d,EAAI3D,EAAGlF,EAAI4xC,EAAKxsC,EAAGpF,EAAI6xC,EAC5BC,EAAEptB,GAAGZ,EAAIguB,EAAErrB,GAAGzmB,EACd8xC,EAAEntB,GAAGb,EAAIguB,EAAErrB,GAAG5d,EACdipC,EAAErrB,GAAG3C,EAAI8tB,EAAKC,EAEVzvB,KAAK4pB,cAAgB,EAAG,KAEpBgW,EAAKr+C,GAAOU,MAChBV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5B46C,EAAYS,+BAEdrB,EAAgBoB,EAAG56C,SACnBo1C,EAAe,MAGT7lC,EAAYm7B,EAAEkK,QAAQgG,EAAGhiD,EAAGgiD,EAAGn5C,EAAG24C,EAAYtS,8BAA8BznC,UAGlF6mB,EAAG5oB,WAAWgsC,EAAI/6B,GAClBy2B,GAAMwE,EAAKjuC,GAAOkV,QAAQ3T,EAAIyR,GAG9B8X,EAAGhpB,WAAWksC,EAAIh7B,GAClB42B,GAAMsE,EAAKluC,GAAOkV,QAAQzT,EAAIuR,OACzB,KAECqrC,EAAKr+C,GAAOU,MAChBV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5B46C,EAAYS,+BAERxF,EAAalP,EAAKH,EAAKhrB,KAAKuxB,iBAElCiN,EAAgBoB,EAAG56C,SACnBo1C,EAAez8C,EAAM08C,OAKfvT,EAAkB4I,EAAE+J,QACxBmG,EAAGhiD,EACHgiD,EAAGn5C,EACH4zC,EACA+E,EAAYnF,oCACZ50C,UAGIkP,EAAY6qC,EAAYtS,6BAA6BxoC,IAAIwiC,EAAQlpC,EAAGkpC,EAAQrgC,GAGlFylB,EAAG5oB,WAAWgsC,EAAI/6B,GAClBy2B,GAAMwE,GAAMjuC,GAAOkV,QAAQuJ,KAAK0rB,KAAMn3B,GAAKuyB,EAAQplB,GAGnD2K,EAAGhpB,WAAWksC,EAAIh7B,GAClB42B,GAAMsE,GAAMluC,GAAOkV,QAAQuJ,KAAK4rB,KAAMr3B,GAAKuyB,EAAQplB,UAIrD1I,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3BqT,GAAiBz5C,IAAiBq1C,GAAgBv7B,sCAGlC/I,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAG7CA,EAAIlY,EAAIqsC,EAASjqB,KAAKkqB,UAAUtsC,EAChCkY,EAAIrP,EAAIwjC,EAASjqB,KAAKkqB,UAAUzjC,EACzBqP,4CAGSm0B,UACTA,EAASjqB,KAAKkqB,UAAUxoB,mDAIxB1B,KAAK8pB,gEAIL9pB,KAAK+pB,kEAIL/pB,KAAKuxB,sDAGDnH,QACNR,cAAgBQ,gDAIdpqB,KAAK4pB,sDAGES,QACTR,eAAiBQ,mDAIfrqB,KAAK6pB,sBAzYiBlB,IA2ChByW,+BAA8B,IAAI79C,GAiHlC69C,oCAAmC,IAAI79C,GACvC69C,uCAAsC,IAAI79C,GAC1C69C,sCAAqC,IAAI39B,GACzC29B,gCAA+B,IAAI79C,GAyFnC69C,iCAAgC,IAAI79C,GACpC69C,gCAA+B,IAAI79C,GACnC69C,sCAAqC,IAAI39B,OCzQ7Cq+B,mFACqB,IAAIv+C,GAAO,EAAG,kBAEd,IAAIA,GAAO,EAAG,gBAEhB,IAAIA,GAAO,EAAG,kBAE9B,mBAEG,eAEJ,gBAEC,iBAEC,oEAMJqtC,EAAYC,EAAYC,EAAgB7zB,QAC5C3B,MAAQs1B,OACRp1B,MAAQq1B,OACRv1B,MAAMgwB,cAAcwF,EAAQ9uB,KAAKupB,mBACjC/vB,MAAM8vB,cAAcwF,EAAQ9uB,KAAKwpB,mBACjClwB,MAAMg+B,eAAer8B,EAAM+E,KAAKu3B,mBA1BJ7O,IA8BxBqX,0BAiDC9iD,yCACJA,kBAjDQ,mBACC,mBAGiB,IAAIsE,oBACJ,IAAIA,mBACL,IAAIA,mBACJ,IAAIA,eAEzB,mBACK,oBACC,qBAEC,iBACJ,mBACC,aAGL,aACA,mBACuB,IAAIA,oBACJ,IAAIA,gBACzB,eACA,YACH,YACA,SAEc,IAAIA,UACJ,IAAIA,WACpB,UACA,UACA,UACA,WAEC,gBACK,iBACC,WAEN,YACC,SAEa,IAAIH,UACJ,IAAIA,aACA,IAAIG,aACJ,IAAIA,UACP,IAAIA,UACJ,IAAIA,KAKrBqoC,cAAgB7sC,EAAQE,EAAIwsC,YAAa,KACzCI,eAAiB9sC,EAAQE,EAAIysC,aAAc,MAE3CI,eAAepmC,KAAK3G,EAAQE,EAAIssC,aAAchoC,GAAO+iC,SACrDyF,eAAermC,KAAK3G,EAAQE,EAAIusC,aAAcjoC,GAAO+iC,SACrDoN,cAAchuC,KAAK3G,EAAQE,EAAIs6C,WAAYh2C,GAAO2Z,QACvD3Z,GAAO+nB,UAAUikB,EAAKmE,cAAenE,EAAKmK,iBAErCmG,iBAAmB9gD,EAAQE,EAAI6gD,eAAgB,KAC/C7F,aAAel7C,EAAQE,EAAIi7C,WAAY,KACvCG,cAAgBt7C,EAAQE,EAAIq7C,aAAa,KAEzC0H,KAAKn8C,YACLo8C,KAAKp8C,uFAIHmc,KAAKi4B,gEAILj4B,KAAK69B,8DAGOzT,QACdR,cAAgBQ,wDAIdpqB,KAAK4pB,4DAGQS,QACfR,eAAiBQ,yDAIfrqB,KAAK6pB,+DAMU7wB,QACjBsxB,SAAWtqB,KAAK8oB,QAAQyB,mBACxBC,SAAWxqB,KAAK+oB,QAAQwB,mBACxBE,eAAe/mC,KAAKsc,KAAK8oB,QAAQtE,QAAQte,kBACzCwkB,eAAehnC,KAAKsc,KAAK+oB,QAAQvE,QAAQte,kBACzCykB,WAAa3qB,KAAK8oB,QAAQ3D,eAC1ByF,WAAa5qB,KAAK+oB,QAAQ5D,eAC1B0F,QAAU7qB,KAAK8oB,QAAQzD,YACvByF,QAAU9qB,KAAK+oB,QAAQ1D,WAEtBiK,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEd5e,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC3C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAC3C2tC,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAE1CmqB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC3C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAC3C8tC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAE1CmpC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAIjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aACtD3oC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhD/qC,EAAYU,GAAOU,MACvBV,GAAOskB,MAAMwG,EAAIrpB,EAAIzB,GAAOE,MAC5BF,GAAOskB,MAAMqG,EAAIppB,EAAIvB,GAAOiD,MAC5Bu7C,EAAaxH,gCAMbn3C,GAAM+N,MAAMk8B,EAAIrrB,KAAK03B,cAAe13B,KAAKigC,WAEpCC,MAAQ3+C,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOue,KAAKigC,WAE9DE,MAAQ5+C,GAAOkV,QAAQzT,EAAIgd,KAAKigC,WAEhC/a,OAASoK,EAAKC,EAAKC,EAAKxvB,KAAKkgC,MAAQlgC,KAAKkgC,MAAQzQ,EAAKzvB,KAAKmgC,MAAQngC,KAAKmgC,MAE1EngC,KAAKklB,OAAS,SACXA,OAAS,EAAIllB,KAAKklB,aAKtBkb,aAAe,OACfhU,OAAS,OACTD,QAAU,EACXnsB,KAAK4pB,cAAgB,EAAG,CAE1BxoC,GAAM+N,MAAMk8B,EAAIrrB,KAAK0xB,cAAe1xB,KAAKggC,WAEpCK,MAAQ9+C,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOue,KAAKggC,WAE9DM,MAAQ/+C,GAAOkV,QAAQzT,EAAIgd,KAAKggC,UAE/BjU,EAAkBuD,EAAKC,EAAKC,EAAKxvB,KAAKqgC,MAAQrgC,KAAKqgC,MAAQ5Q,EAAKzvB,KAAKsgC,MAAQtgC,KAAKsgC,SAEpFvU,EAAU,EAAG,MACVqU,aAAe,EAAIrU,MAElBna,EAAYrwB,GAAO4D,MAAMtE,EAAGmf,KAAKggC,MAGjChU,EAAgB,EAAIvtB,GAAQuB,KAAK4pB,cAGjC2W,EAAe,EAAIvgC,KAAKogC,aAAepgC,KAAK6pB,eAAiBmC,EAG7DC,EAAYjsB,KAAKogC,aAAepU,EAAQA,EAGxCvc,EAAYzW,EAAKjB,KAAKm0B,QACvBC,QAAU1c,GAAK8wB,EAAO9wB,EAAIwc,GAC3BjsB,KAAKmsB,QAAU,SACZA,QAAU,EAAInsB,KAAKmsB,cAGrBC,OAASxa,EAAInC,EAAIwc,EAAIjsB,KAAKmsB,aAE1BiU,aAAerU,EAAU/rB,KAAKmsB,QAC/BnsB,KAAKogC,aAAe,SACjBA,aAAe,EAAIpgC,KAAKogC,yBAI5BI,gBAAkB,KAIrBxgC,KAAKq4B,oBACFK,YAAclJ,EAAKC,EACpBzvB,KAAK04B,YAAc,SAChBA,YAAc,EAAI14B,KAAK04B,oBAGzBA,YAAc,OACdM,eAAiB,GAGpBhgC,EAAKjB,KAAKs0B,aAAc,MAErBnC,WAAalxB,EAAKjB,KAAKu0B,aACvBkU,iBAAmBxnC,EAAKjB,KAAKu0B,aAC7B0M,gBAAkBhgC,EAAKjB,KAAKu0B,YAG3B/3B,EAAYhT,GAAOskB,MACvBtkB,GAAO87B,MAAMrd,KAAKkqB,UAAWlqB,KAAKigC,KAAM1+C,GAAOE,MAC/CF,GAAO87B,MAAMrd,KAAKwgC,gBAAiBxgC,KAAKggC,KAAMz+C,GAAOiD,MACrDu7C,EAAaxT,6BAGT0M,EACJj5B,KAAKkqB,UAAYlqB,KAAKkgC,MAAQlgC,KAAKwgC,gBAAkBxgC,KAAKqgC,MAAQrgC,KAAKg5B,eAEnEE,EACJl5B,KAAKkqB,UAAYlqB,KAAKmgC,MAAQngC,KAAKwgC,gBAAkBxgC,KAAKsgC,MAAQtgC,KAAKg5B,eAGzE/N,EAAG3nC,WAAW0c,KAAK2qB,WAAYp2B,GAC/BzS,GAAMke,KAAK6qB,QAAUoO,EAGrB7N,EAAG/nC,WAAW2c,KAAK4qB,WAAYr2B,GAC/BvS,GAAMge,KAAK8qB,QAAUoO,YAEhBhP,UAAY,OACZsW,gBAAkB,OAClBxH,eAAiB,EAIxBhgC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAKZgX,OACjBs2B,EAAatvB,KAAK2qB,WACtB4E,EAAavvB,KAAK4qB,WACd4E,EAAaxvB,KAAK6qB,QACtB4E,EAAazvB,KAAK8qB,QAEdG,EAAajyB,EAAKkyB,WAAWlrB,KAAKsqB,UAAU3lC,EAC9C7C,EAAakX,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAC1CkpC,EAAapyB,EAAKkyB,WAAWlrB,KAAKwqB,UAAU7lC,EAC9C3C,EAAagX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAIxC0qC,EACJrrC,GAAO4D,MAAM6a,KAAKggC,KAAMz+C,GAAOU,MAAMmpC,EAAIH,EAAI1pC,GAAOE,OACpDue,KAAKsgC,MAAQt+C,EACbge,KAAKqgC,MAAQv+C,EACTglC,GACH9mB,KAAKogC,cAAgBxT,EAAO5sB,KAAKosB,OAASpsB,KAAKmsB,QAAUnsB,KAAKwgC,sBAC5DA,iBAAmB1Z,MAGlBvyB,EAAYhT,GAAO87B,MAAMyJ,EAAS9mB,KAAKggC,KAAMD,EAAalT,8BAC1DoM,EAAanS,EAAU9mB,KAAKqgC,MAC5BnH,EAAapS,EAAU9mB,KAAKsgC,MAGlCrV,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,OAMZq4B,GALN5qC,GAAMytC,EAAKyJ,GAKep3C,EAAKke,KAAKi4B,aAChCnR,GAAmB9mB,KAAK04B,YAAc9L,EAEpCkD,EAAqB9vB,KAAKg5B,eAC1BjJ,EAAqB/2B,EAAKjB,KAAKm0B,GAAKlsB,KAAK69B,sBAC1C7E,eAAiB76C,EAAQ6hB,KAAKg5B,eAAiBlS,GAAUiJ,EAAYA,GAG1EjuC,GAAM0tC,GAFN1I,EAAU9mB,KAAKg5B,eAAiBlJ,GAGhC9tC,GAAMytC,EAAK3I,MAKL8F,EACJrrC,GAAO4D,MAAM6a,KAAKigC,KAAM1+C,GAAOU,MAAMmpC,EAAIH,EAAI1pC,GAAOE,OACpDue,KAAKmgC,MAAQn+C,EACbge,KAAKkgC,MAAQp+C,EACTglC,GAAmB9mB,KAAKklB,OAAS0H,OAClC1C,WAAapD,MAGZvyB,EAAYhT,GAAO87B,MAAMyJ,EAAS9mB,KAAKigC,KAAMF,EAAalT,8BAC1DoM,EAAanS,EAAU9mB,KAAKkgC,MAC5BhH,EAAapS,EAAU9mB,KAAKmgC,MAGlClV,EAAG3nC,WAAWgsC,EAAI/6B,GAClBzS,GAAM0tC,EAAKyJ,EAGX7N,EAAG/nC,WAAWksC,EAAIh7B,GAClBvS,GAAMytC,EAAKyJ,EAIblgC,EAAKkyB,WAAWlrB,KAAKsqB,UAAUpoC,EAAIJ,EAEnCkX,EAAKkyB,WAAWlrB,KAAKwqB,UAAUtoC,EAAIF,mDAMZgX,OACjBkT,EAAalT,EAAK+xB,UAAU/qB,KAAKsqB,UAAUl9B,EAC7C49B,EAAahyB,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EACzC+uB,EAAarT,EAAK+xB,UAAU/qB,KAAKwqB,UAAUp9B,EAC7C+9B,EAAanyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAEzC+tC,EAAYrrB,KAAKsrB,KAAKloB,SAAS4nB,GACnCO,EAAYvrB,KAAKwrB,KAAKpoB,SAAS+nB,GAGjC5pC,GAAOU,MAAM+d,KAAK8pB,eAAgB9pB,KAAKyqB,eAAgBzqB,KAAKyrB,aACtD3oC,EAAa1B,GAAM+N,MAAMk8B,EAAIrrB,KAAKyrB,QAASzrB,KAAK0rB,MAEtDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB/pB,KAAK0qB,eAAgB1qB,KAAK2rB,aA0BxD7E,EAzBE9jC,EAAa5B,GAAM+N,MAAMo8B,EAAIvrB,KAAK2rB,QAAS3rB,KAAK4rB,MAEhD/qC,EAAYU,GAAOskB,MACvBtkB,GAAOU,MAAMoqB,EAAIH,EAAI3qB,GAAOE,MAC5BF,GAAOU,MAAMe,EAAIF,EAAIvB,GAAOiD,MAC5Bu7C,EAAa/F,8BAITyG,EAAar/C,GAAM+N,MAAMk8B,EAAIrrB,KAAK03B,cAAe13B,KAAKigC,MAGtDS,EAAMn/C,GAAOkV,QAAQlV,GAAOskB,MAAMhlB,EAAGiC,EAAIvB,GAAOE,MAAOg/C,GAEvDE,EAAMp/C,GAAOkV,QAAQzT,EAAIy9C,GAGzB7uB,EAAYrwB,GAAO4D,MAAMtE,EAAGmf,KAAKigC,MAEjChU,EACJjsB,KAAK2qB,WACL3qB,KAAK4qB,WACL5qB,KAAK6qB,QAAU7qB,KAAKkgC,MAAQlgC,KAAKkgC,MACjClgC,KAAK8qB,QAAU9qB,KAAKmgC,MAAQngC,KAAKmgC,MAIjCrZ,EADQ,IAANmF,GACSra,EAAIqa,EAEL,MAIN13B,EAAYhT,GAAO87B,MAAMyJ,EAAS2Z,EAAIV,EAAajT,8BACnDmM,EAAanS,EAAU4Z,EACvBxH,EAAapS,EAAU6Z,SAG7Bz0B,EAAG5oB,WAAW0c,KAAK2qB,WAAYp2B,GAC/By2B,GAAMhrB,KAAK6qB,QAAUoO,EAErB5sB,EAAGhpB,WAAW2c,KAAK4qB,WAAYr2B,GAC/B42B,GAAMnrB,KAAK8qB,QAAUoO,EAGrBlgC,EAAK+xB,UAAU/qB,KAAKsqB,UAAUhtC,EAAI0tC,EAElChyB,EAAK+xB,UAAU/qB,KAAKwqB,UAAUltC,EAAI6tC,EAE3BxtC,EAAMi0B,IAAM7sB,yCAGP9H,UAELA,qCAGgB6Y,UAChBkK,KAAK8oB,QAAQpB,cAAc1nB,KAAK8pB,eAAgBh0B,sCAGhCA,UAChBkK,KAAK+oB,QAAQrB,cAAc1nB,KAAK+pB,eAAgBj0B,4CAG1Bm0B,EAAgBn0B,UAE7CA,EAAIlY,EAAIqsC,GAAUjqB,KAAKkqB,UAAYlqB,KAAKigC,KAAKriD,EAAIoiB,KAAKwgC,gBAAkBxgC,KAAKggC,KAAKpiD,GAClFkY,EAAIrP,EAAIwjC,GAAUjqB,KAAKkqB,UAAYlqB,KAAKigC,KAAKx5C,EAAIuZ,KAAKwgC,gBAAkBxgC,KAAKggC,KAAKv5C,GAC3EqP,4CAGSm0B,UACTA,EAASjqB,KAAKg5B,gEAIdh5B,KAAK8pB,gEAIL9pB,KAAK+pB,8DAIL/pB,KAAK0xB,mEAIL1xB,KAAK4gC,oFAIL5gC,KAAK6gC,wEAIL7gC,KAAK8gC,8EAIL9gC,KAAK+gC,mFAINnS,EAAa5uB,KAAK8oB,QAClB+F,EAAa7uB,KAAK+oB,QAElBv8B,EAAaoiC,EAAGlH,cAAc1nB,KAAK8pB,eAAgB,IAAIvoC,IACvDoL,EAAakiC,EAAGnH,cAAc1nB,KAAK+pB,eAAgB,IAAIxoC,IACvDV,EAAYU,GAAOU,MAAM0K,EAAIH,EAAI,IAAIjL,IACrC0Z,EAAe2zB,EAAG0M,eAAet7B,KAAK0xB,cAAe,IAAInwC,WAEnCA,GAAO4D,MAAMtE,EAAGoa,wDAKtC2zB,EAAa5uB,KAAK8oB,QAClB+F,EAAa7uB,KAAK+oB,QAGxBxnC,GAAOU,MAAM+d,KAAK8pB,eAAgB8E,EAAGpK,QAAQte,YAAalG,KAAKyrB,aACzD3oC,EAAK1B,GAAM+N,MAAMy/B,EAAGl1B,KAAKpY,EAAG0e,KAAKyrB,QAASzrB,KAAK0rB,MAErDnqC,GAAOU,MAAM+d,KAAK+pB,eAAgB8E,EAAGrK,QAAQte,YAAalG,KAAK2rB,aACzD3oC,EAAK5B,GAAM+N,MAAM0/B,EAAGn1B,KAAKpY,EAAG0e,KAAK2rB,QAAS3rB,KAAK4rB,MAE/Cp/B,EAAKjL,GAAOskB,MAAM+oB,EAAGpK,QAAQp3B,EAAGtK,EAAIvB,GAAOE,MAE3CkL,EAAKpL,GAAOskB,MAAMgpB,EAAGrK,QAAQp3B,EAAGpK,EAAIzB,GAAOiD,MAE3C3D,EAAIU,GAAOU,MAAM0K,EAAIH,EAAIjL,GAAOg1C,MAEhCt7B,EAAO2zB,EAAG0M,eAAet7B,KAAK0xB,cAAe,IAAInwC,IAEjD0pC,EAAK2D,EAAGnK,iBACR2G,EAAKyD,EAAGpK,iBACR3iC,EAAK8sC,EAAGjK,kBACR3iC,EAAK6sC,EAAGlK,yBAIZpjC,GAAO4D,MAAMtE,EAAGU,GAAO+0C,QAAQx0C,EAAImZ,EAAM1Z,GAAOE,OAChDF,GAAO4D,MACL8V,EACA1Z,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAIgB,EAAIzB,GAAOE,MACtCF,GAAO0lC,YAAYgE,EAAInpC,EAAIgB,EAAIvB,GAAOiD,MACtCjD,GAAOE,8DAUNue,KAAK+oB,QAAQvE,QAAQlnC,EAAI0iB,KAAK8oB,QAAQtE,QAAQlnC,sDAI/CwE,EAAake,KAAK8oB,QAAQnE,yBACb3kB,KAAK+oB,QAAQpE,kBACpB7iC,kDAILke,KAAKq4B,kDAGFtQ,GACNA,IAAS/nB,KAAKq4B,qBACXvP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB8V,cAAgBtQ,yCAIXyT,GACRA,IAAUx7B,KAAKi4B,oBACZnP,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjB0V,aAAeuD,6CAIN7U,GACZA,IAAU3mB,KAAK69B,wBACZ/U,QAAQvG,UAAS,QACjBwG,QAAQxG,UAAS,QACjBsb,iBAAmBlX,0CAIbsD,UACNA,EAASjqB,KAAKg5B,sBA9hBSrQ,IA4FjBoX,+BAA8B,IAAIx+C,GAClCw+C,+BAA8B,IAAIx+C,GA2JlCw+C,gCAA+B,IAAIx+C,GAgFnCw+C,gCAA+B,IAAIx+C,GACnCw+C,gCAA+B,IAAIx+C,O7BnWvCy/C,yBAMCte,yBAJoB,eACH,eACA,UAGtBA,QAAUA,iDAIV8F,OAAS,UACTC,KAAO,UACPrwB,KAAO,0CAKL4H,KAAKwoB,qBAGJxrC,QAEHwrC,OAASxrC,WAIZikD,GAAqB,IAAIjsB,GACzBksB,GAAsB,IAAIjsB,GAC1BksB,GAAkB,IAAI9hB,GAEtB3zB,GAAW,SAACg3B,OACVz+B,EAAMy+B,EAAQ0e,WAAWrgB,OAAOrnB,KAChCxV,EAAMw+B,EAAQ2e,WAAWtgB,OAAOrnB,KAChCpS,EAAQo7B,EAAQ0e,WAAWtf,WAC3Bv6B,EAAQm7B,EAAQ2e,WAAWvf,WAC3Br6B,EAASi7B,EAAQ0e,WAAWvgB,QAC5Bn5B,EAASg7B,EAAQ2e,WAAWxgB,QAC5Bx0B,EAAWq2B,EAAQ4e,WACnB7gD,EAASiiC,EAAQ4H,SACjBiX,EAAMj6C,GAAS,EAAKC,MACtBg6C,EACFn1C,EAAiBC,EAAU5E,EAAyBxD,EAAKyD,EAAyBxD,OACzEq9C,EACTr0C,EACEb,EACA5E,EACAxD,EACAyD,EACAxD,QAEOq9C,EACTlwC,EAAkBhF,EAAU5E,EAA0BxD,EAAKyD,EAA0BxD,OAC5Eq9C,EACT3tC,EAAuBvH,EAAU5E,EAAuBxD,EAAKyD,EAAyBxD,OAC7Eq9C,EACT/rC,EAAwBnJ,EAAU5E,EAAuBxD,EAAKyD,EAA0BxD,QAC/Eq9C,GACR95C,EAAwBw4B,aAAakhB,GAAiB1gD,GACvDmT,EAAuBvH,EAAU80C,GAAiBl9C,EAAKyD,EAAyBxD,SACvEq9C,IACR95C,EAAwBw4B,aAAakhB,GAAiB1gD,GACvD+U,EAAwBnJ,EAAU80C,GAAiBl9C,EAAKyD,EAA0BxD,KAIzEs9C,iDACgB,iBACA,kBAEO,IAAIR,GAAchhC,mBAClB,IAAIghC,GAAchhC,sBAE3B,qBACA,mBAEd,gBACA,kBAEE,IAAI4L,mBAEJ,aACLluB,oBACKA,uBACGA,wBACCA,uBAED,IAAIkuB,sBAEL,uBACE,sBACD,qBACD,wBACG,kBACN,OAGL61B,MAAQ,OACR9f,WAAa,OACbC,cAAgB,OAChB8f,eAAiB,yDAIf1hC,KAAKshC,oDAGGK,GACfA,EAAc12C,WACZ+U,KAAKshC,WACLthC,KAAKohC,WAAWrgB,OAAOrnB,KACvBsG,KAAKohC,WAAWrf,aAChB/hB,KAAKqhC,WAAWtgB,OAAOrnB,KACvBsG,KAAKqhC,WAAWtf,0DAKX/hB,KAAK4hC,kDAGH7Z,QACJ8Z,cAAgB9Z,6CAId/nB,KAAK6hC,uDAIL7hC,KAAKzD,oDAILyD,KAAKohC,2DAILphC,KAAKsqB,oDAILtqB,KAAKohC,WAAWtmC,wDAIhBkF,KAAKqhC,2DAILrhC,KAAKwqB,oDAILxqB,KAAKqhC,WAAWvmC,2DAIlBgnC,cAAe,sCAGVphB,QACLiB,WAAajB,+CAIX1gB,KAAK2hB,wDAIPA,WAAahrB,EAAcqJ,KAAKohC,WAAWzf,WAAY3hB,KAAKqhC,WAAW1f,mDAG/DhB,QACRiB,cAAgBjB,kDAId3gB,KAAK4hB,8DAIPA,cAAgB7qB,GACnBiJ,KAAKohC,WAAWxf,cAChB5hB,KAAKqhC,WAAWzf,uDAIJ4Z,QACTkG,eAAiBlG,mDAIfx7B,KAAK0hC,6CAGR/e,EAAqBliC,EAAgBoiC,EAAqBniC,QACzDqhD,cAAe,OACfH,gBAAiB,OACjBC,eAAgB,OAChBC,cAAe,OACfE,iBAAkB,OAClBC,WAAY,OAEZb,WAAaze,OACb0e,WAAaxe,OAEbyH,SAAW7pC,OACX+pC,SAAW9pC,OAEX4gD,WAAWv7C,WAAa,OAExBm8C,OAAS,UACT3lC,OAAS,UAET4lC,QAAQv6C,aACRw6C,QAAQx6C,aAERy6C,WAAa,OAEb1gB,WAAahrB,EAAcqJ,KAAKohC,WAAWzf,WAAY3hB,KAAKqhC,WAAW1f,iBACvEC,cAAgB7qB,GACnBiJ,KAAKohC,WAAWxf,cAChB5hB,KAAKqhC,WAAWzf,8CAIb0gB,OACCC,EAAwBviC,KAAKwiC,mBAC9BA,cAAgBxiC,KAAKshC,gBACrBA,WAAaiB,OAGbV,eAAgB,MAEjBY,GAAW,EACTC,EAAuB1iC,KAAK4hC,eAE5Be,EAAU3iC,KAAKohC,WAAWwB,WAC1BC,EAAU7iC,KAAKqhC,WAAWuB,WAC1BtgB,EAASqgB,GAAWE,EAEpBvpC,EAAQ0G,KAAKohC,WAAW0B,UACxBtpC,EAAQwG,KAAKqhC,WAAWyB,UACxB7+C,EAAMqV,EAAM1O,eACZ1G,EAAMsV,EAAM5O,eACZnD,EAAYuY,KAAK+iC,YACjBr7C,EAAYsY,KAAKgjC,eAGnB1gB,EACFmgB,EAAWj7C,EAAmBC,EAAQuY,KAAKsqB,SAAU5iC,EAAQsY,KAAKwqB,SAAUvmC,EAAKC,QAG5Eo9C,WAAWv7C,WAAa,MACxB,CACL2F,GAASsU,MACTyiC,EAAWziC,KAAKshC,WAAWv7C,WAAa,MAInC,IAAIxI,EAAI,EAAGA,EAAIyiB,KAAKshC,WAAWv7C,aAAcxI,EAAG,KAC7C0lD,EAAuBjjC,KAAKshC,WAAWr7C,OAAO1I,GACpD0lD,EAAIv3B,cAAgB,EACpBu3B,EAAIt3B,eAAiB,UACfu3B,EAAmBD,EAAI/8C,GAEpBC,EAAI,EAAGA,EAAI6Z,KAAKwiC,cAAcz8C,aAAcI,EAAG,KAChDg9C,EAAuBnjC,KAAKwiC,cAAcv8C,OAAOE,MAEnDg9C,EAAIj9C,GAAGF,MAAQk9C,EAAIl9C,IAAK,CAC1Bi9C,EAAIv3B,cAAgBy3B,EAAIz3B,cACxBu3B,EAAIt3B,eAAiBw3B,EAAIx3B,uBAM3B82B,IAAaC,IACfppC,EAAMipB,UAAS,GACf/oB,EAAM+oB,UAAS,SAIdqf,eAAiBa,GAEjBC,GAAeD,GAClBH,EAASc,aAAapjC,MAGpB0iC,IAAgBD,GAClBH,EAASe,WAAWrjC,OAGjBsiB,GAAUmgB,GACbH,EAASgB,SAAStjC,KAAMA,KAAKwiC,kDAItBz4C,EAAiBE,OACpB5K,EAAQ4hD,GACd5hD,EAAMG,OAAOqI,SAASmY,KAAK+iC,YAAa/iC,KAAKsqB,UAC7CjrC,EAAMI,OAAOoI,SAASmY,KAAKgjC,YAAahjC,KAAKwqB,UAC7CnrC,EAAM0K,OAAOrG,KAAKqG,GAClB1K,EAAM4K,OAAOvG,KAAKuG,GAClB5K,EAAMuK,KAAO7E,OAEP5F,EAAS+hD,UAEf53C,EAAenK,EAAQE,GAEhBF,EAAOwK,W8BtWL45C,sDACsB,aACb,QAGbC,gGAIExjC,KAAKyjC,KAAKC,qBAAS,IAAIlC,yCAGV9e,QACf+gB,KAAKtlC,KAAKukB,mCAGDp7B,EAAoBC,QAC7Bo8C,YAAar8C,GAAS,EAAKC,GAAS,EACrCD,IAAUC,SACPo8C,YAAap8C,GAAS,EAAKD,GAAS,qDAKtC,IAAI/J,EAAI,EAAGA,MAAoCA,MAC7C,IAAI4I,EAAI,EAAGA,MAAoCA,OAC7Cw9C,YAAapmD,GAAK,EAAK4I,GAAK,OAIhCy9C,kBACAA,kBACAA,kBACAA,kBACAA,kBACAA,kBACAA,4CAILjhB,EACAliC,EACAoiC,EACAniC,OAEM4G,EAAqBq7B,EAAS9lB,UAC9BtV,EAAqBs7B,EAAShmB,UAK9BgnC,EAAM7jC,KAAK2jC,YAAar8C,GAAS,EAAKC,MAEhC,IAARs8C,SACK,SAEHz2C,EAAI4S,KAAK8jC,wBACH,IAARD,EACFz2C,EAAExF,MAAM+6B,EAAUliC,EAAQoiC,EAAUniC,GACnB,IAARmjD,GACTz2C,EAAExF,MAAMi7B,EAAUniC,EAAQiiC,EAAUliC,GAG/B2M,kCAGDs1B,QAQDqhB,cAAcrhB,YC3CVshB,uFAGK3qC,8CAIEuB,oDAIMqpC,+CAOLxrC,EAA0BlJ,aAOlC20C,qFAGGvhB,EAAqBE,OAC3BvpB,EAAQqpB,EAASmgB,UACjBtpC,EAAQqpB,EAASigB,iBAIrBtpC,EAAMqD,eACNvD,EAAMuD,iBAEC,MAIJrD,EAAM0uB,uBAAuB5uB,UACzB,MAGH6qC,EAAoBxhB,EAASyhB,gBAC7BC,EAAoBxhB,EAASuhB,uBAE/BD,EAAQ3jB,aAAe6jB,EAAQ7jB,YAAqC,IAAvB2jB,EAAQ3jB,WAChD2jB,EAAQ3jB,WAAa,EAIkB,IAA7C2jB,EAAQ5jB,SAAW8jB,EAAQ/jB,eACkB,IAA7C6jB,EAAQ7jB,aAAe+jB,EAAQ9jB,+DAMlC3lB,EACAnC,EACAlJ,UAEO,wDAGqBkJ,EAA0BhY,EAAgBC,UAC/D,WAKOwjD,oBAAoC,IAAIA,OAM7CI,GAAb,2CAC6B7mD,EAAkB4I,yBACjB5I,EAAkB4I,eACtC,GAYGk+C,oFAEE7hB,uCAGFA,wDAGiBjqB,EAA0BiqB,sDAE5BjqB,EAA0BiqB,yDAEvBjqB,EAA0BiqB,uDAE5BjqB,EAA0BiqB,qCAc5CA,EAAoB8hB,sCAQnB9hB,EAAoBoE,aAEdyd,sBAAwC,IAAIA,OAKjDE,qFAGG7pC,UACL,yCAIMnC,EAA0BlJ,UAChC,oDAGiBkJ,UACjB,WAUEisC,qFAYG9pC,EAAoB9W,EAAeZ,EAAgB8pB,UACxDA,yCAKPvU,EACAlJ,EACAzL,EACAZ,EACA8pB,UAEO,oDAGiBvU,UACjB,WCnMEksC,uDAC2C,IAAI5xB,sBACxB,yBACjB,uBACkBmxB,GAAgBU,wCACZL,GAAkBM,yCAEX,IAAItB,6CAG1C/jD,EAAwBC,OAI1BkjC,EAAWnjC,EAAOob,QAClBioB,EAAWpjC,EAAOmb,QAEhBna,EAASjB,EAAOm6B,WAChBj5B,EAASjB,EAAOk6B,WAElBrgB,EAAQqpB,EAASmgB,UACjBtpC,EAAQqpB,EAASigB,aAGjBxpC,IAAUE,WAOVrJ,EAA6BqJ,EAAMipB,iBACvB,OAATtyB,GAAe,IAChBA,EAAK2Q,QAAUxH,EAAO,KAClBwrC,EAAK30C,EAAKuyB,QAAQE,cAClBmiB,EAAK50C,EAAKuyB,QAAQI,cAClB0M,EAAKr/B,EAAKuyB,QAAQsiB,iBAClBvV,EAAKt/B,EAAKuyB,QAAQuiB,oBAEpBH,IAAOniB,GAAYoiB,IAAOliB,GAAY2M,IAAO/uC,GAAUgvC,IAAO/uC,YAK9DokD,IAAOjiB,GAAYkiB,IAAOpiB,GAAY6M,IAAO9uC,GAAU+uC,IAAOhvC,SAMpE0P,EAAOA,EAAKiI,QAIToB,EAAM0rC,cAAc5rC,MAKrB0G,KAAKmlC,iBAAoBnlC,KAAKmlC,gBAAgBD,cAAcviB,EAAUE,SAKpEz1B,EAAsB4S,KAAKolC,iBAAiBC,OAAO1iB,EAAUliC,EAAQoiC,EAAUniC,GAC3E,OAAN0M,IAKJu1B,EAAWv1B,EAAEw1B,cACbC,EAAWz1B,EAAE01B,cAGbxpB,EAAQqpB,EAAS5B,OACjBvnB,EAAQqpB,EAAS9B,OAGjB3zB,EAAE80C,OAAS,KACX90C,EAAEmP,OAASyD,KAAKgmB,cACW,OAAvBhmB,KAAKgmB,qBACFA,cAAckc,OAAS90C,QAEzB44B,cAAgB54B,EAKrBA,EAAE+0C,QAAQrhC,MAAQtH,EAElBpM,EAAE+0C,QAAQ1Z,KAAO,KACjBr7B,EAAE+0C,QAAQ/pC,KAAOkB,EAAM0sB,cACK,OAAxB1sB,EAAM0sB,gBACR1sB,EAAM0sB,cAAcyC,KAAOr7B,EAAE+0C,SAE/B7oC,EAAM0sB,cAAgB54B,EAAE+0C,QAGxB/0C,EAAEg1C,QAAQthC,MAAQxH,EAElBlM,EAAEg1C,QAAQ3Z,KAAO,KACjBr7B,EAAEg1C,QAAQhqC,KAAOoB,EAAMwsB,cACK,OAAxBxsB,EAAMwsB,gBACRxsB,EAAMwsB,cAAcyC,KAAOr7B,EAAEg1C,SAE/B5oC,EAAMwsB,cAAgB54B,EAAEg1C,QAGnBzf,EAASigB,YAAe/f,EAAS+f,aACpCtpC,EAAMipB,UAAS,GACf/oB,EAAM+oB,UAAS,MAGfviB,KAAKslC,gEAODC,EAAQZ,EAAiBa,qBACzBC,EAAQd,EAAiBe,qBAC/BH,EAAMnoD,OAAS,EACfqoD,EAAMroD,OAAS,OACV8jC,aAAaykB,aAAaJ,EAAOE,OAEjC,IAAIloD,EAAI,EAAGA,EAAIgoD,EAAMnoD,SAAUG,OAC7BqoD,QAAQL,EAAMhoD,GAAIkoD,EAAMloD,oCAIzB6P,OACAu1B,EAAsBv1B,EAAEw1B,cACxBC,EAAsBz1B,EAAE01B,cACxBxpB,EAAgBqpB,EAASmgB,UACzBtpC,EAAgBqpB,EAASigB,UAE3B9iC,KAAK6lC,mBAAqBz4C,EAAE04C,mBACzBD,kBAAkBxC,WAAWj2C,GAIhCA,EAAE80C,SACJ90C,EAAE80C,OAAO3lC,OAASnP,EAAEmP,QAGlBnP,EAAEmP,SACJnP,EAAEmP,OAAO2lC,OAAS90C,EAAE80C,QAGlB90C,IAAM4S,KAAKgmB,qBACRA,cAAgB54B,EAAEmP,QAIrBnP,EAAE+0C,QAAQ1Z,OACZr7B,EAAE+0C,QAAQ1Z,KAAKrwB,KAAOhL,EAAE+0C,QAAQ/pC,MAG9BhL,EAAE+0C,QAAQ/pC,OACZhL,EAAE+0C,QAAQ/pC,KAAKqwB,KAAOr7B,EAAE+0C,QAAQ1Z,MAG9Br7B,EAAE+0C,UAAY7oC,EAAM0sB,gBACtB1sB,EAAM0sB,cAAgB54B,EAAE+0C,QAAQ/pC,MAI9BhL,EAAEg1C,QAAQ3Z,OACZr7B,EAAEg1C,QAAQ3Z,KAAKrwB,KAAOhL,EAAEg1C,QAAQhqC,MAG9BhL,EAAEg1C,QAAQhqC,OACZhL,EAAEg1C,QAAQhqC,KAAKqwB,KAAOr7B,EAAEg1C,QAAQ3Z,MAG9Br7B,EAAEg1C,UAAY5oC,EAAMwsB,gBACtBxsB,EAAMwsB,cAAgB54B,EAAEg1C,QAAQhqC,MAI9BhL,EAAEk0C,WAAWv7C,WAAa,IAAM48B,EAASigB,aAAe/f,EAAS+f,aACnEjgB,EAASmgB,UAAUvgB,UAAS,GAC5BM,EAASigB,UAAUvgB,UAAS,SAIzB6iB,iBAAiBnf,QAAQ74B,KAC5B4S,KAAKslC,yDAQHl4C,EAAsB4S,KAAKgmB,cACxB54B,GAAG,KACFu1B,EAAsBv1B,EAAEw1B,cACxBC,EAAsBz1B,EAAE01B,cACxBriC,EAAiB2M,EAAE43C,iBACnBtkD,EAAiB0M,EAAE63C,iBACnB3rC,EAAgBqpB,EAASmgB,UACzBtpC,EAAgBqpB,EAASigB,aAG3B11C,EAAE00C,aAAc,IAEd9hC,KAAKmlC,kBAAoBnlC,KAAKmlC,gBAAgBD,cAAcviB,EAAUE,GAAW,KAC7EkjB,EAAmB34C,EACzBA,EAAI24C,EAAMxpC,YACL0pB,QAAQ8f,YAKf34C,EAAE00C,cAAe,MAGbkE,EAAmB1sC,EAAMwD,eAAaxD,EAAMc,OAC5C6rC,EAAmBzsC,EAAMsD,eAAatD,EAAMY,UAG7C4rC,GAAYC,OAKXC,EAAwCvjB,EAAStlB,UAAU5c,GAAQ6c,SACnE6oC,EAAwCtjB,EAASxlB,UAAU3c,GAAQ4c,YAChDhX,EAAkB4/C,EAAU9oC,KAAM+oC,EAAU/oC,MAWrEhQ,EAAEg5C,OAAOpmC,KAAK6lC,mBACdz4C,EAAIA,EAAEmP,gBAREwpC,EAAmB34C,EACzBA,EAAI24C,EAAMxpC,YACL0pB,QAAQ8f,SAZb34C,EAAIA,EAAEmP,iBA5GLooC,wBAAyC,GACzCA,wBAAyC,OC7HrC0B,+CACJ3oD,iBACGA,eACFA,mBACIA,uBACIA,uBACAA,oBACHA,kBACFA,SAGJqa,KAAO,OACPuuC,QAAU,OACVC,MAAQ,OACRC,UAAY,OACZC,cAAgB,OAChBC,cAAgB,OAChBC,WAAa,OACbC,SAAW,wDAIX7uC,KAAO,OACPuuC,QAAU,OACVC,MAAQ,OACRC,UAAY,OACZC,cAAgB,OAChBC,cAAgB,OAChBC,WAAa,OACbC,SAAW,EACT5mC,cAKE6mC,6CACNnpD,gBACIA,iBACCA,4BACW,0BACA,0BAEA,qBAEN,OAGRwuC,GAAK,OACLjC,OAAS,OACTqC,QAAU,yCAGZv0B,eACEm0B,GAAKn0B,EAAKm0B,QACVjC,OAASlyB,EAAKkyB,YACdqC,QAAUv0B,EAAKu0B,aACfwa,mBAAqB/uC,EAAK+uC,wBAC1BC,mBAAqBhvC,EAAKgvC,wBAExBC,mBAAqBjvC,EAAKivC,wBAE5B3a,aAAet0B,EAAKs0B,aAClBrsB,cAIEinC,4CACE,IAAI1lD,UACb7D,SAGGJ,EAAI,mDAGMF,WACT8jB,EAAM,GACH3jB,EAAI,EAAGA,EAAIH,IAAUG,EAC5B2jB,EAAI/C,KAAK,IAAI8oC,UAER/lC,WAIEgmC,4CACE,IAAI3lD,UACb7D,SAGGwE,EAAI,mDAGM9E,WACT8jB,EAAM,GACH3jB,EAAI,EAAGA,EAAIH,IAAUG,EAC5B2jB,EAAI/C,KAAK,IAAI+oC,UAERhmC,WAIEimC,GAAb,iCACkB,IAAIN,kBACO,CAAC,sBACA,CAAC,OCxEzBO,IAAe,EAERC,6CACG,IAAI9lD,WACJ,IAAIA,sBACF7D,wBACCA,oBACJA,qBACCA,sBACCA,SAGRguB,cAAgB,OAChBC,eAAiB,OACjB27B,WAAa,OACbC,YAAc,OACdC,aAAe,mDAGLpqD,UACRD,EAAYC,GAAQ,SAACG,UAAc,IAAI8pD,cAIrCI,iDACoCJ,GAA0Br/B,UACvE3hB,gBAEwB,IAAI9E,gBACH,IAAIA,mBACA,IAAI0gB,UACb,IAAIA,eACjB,cACA,gBACEvkB,kBACAA,eACHA,eACAA,kBACGA,qBACGA,sBACCA,oBACF,oBACE,mDAYEN,UACRD,EAAYC,GAAQ,SAACG,UAAc,IAAIkqD,cAIrCC,sDACsBnmD,GAAOymB,UAAU3hB,qBACnB,IAAI9E,mBACL,IAAIA,eACzB,cACA,gBACE7D,kBACAA,sBACa,IAAI6D,qBACJ,IAAIA,cACpB7D,eACAA,8BAEEA,iBACAA,oBACG,mDAYIN,UACRD,EAAYC,GAAQ,SAACG,UAAc,IAAImqD,cAIrCC,GAAb,iCAC8B,IAAId,iBACP,CAAC,iBAClB,iBACmB,CAAC,sBACA,CAAC,OAGlBe,iDACe,IAAIrmD,cACL,IAAIA,mBAChB7D,iDAQXmqD,EACA5jD,EACAC,EACAqL,OAEMhN,EAAiBqlD,EAAyB57B,oBAC1CxpB,EAAiBolD,EAAyB37B,oBAC1CxZ,EAAqBm1C,EAAyBn7B,wBAC9CC,EAAoBk7B,EAAyBj7B,2BAI/Ck7B,EAAG96C,MAELpL,GAAYC,MAAMqC,EAAK4jD,EAAG76C,WAAYzK,GAEtCZ,GAAYC,MAAMsC,EAAK2jD,EAAGC,YAAY,GAAItlD,GAG1CjB,GAAOU,MAAMO,EAAQD,EAAQyd,KAAK9c,QAAQmL,gBAE1C9M,GAAOiC,MAAMjB,EAAQC,EAAQwd,KAAKlc,YAE7B4J,WACHnM,GAAO4D,MAAM5D,GAAOU,MAAMO,EAAQD,EAAQhB,GAAOE,MAAOue,KAAK9c,QAC7D2kD,EAAG/7B,QACH+7B,EAAG97B,aACI87B,EAAG96C,MAEZ3L,GAAM+N,MAAMlL,EAAI3C,EAAGumD,EAAG56C,YAAa+S,KAAK9c,QAExCvB,GAAYC,MAAMqC,EAAK4jD,EAAG76C,WAAYyF,GAGtC9Q,GAAYC,MAAMsC,EAAK2jD,EAAGC,YAAYv4C,GAAQmd,QAEzChf,WACHnM,GAAO4D,MAAM5D,GAAOU,MAAMyqB,EAAWja,EAAYlR,GAAOE,MAAOue,KAAK9c,QACpE2kD,EAAG/7B,QACH+7B,EAAG97B,aAEAjoB,MAAMJ,KAAKgpB,QACPm7B,EAAG96C,OAEZ3L,GAAM+N,MAAMjL,EAAI5C,EAAGumD,EAAG56C,YAAa+S,KAAK9c,QAExCvB,GAAYC,MAAMsC,EAAK2jD,EAAG76C,WAAYyF,GAGtC9Q,GAAYC,MAAMqC,EAAK4jD,EAAGC,YAAYv4C,GAAQmd,QAEzChf,WACHnM,GAAO4D,MAAM5D,GAAOU,MAAMyqB,EAAWja,EAAYlR,GAAOE,MAAOue,KAAK9c,QACpE2kD,EAAG/7B,QACH+7B,EAAG97B,aAEAjoB,MAAMJ,KAAKgpB,QAIXxpB,OAAOmC,oBAlEDuiD,uBAAsB,IAAIrmD,GAC1BqmD,uBAAsB,IAAIrmD,GAC1BqmD,2BAA0B,IAAIrmD,GAC9BqmD,0BAAyB,IAAIrmD,OAoEjCwmD,iDACmB,IAAIlB,oBACL,CAAC,wBACA,CAAC,iCACiCa,GAA4B1/B,UAC1F,iCAE8Dy/B,GAA4Bz/B,UAC1F,sBAEyB,CAAC,mBAClB,+CAEC/qB,WACJ+qD,OAAOtkD,KAAKzG,EAAI8a,WAChBvX,QAAUvD,EAAI+K,MAEfgY,KAAKioC,sBAAsB7qD,OAAS4iB,KAAKxf,gBACrC0nD,EAAqBhqD,EAAS8hB,KAAKioC,sBAAsB7qD,QAAU,EAAG4iB,KAAKxf,SAC1Ewf,KAAKioC,sBAAsB7qD,OAAS8qD,QACpCD,sBAAsB9pC,KAAK,IAAIupC,OAIpC1nC,KAAKmoC,sBAAsB/qD,OAAS4iB,KAAKxf,gBACrC0nD,EAAqBhqD,EAAS8hB,KAAKmoC,sBAAsB/qD,QAAU,EAAG4iB,KAAKxf,SAC1Ewf,KAAKmoC,sBAAsB/qD,OAAS8qD,QACpCC,sBAAsBhqC,KAAK,IAAIspC,gBAGnCW,YAAcnrD,EAAI8tC,eAClBsd,aAAeprD,EAAIiuC,gBACnBod,WAAarrD,EAAIsrD,cAEjBC,cAEExoC,+CAKF,IAAIziB,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BmlC,EAAqB1iB,KAAKsoC,WAAW/qD,GAErColC,EAAsBD,EAAQ0e,WAC9Bve,EAAsBH,EAAQ2e,WAC9Bv1B,EAAkB6W,EAASZ,aAC3BhW,EAAkB8W,EAASd,aAC3BzoB,EAAgBqpB,EAASmgB,UACzBtpC,EAAgBqpB,EAASigB,UACzBz2C,EAAuBq2B,EAAQ+lB,cAE/B1iD,EAAqBsG,EAAStG,WAG9B2iD,EAAkC1oC,KAAKmoC,sBAAsB5qD,GACnEmrD,EAAGhoB,SAAWgC,EAAQf,WACtB+mB,EAAG/nB,YAAc+B,EAAQd,cACzB8mB,EAAGC,aAAejmB,EAAQgf,eAC1BgH,EAAGjoD,OAAS6Y,EAAMixB,cAClBme,EAAGhoD,OAAS8Y,EAAM+wB,cAClBme,EAAGE,SAAWtvC,EAAM6rB,UACpBujB,EAAGG,SAAWrvC,EAAM2rB,UACpBujB,EAAGI,MAAQxvC,EAAM+rB,OACjBqjB,EAAGK,MAAQvvC,EAAM6rB,OACjBqjB,EAAGM,aAAezrD,EAClBmrD,EAAG3iD,WAAaA,EAChB2iD,EAAGhZ,EAAE7rC,UACL6kD,EAAGpB,WAAWzjD,cAERgkD,EAAkC7nC,KAAKioC,sBAAsB1qD,GACnEsqD,EAAGpnD,OAAS6Y,EAAMixB,cAClBsd,EAAGnnD,OAAS8Y,EAAM+wB,cAClBsd,EAAGe,SAAWtvC,EAAM6rB,UACpB0iB,EAAGgB,SAAWrvC,EAAM2rB,UACpB0iB,EAAGoB,aAAavlD,KAAK4V,EAAMkrB,QAAQte,aACnC2hC,EAAGqB,aAAaxlD,KAAK8V,EAAMgrB,QAAQte,aACnC2hC,EAAGiB,MAAQxvC,EAAM+rB,OACjBwiB,EAAGkB,MAAQvvC,EAAM6rB,OACjBwiB,EAAG56C,YAAYvJ,KAAK2I,EAASY,aAC7B46C,EAAG76C,WAAWtJ,KAAK2I,EAASW,YAC5B66C,EAAG9hD,WAAaA,EAChB8hD,EAAG/7B,QAAUA,EACb+7B,EAAG97B,QAAUA,EACb87B,EAAG96C,KAAOV,EAASU,SAEd,IAAI5G,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,KAC7BwN,EAAsBtH,EAASpG,OAAOE,GACtCgjD,EAAiCT,EAAGziD,OAAOE,GAE7C6Z,KAAKgoC,OAAO3b,cACd8c,EAAIz9B,cAAgB1L,KAAKgoC,OAAO1b,QAAU34B,EAAG+X,cAC7Cy9B,EAAIx9B,eAAiB3L,KAAKgoC,OAAO1b,QAAU34B,EAAGgY,iBAE9Cw9B,EAAIz9B,cAAgB,EACpBy9B,EAAIx9B,eAAiB,GAGvBw9B,EAAIrmD,GAAGe,UACPslD,EAAInmD,GAAGa,UACPslD,EAAI7B,WAAa,EACjB6B,EAAI5B,YAAc,EAClB4B,EAAI3B,aAAe,EAEnBK,EAAGC,YAAY3hD,GAAGzC,KAAKiQ,EAAG3G,8EAUxB/I,EAAM8jD,EAAgBqB,oCACtBllD,EAAM6jD,EAAgBsB,oCACtB1H,EAAgBoG,EAAgBuB,8CAEhCC,EAAuB,IAEpBhsD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BmrD,EAAkC1oC,KAAKmoC,sBAAsB5qD,GAC7DsqD,EAAkC7nC,KAAKioC,sBAAsB1qD,GAE7DuuB,EAAkB+7B,EAAG/7B,QACrBC,EAAkB87B,EAAG97B,QACrB1f,EAAuB2T,KAAKsoC,WAAWI,EAAGM,cAAcP,cAExDhoD,EAAiBioD,EAAGjoD,OACpBC,EAAiBgoD,EAAGhoD,OAEpB4uC,EAAaoZ,EAAGE,SAChBrZ,EAAamZ,EAAGG,SAChBrZ,EAAakZ,EAAGI,MAChBrZ,EAAaiZ,EAAGK,MAChBE,EAAuBpB,EAAGoB,aAC1BC,EAAuBrB,EAAGqB,aAE1Bh9B,EAAalM,KAAKooC,YAAY3nD,GAAQ2M,EACtC49B,EAAahrB,KAAKooC,YAAY3nD,GAAQnD,EACtC2tC,EAAajrB,KAAKqoC,aAAa5nD,GAAQkE,EACvC7C,EAAake,KAAKqoC,aAAa5nD,GAAQyB,EAEvCmqB,EAAarM,KAAKooC,YAAY1nD,GAAQ0M,EACtC+9B,EAAanrB,KAAKooC,YAAY1nD,GAAQpD,EACtC8tC,EAAaprB,KAAKqoC,aAAa3nD,GAAQiE,EACvC3C,EAAage,KAAKqoC,aAAa3nD,GAAQwB,EAI7C+B,EAAI3C,EAAE8hB,SAAS4nB,GACf9mC,EAAI5C,EAAE8hB,SAAS+nB,GACf5pC,GAAOU,MAAMiqB,EAAI9qB,GAAM+N,MAAMlL,EAAI3C,EAAG2nD,EAAc1nD,GAAOE,MAAOwC,EAAIV,GACpEhC,GAAOU,MAAMoqB,EAAIjrB,GAAM+N,MAAMjL,EAAI5C,EAAG4nD,EAAc3nD,GAAOE,MAAOyC,EAAIX,GAEpEo+C,EAAc12C,WAAWoB,EAAUpI,EAAK6nB,EAAS5nB,EAAK6nB,GAEtD28B,EAAGxlD,OAAOQ,KAAKi+C,EAAcz+C,QAC7B3B,GAAOgR,UAAUm2C,EAAGxlD,OAAQwlD,EAAG/1C,iBAEzB5M,EAAqB2iD,EAAG3iD,WACrBI,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,KAC7BgjD,EAAiCT,EAAGziD,OAAOE,GAGjD5E,GAAOU,MAAM0/C,EAAc17C,OAAOE,GAAI+lB,EAAIi9B,EAAIrmD,IAE9CvB,GAAOU,MAAM0/C,EAAc17C,OAAOE,GAAIkmB,EAAI88B,EAAInmD,QAExCwmD,EAAcjoD,GAAOkV,QAAQ0yC,EAAIrmD,GAAI4lD,EAAGxlD,QACxCumD,EAAcloD,GAAOkV,QAAQ0yC,EAAInmD,GAAI0lD,EAAGxlD,QAExCwmD,EAAkBpa,EAAKC,EAAKC,EAAKga,EAAMA,EAAM/Z,EAAKga,EAAMA,EAE9DN,EAAI7B,WAAaoC,EAAU,EAAI,EAAIA,EAAU,MAGvC/2C,EAAkB+1C,EAAG/1C,QAErBg3C,EAAcpoD,GAAOkV,QAAQ0yC,EAAIrmD,GAAI6P,GACrCi3C,EAAcroD,GAAOkV,QAAQ0yC,EAAInmD,GAAI2P,GAErCk3C,EAAmBva,EAAKC,EAAKC,EAAKma,EAAMA,EAAMla,EAAKma,EAAMA,EAE/DT,EAAI5B,YAAcsC,EAAW,EAAI,EAAIA,EAAW,EAGhDV,EAAI3B,aAAe,MAEbsC,EAAevoD,GAAO4D,MAC1BujD,EAAGxlD,OACH3B,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAImnD,EAAInmD,GAAIzB,GAAOE,MAC1CF,GAAO0lC,YAAYgE,EAAInpC,EAAIqnD,EAAIrmD,GAAIvB,GAAOiD,MAC1CjD,GAAOE,OAGPqoD,GAAQ9qC,KACVmqC,EAAI3B,eAAiBkB,EAAG/nB,YAAcmpB,MAKpB,IAAlBpB,EAAG3iD,YAAoBqhD,GAAc,KACjC2C,EAAkCrB,EAAGziD,OAAO,GAC5C+jD,EAAkCtB,EAAGziD,OAAO,GAE5CgkD,EAAe1oD,GAAOkV,QAAQszC,EAAKjnD,GAAI4lD,EAAGxlD,QAC1CgnD,EAAe3oD,GAAOkV,QAAQszC,EAAK/mD,GAAI0lD,EAAGxlD,QAC1CinD,EAAe5oD,GAAOkV,QAAQuzC,EAAKlnD,GAAI4lD,EAAGxlD,QAC1CknD,EAAe7oD,GAAOkV,QAAQuzC,EAAKhnD,GAAI0lD,EAAGxlD,QAE1Cq3C,EAAcjL,EAAKC,EAAKC,EAAKya,EAAOA,EAAOxa,EAAKya,EAAOA,EACvDxP,EAAcpL,EAAKC,EAAKC,EAAK2a,EAAOA,EAAO1a,EAAK2a,EAAOA,EACvD5P,EAAclL,EAAKC,EAAKC,EAAKya,EAAOE,EAAO1a,EAAKya,EAAOE,EAIzD7P,EAAMA,EAAMgP,GAAwBhP,EAAMG,EAAMF,EAAMA,IAExDkO,EAAGhZ,EAAEptB,GAAGhe,IAAIi2C,EAAKC,GACjBkO,EAAGhZ,EAAEntB,GAAGje,IAAIk2C,EAAKE,GACjBgO,EAAGhZ,EAAE3sB,WAAW2lC,EAAGpB,aAInBoB,EAAG3iD,WAAa,gDAShBwO,EAAYwzC,EAAgBsC,cAGzB9sD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,SAC/BmrD,EAAkC1oC,KAAKmoC,sBAAsB5qD,GAE7DkD,EAAiBioD,EAAGjoD,OACpBC,EAAiBgoD,EAAGhoD,OACpB4uC,EAAaoZ,EAAGE,SAChBpZ,EAAakZ,EAAGI,MAChBvZ,EAAamZ,EAAGG,SAChBpZ,EAAaiZ,EAAGK,MAChBhjD,EAAqB2iD,EAAG3iD,WAExBklC,EAAajrB,KAAKqoC,aAAa5nD,GAAQkE,EACzC7C,EAAake,KAAKqoC,aAAa5nD,GAAQyB,EACrCkpC,EAAaprB,KAAKqoC,aAAa3nD,GAAQiE,EACzC3C,EAAage,KAAKqoC,aAAa3nD,GAAQwB,EAErCgB,EAAiBwlD,EAAGxlD,OAEpByP,EAAkB+1C,EAAG/1C,QAElBxM,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,KAC7BgjD,EAAiCT,EAAGziD,OAAOE,GAEjD5E,GAAOskB,MACLtkB,GAAO87B,MAAM8rB,EAAIz9B,cAAexoB,EAAQ3B,GAAOE,MAC/CF,GAAO87B,MAAM8rB,EAAIx9B,eAAgBhZ,EAASpR,GAAOiD,MACjD+P,GAGFzS,GAAM0tC,EAAKjuC,GAAOkV,QAAQ0yC,EAAIrmD,GAAIyR,GAElC02B,EAAG3nC,WAAWgsC,EAAI/6B,GAElBvS,GAAMytC,EAAKluC,GAAOkV,QAAQ0yC,EAAInmD,GAAIuR,GAElC62B,EAAG/nC,WAAWksC,EAAIh7B,QAIf8zC,aAAa5nD,GAAQyB,EAAIJ,OAEzBumD,aAAa3nD,GAAQwB,EAAIF,8DAiB1BsoD,EAAavC,EAAgBwC,8BAC7BC,EAAczC,EAAgB0C,+BAC9BC,EAAc3C,EAAgB4C,+BAC9Bp2C,EAAYwzC,EAAgBlb,6BAC5BvvC,EAAYyqD,EAAgB6C,6BAC5B7sD,EAAYgqD,EAAgB8C,6BAC5BjtD,EAAYmqD,EAAgB+C,6BAC5BjqD,EAAYknD,EAAgBgD,6BAC5BC,EAAajD,EAAgBkD,8BAC7BC,EAAanD,EAAgBoD,8BAC7BC,EAAerD,EAAgBsD,gCAE5B9tD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,SAC/BmrD,EAAkC1oC,KAAKmoC,sBAAsB5qD,GAE7DkD,EAAiBioD,EAAGjoD,OACpBC,EAAiBgoD,EAAGhoD,OACpB4uC,EAAaoZ,EAAGE,SAChBpZ,EAAakZ,EAAGI,MAChBvZ,EAAamZ,EAAGG,SAChBpZ,EAAaiZ,EAAGK,MAChBhjD,EAAqB2iD,EAAG3iD,WAExBklC,EAAajrB,KAAKqoC,aAAa5nD,GAAQkE,EACzC7C,EAAake,KAAKqoC,aAAa5nD,GAAQyB,EACrCkpC,EAAaprB,KAAKqoC,aAAa3nD,GAAQiE,EACzC3C,EAAage,KAAKqoC,aAAa3nD,GAAQwB,EAGrCgB,EAAiBwlD,EAAGxlD,OAEpByP,EAAkB+1C,EAAG/1C,QACrB+tB,EAAmBgoB,EAAGhoB,SAMnBv6B,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,KAC7BgjD,EAAiCT,EAAGziD,OAAOE,GAIjD5E,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAImnD,EAAInmD,GAAIzB,GAAOE,MAC1CF,GAAO0lC,YAAYgE,EAAInpC,EAAIqnD,EAAIrmD,GAAIvB,GAAOiD,MAC1C8lD,OAKIgB,EAAa/pD,GAAO4D,MAAMmlD,EAAI33C,GAAW+1C,EAAGC,aAC9C/kD,EAAiBulD,EAAI5B,aAAe+D,EAGlCC,EAAsB7qB,EAAWyoB,EAAIz9B,cACrC8/B,EAAqBrtD,EAAQgrD,EAAIx9B,eAAiB/nB,GAAS2nD,EAAaA,GAC9E3nD,EAAS4nD,EAAarC,EAAIx9B,eAC1Bw9B,EAAIx9B,eAAiB6/B,EAIrBjqD,GAAO87B,MAAMz5B,EAAQ+O,EAAS4B,GAG9B02B,EAAG3nC,WAAWgsC,EAAI/6B,GAElBzS,GAAM0tC,EAAKjuC,GAAOkV,QAAQ0yC,EAAIrmD,GAAIyR,GAGlC62B,EAAG/nC,WAAWksC,EAAIh7B,GAElBvS,GAAMytC,EAAKluC,GAAOkV,QAAQ0yC,EAAInmD,GAAIuR,MAId,IAAlBm0C,EAAG3iD,aAAqC,IAAjBqhD,OACpB,IAAIjhD,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,KAC7BgjD,EAAiCT,EAAGziD,OAAOE,GAIjD5E,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAImnD,EAAInmD,GAAIzB,GAAOE,MAC1CF,GAAO0lC,YAAYgE,EAAInpC,EAAIqnD,EAAIrmD,GAAIvB,GAAOiD,MAC1C8lD,OAKIzuC,EAAata,GAAO4D,MAAMmlD,EAAIpnD,GAChCU,GAAkBulD,EAAI7B,YAAczrC,EAAKstC,EAAI3B,cAI3CgE,EAAqBxtD,EAAMmrD,EAAIz9B,cAAgB9nB,EAAQ,GAC7DA,EAAS4nD,EAAarC,EAAIz9B,cAC1By9B,EAAIz9B,cAAgB8/B,EAIpBjqD,GAAO87B,MAAMz5B,EAAQV,EAAQqR,GAE7B02B,EAAG3nC,WAAWgsC,EAAI/6B,GAElBzS,GAAM0tC,EAAKjuC,GAAOkV,QAAQ0yC,EAAIrmD,GAAIyR,GAGlC62B,EAAG/nC,WAAWksC,EAAIh7B,GAElBvS,GAAMytC,EAAKluC,GAAOkV,QAAQ0yC,EAAInmD,GAAIuR,OAE/B,KAkCCk3C,EAAiC/C,EAAGziD,OAAO,GAC3CylD,EAAiChD,EAAGziD,OAAO,GAGjD3I,EAAEgH,IAAImnD,EAAI//B,cAAeggC,EAAIhgC,eAK7BnqB,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAIypD,EAAIzoD,GAAIzB,GAAOE,MAC1CF,GAAO0lC,YAAYgE,EAAInpC,EAAI2pD,EAAI3oD,GAAIvB,GAAOiD,MAC1CgmD,GAGFjpD,GAAOU,MACLV,GAAO0lC,YAAYmE,EAAIppC,EAAI0pD,EAAI1oD,GAAIzB,GAAOE,MAC1CF,GAAO0lC,YAAYgE,EAAInpC,EAAI4pD,EAAI5oD,GAAIvB,GAAOiD,MAC1CkmD,OAKEiB,EAAcpqD,GAAO4D,MAAMqlD,EAAKtnD,GAEhC0oD,EAAcrqD,GAAO4D,MAAMulD,EAAKxnD,OAGpCnF,EAAEH,EAAI+tD,EAAMF,EAAIjE,aAChBzpD,EAAE0I,EAAImlD,EAAMF,EAAIlE,aAIhBzpD,EAAEuH,QAAQ2c,GAAQkuB,MAAMuY,EAAGhZ,EAAGpyC,EAAGiE,GAAOE,SAQ/B,IAWPwgB,GAAQkuB,MAAMuY,EAAGpB,WAAYvpD,EAAGH,GAAGyH,UAE/BzH,EAAEA,GAAK,GAAKA,EAAE6I,GAAK,EAAG,CAGxBlF,GAAOU,MAAMrE,EAAGN,EAAGuD,GAInBU,GAAO87B,MAAMx8B,EAAEjD,EAAGsF,EAAQ8nD,GAE1BzpD,GAAO87B,MAAMx8B,EAAE4F,EAAGvD,EAAQgoD,GAC1B3pD,GAAOskB,MAAMmlC,EAAIE,EAAIE,GAErBngB,EAAG3nC,WAAWgsC,EAAI8b,GAElBtpD,GAAM0tC,GAAMjuC,GAAOkV,QAAQg1C,EAAI3oD,GAAIkoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI5oD,GAAIooD,IAGhE9f,EAAG/nC,WAAWksC,EAAI6b,GAElBppD,GAAMytC,GAAMluC,GAAOkV,QAAQg1C,EAAIzoD,GAAIgoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI1oD,GAAIkoD,IAGhEO,EAAI//B,cAAgB9tB,EAAEA,EACtB8tD,EAAIhgC,cAAgB9tB,EAAE6I,WAyBxB7I,EAAEA,GAAK6tD,EAAInE,WAAavpD,EAAEH,EAC1BA,EAAE6I,EAAI,EACNklD,EAAM,EACNC,EAAMlD,EAAGhZ,EAAEptB,GAAG7b,EAAI7I,EAAEA,EAAIG,EAAE0I,EAEtB7I,EAAEA,GAAK,GAAKguD,GAAO,EAAG,CAGxBrqD,GAAOU,MAAMrE,EAAGN,EAAGuD,GAInBU,GAAO87B,MAAMx8B,EAAEjD,EAAGsF,EAAQ8nD,GAE1BzpD,GAAO87B,MAAMx8B,EAAE4F,EAAGvD,EAAQgoD,GAC1B3pD,GAAOskB,MAAMmlC,EAAIE,EAAIE,GAErBngB,EAAG3nC,WAAWgsC,EAAI8b,GAElBtpD,GAAM0tC,GAAMjuC,GAAOkV,QAAQg1C,EAAI3oD,GAAIkoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI5oD,GAAIooD,IAGhE9f,EAAG/nC,WAAWksC,EAAI6b,GAElBppD,GAAMytC,GAAMluC,GAAOkV,QAAQg1C,EAAIzoD,GAAIgoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI1oD,GAAIkoD,IAGhEO,EAAI//B,cAAgB9tB,EAAEA,EACtB8tD,EAAIhgC,cAAgB9tB,EAAE6I,WAsBxB7I,EAAEA,EAAI,EACNA,EAAE6I,GAAKilD,EAAIpE,WAAavpD,EAAE0I,EAC1BklD,EAAMjD,EAAGhZ,EAAEntB,GAAG3kB,EAAIA,EAAE6I,EAAI1I,EAAEH,EAC1BguD,EAAM,EAEFhuD,EAAE6I,GAAK,GAAKklD,GAAO,EAAG,CAGxBpqD,GAAOU,MAAMrE,EAAGN,EAAGuD,GAInBU,GAAO87B,MAAMx8B,EAAEjD,EAAGsF,EAAQ8nD,GAE1BzpD,GAAO87B,MAAMx8B,EAAE4F,EAAGvD,EAAQgoD,GAC1B3pD,GAAOskB,MAAMmlC,EAAIE,EAAIE,GAErBngB,EAAG3nC,WAAWgsC,EAAI8b,GAElBtpD,GAAM0tC,GAAMjuC,GAAOkV,QAAQg1C,EAAI3oD,GAAIkoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI5oD,GAAIooD,IAGhE9f,EAAG/nC,WAAWksC,EAAI6b,GAElBppD,GAAMytC,GAAMluC,GAAOkV,QAAQg1C,EAAIzoD,GAAIgoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI1oD,GAAIkoD,IAGhEO,EAAI//B,cAAgB9tB,EAAEA,EACtB8tD,EAAIhgC,cAAgB9tB,EAAE6I,WAqBxB7I,EAAEA,EAAI,EACNA,EAAE6I,EAAI,EACNklD,EAAM5tD,EAAEH,EACRguD,EAAM7tD,EAAE0I,EAEJklD,GAAO,GAAKC,GAAO,EAAG,CAGxBrqD,GAAOU,MAAMrE,EAAGN,EAAGuD,GAInBU,GAAO87B,MAAMx8B,EAAEjD,EAAGsF,EAAQ8nD,GAE1BzpD,GAAO87B,MAAMx8B,EAAE4F,EAAGvD,EAAQgoD,GAC1B3pD,GAAOskB,MAAMmlC,EAAIE,EAAIE,GAErBngB,EAAG3nC,WAAWgsC,EAAI8b,GAElBtpD,GAAM0tC,GAAMjuC,GAAOkV,QAAQg1C,EAAI3oD,GAAIkoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI5oD,GAAIooD,IAGhE9f,EAAG/nC,WAAWksC,EAAI6b,GAElBppD,GAAMytC,GAAMluC,GAAOkV,QAAQg1C,EAAIzoD,GAAIgoD,GAAMzpD,GAAOkV,QAAQi1C,EAAI1oD,GAAIkoD,IAGhEO,EAAI//B,cAAgB9tB,EAAEA,EACtB8tD,EAAIhgC,cAAgB9tB,EAAE6I,oBAWvB4hD,aAAa5nD,GAAQyB,EAAIJ,OAEzBumD,aAAa3nD,GAAQwB,EAAIF,+CAK3B,IAAIzE,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,UAC5BmrD,EAAkC1oC,KAAKmoC,sBAAsB5qD,GAC7D8O,EAAuB2T,KAAKsoC,WAAWI,EAAGM,cAAcP,cAErDtiD,EAAI,EAAGA,EAAIuiD,EAAG3iD,aAAcI,EACnCkG,EAASpG,OAAOE,GAAGulB,cAAgBg9B,EAAGziD,OAAOE,GAAGulB,cAChDrf,EAASpG,OAAOE,GAAGwlB,eAAiB+8B,EAAGziD,OAAOE,GAAGwlB,0EAa/C1nB,EAAmB8jD,EAAgB8D,+BACnC3nD,EAAmB6jD,EAAgB+D,+BACnCC,EAAgChE,EAAgBiE,+BAChDlpD,EAAailD,EAAgB1S,8BAC7BryC,EAAa+kD,EAAgBxS,8BAC7BhhC,EAAYwzC,EAAgBjb,6BAE9Bmf,EAAgB,EAEX1uD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,SAC/BsqD,EAAkC7nC,KAAKioC,sBAAsB1qD,GAE7DkD,EAAiBonD,EAAGpnD,OACpBC,EAAiBmnD,EAAGnnD,OACpBuoD,EAAuBpB,EAAGoB,aAC1B3Z,EAAauY,EAAGe,SAChBpZ,EAAaqY,EAAGiB,MAChBI,EAAuBrB,EAAGqB,aAC1B3Z,EAAasY,EAAGgB,SAChBpZ,EAAaoY,EAAGkB,MAChBhjD,EAAqB8hD,EAAG9hD,WAExBmmB,EAAalM,KAAKooC,YAAY3nD,GAAQ2M,EACxC49B,EAAahrB,KAAKooC,YAAY3nD,GAAQnD,EAEpC+uB,EAAarM,KAAKooC,YAAY1nD,GAAQ0M,EACxC+9B,EAAanrB,KAAKooC,YAAY1nD,GAAQpD,EAGjC6I,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CACnClC,EAAI3C,EAAE8hB,SAAS4nB,GACf9mC,EAAI5C,EAAE8hB,SAAS+nB,GACf5pC,GAAOU,MAAMiqB,EAAI9qB,GAAM+N,MAAMlL,EAAI3C,EAAG2nD,EAAc1nD,GAAOE,MAAOwC,EAAIV,GACpEhC,GAAOU,MAAMoqB,EAAIjrB,GAAM+N,MAAMjL,EAAI5C,EAAG4nD,EAAc3nD,GAAOE,MAAOyC,EAAIX,GAEpEwoD,EAAI9gD,WAAW48C,EAAI5jD,EAAKC,EAAKiC,OACvBjD,EAAiB6oD,EAAI7oD,OAErBY,EAAgBioD,EAAIjoD,MACpB4J,EAAqBq+C,EAAIr+C,WAG/BnM,GAAOU,MAAM6B,EAAOooB,EAAIppB,GAExBvB,GAAOU,MAAM6B,EAAOuoB,EAAIrpB,GAGxBipD,EAAgBnuD,EAAMmuD,EAAev+C,OAG/BkkB,EAAYzzB,EAChBohB,IAAgB7R,EAAa3I,KAC5Bka,GACD,GAKIuqC,EAAcjoD,GAAOkV,QAAQ3T,EAAII,GAEjCumD,EAAcloD,GAAOkV,QAAQzT,EAAIE,GAEjCwsC,EAAYJ,EAAKC,EAAKC,EAAKga,EAAMA,EAAM/Z,EAAKga,EAAMA,EAGlD3iB,EAAkB4I,EAAI,GAAK9d,EAAI8d,EAAI,EAGzCnuC,GAAO87B,MAAMyJ,EAAS5jC,EAAQqR,GAG9B2X,EAAG5oB,WAAWgsC,EAAI/6B,GAElBy2B,GAAMwE,EAAKjuC,GAAOkV,QAAQ3T,EAAIyR,GAG9B8X,EAAGhpB,WAAWksC,EAAIh7B,GAElB42B,GAAMsE,EAAKluC,GAAOkV,QAAQzT,EAAIuR,QAI3B6zC,YAAY3nD,GAAQnD,EAAI0tC,OAGxBod,YAAY1nD,GAAQpD,EAAI6tC,SAKxB8gB,GAAiB,EAAIlnD,uDAUFmnD,EAAmBC,WACvCloD,EAAmB8jD,EAAgBqE,kCACnCloD,EAAmB6jD,EAAgBsE,kCACnCN,EAAgChE,EAAgBuE,kCAChDxpD,EAAailD,EAAgBwE,iCAC7BvpD,EAAa+kD,EAAgByE,iCAC7Bj4C,EAAYwzC,EAAgB0E,gCAE9BR,EAAgB,EAEX1uD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,KAC/BsqD,EAAkC7nC,KAAKioC,sBAAsB1qD,GAE7DkD,EAAiBonD,EAAGpnD,OACpBC,EAAiBmnD,EAAGnnD,OACpBuoD,EAAuBpB,EAAGoB,aAC1BC,EAAuBrB,EAAGqB,aAC1BnjD,EAAqB8hD,EAAG9hD,WAE1BupC,EAAK,EACLE,EAAK,EACL/uC,IAAWyrD,GAAazrD,IAAW0rD,IACrC7c,EAAKuY,EAAGe,SACRpZ,EAAKqY,EAAGiB,WAGNvZ,EAAK,EACLE,EAAK,EACL/uC,IAAWwrD,GAAaxrD,IAAWyrD,IACrC5c,EAAKsY,EAAGgB,SACRpZ,EAAKoY,EAAGkB,eAGJ78B,EAAalM,KAAKooC,YAAY3nD,GAAQ2M,EACxC49B,EAAahrB,KAAKooC,YAAY3nD,GAAQnD,EAEpC+uB,EAAarM,KAAKooC,YAAY1nD,GAAQ0M,EACxC+9B,EAAanrB,KAAKooC,YAAY1nD,GAAQpD,EAGjC6I,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CACnClC,EAAI3C,EAAE8hB,SAAS4nB,GACf9mC,EAAI5C,EAAE8hB,SAAS+nB,GACf5pC,GAAOU,MAAMiqB,EAAI9qB,GAAM+N,MAAMlL,EAAI3C,EAAG2nD,EAAc1nD,GAAOE,MAAOwC,EAAIV,GACpEhC,GAAOU,MAAMoqB,EAAIjrB,GAAM+N,MAAMjL,EAAI5C,EAAG4nD,EAAc3nD,GAAOE,MAAOyC,EAAIX,GAEpEwoD,EAAI9gD,WAAW48C,EAAI5jD,EAAKC,EAAKiC,OACvBjD,EAAiB6oD,EAAI7oD,OAErBY,EAAgBioD,EAAIjoD,MACpB4J,EAAqBq+C,EAAIr+C,WAG/BnM,GAAOU,MAAM6B,EAAOooB,EAAIppB,GAExBvB,GAAOU,MAAM6B,EAAOuoB,EAAIrpB,GAGxBipD,EAAgBnuD,EAAMmuD,EAAev+C,OAG/BkkB,EAAYzzB,EAChBqhB,IAAmB9R,EAAa3I,KAC/Bka,GACD,GAKIuqC,EAAcjoD,GAAOkV,QAAQ3T,EAAII,GAEjCumD,EAAcloD,GAAOkV,QAAQzT,EAAIE,GAEjCwsC,EAAYJ,EAAKC,EAAKC,EAAKga,EAAMA,EAAM/Z,EAAKga,EAAMA,EAGlD3iB,EAAkB4I,EAAI,GAAK9d,EAAI8d,EAAI,EAGzCnuC,GAAO87B,MAAMyJ,EAAS5jC,EAAQqR,GAG9B2X,EAAG5oB,WAAWgsC,EAAI/6B,GAElBy2B,GAAMwE,EAAKjuC,GAAOkV,QAAQ3T,EAAIyR,GAG9B8X,EAAGhpB,WAAWksC,EAAIh7B,GAElB42B,GAAMsE,EAAKluC,GAAOkV,QAAQzT,EAAIuR,QAI3B6zC,YAAY3nD,GAAQnD,EAAI0tC,OAGxBod,YAAY1nD,GAAQpD,EAAI6tC,SAKxB8gB,IAAkB,IAAMlnD,YAhyBlBgjD,uCAAsC,IAAIpmD,GAC1ComD,uCAAsC,IAAIpmD,GAC1ComD,iDAAgD,IAAIl8B,GAyHpDk8B,iBAAgB,IAAIxmD,GAmDpBwmD,iCAAgC,IAAIxmD,GACpCwmD,kCAAiC,IAAIxmD,GACrCwmD,kCAAiC,IAAIxmD,GACrCwmD,gCAA+B,IAAIxmD,GACnCwmD,gCAA+B,IAAIxmD,GACnCwmD,gCAA+B,IAAIxmD,GACnCwmD,gCAA+B,IAAIxmD,GACnCwmD,gCAA+B,IAAIxmD,GACnCwmD,iCAAgC,IAAIxmD,GACpCwmD,iCAAgC,IAAIxmD,GACpCwmD,mCAAkC,IAAIxmD,GAuZtCwmD,kCAAiC,IAAIpmD,GACrComD,kCAAiC,IAAIpmD,GACrComD,kCAAiC,IAAIH,GACrCG,iCAAgC,IAAIxmD,GACpCwmD,iCAAgC,IAAIxmD,GACpCwmD,gCAA+B,IAAIxmD,GAgGnCwmD,qCAAoC,IAAIpmD,GACxComD,qCAAoC,IAAIpmD,GACxComD,qCAAoC,IAAIH,GACxCG,oCAAmC,IAAIxmD,GACvCwmD,oCAAmC,IAAIxmD,GACvCwmD,mCAAkC,IAAIxmD,GCh5BvD,IAAMmrD,GAAU,IAAInlC,GACdolC,GAAe,IAAIxF,GACnByF,GAAqB,IAAIjF,GACzBkF,GAAkB,IAAI9E,GACtB+E,GAAgB,IAAIvrD,GAyCbwrD,qDACExI,GAAkBM,iCAES,CAAC,sBACI,CAAC,oBACL,CAAC,uBAELoC,GAAWj/B,UAAU,wBACpBk/B,GAAWl/B,UAAU,uBAE7C,oBACC,sBACE,sBAEA,yBACG,uBACF,+CAGhBglC,EACAC,EACAC,EACA5K,YAEK6K,eAAgC,EAAfH,OACjBI,kBAAsC,EAAlBH,OACpBI,gBAAkC,EAAhBH,OAClBI,YAAc,OACdhI,eAAiB,OACjBiI,aAAe,OAEfC,WAAalL,EAGXtiC,KAAKktB,SAAS9vC,OAAS4vD,QACvB9f,SAASltB,KAAKktB,SAAS9vC,QAAW,UAGlC4iB,KAAKsoC,WAAWlrD,OAAS6vD,QACzB3E,WAAWtoC,KAAKsoC,WAAWlrD,QAAW,UAGtC4iB,KAAKotB,SAAShwC,OAAS8vD,QACvB9f,SAASptB,KAAKotB,SAAShwC,QAAW,QAIrC4iB,KAAKooC,YAAYhrD,OAAS4vD,UACtB9E,EAAahqD,EAAS8hB,KAAKooC,YAAYhrD,QAAU,EAAG4vD,GACnDhtC,KAAKooC,YAAYhrD,OAAS8qD,QAC1BE,YAAYpoC,KAAKooC,YAAYhrD,QAAU,IAAI6pD,MAIhDjnC,KAAKqoC,aAAajrD,OAAS4vD,UACvB9E,EAAahqD,EAAS8hB,KAAKqoC,aAAajrD,QAAU,EAAG4vD,GACpDhtC,KAAKqoC,aAAajrD,OAAS8qD,QAC3BG,aAAaroC,KAAKqoC,aAAajrD,QAAU,IAAI8pD,wCAMjDoG,YAAc,OACdhI,eAAiB,OACjBiI,aAAe,kCAGd9rB,GAENA,EAAK8I,cAAgBvqB,KAAKstC,iBACrBpgB,SAASltB,KAAKstC,eAAiB7rB,qCAG3BiB,QAEJ4lB,WAAWtoC,KAAKslC,kBAAoB5iB,mCAGlCrpB,QAEF+zB,SAASptB,KAAKutC,gBAAkBl0C,gCAGjCo0C,EAAoB11C,EAAkBZ,EAAiB8sB,WACrD16B,EAAQmjD,GAAQ9kD,QAEhB8lD,EAAY1tC,KAAKstC,YACjBpgB,EAAWltB,KAAKktB,SAChBkb,EAAcpoC,KAAKooC,YACnBC,EAAeroC,KAAKqoC,aACtBlsC,EAAQ,EAENsT,EAAI1X,EAAKm0B,GAGN3uC,EAAI,EAAGA,EAAImwD,IAAanwD,EAAG,KAC5BQ,EAAImvC,EAAS3vC,GAGnB6qD,EAAY7qD,GAAG6P,EAAE1J,KAAK3F,EAAEymC,QAAQp3B,OAC1B9P,EAAYS,EAAEymC,QAAQlnC,EACtBqH,EAAY0jD,EAAa9qD,GAAGoH,EAAEjB,KAAK3F,EAAE0mC,kBACvCviC,EAAYnE,EAAE4mC,kBAGlB5mC,EAAEymC,QAAQvzB,GAAGvN,KAAK3F,EAAEymC,QAAQp3B,GAC5BrP,EAAEymC,QAAQxe,GAAKjoB,EAAEymC,QAAQlnC,MAErBS,EAAEqc,SAEJzV,EAAE/G,GAAK6xB,GAAK1xB,EAAE+mC,eAAiB3tB,EAAQvZ,EAAIG,EAAEonC,UAAYpnC,EAAEgnC,QAAQnnC,GACnE+G,EAAE8B,GAAKgpB,GAAK1xB,EAAE+mC,eAAiB3tB,EAAQ1Q,EAAI1I,EAAEonC,UAAYpnC,EAAEgnC,QAAQt+B,GACnEvE,GAAKutB,EAAI1xB,EAAEsnC,OAAStnC,EAAEinC,SAStBrgC,EAAE+R,QAAQ,GAAO,EAAM+Y,EAAI1xB,EAAE6mC,kBAC7B1iC,GAAK,GAAO,EAAMutB,EAAI1xB,EAAE8mC,mBAI1BujB,EAAY7qD,GAAGD,EAAIA,EAEnB+qD,EAAa9qD,GAAG2E,EAAIA,EAGtBqH,EAAM3B,YAGA+lD,EAAahB,GACnBgB,EAAW51C,KAAKrU,KAAKqU,GACrB41C,EAAW5iB,UAAY/qB,KAAKooC,YAC5BuF,EAAWziB,WAAalrB,KAAKqoC,iBAGvBuF,EAAmBhB,GACzBgB,EAAiB71C,KAAKrU,KAAKqU,GAC3B61C,EAAiBrF,SAAWvoC,KAAKsoC,WACjCsF,EAAiB5lD,MAAQgY,KAAKslC,eAC9BsI,EAAiB7iB,UAAY/qB,KAAKooC,YAClCwF,EAAiB1iB,WAAalrB,KAAKqoC,iBAE7BwF,EAAgBhB,GAAgB5hD,WAAW2iD,GACjDC,EAAcC,gCAEV/1C,EAAKs0B,cACPwhB,EAAcE,iBAGXC,iBAAiBL,GAEtBF,EAAQjH,WAAaj9C,EAAM2C,kBAG3B3C,EAAM3B,YACD,IAAIrK,EAAI,EAAGA,EAAIwa,EAAKgvC,qBAAsBxpD,EAAG,KAC3C,IAAI4I,EAAI,EAAGA,EAAI6Z,KAAKutC,eAAgBpnD,OAClCinC,SAASjnC,GAAG8nD,yBAAyBN,GAG5CE,EAAcI,2BAIhBJ,EAAcK,gBACdT,EAAQhH,eAAiBl9C,EAAM2C,sBAG1B,IAAI3O,EAAI,EAAGA,EAAImwD,IAAanwD,EAAG,KAC5B6P,EAAIg7C,EAAY7qD,GAAG6P,EACrB9P,EAAI8qD,EAAY7qD,GAAGD,EACjBqH,EAAI0jD,EAAa9qD,GAAGoH,EACtBzC,EAAImmD,EAAa9qD,GAAG2E,EAGlBo4C,EAAc/4C,GAAO87B,MAAM5N,EAAG9qB,EAAGmoD,OACnCvrD,GAAO4D,MAAMm1C,EAAaA,GAAel7B,GAA0B,KAC/DirB,EAAgBlrB,GAAoBm7B,EAAYt1C,SACtDL,EAAE+R,QAAQ2zB,OAGNhlB,EAAmBoK,EAAIvtB,EACzBmjB,EAAWA,EAAW/F,KAExBpd,GADsBmd,GAAiB1hB,EAAM0nB,IAK/CjY,EAAExP,GAAK6xB,EAAI9qB,EAAE/G,EACbwP,EAAE3G,GAAKgpB,EAAI9qB,EAAE8B,EACbnJ,GAAKmyB,EAAIvtB,EAGTkmD,EAAY7qD,GAAGD,EAAIA,EAEnB+qD,EAAa9qD,GAAG2E,EAAIA,EAItBqH,EAAM3B,QACNuU,GAAS6D,KAAKmuC,0BAA0Bp2C,EAAK+uC,mBAAoB+G,EAAeF,GAC5E,EACA,MAGC,IAAIpwD,EAAI,EAAGA,EAAImwD,IAAanwD,EAAG,KAC5BkkC,EAAeyL,EAAS3vC,GAC9BkkC,EAAK+C,QAAQp3B,EAAE1J,KAAK0kD,EAAY7qD,GAAG6P,GACnCq0B,EAAK+C,QAAQlnC,EAAI8qD,EAAY7qD,GAAGD,EAChCmkC,EAAKgD,iBAAiB/gC,KAAK2kD,EAAa9qD,GAAGoH,GAC3C88B,EAAKkD,kBAAoB0jB,EAAa9qD,GAAG2E,EACzCu/B,EAAK2sB,8BAGPX,EAAQ/G,eAAiBn9C,EAAM2C,uBAE1BmiD,OAAOR,EAAc1F,uBAE1BhsC,GAAS8nB,GAAcjkB,KAAKsuC,iBAAiB7+B,GAAK,EAAI,qDAKtD9sB,EACAkrD,EACAF,WAEMY,EAAcvuC,KAAKutC,aACnBiB,EAASxuC,KAAKotB,SACX7vC,EAAI,EAAGA,EAAIoF,IAAcpF,EAAG,SAC7BkxD,EAAwBZ,EAAca,2BAExCC,GAAa,EACRxoD,EAAI,EAAGA,EAAIooD,IAAepoD,EAAG,KAC9ByoD,EAAqBJ,EAAOroD,GAAGuoD,yBAAyBf,GAC9DgB,EAAaA,GAAcC,KAGzBH,GAAgBE,SAEX,SAGJ,2CAGgBhB,WACjB3lD,EAAQgY,KAAKutC,aACbsB,EAAO7uC,KAAKotB,SACT7vC,EAAI,EAAGA,EAAIyK,IAASzK,EAC3BsxD,EAAKtxD,GAAGuxD,wBAAwBnB,4CAIXl+B,WACnBs/B,EAAephD,GAEbqhD,EAAYtvC,GAA0BA,GACtCuvC,EAAYtvC,GAA2BA,GAEvC3X,EAAQgY,KAAKstC,YACbuB,EAAO7uC,KAAKktB,SAET3vC,EAAI,EAAGA,EAAIyK,IAASzK,EAAG,KACxBQ,EAAY8wD,EAAKtxD,OACnBQ,EAAE8e,aAKH9e,EAAEimC,iBACHjmC,EAAE4mC,kBAAoB5mC,EAAE4mC,kBAAoBsqB,GAC5C1tD,GAAO4D,MAAMpH,EAAE0mC,iBAAkB1mC,EAAE0mC,kBAAoBuqB,GAEvDjxD,EAAEknC,YAAc,EAChB8pB,EAAe,IAEfhxD,EAAEknC,aAAexV,EACjBs/B,EAAejxD,EAAMixD,EAAchxD,EAAEknC,sBAIlC8pB,GAAgBtvC,0CAIlB,IAAIliB,EAAI,EAAGA,EAAIyiB,KAAKstC,cAAe/vD,OACjC2vC,SAAS3vC,GAAGglC,UAAS,oCAIrB2sB,EAAqBhD,EAAmBC,OAK1C,IAAI5uD,EAAI,EAAGA,EAAIyiB,KAAKstC,cAAe/vD,EAAG,KACnCQ,EAAYiiB,KAAKktB,SAAS3vC,QAC3B6qD,YAAY7qD,GAAG6P,EAAE1J,KAAK3F,EAAEymC,QAAQp3B,QAChCg7C,YAAY7qD,GAAGD,EAAIS,EAAEymC,QAAQlnC,OAC7B+qD,aAAa9qD,GAAGoH,EAAEjB,KAAK3F,EAAE0mC,uBACzB4jB,aAAa9qD,GAAG2E,EAAInE,EAAE4mC,sBAGvBipB,EAAmBhB,GACzBgB,EAAiBrF,SAAWvoC,KAAKsoC,WACjCsF,EAAiB5lD,MAAQgY,KAAKslC,eAC9BsI,EAAiB71C,KAAKrU,KAAKwrD,GAC3BtB,EAAiB7iB,UAAY/qB,KAAKooC,YAClCwF,EAAiB1iB,WAAalrB,KAAKqoC,qBAC7BwF,EAAgBhB,GAAgB5hD,WAAW2iD,GAGxCrwD,EAAI,EAAGA,EAAI2xD,EAAQpI,qBACI+G,EAAcsB,4BAA4BjD,EAAWC,KADnC5uD,QAyC7C2vC,SAASgf,GAAW1nB,QAAQvzB,GAAGvN,KAAKsc,KAAKooC,YAAY8D,GAAW9+C,QAChE8/B,SAASgf,GAAW1nB,QAAQxe,GAAKhG,KAAKooC,YAAY8D,GAAW5uD,OAC7D4vC,SAASif,GAAW3nB,QAAQvzB,GAAGvN,KAAKsc,KAAKooC,YAAY+D,GAAW/+C,QAChE8/B,SAASif,GAAW3nB,QAAQxe,GAAKhG,KAAKooC,YAAY+D,GAAW7uD,EAIlEuwD,EAAcC,oCAGT,IAAIvwD,EAAI,EAAGA,EAAI2xD,EAAQnI,qBAAsBxpD,EAChDswD,EAAcI,mCAMVx+B,EAAYy/B,EAAQhjB,GAGjB3uC,EAAI,EAAGA,EAAIyiB,KAAKstC,cAAe/vD,EAAG,KACnC6P,EAAI4S,KAAKooC,YAAY7qD,GAAG6P,EAC1B9P,EAAI0iB,KAAKooC,YAAY7qD,GAAGD,EACtBqH,EAAIqb,KAAKqoC,aAAa9qD,GAAGoH,EAC3BzC,EAAI8d,KAAKqoC,aAAa9qD,GAAG2E,EAGvBo4C,EAAc/4C,GAAO87B,MAAM5N,EAAG9qB,EAAGmoD,OACnCvrD,GAAO4D,MAAMm1C,EAAaA,GAAel7B,GAA0B,KAC/DirB,EAAgBlrB,GAAoBm7B,EAAYt1C,SACtDL,EAAE+R,QAAQ2zB,OAGNhlB,EAAmBoK,EAAIvtB,EACzBmjB,EAAWA,EAAW/F,KAExBpd,GADsBmd,GAAiB1hB,EAAM0nB,IAK/CjY,EAAE/J,WAAWosB,EAAG9qB,GAChBrH,GAAKmyB,EAAIvtB,OAGJkmD,YAAY7qD,GAAGD,EAAIA,OAEnB+qD,aAAa9qD,GAAG2E,EAAIA,MAGnBu/B,EAAezhB,KAAKktB,SAAS3vC,GACnCkkC,EAAK+C,QAAQp3B,EAAE1J,KAAK0J,GACpBq0B,EAAK+C,QAAQlnC,EAAIA,EACjBmkC,EAAKgD,iBAAiB/gC,KAAKiB,GAC3B88B,EAAKkD,kBAAoBziC,EACzBu/B,EAAK2sB,4BAGFC,OAAOR,EAAc1F,sDAKrBiH,OACA,IAAI7xD,EAAI,EAAGA,EAAIyiB,KAAKslC,iBAAkB/nD,EAAG,KACtC6P,EAAe4S,KAAKsoC,WAAW/qD,MAEhC6P,OAICs7C,EAAK0G,EAAY7xD,GAEjBupC,EAAUimB,EAASsC,UACzBvoB,EAAQ9+B,MAAQ0gD,EAAG3iD,eACd,IAAII,EAAI,EAAGA,EAAIuiD,EAAG3iD,aAAcI,EACnC2gC,EAAQwoB,eAAenpD,GAAKuiD,EAAGziD,OAAOE,GAAGulB,cACzCob,EAAQyoB,gBAAgBppD,GAAKuiD,EAAGziD,OAAOE,GAAGwlB,oBAGvC6hC,WAAWgC,UAAUpiD,EAAG05B,cAnBlBimB,aAAY,IAAIzI,GCvkB1B,IAAMmL,IAA2B,EAK3BC,GAAoB,IAGpBC,GAAuB,EAGvBC,GAAyB,IAGzBC,GAAsB,GAGtBC,GAAsB,EACtBC,GAAqCD,GAAsBA,GAG3DE,GAAqC,IAGrCC,GAA0B,InC0D1BC,GASX,kDAPoB,IAAI3uD,iBACJ,IAAIA,cACP,IAAI+kB,GAAQ,EAAG,EAAG,EAAG,iBAC3B5oB,kBACK,gBACgB,UAGzByyD,SAAW,GAiBPC,gDACHX,uDAGCzvC,KAAKzQ,uCAGLA,QACFA,MAAQA,WoC1DJ8gD,GAAb,kCAC0B,kBACU,gBACN,IAAI9uD,cACxB,sBAC0B,IAAIA,wBACpB,aACQ,IAAI+kB,iBACnB,kBAGE,cACJ,qBACO,gBAEL,gBACK,gBACgB,MAGrBgqC,yBAkBC73C,+BAhBG,mBACD,oBACsB,kBACvB,cACoB,iBACA,uBAClB,cACN,iBACG,gBACgB,IAAIlX,yBACI,IAAIA,0BACpB,mBACgB,IAAII,mBAEtB,UAGX4uD,SAAW93C,qDAITuH,KAAKzD,0DAILyD,KAAKuwC,2DAILvwC,KAAKwwC,YAAcxwC,KAAKywC,6DAIxBzwC,KAAKywC,sDAGGlhD,UACRyQ,KAAKywC,cAAgBlhD,GAASA,EAAQyQ,KAAKwwC,8DAI7CxwC,KAAKuwC,SAASG,cAAc13C,WACzB,IAAI7Q,cAERgU,EAAQ,EACH5e,EAAIyiB,KAAKywC,aAAclzD,EAAIyiB,KAAKwwC,YAAajzD,IACpD4e,GAAS6D,KAAKuwC,SAASG,cAAc13C,KAAKzb,UAErC4e,iDAIA6D,KAAK2wC,mDAGAx0C,GAEZA,MAAS6D,KAAK2wC,kBACTJ,SAASK,cAAc5wC,KAAM7D,iDAI7B00C,mBACE7wC,KAAKklB,wDAIP2rB,mBACE7wC,KAAK8wC,0DAIPD,mBACE7wC,KAAK+wC,iEAIPF,mBACE7wC,KAAKykB,0EAIPosB,mBACE7wC,KAAK2kB,gEAIL3kB,KAAKgxC,yDAILhxC,KAAKgxC,YAAYztD,4CAIjByc,KAAKgxC,YAAY1vD,EAAEgkB,mEAGkBiiB,EAAgBzxB,OACtDrU,EAAO6uD,EAAgBW,iDACxBJ,mBAEEtvD,GAAO0lC,YACZjnB,KAAKykB,iBACLzkB,KAAK2kB,kBACLpjC,GAAOU,MAAMslC,EAAYvnB,KAAK+wC,SAAUtvD,GACxCqU,gDAOKkK,KAAKgiB,+CAGFhpB,QACLgpB,WAAahpB,qCAGT2tB,QACJ4pB,SAASW,WAAWlxC,KAAKywC,aAAczwC,KAAKwwC,YAAa7pB,8CAG7CG,QACZypB,SAASY,mBAAmBnxC,KAAKywC,aAAczwC,KAAKwwC,YAAa1pB,4CAGvDsqB,MACXpxC,KAAKuwC,SAASvvB,QAAQwE,iBAClB,IAAIr9B,UAGP,IAAI5K,EAAIyiB,KAAKywC,aAAclzD,EAAIyiB,KAAKwwC,YAAajzD,SAC/CgzD,SAASc,gBAAgB9zD,EAAG6zD,kDAK9BpxC,KAAKuwC,SAASe,iBAAiBt4C,WAC5B,IAAI7Q,UAEP6X,KAAKuwC,SAASgB,iBAAiBv4C,WAC5B,IAAI7Q,UAEN5E,EAAI,IAAIhC,GACRoD,EAAI,IAAIpD,MACVye,KAAKwxC,cAAgBxxC,KAAKuwC,SAASiB,YAAa,KAC5Cr2B,EAAInb,KAAKuwC,SAASkB,uBAEnBvsB,OAAS/J,GAAKnb,KAAKwwC,YAAcxwC,KAAKywC,mBACtCM,SAASltD,eACT4gC,iBAAiB5gC,cACjB,IAAItG,EAAIyiB,KAAKywC,aAAclzD,EAAIyiB,KAAKwwC,YAAajzD,SAG/CwzD,SAAS1tD,WAAW83B,EAAGnb,KAAKuwC,SAASe,iBAAiBt4C,KAAKzb,SAE3DknC,iBAAiBphC,WAAW83B,EAAGnb,KAAKuwC,SAASgB,iBAAiBv4C,KAAKzb,OAEtEyiB,KAAKklB,OAAS,EAAG,KACbwsB,EAAW,EAAI1xC,KAAKklB,YAErB6rB,SAASr6C,QAAQg7C,QAEjBjtB,iBAAiB/tB,QAAQg7C,QAE3BZ,UAAY,OACZnsB,kBAAoB,MACpB,IAAIpnC,EAAIyiB,KAAKywC,aAAclzD,EAAIyiB,KAAKwwC,YAAajzD,IAEpDgE,GAAOU,MAAM+d,KAAKuwC,SAASe,iBAAiBt4C,KAAKzb,GAAIyiB,KAAK+wC,SAAUxtD,GAEpEhC,GAAOU,MAAM+d,KAAKuwC,SAASgB,iBAAiBv4C,KAAKzb,GAAIyiB,KAAKykB,iBAAkB9/B,QACvEmsD,WAAa31B,EAAI55B,GAAO4D,MAAM5B,EAAGA,QACjCohC,mBAAqBxJ,EAAI55B,GAAOkV,QAAQlT,EAAGoB,GAE9Cqb,KAAK8wC,UAAY,SACdnsB,mBAAqB,EAAI3kB,KAAK8wC,gBAEhCU,YAAcxxC,KAAKuwC,SAASiB,sBAtErBlB,wCAAuC,IAAI/uD,OC9KhDowD,yBASCC,2BARyB,gBAC3B,cACD,OAOF3pC,SAAS4pC,KAAK,KAAM,EAAGD,0CAGzBE,MACC9xC,KAAK+xC,QAAU/xC,KAAKgyC,WAAY,KAC7B,IAAIz0D,EAAIyiB,KAAKuX,QAASh6B,EAAIyiB,KAAK+xC,OAAQx0D,SACrC0qB,SAAS1qB,EAAIyiB,KAAKuX,SAAWvX,KAAKiI,SAAS1qB,QAE7Cw0D,QAAU/xC,KAAKuX,aACfA,QAAU,OAEZtP,SAASjI,KAAK+xC,QAAUD,OACxBC,4CAKA9pC,SAASjI,KAAKuX,SAAW,UACzBA,iDAKEvX,KAAKuX,UAAYvX,KAAK+xC,2CAIvBD,EAAO9xC,KAAKiI,SAASjI,KAAKuX,aAC3Bu6B,QACG,IAAI3pD,aAEL2pD,4CAnCA9xC,KAAKiI,SAAS7qB,gBCDZ60D,yBAQCC,sCANU,wBACH,gBACR,gBACA,iBAC+B,QAGnCC,kBAAoBh1D,EACvB+0D,GACA,SAAC3iD,UAAU,IAAI6iD,WAEZC,oBAAsBH,iDAUhBl3C,EAAgBs3C,EAAaC,OAElC/2C,EAAIwE,KAAKmyC,kBAAkBnyC,KAAKwyC,oBACtCh3C,EAAER,OAAOtX,KAAKsX,GACdQ,EAAE82C,IAAMA,EACR92C,EAAE+2C,UAAYA,mCAUPxuD,EAAgB0uD,WACjBC,EAAgB,EAAI3uD,EACpBw4B,EAAQ,IAAIh7B,IAAQoM,IAAcA,IAClC6uB,EAAQ,IAAIj7B,IAAQoM,IAAcA,IACpCglD,EAAkB,EACb1mB,EAAI,EAAGA,EAAIjsB,KAAKwyC,iBAAkBvmB,IAAK,KACxCzwB,EAAIwE,KAAKmyC,kBAAkBlmB,GAC7BzwB,EAAE+2C,YACJhxD,GAAOq7B,KAAKL,EAAO/gB,EAAER,OAAQuhB,GAC7Bh7B,GAAOs7B,KAAKL,EAAOhhB,EAAER,OAAQwhB,KAC3Bm2B,MAGkB,IAApBA,cAEGC,SAAW,YACXC,SAAW,GAGlBt2B,EAAM3+B,GAAK60D,EACXl2B,EAAM91B,GAAKgsD,EACXj2B,EAAM5+B,GAAK60D,EACXj2B,EAAM/1B,GAAKgsD,OACNG,SAAW,EAAIl0D,KAAKsK,MAAM0pD,GAAiBl2B,EAAM5+B,EAAI2+B,EAAM3+B,SAC3Di1D,SAAW,EAAIn0D,KAAKsK,MAAM0pD,GAAiBl2B,EAAM/1B,EAAI81B,EAAM91B,SAC3DqsD,UAAY,WAIXC,EAAQ,IAAIpB,GAAoC,EAAI3xC,KAAK4yC,SAAW5yC,KAAK6yC,UACtE5mB,EAAI,EAAGA,EAAIjsB,KAAKwyC,iBAAkBvmB,IAAK,KACxCzwB,EAAIwE,KAAKmyC,kBAAkBlmB,GAEjCzwB,EAAER,OAAO1V,QAAQi3B,GAAO7lB,QAAQg8C,OAC1B90D,EAAIc,KAAKsK,MAAMwS,EAAER,OAAOpd,GACxB6I,EAAI/H,KAAKsK,MAAMwS,EAAER,OAAOvU,GAC1B7I,GAAK,GAAK6I,GAAK,GAAK7I,EAAIoiB,KAAK4yC,UAAYnsD,EAAIuZ,KAAK6yC,UACpDE,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAG7I,EAAI6I,EAAIuZ,KAAK4yC,SAAUp3C,UAG9Du3C,EAAME,SAAS,KACfC,EAAOH,EAAMI,QACbv1D,EAAIs1D,EAAKE,IACT3sD,EAAIysD,EAAKG,IACT91D,EAAI21D,EAAKI,IACT93C,EAAI03C,EAAKK,YACfR,EAAMrkC,MACD1O,KAAK8yC,UAAUv1D,UACbu1D,UAAUv1D,GAAKie,EAChB5d,EAAI,GACNm1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAI,EAAG6I,EAAGlJ,EAAI,EAAGie,IAEpD/U,EAAI,GACNssD,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAI,EAAGlJ,EAAIyiB,KAAK4yC,SAAUp3C,IAEhE5d,EAAIoiB,KAAK4yC,SAAW,GACtBG,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAI,EAAG6I,EAAGlJ,EAAI,EAAGie,IAEpD/U,EAAIuZ,KAAK6yC,SAAW,GACtBE,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAI,EAAGlJ,EAAIyiB,KAAK4yC,SAAUp3C,SAInE,IAAI/U,EAAI,EAAGA,EAAIuZ,KAAK6yC,SAAUpsD,QAC5B,IAAI7I,EAAI,EAAGA,EAAIoiB,KAAK4yC,SAAW,EAAGh1D,IAAK,KACpCL,EAAIK,EAAI6I,EAAIuZ,KAAK4yC,SACjBt1D,EAAI0iB,KAAK8yC,UAAUv1D,GACnBQ,EAAIiiB,KAAK8yC,UAAUv1D,EAAI,GACzBD,IAAMS,IACRg1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAGlJ,EAAGQ,IAC9Cg1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAI,EAAG6I,EAAGlJ,EAAI,EAAGD,SAIvD,IAAImJ,EAAI,EAAGA,EAAIuZ,KAAK6yC,SAAW,EAAGpsD,QAChC,IAAI7I,EAAI,EAAGA,EAAIoiB,KAAK4yC,SAAUh1D,IAAK,KAChCL,EAAIK,EAAI6I,EAAIuZ,KAAK4yC,SACjBt1D,EAAI0iB,KAAK8yC,UAAUv1D,GACnBQ,EAAIiiB,KAAK8yC,UAAUv1D,EAAIyiB,KAAK4yC,UAC9Bt1D,IAAMS,IACRg1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAGlJ,EAAGQ,IAC9Cg1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAI,EAAGlJ,EAAIyiB,KAAK4yC,SAAUt1D,WAIhEy1D,EAAME,SAAS,KACfC,EAAOH,EAAMI,QACbv1D,EAAIs1D,EAAKE,IACT3sD,EAAIysD,EAAKG,IACT91D,EAAI21D,EAAKI,IACTrnB,EAAIinB,EAAKK,YACfR,EAAMrkC,UACApxB,EAAI0iB,KAAK8yC,UAAUv1D,GACnBQ,EAAIkuC,KACN3uC,IAAMS,EAAG,KACLy1D,EAAKl2D,EAAE0d,OAAOpd,EAAIA,EAClB6iD,EAAKnjD,EAAE0d,OAAOvU,EAAIA,EAClBgtD,EAAK11D,EAAEid,OAAOpd,EAAIA,EAClB81D,EAAK31D,EAAEid,OAAOvU,EAAIA,EACb+sD,EAAKA,EAAK/S,EAAKA,EACfgT,EAAKA,EAAKC,EAAKA,SAEnBZ,UAAUv1D,GAAKQ,EAChBH,EAAI,GACNm1D,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAI,EAAG6I,EAAGlJ,EAAI,EAAGQ,IAEpD0I,EAAI,GACNssD,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAI,EAAGlJ,EAAIyiB,KAAK4yC,SAAU70D,IAEhEH,EAAIoiB,KAAK4yC,SAAW,GACtBG,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAI,EAAG6I,EAAGlJ,EAAI,EAAGQ,IAEpD0I,EAAIuZ,KAAK6yC,SAAW,GACtBE,EAAMzkC,KAAK,IAAI0kC,GAAsBp1D,EAAG6I,EAAI,EAAGlJ,EAAIyiB,KAAK4yC,SAAU70D,wCAWnEswB,OACF,IAAI5nB,EAAI,EAAGA,EAAIuZ,KAAK6yC,SAAW,EAAGpsD,QAChC,IAAI7I,EAAI,EAAGA,EAAIoiB,KAAK4yC,SAAW,EAAGh1D,IAAK,KACpCL,EAAIK,EAAI6I,EAAIuZ,KAAK4yC,SACjBt1D,EAAI0iB,KAAK8yC,UAAUv1D,GACnBQ,EAAIiiB,KAAK8yC,UAAUv1D,EAAI,GACvB6P,EAAI4S,KAAK8yC,UAAUv1D,EAAIyiB,KAAK4yC,UAC5B/xD,EAAImf,KAAK8yC,UAAUv1D,EAAI,EAAIyiB,KAAK4yC,UAClC70D,IAAMqP,IACJ9P,IAAMS,GAAKT,IAAM8P,IAAM9P,EAAEi1D,WAAax0D,EAAEw0D,WAAanlD,EAAEmlD,YACzDlkC,EAAS/wB,EAAEg1D,IAAKv0D,EAAEu0D,IAAKllD,EAAEklD,KAEvBzxD,IAAM9C,GAAK8C,IAAMuM,IAAM9P,EAAEi1D,WAAax0D,EAAEw0D,WAAanlD,EAAEmlD,YACzDlkC,EAAStwB,EAAEu0D,IAAKzxD,EAAEyxD,IAAKllD,EAAEklD,gBAexBF,GAAb,mCACW,IAAI7wD,YACP,kBACM,GAGDyxD,GAMX,WAAYp1D,EAAW6I,EAAWlJ,EAAWie,kBACtC43C,IAAMx1D,OACNy1D,IAAM5sD,OACN6sD,IAAM/1D,OACNg2D,YAAc/3C,GrCHjBm4C,GAAa,SAACp2D,EAAWq2D,EAAeC,EAAaC,GACzD,OAAIv2D,EAAIq2D,EACCr2D,EACEA,EAAIs2D,EACNt2D,EAAIu2D,EAAMD,EACRt2D,EAAIu2D,EACNv2D,EAAIq2D,EAAQC,EAEZt2D,GAIEw2D,cAMX,WAAYC,aALZh0C,UAAY,GACZA,WAAQ,EACRA,cAAW,EAITA,KAAKg0C,UAAYA,SAPrBC,oCAcI,OAHIj0C,KAAKhY,OAASgY,KAAK4xC,UACrB5xC,KAAKk0C,YAEKlsD,wCAGNmsD,GACN,KAAIn0C,KAAK4xC,UAAYuC,GAArB,CAKA,IAAK,IAAI52D,EAAIyiB,KAAK4xC,SAAUr0D,EAAI42D,IAAe52D,EAC7CyiB,KAAKhH,KAAKzb,GAAKyiB,KAAKg0C,YAEtBh0C,KAAK4xC,SAAWuC,kCAKhB,IAAMA,EAAcn0C,KAAK4xC,SAAW,EAAI5xC,KAAK4xC,SAAW5B,GAExDhwC,KAAKo0C,QAAQD,kCAIY,IAArBn0C,KAAKhH,KAAK5b,SAId4iB,KAAKhH,KAAO,GACZgH,KAAK4xC,SAAW,EAChB5xC,KAAKhY,MAAQ,mCAGPqsD,mCAKN,YAAYr7C,wCAIZ,YAAYhR,uCAGLssD,GAEPt0C,KAAKhY,MAAQssD,wCAIb,YAAY1C,0CAGL2C,GAaLv0C,KAAKhY,MAAQyP,GAAcuI,KAAKhH,KAAMu7C,EAAMv0C,KAAKhY,sCAI9CusD,GACLv0C,KAAKhY,MAAQqQ,GAAW2H,KAAKhH,KAAM,EAAGgH,KAAKhY,MAAOusD,YAMzCC,eAGX,WAAY/7C,2BACVg8C,gBACKlE,SAAW93C,6BALpBw7C,qDAQ4Bx7C,GAExB,+CAGYmC,GACZ,GAAIA,EAAQgoC,WACV,SAIF,IAFA,IACM8R,EADQ95C,EAAQE,WACGooB,gBAChBvJ,EAAa,EAAGA,EAAa+6B,EAAY/6B,IAIhD,IAHA,IAAMvc,EAAOxC,EAAQ+5C,QAAQh7B,GACvBi7B,EAAa50C,KAAKuwC,SAASsE,0BAA0Bz3C,GACvD7N,UACIA,EAAQqlD,EAAWE,YAAc,GACvC90C,KAAK+0C,yBAAyBn6C,EAAS+e,EAAYpqB,GAGvD,gDAGakJ,EAA0BlJ,GACvC,0DAGuBqL,EAAoB+e,EAAoBpqB,WAlCfk1C,IAuCvCuQ,cAOX,uBANAh1C,YAAS,EACTA,YAAS,EACTA,YAAStiB,IACTsiB,YAAS,IAAIze,GACbye,aAGEA,KAAKi1C,OAAS,SARlBhB,sCAWa32D,EAAWS,GAEpBiiB,KAAKvf,OAASnD,EACd0iB,KAAKtf,OAAS3C,oCAGNmE,GACR8d,KAAKi1C,OAAS/yD,oCAGN1D,GACRwhB,KAAK9c,OAAOQ,KAAKlF,oCAGVke,GACPsD,KAAK7D,MAAQO,sCAIb,YAAYjc,2CAIZ,YAAYC,2CAIZ,YAAYu0D,2CAIZ,YAAY/xD,0CAIZ,YAAYiZ,sCAGN+4C,GACN,YACOz0D,SAAWy0D,EAAIz0D,QACpBuf,KAAKtf,SAAWw0D,EAAIx0D,QACpBsf,KAAK7D,QAAU+4C,EAAI/4C,OACnB6D,KAAKi1C,SAAWC,EAAID,QACpBj1C,KAAK9c,OAAOtF,IAAMs3D,EAAIhyD,OAAOtF,GAC7BoiB,KAAK9c,OAAOuD,IAAMyuD,EAAIhyD,OAAOuD,qCAItByuD,GACT,OAAQl1C,KAAKm1C,QAAQD,8CAGJA,GACjB,IAAME,EAAkB,IAClBC,EAAqB,KAC3B,YACO50D,SAAWy0D,EAAIz0D,QACpBuf,KAAKtf,SAAWw0D,EAAIx0D,QACpBsf,KAAK7D,QAAU+4C,EAAI/4C,OACnBxe,EAAMqiB,KAAKi1C,OAASC,EAAID,QAAUG,GAClC7zD,GAAOuL,kBAAkBkT,KAAK9c,OAAQgyD,EAAIhyD,QAAUmyD,WAK7CC,GAOX,uBANAt1C,WAAQ,EAGRA,YAAStiB,IACTsiB,YAAS,IAAIze,GACbye,UAAOtiB,IAELsiB,KAAKi1C,OAAS,EACdj1C,KAAKmZ,KAAO,GAIHo8B,GAMX,uBALAv1C,YAAS,EACTA,YAAS,EACTA,aACAA,cAAWtiB,IACXsiB,cAAWtiB,IAETsiB,KAAK4G,SAAW,EAChB5G,KAAKvd,SAAW,GAIP+yD,GAcX,uBAbAx1C,YAAS,EACTA,YAAS,EACTA,YAAS,EACTA,aACAA,cAAWtiB,IACXsiB,QAAK,IAAIze,GACTye,QAAK,IAAIze,GACTye,QAAK,IAAIze,GACTye,QAAKtiB,IACLsiB,QAAKtiB,IACLsiB,QAAKtiB,IACLsiB,OAAItiB,IAGFsiB,KAAK4G,SAAW,EAChB5G,KAAKy1C,GAAK,EACVz1C,KAAK01C,GAAK,EACV11C,KAAK21C,GAAK,EACV31C,KAAKjU,EAAI,GAIA6pD,cAiJX,uBAzIA51C,yBAAqB,EAMrBA,aAAUtiB,IAMVsiB,kBAAetiB,IAKfsiB,YAAStiB,IASTsiB,cAAW,EAMXA,sBAAmB,KAMnBA,qBAAkBtiB,IAMlBsiB,qBAAkB,IAMlBA,oBAAiB,IAMjBA,qBAAkB,IAMlBA,oCAAiC,GAOjCA,kCAA+B,GAQ/BA,uBAAoBtiB,IAMpBsiB,oBAAiB,GAMjBA,sBAAmB,GAQnBA,4BAAyB,GAOzBA,8BAA2B,GAM3BA,8BAA2B,EAQ3BA,yBAAsB,GAOtBA,mBAAe,EAUfA,yBAAsB,EAAM,GAG1BA,KAAKia,QAAU,EACfja,KAAKyjB,aAAe,EACpBzjB,KAAKjc,OAAS,EACdic,KAAK61C,gBAAkB,EACvB71C,KAAK81C,kBAAoB,SAtJ7B7B,gCAyJOh3D,GAsBH,OArBA+iB,KAAK+1C,mBAAqB94D,EAAI84D,mBAC9B/1C,KAAKia,QAAUh9B,EAAIg9B,QACnBja,KAAKyjB,aAAexmC,EAAIwmC,aACxBzjB,KAAKjc,OAAS9G,EAAI8G,OAClBic,KAAKg2C,SAAW/4D,EAAI+4D,SACpBh2C,KAAKi2C,iBAAmBh5D,EAAIg5D,iBAC5Bj2C,KAAK61C,gBAAkB54D,EAAI44D,gBAC3B71C,KAAKk2C,gBAAkBj5D,EAAIi5D,gBAC3Bl2C,KAAKm2C,eAAiBl5D,EAAIk5D,eAC1Bn2C,KAAKo2C,gBAAkBn5D,EAAIm5D,gBAC3Bp2C,KAAKq2C,+BAAiCp5D,EAAIo5D,+BAC1Cr2C,KAAKs2C,6BAA+Br5D,EAAIq5D,6BACxCt2C,KAAK81C,kBAAoB74D,EAAI64D,kBAC7B91C,KAAKu2C,eAAiBt5D,EAAIs5D,eAC1Bv2C,KAAKw2C,iBAAmBv5D,EAAIu5D,iBAC5Bx2C,KAAKy2C,uBAAyBx5D,EAAIw5D,uBAClCz2C,KAAK02C,yBAA2Bz5D,EAAIy5D,yBACpC12C,KAAK22C,yBAA2B15D,EAAI05D,yBACpC32C,KAAK42C,oBAAsB35D,EAAI25D,oBAC/B52C,KAAK62C,aAAe55D,EAAI45D,aACxB72C,KAAK82C,oBAAsB75D,EAAI65D,yDAK/B,WAAWlB,GAAsBlyD,KAAKsc,eAI7B+2C,cAoIX,WAAY95D,EAA0Bif,aAnItC8D,eAAW,EACXA,iBAAc,EACdA,0BACAA,oCAAgC,EAChCA,uBACAA,iCAA6B,EAC7BA,iBAAa,EACbA,sBAAmB,EACnBA,sBAAmBtiB,IACnBsiB,wBAAqBtiB,IACrBsiB,uBAAoBtiB,IACpBsiB,uBAAoBtiB,IACpBsiB,aAAU,EACVA,iCAA8B,EAQ9BA,yBAAsB,IAAIg3C,GAC1Bh3C,mBAAgB,IAAIg3C,GACpBh3C,sBAAmB,IAAIg3C,GACvBh3C,sBAAmB,IAAIg3C,GACvBh3C,mBAA0B,GAK1BA,oBAA2B,GAO3BA,4BAAmC,GAKnCA,0BAAiC,GAOjCA,2BAAkC,GAOlCA,mBAA0B,GAC1BA,mBAAgB,IAAIg3C,GACpBh3C,mBAA+C,GAC/CA,sBAAmB,IAAIg3C,GAIvBh3C,sBAAmB,EACnBA,iCAA8B,IAAIg3C,GAClCh3C,8BAA2B,IAAIg3C,GAC/Bh3C,qCAAkC,IAAIg3C,GACtCh3C,2BAAwB,IAAI+zC,IAAyB,uBACrD/zC,mBAAgB,IAAI+zC,IAAyC,sBAAUkD,MACvEj3C,qBAAkB,IAAI+zC,IAAoC,sBAAUiB,MACpEh1C,yBAAsB,IAAI+zC,IACxB,sBAAUuB,MAEZt1C,kBAAe,IAAI+zC,IAAiC,sBAAUwB,MAC9Dv1C,mBAAgB,IAAI+zC,IAAkC,sBAAUyB,MAOhEx1C,4BAAyB,IAAIg3C,GAI7Bh3C,mCAAgC,IAAIg3C,GAOpCh3C,mBAAgB,EAKhBA,4CAAwC,EACxCA,kBAAe,EACfA,iBAAsC,KACtCA,WAAQ,IAAI41C,GAEZ51C,YAAkC,KAClCA,YAAkC,KAomFlCA,iCAAkF,KA8IlFA,6BAA0E,KArtFxEA,KAAKk3C,iBAAmB,EACxBl3C,KAAKm3C,mBAAqB,EAC1Bn3C,KAAKo3C,kBAAoB,EACzBp3C,KAAKq3C,kBAAoB,EAEzBr3C,KAAKs3C,sBAAsBr6D,EAAI84D,oBAC/B/1C,KAAKu3C,WAAWt6D,EAAIg9B,SACpBja,KAAKw3C,gBAAgBv6D,EAAIwmC,cACzBzjB,KAAKy3C,UAAUx6D,EAAI8G,QACnBic,KAAK03C,oBAAoBz6D,EAAI+4D,UAE7Bh2C,KAAK23C,MAAQ16D,EAAI4kC,QACjB7hB,KAAKghB,QAAU9kB,EACf8D,KAAK43C,oBAAoB53C,KAAK23C,MAAMd,qBAlJxC5C,kCAsJI,KAAOj0C,KAAK63C,aACV73C,KAAK83C,qBAAqB93C,KAAK63C,aAGjC73C,KAAK+3C,0BAA0B/3C,KAAKg4C,qBACpCh4C,KAAK+3C,0BAA0B/3C,KAAK0wC,eACpC1wC,KAAK+3C,0BAA0B/3C,KAAKi4C,6BACpCj4C,KAAK+3C,0BAA0B/3C,KAAKk4C,0BACpCl4C,KAAK+3C,0BAA0B/3C,KAAKm4C,iCACpCn4C,KAAK+3C,0BAA0B/3C,KAAKsxC,kBACpCtxC,KAAK+3C,0BAA0B/3C,KAAKuxC,kBACpCvxC,KAAK+3C,0BAA0B/3C,KAAKjH,eACpCiH,KAAK+3C,0BAA0B/3C,KAAKo4C,kBACpCp4C,KAAK+3C,0BAA0B/3C,KAAKq4C,wBACpCr4C,KAAK+3C,0BAA0B/3C,KAAKs4C,+BACpCt4C,KAAKu4C,WAAWv4C,KAAKw4C,cAAex4C,KAAKy4C,6BACzCz4C,KAAKu4C,WAAWv4C,KAAK04C,eAAgB14C,KAAKy4C,6BAC1Cz4C,KAAKu4C,WAAWv4C,KAAK24C,uBAAwB34C,KAAKy4C,6BAClDz4C,KAAKu4C,WAAWv4C,KAAK44C,qBAAsB54C,KAAKy4C,6BAChDz4C,KAAKu4C,WAAWv4C,KAAK64C,sBAAuB74C,KAAKy4C,6BACjDz4C,KAAKu4C,WAAWv4C,KAAK84C,cAAe94C,KAAKy4C,6BACzCz4C,KAAKu4C,WAAWv4C,KAAK+4C,cAAe/4C,KAAKy4C,oEAe5Bx7D,GACb,GAAI+iB,KAAKghB,QAAQwE,WACf,UAAUr9B,MAGZ,GAAI6X,KAAKxf,SAAWwf,KAAKy4C,4BAA6B,CAEpD,IAAM7G,EAAW5xC,KAAKxf,QAAU,EAAIwf,KAAKxf,QAAUwvD,GACnDhwC,KAAKg5C,mCAAmCpH,GAE1C,GAAI5xC,KAAKxf,SAAWwf,KAAKy4C,4BAA6B,CAEpD,IAAIz4C,KAAK23C,MAAMd,aAMb,OAAOpH,GALPzvC,KAAKi5C,sBAAsB,GAAG,GAG9Bj5C,KAAKk5C,cAKT,IAAM3pD,EAAQyQ,KAAKxf,UACnBwf,KAAK0wC,cAAc13C,KAAKzJ,GAAS,EAC7ByQ,KAAKi4C,4BAA4Bj/C,OACnCgH,KAAKi4C,4BAA4Bj/C,KAAKzJ,GAAS,GAE7CyQ,KAAKk4C,yBAAyBl/C,OAChCgH,KAAKk4C,yBAAyBl/C,KAAKzJ,GAAS,GAE1CyQ,KAAKm4C,gCAAgCn/C,OACvCgH,KAAKm4C,gCAAgCn/C,KAAKzJ,GAAS,GAErDyQ,KAAKsxC,iBAAiBt4C,KAAKzJ,IAAUyQ,KAAKsxC,iBAAiBt4C,KAAKzJ,IAAU,IAAIhO,IAAUmC,KACtF3G,EAAQE,EAAImoB,SAAU7jB,GAAO+iC,OAE/BtkB,KAAKuxC,iBAAiBv4C,KAAKzJ,IAAUyQ,KAAKuxC,iBAAiBv4C,KAAKzJ,IAAU,IAAIhO,IAAUmC,KACtF3G,EAAQE,EAAIk8D,SAAU53D,GAAO+iC,OAE/BtkB,KAAK04C,eAAenpD,GAAS,EAC7ByQ,KAAKw4C,cAAcjpD,IAAUyQ,KAAKw4C,cAAcjpD,IAAU,IAAIhO,IAAUsC,UACpEmc,KAAK24C,yBACP34C,KAAK24C,uBAAuBppD,GAAS,GAEnCyQ,KAAK84C,gBACP94C,KAAK84C,cAAcvpD,GAAS,GAE9B,IAAM0K,GAAiB,IAAIqM,IAAU5iB,KAAK3G,EAAQE,EAAIgd,MAAOqM,GAAQge,QACjEtkB,KAAKjH,cAAcC,MAASiB,EAAMm/C,WACpCp5C,KAAKjH,cAAcC,KAAOgH,KAAKq5C,cAAcr5C,KAAKjH,cAAcC,MAChEgH,KAAKjH,cAAcC,KAAKzJ,IAAUyQ,KAAKjH,cAAcC,KAAKzJ,IAAU,IAAI+W,IAAW5iB,KACjFuW,KAGA+F,KAAKo4C,iBAAiBp/C,MAAQ/b,EAAIgzB,YACpCjQ,KAAKo4C,iBAAiBp/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKo4C,iBAAiBp/C,MACtEgH,KAAKo4C,iBAAiBp/C,KAAKzJ,GAAStS,EAAIgzB,UAEtCjQ,KAAKg4C,oBAAoBh/C,OAC3BgH,KAAKg4C,oBAAoBh/C,KAAKzJ,GAAS,MAGzC,IAAMyjB,EAAQhT,KAAKs5C,cAActgD,KAAKgH,KAAKs5C,cAAcC,UAInDpJ,EAAWpzD,EAAQE,EAAIkzD,SAAU,GACjCqJ,EAAiBrJ,EAAW,GAC9BnwC,KAAKq4C,uBAAuBr/C,MAAQwgD,KACtCx5C,KAAKy5C,oBACHlqD,EACAiqD,EAAiBrJ,EAAWnwC,KAAK05C,0BAA0B15C,KAAK25C,4BAIlE35C,KAAKs4C,8BAA8Bt/C,KAAKzJ,GAASA,GAGnDyjB,EAAMzjB,MAAQA,EACd,IAAM00C,EAAQlnD,EAAQE,EAAIgnD,MAAO,MAiBjC,OAhBAjkC,KAAK+4C,cAAcxpD,GAAS00C,EACxBA,IACEA,EAAMwM,aAAexM,EAAMuM,aAE7BxwC,KAAK45C,aAAa3V,EAAMwM,aAAcxM,EAAMuM,YAAajhD,GAGzD00C,EAAMuM,YAAcjhD,EAAQ,IAI5B00C,EAAMwM,aAAelhD,EACrB00C,EAAMuM,YAAcjhD,EAAQ,IAGhCyQ,KAAK65C,iBAAiBtqD,EAAOxS,EAAQE,EAAIkf,MAAO,IACzC5M,qDAQkBA,GAGzByQ,KAAKg4C,oBAAoBh/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKg4C,oBAAoBh/C,MAC5E,IAAI8gD,EAAS95C,KAAKg4C,oBAAoBh/C,KAAKzJ,GAC3C,OAAIuqD,KAKJA,EAAS,IAAI1J,IAEN7gD,MAAQA,EACfyQ,KAAKg4C,oBAAoBh/C,KAAKzJ,GAASuqD,EAChCA,2CAcOvqD,OACV4M,8DAEFA,QAEF6D,KAAK65C,iBAAiBtqD,EAAOyQ,KAAK0wC,cAAc13C,KAAKzJ,GAAS4M,iDAe1C5M,OAAe6hD,0DAC7B14C,EAAgBsH,KAAKrH,mBAMrBohD,EAA+B/5C,KAAKs4C,8BAA8Bt/C,KACtEN,GAAiBnJ,EAAQ,IAErByqD,EAAiCh6C,KAAKs4C,8BAA8Bt/C,KAAKzJ,GAC/EyQ,KAAKqxC,gBACHrxC,KAAKq4C,uBAAuBr/C,KAAK+gD,GAAgC,EAC7DA,EACAC,EACJ5I,mDAsBFv2C,EACA2B,OACA40C,0DAEM//B,EAAS0lC,EAAiBkD,+BAChC,GAAIj6C,KAAKghB,QAAQwE,WACf,UAAUr9B,MAGZ,IAAMkmB,EAAW,IAAI6rC,GACnBl6C,KACAnF,EACA2B,EACA40C,GAGIh0C,EAAOiU,EAGb,OAFAxW,EAAMimB,YAAY1jB,EAAMZ,EAAI,GAC5BwD,KAAKghB,QAAQm5B,UAAU9rC,EAAUjR,GAC1BiR,EAAS+rC,wDAYEC,GAClB,IAAMC,EAAcvD,EAAiBwD,gCAErC,GAAIv6C,KAAKghB,QAAQwE,WACf,UAAUr9B,MAGZ,IAAMqxB,EAAY8gC,EAClB9gC,EAAUghC,iBAAiBz9D,EAAQs9D,EAASj1C,SAAU7jB,GAAO+iC,MAAOvnC,EAAQs9D,EAAS77C,MAAO,IAC5F,IAAMi8C,EAAaz6C,KAAKxf,QAYxB,GAXI65D,EAASx/C,OACXmF,KAAK06C,iCAAiCL,EAASx/C,MAAOw/C,EAAU7gC,GAE9D6gC,EAASM,QACX36C,KAAK46C,kCACHP,EAASM,OACT59D,EAAQs9D,EAASQ,WAAYR,EAASM,OAAOv9D,QAC7Ci9D,EACA7gC,GAGA6gC,EAASS,aAEX,IADA,IAAM9yD,EAAQjL,EAAQs9D,EAAS3hD,cAAe2hD,EAASS,aAAa19D,QAC3DG,EAAI,EAAGA,EAAIyK,EAAOzK,IAAK,CAC9B,IAAMgG,EAAI82D,EAASS,aAAav9D,GAChCyiB,KAAK+6C,uBAAuBV,EAAU7gC,EAAWj2B,GAGrD,IAAMy3D,EAAYh7C,KAAKxf,QAEnByjD,EAAQ,IAAIqM,GAAgBtwC,MAChCikC,EAAMwM,aAAegK,EACrBxW,EAAMuM,YAAcwK,EACpB/W,EAAMgX,WAAal+D,EAAQs9D,EAASzzC,SAAU,GAC9Cq9B,EAAMjiB,WAAaq4B,EAASpqC,SAC5Bg0B,EAAM+M,YAAYttD,KAAK81B,GACvByqB,EAAM/B,OAAS,KACf+B,EAAM1nC,OAASyD,KAAK63C,YAChB73C,KAAK63C,cACP73C,KAAK63C,YAAY3V,OAAS+B,GAE5BjkC,KAAK63C,YAAc5T,IACjBjkC,KAAKk7C,aACP,IAAK,IAAI39D,EAAIk9D,EAAYl9D,EAAIy9D,EAAWz9D,IACtCyiB,KAAK+4C,cAAcx7D,GAAK0mD,EAE1BjkC,KAAK4wC,cAAc3M,EAAOlnD,EAAQs9D,EAASc,WAAY,IAGvD,IAAMj5B,EAAS,IAAIk5B,GASnB,OARAp7C,KAAKq7C,gBAAe,GACpBr7C,KAAKs7C,qBAAqBb,EAAYO,EAAW94B,GAE7Cm4B,EAASpW,QACXjkC,KAAKu7C,mBAAmBlB,EAASpW,MAAOA,GACxCA,EAAQoW,EAASpW,OAGZA,6CAaUuX,EAAyBC,GAC1C,GAAIz7C,KAAKghB,QAAQwE,WACf,UAAUr9B,MAIZ6X,KAAK45C,aAAa6B,EAAOhL,aAAcgL,EAAOjL,YAAaxwC,KAAKxf,SAEhEwf,KAAK45C,aAAa4B,EAAO/K,aAAc+K,EAAOhL,YAAaiL,EAAOhL,cAIlE,IAAMvuB,EAAS,IAAIw5B,GAA0CD,EAAOhL,cACpEzwC,KAAKq7C,gBAAe,GACpBr7C,KAAKs7C,qBAAqBE,EAAO/K,aAAcgL,EAAOjL,YAAatuB,GAEnE,IAAK,IAAI3kC,EAAIk+D,EAAOhL,aAAclzD,EAAIk+D,EAAOjL,YAAajzD,IACxDyiB,KAAK+4C,cAAcx7D,GAAKi+D,EAE1B,IAAML,EAAaK,EAAO7K,aAAe8K,EAAO9K,aAChD3wC,KAAK4wC,cAAc4K,EAAQL,GAC3BK,EAAOhL,YAAciL,EAAOjL,YAC5BiL,EAAOhL,aAAegL,EAAOjL,YAC7BxwC,KAAK83C,qBAAqB2D,8CAUTxX,GACjBjkC,KAAKq7C,gBAAe,GACpB,IAEMM,EAAkDx+D,EAFlC8mD,EAAMtrC,oBAI1B,SAACpJ,cAAsBqsD,MAEzB7E,EAAiB8E,wBAAwB5X,EAAO0X,GAChD37C,KAAK87C,4BAA4B7X,EAAO0X,GACxC,IAAMI,EAAgBhF,EAAiBiF,wBAAwB/X,EAAO0X,GACtE37C,KAAKi8C,6BAA6BhY,EAAO0X,EAAYI,GACrD/7C,KAAKk8C,qCAAqCjY,EAAO0X,EAAYI,GAC7D/7C,KAAKm8C,qCAAqClY,EAAO0X,kDAajD,YAAY9D,4DAOZ,YAAYqD,wDAOZ,YAAY16D,sDAOZ,YAAYm3D,MAAM3B,qDAeAhuD,GAElBgY,KAAK23C,MAAM3B,SAAWhuD,gDAOtB,YAAYo0D,8DAOZ,YAAYC,kDAUJC,GACRt8C,KAAKu8C,SAAWD,sCAUhB,YAAYC,4CAWHtiC,GACTja,KAAK23C,MAAM19B,QAAUA,EACrBja,KAAKk3C,iBAAmB,EAAIl3C,KAAK23C,MAAM19B,6CAOvC,YAAY09B,MAAM19B,gDAOJwJ,GACdzjB,KAAK23C,MAAMl0B,aAAeA,4CAO1B,YAAYk0B,MAAMl0B,gDAST+4B,GACTx8C,KAAK23C,MAAM9B,gBAAkB2G,uCAO7B,YAAY7E,MAAM9B,oEAeQlzD,GAC1Bqd,KAAK23C,MAAMhB,yBAA2Bh0D,wDAQtC,YAAYg1D,MAAMhB,2DAUV5yD,GACRic,KAAKm3C,mBAAqB,EAAIpzD,EAC9Bic,KAAKq3C,kBAAoBr3C,KAAKm3C,mBAAqBn3C,KAAKm3C,mBACxDn3C,KAAKo3C,kBAAoB,EAAIp3C,KAAKm3C,uDAOlC,YAAYA,mBAAqB,8CAWjC,YAAY7F,iBAAiBt4C,iDAW7B,YAAYu4C,iBAAiBv4C,8CAY7B,OADAgH,KAAKjH,cAAcC,KAAOgH,KAAKq5C,cAAcr5C,KAAKjH,cAAcC,WACpDD,cAAcC,8CAW1B,YAAY+/C,wDAWZ,YAAYL,2DAYZ,OADA14C,KAAKo4C,iBAAiBp/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKo4C,iBAAiBp/C,WAC1Do/C,iBAAiBp/C,8CAW7B,YAAY03C,cAAc13C,8CAMXzJ,EAAektD,GACbz8C,KAAK0wC,cAAc13C,KAAKzJ,IACzBktD,IAEdz8C,KAAK08C,+BAAgC,IAElC18C,KAAKo8C,mBAAqBK,QAEzBA,IACFz8C,KAAK64C,sBAAwB74C,KAAKq5C,cAAcr5C,KAAK64C,4BAEnD4D,IACFz8C,KAAKjH,cAAcC,KAAOgH,KAAKq5C,cAAcr5C,KAAKjH,cAAcC,OAElEgH,KAAKo8C,oBAAsBK,GAE7Bz8C,KAAK0wC,cAAc13C,KAAKzJ,GAASktD,2CAMlBltD,GACf,YAAYmhD,cAAc13C,KAAKzJ,0CAmBlBotD,GACb38C,KAAK48C,yBAAyB58C,KAAK0wC,cAAeiM,6CAGlCA,GAChB,GAAIA,aAAkBE,aAAc,CAClC,GAA4B,IAAP,EAAhBF,EAAOv/D,QACV,UAAU+K,MAKZ,IAHA,IAAMH,EAAgB20D,EAAOv/D,OAAS,EAChCiL,EAAkB,GACpBy0D,EAAM,EACDv/D,EAAI,EAAGA,EAAIyK,IAASzK,EAC3B8K,EAAM8V,KAAK,IAAI5c,GAAOo7D,EAAOG,KAAQH,EAAOG,OAE9CH,EAASt0D,EAEX2X,KAAK48C,yBAAyB58C,KAAKsxC,iBAAkBqL,6CAGrCA,GAChB,GAAIA,aAAkBE,aAAc,CAClC,GAA4B,IAAP,EAAhBF,EAAOv/D,QACV,UAAU+K,MAKZ,IAHA,IAAMH,EAAgB20D,EAAOv/D,OAAS,EAChCiL,EAAkB,GACpBy0D,EAAM,EACDv/D,EAAI,EAAGA,EAAIyK,IAASzK,EAC3B8K,EAAM8V,KAAK,IAAI5c,GAAOo7D,EAAOG,KAAQH,EAAOG,OAE9CH,EAASt0D,EAEX2X,KAAK48C,yBAAyB58C,KAAKuxC,iBAAkBoL,0CAGxCA,GACb,GAAIA,aAAkBE,aAAc,CAClC,GAA4B,IAAP,EAAhBF,EAAOv/D,QACV,UAAU+K,MAKZ,IAHA,IAAMH,EAAgB20D,EAAOv/D,OAAS,EAChCiL,EAAmB,GACrBy0D,EAAM,EACDv/D,EAAI,EAAGA,EAAIyK,IAASzK,EAC3B8K,EAAM8V,KAAK,IAAImI,GAAQq2C,EAAOG,KAAQH,EAAOG,KAAQH,EAAOG,KAAQH,EAAOG,OAE7EH,EAASt0D,EAEX2X,KAAK48C,yBAAyB58C,KAAKjH,cAAe4jD,6CAG/BA,GACnB38C,KAAK48C,yBAAyB58C,KAAKo4C,iBAAkBuE,yCASrD,YAAYI,gBAAgB/jD,+CAI5B,YAAY+jD,gBAAgB/0D,gDAU5B,YAAYg1D,oBAAoBhkD,mDAIhC,YAAYgkD,oBAAoBh1D,yCAoBhC,YAAY0rB,aAAa1a,4CAIzB,YAAY0a,aAAa1rB,0CAqBzB,YAAYi1D,cAAcjkD,6CAI1B,YAAYikD,cAAcj1D,gDASVk1D,GAChBl9C,KAAKm9C,iBAAmBD,EAEpBA,EAAQ,IACVl9C,KAAKi4C,4BAA4Bj/C,KAAOgH,KAAKq5C,cAC3Cr5C,KAAKi4C,4BAA4Bj/C,MAEnCgH,KAAKk4C,yBAAyBl/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKk4C,yBAAyBl/C,MACtFgH,KAAKm4C,gCAAgCn/C,KAAOgH,KAAKq5C,cAC/Cr5C,KAAKm4C,gCAAgCn/C,oDAYzC,YAAYokD,sBAAsBC,wDASlC,YAAYD,sBAAsB5uC,4DAUlC,IAHA,IAAMQ,EAAM+nC,EAAiBuG,2BACvBC,EAAWv9C,KAAKuxC,iBAAiBv4C,KACnCwkD,EAAS,EACJvxB,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZlC,EAAIkkC,EAAQx/B,OAEZyB,EAAIpD,GAAOU,MAAMs7D,EAASx/D,GAAIw/D,EAASjgE,GAAI0xB,GAC3CnT,EAAKta,GAAO4D,MAAMR,EAAGnG,GACvBqd,EAAK,IACP2hD,GAAU3hD,EAAKA,GAGnB,SAAamE,KAAKyxC,kBAAoB+L,gDAelBC,GACpBz9C,KAAK23C,MAAM5B,mBAAqB0H,kDAOhC,YAAY9F,MAAM5B,+DASAxmD,EAAe4gD,GAEjC,IAAMuN,EAAwE,OAA5C19C,KAAKs4C,8BAA8Bt/C,KAOrE,GANAgH,KAAKq4C,uBAAuBr/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKq4C,uBAAuBr/C,MAClFgH,KAAKs4C,8BAA8Bt/C,KAAOgH,KAAKq5C,cAC7Cr5C,KAAKs4C,8BAA8Bt/C,MAIjC0kD,EAEF,IADA,IAAMhlD,EAAgBsH,KAAKrH,mBAClBpb,EAAI,EAAGA,EAAImb,IAAiBnb,EACnCyiB,KAAKs4C,8BAA8Bt/C,KAAKzb,GAAKA,EAIjD,IAAMogE,EAAoBxN,EAAWnwC,KAAK23C,MAAMb,oBAG1C8G,EACJD,EAAoB,EAChB39C,KAAK25C,0BAA4BgE,EACjCA,EACFC,IAAsB59C,KAAKq4C,uBAAuBr/C,KAAKzJ,KACzDyQ,KAAKq4C,uBAAuBr/C,KAAKzJ,GAASquD,EAC1C59C,KAAK69C,uCAAwC,+CAU7BtuD,GAElB,YAAYmqD,yBAAyB15C,KAAK89C,0BAA0BvuD,gDAclDwuD,GACdA,GACF/9C,KAAK89C,0BAEP99C,KAAK23C,MAAMd,aAAekH,gDAS1B,YAAYpG,MAAMd,+DAWlB,OADA72C,KAAKq4C,uBAAuBr/C,KAAOgH,KAAKq5C,cAAcr5C,KAAKq4C,uBAAuBr/C,WACtEq/C,uBAAuBr/C,sDAQZglD,GACvB,OACGA,EAAiB,EAAIA,EAAiBh+C,KAAK25C,0BAA4BqE,GACxEh+C,KAAK23C,MAAMb,6EAwBb,OAPI92C,KAAKrH,mBACPqH,KAAKy5C,oBAAoB,EAAGz5C,KAAKi+C,oBAAoB,IAErDj+C,KAAKs4C,8BAA8Bt/C,KAAOgH,KAAKq5C,cAC7Cr5C,KAAKs4C,8BAA8Bt/C,WAG3Bs/C,8BAA8Bt/C,wDAUjBzJ,EAAeu3B,GACxC9mB,KAAKmxC,mBAAmB5hD,EAAOA,EAAQ,EAAGu3B,8CAgBzB2zB,EAAoBO,EAAmBl0B,GAMxD,IALA,IAAMy2B,EAAWv9C,KAAKuxC,iBAAiBv4C,KAEjCklD,GADelD,EAAYP,GACAz6C,KAAKyxC,kBAEhC0M,GAAgB,IAAI58D,IAASmC,KAAKojC,GAASpwB,QAAQ,EAAIwnD,GACpD3gE,EAAIk9D,EAAYl9D,EAAIy9D,EAAWz9D,IAEtCggE,EAAShgE,GAAG0lB,QAAQk7C,+BA9qC1BnhE,eA4rCqBuS,EAAeo3B,GAE9BowB,EAAiBqH,mBAAmBz3B,IACpC3mB,KAAKq+C,kBAAkBr+C,KAAK0wC,cAAc13C,KAAKzJ,MAE/CyQ,KAAKs+C,qBAELt+C,KAAKw4C,cAAcjpD,GAAO0T,QAAQ0jB,uCAe3B8zB,EAAoBO,EAAmBr0B,GAahD,IAAM43B,GAAmB,IAAIh9D,IAASmC,KAAKijC,GAAOjwB,QAAQ,GAAKskD,EAAYP,IAC3E,GAAI1D,EAAiBqH,mBAAmBG,GAAmB,CACzDv+C,KAAKs+C,qBAGL,IAAK,IAAI/gE,EAAIk9D,EAAYl9D,EAAIy9D,EAAWz9D,IAEtCyiB,KAAKw4C,cAAcj7D,GAAG0lB,QAAQs7C,sCAUlC,YAAYhiD,yCAWJ8R,EAA2BjR,GACnC,GAAiC,IAA7B4C,KAAKs5C,cAActxD,MA0BvB,IAvBA,IAAMw2D,EAAa,EACbC,EAAWz+C,KAAKs5C,cAActxD,MAC9B02D,EAAa9mD,GACjBoI,KAAKs5C,cAActgD,KACnBwlD,EACAC,EACA1H,EAAiB4H,WACf3+C,KAAKo3C,kBAAoBh6C,EAAK5W,WAAW5I,EACzCoiB,KAAKo3C,kBAAoBh6C,EAAK5W,WAAWC,GAE3CwwD,GAAuB2H,iBAEnBC,EAAY5mD,GAChB+H,KAAKs5C,cAActgD,KACnB0lD,EACAD,EACA1H,EAAiB4H,WACf3+C,KAAKo3C,kBAAoBh6C,EAAK7W,WAAW3I,EACzCoiB,KAAKo3C,kBAAoBh6C,EAAK7W,WAAWE,GAE3CwwD,GAAuB6H,iBAEnBC,EAAW/+C,KAAKsxC,iBAAiBt4C,KAC9BizB,EAAIyyB,EAAYzyB,EAAI4yB,IAAa5yB,EAAG,CAC3C,IACM1uC,EADQyiB,KAAKs5C,cAActgD,KAAKizB,GACtB18B,MACVhM,EAAIw7D,EAASxhE,GACnB,GACE6f,EAAK5W,WAAW5I,EAAI2F,EAAE3F,GACtB2F,EAAE3F,EAAIwf,EAAK7W,WAAW3I,GACtBwf,EAAK5W,WAAWC,EAAIlD,EAAEkD,GACtBlD,EAAEkD,EAAI2W,EAAK7W,WAAWE,IAEjB4nB,EAAS2wC,eAAeh/C,KAAMziB,GACjC,8CAiBO8wB,EAA2BxT,EAAgB2B,OAAiBmd,yDAAa,EAEhFvc,EADS25C,EAAiBkI,sBAEhCpkD,EAAMimB,YAAY1jB,EAAMZ,EAAImd,GAC5B3Z,KAAKm6C,UAAU9rC,EAAUjR,0CAKZiR,EAA2BvqB,OAAWo7D,yDAAen6D,GAE5DqY,EADS25C,EAAiBoI,sBAEhC/hD,EAAK5W,WAAWlC,IAAIR,EAAMlG,EAAIshE,EAAMp7D,EAAM2C,EAAIy4D,GAC9C9hD,EAAK7W,WAAWjC,IAAIR,EAAMlG,EAAIshE,EAAMp7D,EAAM2C,EAAIy4D,GAC9Cl/C,KAAKm6C,UAAU9rC,EAAUjR,mCAgBnBiR,EAA6B+wC,EAAYC,GAC/C,IAAMhuC,EAAS0lC,EAAiBuI,eAC1BC,EAAMxI,EAAiByI,YACvBxwC,EAAM+nC,EAAiB0I,YACvBxmC,EAAM89B,EAAiB2I,YACvBC,EAAU5I,EAAiB6I,gBACjC,GAAiC,IAA7B5/C,KAAKs5C,cAActxD,MAAvB,CAGA,IAAM+2D,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCoE,EAAOiU,EACb9vB,GAAOq7B,KAAKwiC,EAAQC,EAAQjiD,EAAK5W,YACjCjF,GAAOs7B,KAAKuiC,EAAQC,EAAQjiD,EAAK7W,YAWjC,IAVA,IASIhJ,EATAyvB,EAAW,EAKTroB,EAAIpD,GAAOU,MAAMo9D,EAAQD,EAAQpwC,GACjC9gB,EAAK3M,GAAO4D,MAAMR,EAAGA,GACrBiwD,EAAa50C,KAAK60C,0BAA0Bz3C,IAG1C7f,EAAIq3D,EAAWE,YAAc,GAAG,CAEtC,IAAMvxD,EAAIhC,GAAOU,MAAMm9D,EAAQL,EAASxhE,GAAIgiE,GACtCM,EAAKt+D,GAAO4D,MAAM5B,EAAGoB,GAErBm7D,EAAcD,EAAKA,EAAK3xD,GADnB3M,GAAO4D,MAAM5B,EAAGA,GACcyc,KAAKq3C,mBAC9C,GAAIyI,GAAe,EAAG,CACpB,IAAMC,EAAkBjpD,GAAOgpD,GAE3Bn2D,IAAMk2D,EAAKE,GAAmB7xD,EAClC,GAAIvE,EAAIqjB,EACN,SAEF,GAAIrjB,EAAI,KACNA,IAAMk2D,EAAKE,GAAmB7xD,GACtB,GAAKvE,EAAIqjB,GACf,SAIJ,IAAMxuB,EAAI+C,GAAO4qB,UAAU5oB,EAAGoG,EAAGhF,EAAGs0B,GAKpC,GAJAz6B,EAAE4E,aAGF4pB,EAAWlvB,EAAMkvB,EADPqB,EAAS2wC,eAAeh/C,KAAMziB,EAAGgE,GAAO4qB,UAAUizC,EAAQz1D,EAAGhF,EAAGg7D,GAAUnhE,EAAGmL,MAEvE,EACd,6CAiBIyT,GACV,IAAM1E,EAAgBsH,KAAKrH,mBAE3ByE,EAAK5W,WAAW5I,GAAK+P,GACrByP,EAAK5W,WAAWC,GAAKkH,GACrByP,EAAK7W,WAAW3I,GAAK+P,GACrByP,EAAK7W,WAAWE,GAAKkH,GAGrB,IADA,IAAMoxD,EAAW/+C,KAAKsxC,iBAAiBt4C,KAC9Bzb,EAAI,EAAGA,EAAImb,EAAenb,IAAK,CACtC,IAAMgG,EAAIw7D,EAASxhE,GACnBgE,GAAOq7B,KAAKxf,EAAK5W,WAAYjD,EAAG6Z,EAAK5W,YACrCjF,GAAOs7B,KAAKzf,EAAK7W,WAAYhD,EAAG6Z,EAAK7W,YAEvC6W,EAAK5W,WAAW5I,GAAKoiB,KAAKm3C,mBAC1B/5C,EAAK5W,WAAWC,GAAKuZ,KAAKm3C,mBAC1B/5C,EAAK7W,WAAW3I,GAAKoiB,KAAKm3C,mBAC1B/5C,EAAK7W,WAAWE,GAAKuZ,KAAKm3C,sDA2Bdp5D,EAAe6zD,GACjB,OAAN7zD,IAGJA,EAAEX,OAAS,qDAGgBW,GACI,IAA3BA,EAAEiiE,sBACJhgD,KAAKu4C,WAAWx6D,EAAEib,KAAMgH,KAAKy4C,uEAOZwH,EAAuBC,EAAqB/L,GAE/D,GAAIA,GAAe+L,EACjB,UAAU/3D,MAEZ,IAAMg4D,EAAYF,EAAYA,EAAUG,QAAU,GAElD,OADAD,EAAU/iE,OAAS+2D,EACZgM,4CAOPxD,EACAqD,EACAE,EACA/L,EACAkM,GAGA,GAAIlM,GAAe+L,EACjB,UAAU/3D,MAMZ,GAAO63D,KAAwB7L,GAAe6L,GAC5C,UAAU73D,MAKZ,OAHMk4D,IAAY1D,GAAYqD,IAC5BrD,EAAS38C,KAAKsgD,kBAAkB3D,EAAQuD,EAAa/L,IAEhDwI,4CAOPA,EACAuD,EACA/L,EACAkM,GAGA,YAAYE,kBACV5D,EAAO3jD,KACP2jD,EAAOqD,qBACPE,EACA/L,EACAkM,yCAIa1D,GASf,OARKA,IACsC,IAArC38C,KAAKy4C,6BACPz4C,KAAKg5C,mCAAmChJ,KAG1C2M,EAAS,IACFv/D,OAAS4iB,KAAKy4C,6BAEhBkE,kDAOexI,GAItBn0C,KAAKg4C,oBAAoBh/C,KAAOgH,KAAKwgD,kBACnCxgD,KAAKg4C,oBACLh4C,KAAKy4C,4BACLtE,GACA,8DAM+BvC,GACjC,SAAS6O,EAAc7O,EAAkBoE,GACvC,OAAOA,GAAYpE,EAAWoE,EAAWA,EAAWpE,EAUtD,GANAA,EAAW6O,EAAc7O,EAAU5xC,KAAK23C,MAAM3B,UAC9CpE,EAAW6O,EAAc7O,EAAU5xC,KAAK0wC,cAAcsP,sBACtDpO,EAAW6O,EAAc7O,EAAU5xC,KAAKsxC,iBAAiB0O,sBACzDpO,EAAW6O,EAAc7O,EAAU5xC,KAAKuxC,iBAAiByO,sBACzDpO,EAAW6O,EAAc7O,EAAU5xC,KAAKjH,cAAcinD,sBACtDpO,EAAW6O,EAAc7O,EAAU5xC,KAAKo4C,iBAAiB4H,sBACrDhgD,KAAKy4C,4BAA8B7G,EAAU,CAC/C5xC,KAAK0gD,wBAAwB9O,GAC7B5xC,KAAK0wC,cAAc13C,KAAOgH,KAAKwgD,kBAC7BxgD,KAAK0wC,cACL1wC,KAAKy4C,4BACL7G,GACA,GAKF,IAAM+O,EAAQ3gD,KAAKm9C,iBAAmB,EACtCn9C,KAAKi4C,4BAA4Bj/C,KAAOgH,KAAKwgD,kBAC3CxgD,KAAKi4C,4BACLj4C,KAAKy4C,4BACL7G,EACA+O,GAEF3gD,KAAKk4C,yBAAyBl/C,KAAOgH,KAAKwgD,kBACxCxgD,KAAKk4C,yBACLl4C,KAAKy4C,4BACL7G,EACA+O,GAEF3gD,KAAKm4C,gCAAgCn/C,KAAOgH,KAAKwgD,kBAC/CxgD,KAAKm4C,gCACLn4C,KAAKy4C,4BACL7G,EACA+O,GAEF3gD,KAAKsxC,iBAAiBt4C,KAAOgH,KAAKwgD,kBAChCxgD,KAAKsxC,iBACLtxC,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKuxC,iBAAiBv4C,KAAOgH,KAAKwgD,kBAChCxgD,KAAKuxC,iBACLvxC,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKw4C,cAAgBx4C,KAAKugD,kBACxBvgD,KAAKw4C,cACL,EACAx4C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK04C,eAAiB14C,KAAKugD,kBACzBvgD,KAAK04C,eACL,EACA14C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK24C,uBAAyB34C,KAAKugD,kBACjCvgD,KAAK24C,uBACL,EACA34C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK44C,qBAAuB54C,KAAKugD,kBAC/BvgD,KAAK44C,qBACL,EACA54C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK64C,sBAAwB74C,KAAKugD,kBAChCvgD,KAAK64C,sBACL,EACA74C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK84C,cAAgB94C,KAAKugD,kBACxBvgD,KAAK84C,cACL,EACA94C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKjH,cAAcC,KAAOgH,KAAKwgD,kBAC7BxgD,KAAKjH,cACLiH,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAK+4C,cAAgB/4C,KAAKugD,kBACxBvgD,KAAK+4C,cACL,EACA/4C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKo4C,iBAAiBp/C,KAAOgH,KAAKwgD,kBAChCxgD,KAAKo4C,iBACLp4C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKq4C,uBAAuBr/C,KAAOgH,KAAKwgD,kBACtCxgD,KAAKq4C,uBACLr4C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKs4C,8BAA8Bt/C,KAAOgH,KAAKwgD,kBAC7CxgD,KAAKs4C,8BACLt4C,KAAKy4C,4BACL7G,GACA,GAEF5xC,KAAKy4C,4BAA8B7G,kDAIhByI,EAA+B79C,EAAiBjZ,GACrE,IAAMq9D,EAAc,IAAI1Q,GACxB0Q,EAAYzkD,MAAQpf,EAAQs9D,EAASl+C,MAAO,GAE5Cxa,GAAYC,MAAM4a,EAAIjZ,EAAGq9D,EAAYx7C,UAKrC7jB,GAAOskB,MACL9oB,EAAQs9D,EAAS31B,eAAgBnjC,GAAO+iC,MACxC/iC,GAAO+0C,QACLv5C,EAAQs9D,EAAS/2B,gBAAiB,GAClC/hC,GAAOU,MAAM2+D,EAAYx7C,SAAUroB,EAAQs9D,EAASj1C,SAAU7jB,GAAO+iC,MAAO/iC,GAAOE,MACnFF,GAAOE,MAETm/D,EAAYzH,UAEdyH,EAAY3mD,MAAMvW,KAAK3G,EAAQs9D,EAASpgD,MAAOqM,GAAQge,OACvDs8B,EAAYzQ,SAAWpzD,EAAQs9D,EAASlK,SAAU,GAClDyQ,EAAY3wC,SAAWoqC,EAASpqC,SAChCjQ,KAAK6gD,eAAeD,8DAIpB/lD,EACAw/C,EACA79C,GAEA,IAAMskD,EAAS/J,EAAiBgK,0CAC1BC,EAAMjK,EAAiBkK,uCACvB1B,EAAMxI,EAAiBmK,uCACzBC,EAASpkE,EAAQs9D,EAAS8G,OAAQ,GACvB,IAAXA,IACFA,EAASnhD,KAAKohD,qBAIhB,IAFA,IAAIC,EAAiB,EACf3M,EAAa75C,EAAMqoB,gBAChBvJ,EAAa,EAAGA,EAAa+6B,EAAY/6B,IAAc,CAC9D,IAAIxpB,EAA2B,SAC3B0K,EAAMgC,UACR1M,EAAO0K,GAGP1K,EAAO2wD,EACNjmD,EAAuBolB,aAAa9vB,EAAMwpB,IAK7C,IAHA,IAAM94B,EAAIU,GAAOU,MAAMkO,EAAK+D,UAAW/D,EAAK6D,UAAWgtD,GACjDM,EAAazgE,EAAEmE,SAEdq8D,EAAiBC,GAAY,CAElC,IAAM/9D,EAAIhC,GAAO4qB,UAAUhc,EAAK6D,UAAWqtD,EAAiBC,EAAYzgE,EAAG0+D,GAC3Ev/C,KAAK+6C,uBAAuBV,EAAU79C,EAAIjZ,GAC1C89D,GAAkBF,EAEpBE,GAAkBC,4DASpBzmD,EACAw/C,EACA79C,GAEA,IAAM6U,EAAS0lC,EAAiBwK,wCAC1BhC,EAAMxI,EAAiByK,qCACzBL,EAASpkE,EAAQs9D,EAAS8G,OAAQ,GACvB,IAAXA,IACFA,EAASnhD,KAAKohD,qBAIhB,IAAMK,EAAW9/D,GAAY+/D,SACvBtkD,EAAOiU,EAEbxW,EAAMimB,YAAY1jB,EAAMqkD,EAAU,GAClC,IACE,IAAIh7D,EAAI/H,KAAKsK,MAAMoU,EAAK5W,WAAWC,EAAI06D,GAAUA,EACjD16D,EAAI2W,EAAK7W,WAAWE,EACpBA,GAAK06D,EAEL,IACE,IAAIvjE,EAAIc,KAAKsK,MAAMoU,EAAK5W,WAAW5I,EAAIujE,GAAUA,EACjDvjE,EAAIwf,EAAK7W,WAAW3I,EACpBA,GAAKujE,EACL,CACA,IAAM59D,EAAIg8D,EAAIj7D,IAAI1G,EAAG6I,GACjBoU,EAAMooB,UAAUw+B,EAAUl+D,IAC5Byc,KAAK+6C,uBAAuBV,EAAU79C,EAAIjZ,6DAUhDsX,EACAw/C,EACA79C,GAEA,OAAQ3B,EAAMgC,WACZ,OACA,OACEmD,KAAK2hD,mCAAmC9mD,EAAOw/C,EAAU79C,GACzD,MACF,OACA,OACEwD,KAAK4hD,iCAAiC/mD,EAAOw/C,EAAU79C,8DAS3Dm+C,EACAE,EACAR,EACA79C,GAEA,IAAMqlD,EAAiB,IAAIC,GAAgCnH,EAAQE,GACnE76C,KAAK4hD,iCAAiCC,EAAgBxH,EAAU79C,yCAGpDulD,EAAkB9d,GAC9B,IAAMhnD,EAAM,IAAIizD,GAChBjzD,EAAIkf,MAAQ6D,KAAK0wC,cAAc13C,KAAK+oD,GACpC9kE,EAAImoB,SAAS1hB,KAAKsc,KAAKsxC,iBAAiBt4C,KAAK+oD,IAC7C9kE,EAAIk8D,SAASz1D,KAAKsc,KAAKuxC,iBAAiBv4C,KAAK+oD,IACzC/hD,KAAKjH,cAAcC,MACrB/b,EAAIgd,MAAMvW,KAAKsc,KAAKjH,cAAcC,KAAK+oD,IAErC/hD,KAAKo4C,iBAAiBp/C,OACxB/b,EAAIgzB,SAAWjQ,KAAKo4C,iBAAiBp/C,KAAK+oD,IAE5C9kE,EAAIgnD,MAAQA,EACZ,IAAM+d,EAAWhiD,KAAK6gD,eAAe5jE,GACrC,GAAI+iB,KAAKg4C,oBAAoBh/C,KAAM,CACjC,IAAM8gD,EAAS95C,KAAKg4C,oBAAoBh/C,KAAK+oD,GACzCjI,IACFA,EAAOvqD,MAAQyyD,GAEjBhiD,KAAKg4C,oBAAoBh/C,KAAKgpD,GAAYlI,EAC1C95C,KAAKg4C,oBAAoBh/C,KAAK+oD,GAAY,KA2B5C,OAzBI/hD,KAAKi4C,4BAA4Bj/C,OACnCgH,KAAKi4C,4BAA4Bj/C,KAAKgpD,GAAYhiD,KAAKi4C,4BAA4Bj/C,KACjF+oD,IAGA/hD,KAAKk4C,yBAAyBl/C,OAChCgH,KAAKk4C,yBAAyBl/C,KAAKgpD,GAAYhiD,KAAKk4C,yBAAyBl/C,KAAK+oD,IAEhF/hD,KAAKm4C,gCAAgCn/C,OACvCgH,KAAKm4C,gCAAgCn/C,KACnCgpD,GACEhiD,KAAKm4C,gCAAgCn/C,KAAK+oD,IAE5C/hD,KAAKiiD,YACPjiD,KAAKw4C,cAAcwJ,GAAUt+D,KAAKsc,KAAKw4C,cAAcuJ,IAEnD/hD,KAAK24C,yBACP34C,KAAK24C,uBAAuBqJ,GAAYhiD,KAAK24C,uBAAuBoJ,IAElE/hD,KAAK84C,gBACP94C,KAAK84C,cAAckJ,GAAYhiD,KAAK84C,cAAciJ,IAEhD/hD,KAAKq4C,uBAAuBr/C,OAC9BgH,KAAKq4C,uBAAuBr/C,KAAKgpD,GAAYhiD,KAAKq4C,uBAAuBr/C,KAAK+oD,IAEzEC,kDAGe/d,GACtB,QAD8CmN,0DACrC7zD,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IACtDyiB,KAAKqxC,gBAAgB9zD,EAAG6zD,gDAIPnN,GAIfjkC,KAAKghB,QAAQkhC,uBACfliD,KAAKghB,QAAQkhC,sBAAsBC,wBAAwBle,GAG7DjkC,KAAK4wC,cAAc3M,EAAO,GAC1B,IAAK,IAAI1mD,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IACtDyiB,KAAK+4C,cAAcx7D,GAAK,KAGtB0mD,EAAM/B,SACR+B,EAAM/B,OAAO3lC,OAAS0nC,EAAM1nC,QAE1B0nC,EAAM1nC,SACR0nC,EAAM1nC,OAAO2lC,OAAS+B,EAAM/B,QAE1B+B,IAAUjkC,KAAK63C,cACjB73C,KAAK63C,YAAc5T,EAAM1nC,UAGzByD,KAAKk7C,0DAePT,EACAO,EACA94B,GAiBA,eAfMkgC,EAAQrL,EAAiBsL,2BACzBC,EAAQvL,EAAiBwL,2BACzBC,EAAQzL,EAAiB0L,2BACzB1D,EAAW/+C,KAAKsxC,iBAAiBt4C,KAWnC0pD,EAAgB,EACXnlE,EAAIk9D,EAAYl9D,EAAIy9D,EAAWz9D,IACtCmlE,GAAiB1iD,KAAK0wC,cAAc13C,KAAKzb,GAE3C,GAAImlE,EAAgB3L,EAAiB4L,YACnC,IAAK,IAAI12B,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZkiE,EAAK5iD,KAAK0wC,cAAc13C,KAAK1b,GAC7BulE,EAAK7iD,KAAK0wC,cAAc13C,KAAKjb,GAC7By9D,EAASx7C,KAAK+4C,cAAcz7D,GAC5Bm+D,EAASz7C,KAAK+4C,cAAch7D,GAClC,GACET,GAAKm9D,GACLn9D,EAAI09D,GACJj9D,GAAK08D,GACL18D,EAAIi9D,QACD4H,EAAKC,MACPD,EAAKC,GAAM9L,EAAiB4L,cAC5BzgC,EAAO4gC,YAAYxlE,IAAM4kC,EAAO4gC,YAAY/kE,KAC7Cg5D,EAAiBgM,uBAAuBH,EAAIpH,IAC5CzE,EAAiBgM,uBAAuBF,EAAIpH,IAC5Cv5B,EAAO8gC,iBAAiB1lE,EAAGS,GAC3B,CAEA,IAAMk2B,EAAOjU,KAAK0T,aAAa1a,KAAKgH,KAAK0T,aAAa6lC,UACtDtlC,EAAKxzB,OAASnD,EACd22B,EAAKvzB,OAAS3C,EACdk2B,EAAK9X,MAAQumB,EAAQvmB,MACrB8X,EAAKrN,SAAW9oB,EAAM09D,EAASA,EAAOP,WAAa,EAAGQ,EAASA,EAAOR,WAAa,GAEnFhnC,EAAKxxB,SAAWlB,GAAOmB,WAAWq8D,EAASzhE,GAAIyhE,EAAShhE,IAG1DyZ,GACEwI,KAAK0T,aAAa1a,KAClB,EACAgH,KAAK0T,aAAa1rB,MAClB+uD,EAAiBkM,oBAGnBjjD,KAAK0T,aAAawvC,OAAOnM,EAAiBoM,kBAG9C,GAAIT,EAAgB3L,EAAiBqM,aAAc,CAGjD,IAFA,IAAMC,EAAU,IAAIpR,GAAiB+I,EAAYP,GAExCl9D,EAAIk9D,EAAYl9D,EAAIy9D,EAAWz9D,IAAK,CAC3C,IAAM4e,EAAQ6D,KAAK0wC,cAAc13C,KAAKzb,GAChC0mD,EAAQjkC,KAAK+4C,cAAcx7D,KAE7B4e,IACF46C,EAAiBgM,uBAAuB5mD,EAAO8nC,IAK/Cof,EAAQC,aAAavE,EAASxhE,GAAIA,EAAG2kC,EAAO4gC,YAAYvlE,IAS5D,IAAM4jE,EAASnhD,KAAKohD,oBACpBiC,EAAQE,SAASpC,EAAS,EAAY,EAATA,GAC7B,IAAM9yC,EAAoC,SAAC/wB,EAAWS,EAAWqP,GAC/D,IAAMw1D,EAAKr1B,EAAKmjB,cAAc13C,KAAK1b,GAC7BulE,EAAKt1B,EAAKmjB,cAAc13C,KAAKjb,GAC7BsJ,EAAKkmC,EAAKmjB,cAAc13C,KAAK5L,GACnC,IAAKw1D,EAAKC,EAAKx7D,GAAM0vD,EAAiBqM,cAAgBlhC,EAAOshC,kBAAkBlmE,EAAGS,EAAGqP,GAAI,CACvF,IAAMq2D,EAAK1E,EAASzhE,GACdomE,EAAK3E,EAAShhE,GACd8pD,EAAKkX,EAAS3xD,GACdu2D,EAAMpiE,GAAOU,MAAMwhE,EAAIC,EAAItB,GAC3BwB,EAAMriE,GAAOU,MAAMyhE,EAAI7b,EAAIya,GAC3BuB,EAAMtiE,GAAOU,MAAM4lD,EAAI4b,EAAIjB,GAC3BsB,EAAqB/T,GAA6BxiB,EAAK8pB,kBAC7D,GACE91D,GAAO4D,MAAMw+D,EAAKA,GAAOG,GACzBviE,GAAO4D,MAAMy+D,EAAKA,GAAOE,GACzBviE,GAAO4D,MAAM0+D,EAAKA,GAAOC,EAEzB,OAEF,IAAMtI,EAASjuB,EAAKwrB,cAAcz7D,GAC5Bm+D,EAASluB,EAAKwrB,cAAch7D,GAC5BgmE,EAASx2B,EAAKwrB,cAAc3rD,GAE5B42D,EAAQz2B,EAAK0vB,cAAcjkD,KAAKu0B,EAAK0vB,cAAc1D,UACzDyK,EAAMvjE,OAASnD,EACf0mE,EAAMtjE,OAAS3C,EACfimE,EAAMC,OAAS72D,EACf42D,EAAM7nD,MAAQymD,EAAKC,EAAKx7D,EACxB28D,EAAMp9C,SAAW9oB,EACfA,EAAM09D,EAASA,EAAOP,WAAa,EAAGQ,EAASA,EAAOR,WAAa,GACnE8I,EAASA,EAAO9I,WAAa,GAG/B,IAAMiJ,GAAcT,EAAG7lE,EAAI8lE,EAAG9lE,EAAIiqD,EAAGjqD,GAAK,EACpCumE,GAAcV,EAAGh9D,EAAIi9D,EAAGj9D,EAAIohD,EAAGphD,GAAK,EAE1Cu9D,EAAMP,GAAG7lE,EAAI6lE,EAAG7lE,EAAIsmE,EACpBF,EAAMP,GAAGh9D,EAAIg9D,EAAGh9D,EAAI09D,EAEpBH,EAAMN,GAAG9lE,EAAI8lE,EAAG9lE,EAAIsmE,EACpBF,EAAMN,GAAGj9D,EAAIi9D,EAAGj9D,EAAI09D,EAEpBH,EAAMnc,GAAGjqD,EAAIiqD,EAAGjqD,EAAIsmE,EACpBF,EAAMnc,GAAGphD,EAAIohD,EAAGphD,EAAI09D,EACpBH,EAAMvO,IAAMl0D,GAAO4D,MAAM0+D,EAAKF,GAC9BK,EAAMtO,IAAMn0D,GAAO4D,MAAMw+D,EAAKC,GAC9BI,EAAMrO,IAAMp0D,GAAO4D,MAAMy+D,EAAKC,GAC9BG,EAAMj4D,EAAIxK,GAAOkV,QAAQgtD,EAAIC,GAAMniE,GAAOkV,QAAQitD,EAAI7b,GAAMtmD,GAAOkV,QAAQoxC,EAAI4b,KAGnFJ,EAAQe,SAAS/1C,GAEjB7W,GACEwI,KAAKi9C,cAAcjkD,KACnB,EACAgH,KAAKi9C,cAAcj1D,MACnB+uD,EAAiBsN,qBAGnBrkD,KAAKi9C,cAAciG,OAAOnM,EAAiBuN,wFAS7C,IAAMpiC,EAAS,IAAIqiC,GAAgCvkD,KAAK0wC,eACxD1wC,KAAKs7C,qBAAqB,EAAGt7C,KAAKxf,QAAS0hC,GAE3C,IAAK,IAAI3kC,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCyiB,KAAK0wC,cAAc13C,KAAKzb,KAAM,KAEhCyiB,KAAKo8C,qBAAsB,yDA+C3BnY,EACA0X,GAGA,IADA,IAAM6I,EAAcvgB,EAAMwgB,iBACjBx4B,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CAEnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OAClB,GAAKujD,EAAMygB,iBAAiBpnE,IAAO2mD,EAAMygB,iBAAiB3mE,GAA1D,CAGA,IAAIwnD,EAA2CoW,EAAWr+D,EAAIknE,GAAa3V,KACvEpJ,EAA2CkW,EAAW59D,EAAIymE,GAAa3V,KAC3E,GAAItJ,IAAUE,EAAd,CAKA,GAAIF,EAAMv9C,MAAQy9C,EAAMz9C,MAAO,CAC7B,IAAM28D,EAAOpf,EACbA,EAAQE,EACRA,EAAQkf,EAGV5N,EAAiB6N,mBAAmBrf,EAAOE,2DA8C7CxB,EACA0X,EACAI,GAGA,IADA,IAAMrjD,EAAgBurC,EAAMtrC,mBACnBpb,EAAI,EAAGA,EAAImb,EAAenb,IAAK,CACtC,IAAMkxB,EAA0CktC,EAAWp+D,GAEzDkxB,IAASstC,KACT/7C,KAAK0wC,cAAc13C,KAAKyV,EAAKlf,QAE7BwnD,EAAiB8N,yBAAyB9I,EAAettC,iEA4B7Dw1B,EACA0X,EACAI,GAEA,IAAMrjD,EAAgBurC,EAAMtrC,mBACtB1b,EAAM,IAAIozD,GAChBpzD,EAAIk+D,WAAalX,EAAM6gB,gBACvB7nE,EAAIgzB,SAAWg0B,EAAMvd,cACrB,IAAK,IAAInpC,EAAI,EAAGA,EAAImb,EAAenb,IAAK,CACtC,IAAMsxD,EAA0C8M,EAAWp+D,GAC3D,GAAKsxD,EAAK7mD,OAAS6mD,IAASkN,EAK5B,IADA,IAAMgJ,EAA4B/kD,KAAKglD,oBAAoB/nE,GAClDwxB,EAAiDogC,EAAMpgC,EAAMA,EAAOA,EAAKrW,KAAM,CACtF,IAAM2pD,EAAWtzC,EAAKlf,MAKhByyD,EAAWhiD,KAAKilD,cAAclD,EAAUgD,GAC9C/kD,KAAK0wC,cAAc13C,KAAK+oD,MACxBtzC,EAAKlf,MAAQyyD,iEAMjB/d,EACA0X,GAOA,IALA,IAAM6I,EAAcvgB,EAAMwgB,iBAKjBx4B,EAAI,EAAGA,EAAIjsB,KAAK0T,aAAa1rB,MAAOikC,IAAK,CAChD,IAAMhY,EAAOjU,KAAK0T,aAAa1a,KAAKizB,GAC9B3uC,EAAI22B,EAAKxzB,OACT1C,EAAIk2B,EAAKvzB,OACXujD,EAAMygB,iBAAiBpnE,KACzB22B,EAAKxzB,OAASk7D,EAAWr+D,EAAIknE,GAAaj1D,OAExC00C,EAAMygB,iBAAiB3mE,KACzBk2B,EAAKvzB,OAASi7D,EAAW59D,EAAIymE,GAAaj1D,OAG9C,IAAK,IAAI08B,EAAI,EAAGA,EAAIjsB,KAAKi9C,cAAcj1D,MAAOikC,IAAK,CACjD,IAAM+3B,EAAQhkD,KAAKi9C,cAAcjkD,KAAKizB,GAChC3uC,EAAI0mE,EAAMvjE,OACV1C,EAAIimE,EAAMtjE,OACV0M,EAAI42D,EAAMC,OACZhgB,EAAMygB,iBAAiBpnE,KACzB0mE,EAAMvjE,OAASk7D,EAAWr+D,EAAIknE,GAAaj1D,OAEzC00C,EAAMygB,iBAAiB3mE,KACzBimE,EAAMtjE,OAASi7D,EAAW59D,EAAIymE,GAAaj1D,OAEzC00C,EAAMygB,iBAAiBt3D,KACzB42D,EAAMC,OAAStI,EAAWvuD,EAAIo3D,GAAaj1D,+CAQ/C,IAFA,IAAM21D,EAAqC,GACvCC,EAAqB,EAChBl5B,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZ86D,EAASx7C,KAAK+4C,cAAcz7D,GAC5Bm+D,EAASz7C,KAAK+4C,cAAch7D,GAEhCy9D,GACAA,IAAWC,MACXD,EAAO7K,eAEPuU,EAAcC,KAAwBziC,GAK1C,IAFA,IAAM0iC,EAAoC,GACtCC,EAAsB,EACjBphB,EAAQjkC,KAAK63C,YAAa5T,EAAOA,EAAQA,EAAM6Q,UACtD,MAAI7Q,EAAM0M,aAAqE,CAC7EyU,EAAeC,KAAyBphB,EACxCjkC,KAAK4wC,cACH3M,GACqB,GAArBA,EAAM0M,cAER,IAAK,IAAIpzD,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IACtDyiB,KAAK44C,qBAAqBr7D,GAAK,EAKrC,IAAK,IAAI0uC,EAAI,EAAGA,EAAIk5B,EAAoBl5B,IAAK,CAC3C,IAAMvJ,EAAUwiC,EAAcj5B,GACxB3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OAClBj1C,KAAK44C,qBAAqBt7D,IAAM4E,EAChC8d,KAAK44C,qBAAqB76D,IAAMmE,EAIlC,IAAK,IAAI3E,EAAI,EAAGA,EAAI8nE,EAAqB9nE,IAEvC,IADA,IAAM0mD,EAAQmhB,EAAe7nE,GACpBA,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IAAK,CAC3D,IAAM2E,EAAI8d,KAAK44C,qBAAqBr7D,GACpCyiB,KAAK84C,cAAcv7D,GAAK2E,EAAI,GAAM,EAAIyL,GAQ1C,IADA,IAAM23D,EAAiBxuD,GAAOkJ,KAAKxf,UAAY,EACtCmJ,EAAI,EAAGA,EAAI27D,EAAgB37D,IAAK,CAEvC,IADA,IAAI47D,GAAU,EACLt5B,EAAI,EAAGA,EAAIk5B,EAAoBl5B,IAAK,CAC3C,IAAMvJ,EAAUwiC,EAAcj5B,GACxB3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZyD,EAAI,EAAIu+B,EAAQuyB,OAEhBuQ,EAAMxlD,KAAK84C,cAAcx7D,GAEzBmoE,EAAMzlD,KAAK84C,cAAc/6D,GACzB2nE,EAAMD,EAAMthE,EACZwhE,EAAMH,EAAMrhE,EACdqhE,EAAME,IAER1lD,KAAK84C,cAAcx7D,GAAKooE,EACxBH,GAAU,GAERE,EAAME,IAER3lD,KAAK84C,cAAc/6D,GAAK4nE,EACxBJ,GAAU,GAGd,IAAKA,EACH,MAGJ,IAAK,IAAIhoE,EAAI,EAAGA,EAAI8nE,EAAqB9nE,IAEvC,IADA,IAAM0mD,EAAQmhB,EAAe7nE,GACpBA,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IAClDyiB,KAAK84C,cAAcv7D,GAAKoQ,GAC1BqS,KAAK84C,cAAcv7D,IAAMyiB,KAAKm3C,mBAE9Bn3C,KAAK84C,cAAcv7D,GAAK,oDAMN6f,GACxB,IAAMwoD,EAAW7O,EAAiB4H,WAChC3+C,KAAKo3C,kBAAoBh6C,EAAK5W,WAAW5I,EAAI,EAC7CoiB,KAAKo3C,kBAAoBh6C,EAAK5W,WAAWC,EAAI,GAEzCo/D,EAAW9O,EAAiB4H,WAChC3+C,KAAKo3C,kBAAoBh6C,EAAK7W,WAAW3I,EAAI,EAC7CoiB,KAAKo3C,kBAAoBh6C,EAAK7W,WAAWE,EAAI,GAGzC+3D,EAAa,EAEbC,EAAWz+C,KAAKs5C,cAActxD,MAE9B02D,EAAa9mD,GACjBoI,KAAKs5C,cAActgD,KACnBwlD,EACAC,EACAmH,EACA3O,GAAuB2H,iBAGnBC,EAAY5mD,GAChB+H,KAAKs5C,cAActgD,KACnBwlD,EACAC,EACAoH,EACA5O,GAAuB6H,iBAOzB,WAAWgH,GACT9lD,KACA4lD,EACAC,EACAnH,EACAG,oDAKF7+C,KAAKo8C,mBAAqB,EAC1B,IAAK,IAAI7+D,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCyiB,KAAKo8C,oBAAsBp8C,KAAK0wC,cAAc13C,KAAKzb,GAErDyiB,KAAK08C,+BAAgC,gDAIrC18C,KAAKq8C,gBAAkB,EACvB,IAAK,IAAIpY,EAAQjkC,KAAK63C,YAAa5T,EAAOA,EAAQA,EAAM6Q,UACtD90C,KAAKq8C,iBAAmBpY,EAAM0M,aAEhC3wC,KAAK+lD,4BAA6B,qCAGzBzoE,EAAWS,EAAWwqD,GAE/B,IAAMyd,EAAahmD,KAAK0wC,cAAc13C,KAChC+lD,EAAW/+C,KAAKsxC,iBAAiBt4C,KAEjCnY,EAAIU,GAAOU,MAAM88D,EAAShhE,GAAIghE,EAASzhE,GAAIy5D,EAAiBkP,gBAC5DC,EAAoB3kE,GAAO4D,MAAMtE,EAAGA,GAC1C,GAAI,EAAIqlE,GAAqBA,EAAoBlmD,KAAKq3C,kBAAmB,CACvE,IAAM8O,EAAO1nE,EAAUynE,GAEjBxjC,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKgH,KAAK+8C,gBAAgBxD,UAC/D72B,EAAQjiC,OAASnD,EACjBolC,EAAQhiC,OAAS3C,EACjB2kC,EAAQvmB,MAAQ6pD,EAAW1oE,GAAK0oE,EAAWjoE,GAC3C2kC,EAAQuyB,OAAS,EAAIiR,EAAoBC,EAAOnmD,KAAKo3C,kBACrD10B,EAAQx/B,OAAOtF,EAAIuoE,EAAOtlE,EAAEjD,EAC5B8kC,EAAQx/B,OAAOuD,EAAI0/D,EAAOtlE,EAAE4F,kDAMT8hD,GAErB,IAAMiW,EAAa,EACbC,EAAWz+C,KAAKs5C,cAActxD,MAEpCgY,KAAK+8C,gBAAgB/0D,MAAQ,EAC7B,IAAK,IAAI1K,EAAIkhE,EAAYpxD,EAAIoxD,EAAYlhE,EAAImhE,EAAUnhE,IAAK,CAE1D,IADA,IAAM8oE,EAAWrP,EAAiBsP,mBAAmBrmD,KAAKs5C,cAActgD,KAAK1b,GAAGg1D,IAAK,EAAG,GAC/Ev0D,EAAIT,EAAI,EAAGS,EAAI0gE,KAClB2H,EAAWpmD,KAAKs5C,cAActgD,KAAKjb,GAAGu0D,KADVv0D,IAIhCiiB,KAAKsmD,WACHtmD,KAAKs5C,cAActgD,KAAK1b,GAAGiS,MAC3ByQ,KAAKs5C,cAActgD,KAAKjb,GAAGwR,MAC3ByQ,KAAK+8C,iBAQT,IALA,IAAMwJ,EAAgBxP,EAAiBsP,mBACrCrmD,KAAKs5C,cAActgD,KAAK1b,GAAGg1D,KAC1B,EACD,GAEKllD,EAAIqxD,KACL8H,GAAiBvmD,KAAKs5C,cAActgD,KAAK5L,GAAGklD,KAD7BllD,KAUrB,IALA,IAAMo5D,EAAiBzP,EAAiBsP,mBACtCrmD,KAAKs5C,cAActgD,KAAK1b,GAAGg1D,IAC3B,EACA,GAEOv0D,EAAIqP,EAAGrP,EAAI0gE,KACd+H,EAAiBxmD,KAAKs5C,cAActgD,KAAKjb,GAAGu0D,KADpBv0D,IAI5BiiB,KAAKsmD,WACHtmD,KAAKs5C,cAActgD,KAAK1b,GAAGiS,MAC3ByQ,KAAKs5C,cAActgD,KAAKjb,GAAGwR,MAC3ByQ,KAAK+8C,uDAWAxU,GACXvoC,KAAKymD,uBAAuBle,mDAQNme,GAItB,IAFA,IAAM3H,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjC2tD,EAAW3mD,KAAKo3C,kBACbnrB,EAAI,EAAGA,EAAIjsB,KAAKs5C,cAActxD,QAASikC,EAAG,CACjD,IAAMjZ,EAAQhT,KAAKs5C,cAActgD,KAAKizB,GAEhC1oC,EAAIw7D,EADA/rC,EAAMzjB,OAEhByjB,EAAMs/B,IAAMyE,EAAiB4H,WAAWgI,EAAWpjE,EAAE3F,EAAG+oE,EAAWpjE,EAAEkD,0CAM3DigE,GACZ1mD,KAAK4mD,wBAAwBF,uCAGnBA,GAIVl+D,GACEwX,KAAKs5C,cAActgD,KACnB,EACAgH,KAAKs5C,cAActxD,MACnBivD,GAAuB4P,0DAIZte,cAEPue,EAAgB9mD,KAAK+mD,2BAC3B,GAAsB,OAAlBD,EAAJ,CAMA,IAAMpvD,EAAY,SAACgrB,GACjB,OACwE,WAArEA,EAAQvmB,SACR2qD,EAAcE,8BAA8BC,EAAMvkC,EAAQjiC,OAAQiiC,EAAQhiC,SAG/Esf,KAAK+8C,gBAAgBmK,SAASxvD,4DAGAyvD,GAE9B,GAAwB,OADAnnD,KAAKonD,6BAQ7B,MAFAD,EAAcl8D,WAAW+U,KAAK+8C,gBAAiB/8C,KAAK0wC,mBAE1CvoD,+DAGqBg/D,GAC/B,IAAME,EAAkBrnD,KAAKonD,6BAC7B,GAAwB,OAApBC,EAAJ,CAQA,IAAK,IAAIp7B,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,QAASikC,EAAG,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAKpCq7B,GAAa,EACfA,GAAa,EAEfH,EAAcI,WAAWD,GAGzBD,EAAgBG,6BAA6BxnD,KAAM0iB,GAiBvD,UAAUv6B,8CAOGs/D,GACbznD,KAAK0nD,cAAc1nD,KAAKs5C,eACxBt5C,KAAK2nD,YAAY3nD,KAAKs5C,eAEtB,IAAM6N,EAAgB,IAAIS,GAC1B5nD,KAAK6nD,gCAAgCV,GAErCnnD,KAAK8nD,aAAa9nD,KAAK+8C,iBACvB/8C,KAAK+nD,eAAe/nD,KAAK+8C,iBAEzB/8C,KAAKgoD,iCAAiCb,GAElCM,GACFznD,KAAK+8C,gBAAgBmK,SAASnQ,EAAiBkR,uFAIfC,GAElC,GAAwB,OADAloD,KAAKmoD,4BAQ7B,MAFAD,EAAWj9D,WAAW+U,KAAKg9C,oBAAqBh9C,KAAK0wC,mBAE3CvoD,mEAGyB+/D,GACnC,IAAMb,EAAkBrnD,KAAKmoD,4BAC7B,GAAwB,OAApBd,EAAJ,CAOA,IAAK,IAAIp7B,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GAMxC18B,GAAS,EACXA,GAAS,EAEX24D,EAAWX,WAAWh4D,GAGtB83D,EAAgBe,4BAA4BpoD,KAAM0iB,GAkBtD,UAAUv6B,oDAIV,IAAMkpB,EAAS0lC,EAAiBsR,0BAI1BH,EAAa,IAAII,GAGvB,GAFAtoD,KAAKuoD,oCAAoCL,GAErCloD,KAAKm9C,iBAAmB,EAE1B,IADA,IAAMzkD,EAAgBsH,KAAKrH,mBAClBpb,EAAI,EAAGA,EAAImb,EAAenb,IAGjCyiB,KAAKk4C,yBAAyBl/C,KAAKzb,GAAK,EACpCyiB,KAAKwxC,YAAcxxC,KAAKi4C,4BAA4Bj/C,KAAKzb,GAAK,IAChEyiB,KAAKm4C,gCAAgCn/C,KAAKzb,GAAK,GAIrDyiB,KAAKg9C,oBAAoBwL,SAAS,GAClCxoD,KAAKo9C,sBAAsBoL,SAAS,GAEpC,IAAMprD,EAAOiU,EACbrR,KAAK8gB,YAAY1jB,GAEwB,OAArC4C,KAAKyoD,8BACPzoD,KAAKyoD,4BAA8B,IAAIC,GAA4C1oD,OAErF,IAAMqO,EAAWrO,KAAKyoD,4BACtBp6C,EAAS82B,gBAAkBnlC,KAAK2oD,0BAChC3oD,KAAKghB,QAAQm5B,UAAU9rC,EAAUjR,GAE7B4C,KAAK23C,MAAM5B,oBACb/1C,KAAK4oD,6BAGP5oD,KAAK6oD,qCAAqCX,iCAMtCnwD,GACJ,IAAM+wD,EAAY/R,EAAiBgS,gBACnC,GAAqB,IAAjB/oD,KAAKxf,UAILwf,KAAKq4C,uBAAuBr/C,MAC9BgH,KAAKgpD,eAAejxD,KAElBiI,KAAKo8C,oBACPp8C,KAAKk5C,cAEHl5C,KAAK08C,+BACP18C,KAAKipD,yBAEHjpD,KAAK+lD,4BACP/lD,KAAKkpD,uBAEHlpD,KAAKu8C,UAGT,IACEv8C,KAAKmpD,iBAAmB,EACxBnpD,KAAKmpD,iBAAmBpxD,EAAKivC,mBAC7BhnC,KAAKmpD,mBACL,GACEnpD,KAAKwxC,YACP,IAAMtC,EAAU4Z,EAAUplE,KAAKqU,GAC/Bm3C,EAAQhjB,IAAMn0B,EAAKivC,mBACnBkI,EAAQjlB,QAAUlyB,EAAKivC,mBACvBhnC,KAAKq7C,gBAAe,GACpBr7C,KAAKopD,qBACLppD,KAAKqpD,mBACDrpD,KAAKq8C,iBACPr8C,KAAKspD,oBAEHtpD,KAAKo8C,oBACPp8C,KAAKupD,4CAEHvpD,KAAKiiD,YACPjiD,KAAKwpD,WAAWta,MAEdlvC,KAAKo8C,oBACPp8C,KAAKypD,oBAEHzpD,KAAKo8C,oBACPp8C,KAAK0pD,eAAexa,MAElBlvC,KAAKo8C,oBACPp8C,KAAK2pD,YAAYza,OAEflvC,KAAKo8C,oBACPp8C,KAAK4pD,aAAa1a,KAEhBlvC,KAAKq8C,iBACPr8C,KAAK6pD,WAAW3a,OAEdlvC,KAAKo8C,oBACPp8C,KAAK8pD,mBAEP9pD,KAAK+pD,aAAa7a,QACdlvC,KAAKo8C,oBACPp8C,KAAKgqD,oBAAoB9a,GAE3BlvC,KAAKiqD,cAAc/a,GACnBlvC,KAAKkqD,aAAahb,GACdlvC,KAAKo8C,mBAAqBrF,EAAiBoT,qBAC7CnqD,KAAKoqD,uBAIHpqD,KAAKo8C,oBACPp8C,KAAKqqD,aAAanb,KAEhBlvC,KAAKo8C,oBACPp8C,KAAKsqD,YAAYpb,GAEnBlvC,KAAKuqD,cAAcrb,KACflvC,KAAKq8C,iBACPr8C,KAAKwqD,yBAEHxqD,KAAKo8C,oBACPp8C,KAAKyqD,aAAavb,GAKpBlvC,KAAK0qD,eAAexb,KAChBlvC,KAAKq8C,iBACPr8C,KAAK2qD,WAAWzb,KAEdlvC,KAAKo8C,oBACPp8C,KAAK4qD,YAGP,IAAK,IAAIrtE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAEhCyiB,KAAKsxC,iBAAiBt4C,KAAKzb,GAAG8F,WAAW6rD,EAAQhjB,GAAIlsB,KAAKuxC,iBAAiBv4C,KAAKzb,4CAOvEwa,GACb,IAAMsZ,EAAS0lC,EAAiB8T,sBAC1B9L,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KAMjCoE,EAAOiU,EACbjU,EAAK5W,WAAW5I,GAAK+P,GACrByP,EAAK5W,WAAWC,GAAKkH,GACrByP,EAAK7W,WAAW3I,GAAK+P,GACrByP,EAAK7W,WAAWE,GAAKkH,GACrB,IAAK,IAAIpQ,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAAK,CACrC,IAAMoH,EAAI44D,EAAShgE,GACb4Y,EAAK4oD,EAASxhE,GAEdutE,EAAO30D,EAAGvY,EAAIma,EAAKm0B,GAAKvnC,EAAE/G,EAC1BmtE,EAAO50D,EAAG1P,EAAIsR,EAAKm0B,GAAKvnC,EAAE8B,EAEhC2W,EAAK5W,WAAW5I,EAAIE,EAAMsf,EAAK5W,WAAW5I,EAAGE,EAAMqY,EAAGvY,EAAGktE,IACzD1tD,EAAK5W,WAAWC,EAAI3I,EAAMsf,EAAK5W,WAAWC,EAAG3I,EAAMqY,EAAG1P,EAAGskE,IAEzD3tD,EAAK7W,WAAW3I,EAAII,EAAMof,EAAK7W,WAAW3I,EAAGI,EAAMmY,EAAGvY,EAAGktE,IACzD1tD,EAAK7W,WAAWE,EAAIzI,EAAMof,EAAK7W,WAAWE,EAAGzI,EAAMmY,EAAG1P,EAAGskE,IAEtB,OAAjC/qD,KAAKgrD,0BACPhrD,KAAKgrD,wBAA0B,IAAIC,GAAwCjrD,KAAMjI,IAEnF,IAAMsW,EAAWrO,KAAKgrD,wBACtB38C,EAAS25B,OAASjwC,EAClBiI,KAAKghB,QAAQm5B,UAAU9rC,EAAUjR,yCAMrBrF,GAGZ,IAFA,IAAMwlD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjCkyD,EAA0BlrD,KAAKmrD,2BAA2BpzD,GACvDxa,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAAK,CACrC,IAAMoH,EAAI44D,EAAShgE,GACb2Q,EAAK3M,GAAO4D,MAAMR,EAAGA,GACvBuJ,EAAKg9D,GAEPvmE,EAAE+R,QAAQI,GAAOo0D,EAA0Bh9D,0CAKpC6J,GASX,IARA,IAAMqzD,EAAYrU,EAAiBsU,uBAC7B9N,EAAWv9C,KAAKuxC,iBAAiBv4C,KAEjC7B,EAAU5V,GAAO87B,MACrBtlB,EAAKm0B,GAAKlsB,KAAK23C,MAAMl0B,aACrBzjB,KAAKghB,QAAQsqC,aACbF,GAEO7tE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCggE,EAAShgE,GAAG0lB,QAAQ9L,wCAMXY,GAiBX,IAhBA,IAAMsZ,EAAS0lC,EAAiBwU,oBAC1BC,EAAOzU,EAAiB0U,kBACxBC,EAAO3U,EAAiB4U,kBACxBC,EAAQ7U,EAAiB8U,mBACzBC,EAAQ/U,EAAiBgV,mBACzBC,EAAOjV,EAAiBkV,kBACxBC,EAAQnV,EAAiBoV,mBACzBC,EAAQrV,EAAiBsV,mBACzBC,EAAQvV,EAAiBwV,mBACzBC,EAAQzV,EAAiB0V,mBACzBC,EAAO3V,EAAiB4V,kBACxBC,EAAM7V,EAAiB8V,iBACvB9N,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KAG9Bzb,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAGsB,IAFxCyiB,KAAK0wC,cAAc13C,KAAKzb,GAEzBw5D,EAAiB+V,qBAC5BvP,EAAShgE,GAAGsG,UAKhB,IAFA,IAAM4pB,EAAOwiC,GAA0Bl4C,EAAKm0B,GACtC/S,EAAOnZ,KAAKyxC,kBACTxlB,EAAI,EAAGA,EAAIjsB,KAAK0T,aAAa1rB,MAAOikC,IAAK,CAChD,IAAMhY,EAAOjU,KAAK0T,aAAa1a,KAAKizB,GACpC,QAAIhY,EAAK9X,MAA2C,CAClD,IAAM7e,EAAI22B,EAAKxzB,OACT1C,EAAIk2B,EAAKvzB,OACT+iE,EAAK1E,EAASzhE,GACdomE,EAAK3E,EAAShhE,GAEdqf,EAAOiU,EAEb9vB,GAAOq7B,KAAK6mC,EAAIC,EAAItmD,EAAK5W,YAEzBjF,GAAOs7B,KAAK4mC,EAAIC,EAAItmD,EAAK7W,YAczB,IAbA,IAAMwmE,EAAS/sD,KAAK+4C,cAAcz7D,GAC5B0vE,EAAShtD,KAAK+4C,cAAch7D,GAE5BkvE,EAAKjtD,KAAKymB,kBAAkBsmC,EAAQzvE,EAAGmmE,EAAI+H,GAE3C0B,EAAKltD,KAAKymB,kBAAkBumC,EAAQjvE,EAAG2lE,EAAIgI,GAE3CyB,EAAM5rE,GAAOU,MAAMyhE,EAAID,EAAImI,GAE3BwB,EAAM7rE,GAAOU,MAAMirE,EAAID,EAAInB,GAE3BlX,EAAa50C,KAAK60C,0BAA0Bz3C,GAC9ChQ,UACIA,EAAIwnD,EAAWE,YAAc,GAAG,CACtC,IAAMjN,EAAKkX,EAAS3xD,GACdigE,EAASrtD,KAAK+4C,cAAc3rD,GAClC,GAAI2/D,IAAWM,GAAUL,IAAWK,EAAQ,CAE1C,IAAM3kB,EAAK1oC,KAAKymB,kBAAkB4mC,EAAQjgE,EAAGy6C,EAAImkB,GAO3CsB,EAAM/rE,GAAOU,MAAM4lD,EAAI4b,EAAIyI,GAE3BqB,EAAMhsE,GAAOU,MAAMymD,EAAIukB,EAAIb,GAC3Bj3D,EAAK5T,GAAOkV,QAAQ22D,EAAKG,GACzB14D,EAAKtT,GAAOkV,QAAQ02D,EAAKI,GAAOhsE,GAAOkV,QAAQ62D,EAAKF,GACpDI,EAAKjsE,GAAOkV,QAAQ02D,EAAKG,GAC3BvhE,SAAWpC,SAET8jE,EAAMnB,EACVoB,EAAMlB,EACR,GAAW,IAAPr3D,EAAU,CACZ,GAAW,IAAPN,EACF,SAGF,MADAlL,GAAK6jE,EAAK34D,IACC,GAAKlL,EAAI8jB,GAClB,SAOF,GAJAlsB,GAAO4qB,UAAUghD,EAAKxjE,EAAGyjE,EAAKK,GAE9BlsE,GAAO4qB,UAAUmhD,EAAK3jE,EAAG4jE,EAAKG,MAC9B3hE,EAAIxK,GAAO4D,MAAMsoE,EAAKC,GAAOnsE,GAAO4D,MAAMsoE,EAAKA,KACpC,GAAK1hE,GAAK,GACnB,aAEG,CACL,IAAM0W,EAAM5N,EAAKA,EAAK,EAAI24D,EAAKr4D,EAC/B,GAAIsN,EAAM,EACR,SAEF,IAAMkrD,EAAU72D,GAAO2L,GACnBpY,IAAOwK,EAAK84D,IAAY,EAAIx4D,GAC5BhK,IAAO0J,EAAK84D,IAAY,EAAIx4D,GAEhC,GAAI9K,EAAKc,EAAI,CACX,IAAM7C,EAAM+B,EACZA,EAAKc,EACLA,EAAK7C,EASP,GAPAqB,EAAIU,EAEJ9I,GAAO4qB,UAAUghD,EAAKxjE,EAAGyjE,EAAKK,GAE9BlsE,GAAO4qB,UAAUmhD,EAAK3jE,EAAG4jE,EAAKG,GAE9B3hE,EAAIxK,GAAO4D,MAAMsoE,EAAKC,GAAOnsE,GAAO4D,MAAMsoE,EAAKA,KACzC9jE,GAAK,GAAKA,EAAI8jB,GAAQ1hB,GAAK,GAAKA,GAAK,GAAI,CAE7C,MADApC,EAAIwB,IACO,GAAKxB,EAAI8jB,GAClB,SAQF,GALAlsB,GAAO4qB,UAAUghD,EAAKxjE,EAAGyjE,EAAKK,GAE9BlsE,GAAO4qB,UAAUmhD,EAAK3jE,EAAG4jE,EAAKG,MAE9B3hE,EAAIxK,GAAO4D,MAAMsoE,EAAKC,GAAOnsE,GAAO4D,MAAMsoE,EAAKA,KACpC,GAAK1hE,GAAK,GACnB,UAON,IAAMu+C,EAAKoiB,EACXpiB,EAAG1sD,EAAIqvE,EAAGrvE,EAAImO,EAAIqhE,EAAIxvE,EAAI8qD,EAAG9qD,EAC7B0sD,EAAG7jD,EAAIwmE,EAAGxmE,EAAIsF,EAAIqhE,EAAI3mE,EAAIiiD,EAAGjiD,EAE7B,IAAMiW,EAAInb,GAAO87B,MAAMlE,EAAMmxB,EAAIsiB,GACjC,GAAIS,GAAUrtD,KAAK4tD,aAAaP,GAAS,CAGvC,IAAMl0C,EAAOk0C,EAAOj/B,UACdy/B,GAAUR,EAAOS,aACnB30C,EAAO,GAETk0C,EAAO5oC,iBAAiBphC,WAAW,EAAI81B,EAAMzc,GAE3CmxD,GAAU,IAEZR,EAAO1oC,mBACLpjC,GAAOkV,QAAQlV,GAAOU,MAAM4lD,EAAIwlB,EAAO79C,YAAajuB,GAAOE,MAAOib,GAAKmxD,SAI3EtQ,EAASnwD,GAAG6V,QAAQqnC,GAKtBtqC,KAAK+tD,mBAAmB3gE,EAAGsP,EAAEhG,SAASqB,EAAKkyB,yDAoBjClyB,GAClBiI,KAAK24C,uBAAyB34C,KAAKq5C,cAAcr5C,KAAK24C,wBAetD,IAdA,IAAMqV,EAAmBhuD,KAAKiuD,oBAAoBl2D,GAC5Cm2D,EAAoBluD,KAAK23C,MAAMlB,uBAAyBuX,EACxDG,EAAcve,GAAyBoe,EACvCI,EAAapuD,KAAK23C,MAAMjB,yBAWrB/sD,EAAI,EAAGA,EAAIqW,KAAK23C,MAAMhB,yBAA0BhtD,IAAK,CAE5D,IAAK,IAAIpM,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCyiB,KAAK44C,qBAAqBr7D,GAAK,EAEjC,IAAK,IAAI0uC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,QAAIvJ,EAAQvmB,MAAkD,CAC5D,IAAM7e,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OAClBj1C,KAAK44C,qBAAqBt7D,IAAM4E,EAAI8d,KAAK24C,uBAAuB56D,GAChEiiB,KAAK44C,qBAAqB76D,IAAMmE,EAAI8d,KAAK24C,uBAAuBr7D,IAGpE,IAAK,IAAIC,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAAK,CACrC,IAAM2E,EAAI8d,KAAK04C,eAAen7D,GAC9B,QAAIyiB,KAAK0wC,cAAc13C,KAAKzb,GAA+C,CACzE,IACMkyB,GADKzP,KAAK44C,qBAAqBr7D,GACrB2wE,GAAqBhsE,EAAIytD,MAA0BztD,EAAIksE,GACvEpuD,KAAK24C,uBAAuBp7D,GAAKY,EAAQsxB,EAAG,EAAK0+C,QAEjDnuD,KAAK24C,uBAAuBp7D,GAAK,4CAUvC,IAAK,IAAI0uC,EAAI,EAAGA,EAAIjsB,KAAKxf,QAASyrC,IAChCjsB,KAAK04C,eAAezsB,GAAK,EAE3B,IAAK,IAAIA,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MACZrN,EAAIwgC,EAAQuyB,OAClBj1C,KAAK04C,eAAep7D,IAAM4E,EAE5B,IAAK,IAAI+pC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OAClBj1C,KAAK04C,eAAep7D,IAAM4E,EAC1B8d,KAAK04C,eAAe36D,IAAMmE,yCAIhB6V,GAQZ,IAPA,IAAM60D,EAAM7V,EAAiBsX,kBACvBtP,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KAEjCg1D,EAAmBhuD,KAAKiuD,oBAAoBl2D,GAC5Cm2D,EAAoBluD,KAAK23C,MAAM1B,iBAAmB+X,EAClDG,EAAcve,GAAyBoe,EACpCzwE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAAK,CACrC,IACMkyB,EAAIy+C,EAAoBlwE,EAAM,EAD1BgiB,KAAK04C,eAAen7D,GACeoyD,IAC7C3vC,KAAK44C,qBAAqBr7D,GAAKO,EAAM2xB,EAAG0+C,GAG1C,GAAInuD,KAAKo8C,mBAAqBrF,EAAiBuX,kBAC7C,IAAK,IAAI/wE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAC5ByiB,KAAK0wC,cAAc13C,KAAKzb,GAAKw5D,EAAiBuX,oBAChDtuD,KAAK44C,qBAAqBr7D,GAAK,GAKrC,QAAIyiB,KAAKo8C,mBAEP,IAAK,IAAI7+D,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,SAC5ByiB,KAAK0wC,cAAc13C,KAAKzb,KAC1ByiB,KAAK44C,qBAAqBr7D,IAAMyiB,KAAK24C,uBAAuBp7D,IAOlE,IAFA,IAAMgxE,EAAsBx2D,EAAKm0B,IAAMlsB,KAAK23C,MAAM19B,QAAUja,KAAKm3C,oBAC3DzF,EAAW1xC,KAAKwuD,qBACbviC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MACZxR,EAAI2kC,EAAQjB,KACZv/B,EAAIwgC,EAAQuyB,OACZ95B,EAAIuH,EAAQvJ,KACZ36B,EAAIkkC,EAAQx/B,OACZK,EAAIw7D,EAASzhE,GACbmyB,EAAIzP,KAAK44C,qBAAqBt7D,GAAK4wE,EAAoBhsE,EAEvDwa,EAAInb,GAAO87B,MAAMkxC,EAAsBrsE,EAAIi5B,EAAI1L,EAAGjxB,EAAGouE,GAE3DrP,EAASjgE,GAAGgG,WAAWouD,EAAUh1C,GACjC3e,EAAEozD,mBAAmBz0C,EAAGnZ,GAAG,GAE7B,IAAK,IAAI0oC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OACZusB,EAAIzP,KAAK44C,qBAAqBt7D,GAAK0iB,KAAK44C,qBAAqB76D,GAE7D2e,EAAInb,GAAO87B,MAAMkxC,EAAsBrsE,EAAIutB,EAAGjxB,EAAGouE,GAEvDrP,EAASjgE,GAAGgI,QAAQoX,GAEpB6gD,EAASx/D,GAAGklB,QAAQvG,yCAMX3E,GASX,IARA,IAAMiX,EAAM+nC,EAAiB0X,iBACvB7B,EAAM7V,EAAiB2X,iBACvB3P,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KAEjCuqB,EAAgBvjB,KAAK23C,MAAM9B,gBAC3B8Y,EAAmB,EAAI3uD,KAAK4uD,oBAAoB72D,GAChD25C,EAAW1xC,KAAKwuD,qBACbviC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MACZxR,EAAI2kC,EAAQjB,KACZv/B,EAAIwgC,EAAQuyB,OACZ95B,EAAIuH,EAAQvJ,KACZ36B,EAAIkkC,EAAQx/B,OACZK,EAAIw7D,EAASzhE,GAEbqH,EAAIpD,GAAOU,MAAMlE,EAAE0pC,gCAAgClkC,EAAGhC,GAAOE,MAAO87D,EAASjgE,GAAI0xB,GACjFnT,EAAKta,GAAO4D,MAAMR,EAAGnG,GAC3B,GAAIqd,EAAK,EAAG,CACV,IAAM2gD,EAAUx+D,EAAMulC,EAAgBrhC,EAAGpE,GAAO6wE,EAAmB9yD,EAAI,KAEjEa,EAAInb,GAAO87B,MAAMm/B,EAAUrhC,EAAItf,EAAIrd,EAAGouE,GAE5CrP,EAASjgE,GAAG+F,WAAWquD,EAAUh1C,GAEjC3e,EAAEozD,mBAAmBz0C,EAAErX,UAAW9B,GAAG,IAGzC,IAAK,IAAI0oC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OAEZyB,EAAIpD,GAAOU,MAAMs7D,EAASx/D,GAAIw/D,EAASjgE,GAAI0xB,GAC3CnT,EAAKta,GAAO4D,MAAMR,EAAGnG,GAC3B,GAAIqd,EAAK,EAAG,CAEV,IAAM2gD,EAAUx+D,EAAMulC,EAAgBrhC,EAAGpE,GAAO6wE,EAAmB9yD,EAAI,KAEjEa,EAAInb,GAAO87B,MAAMm/B,EAAU3gD,EAAIrd,EAAGouE,GAExCrP,EAASjgE,GAAG2lB,QAAQvG,GAEpB6gD,EAASx/D,GAAGuH,QAAQoX,iDAuBxB,IAdA,IAAMjb,EAAOs1D,EAAiB8X,uBACxBrqE,EAAOuyD,EAAiB+X,uBACxBvP,EAAMxI,EAAiBgY,sBACvB//C,EAAM+nC,EAAiBiY,sBACvBpmB,EAAW,CAAC,GAChBqmB,EAAc,CAAC,GACfC,EAAmB,CAAC,GAChBrmB,EAAW,CAAC,GAChBsmB,EAAc,CAAC,GACfC,EAAmB,CAAC,GAGhBrQ,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCwjD,EAAUx8C,KAAK23C,MAAM9B,gBAClB5pB,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MACZw9D,EAAS/sD,KAAK+4C,cAAcz7D,GAClC,GAAIyvE,GAAU/sD,KAAK4tD,aAAab,GAAS,CACvC,IAAMhvE,EAAI2kC,EAAQjB,KACZjjC,EAAIkkC,EAAQx/B,OACZhB,EAAIwgC,EAAQuyB,OACZ1xD,EAAIw7D,EAASzhE,GAEbqH,EAAIpD,GAAOU,MACflE,EAAE0pC,gCAAgClkC,EAAG9B,GACrCsrE,EAAOtlC,gCAAgClkC,EAAGiB,GAC1CwqB,GAEInT,EAAKta,GAAO4D,MAAMR,EAAGnG,GAC3B,GAAIqd,EAAK,EAAG,CAIVmE,KAAKqvD,6CACHzmB,EACAqmB,EACAC,GACA,EACAnC,EACAzvE,EACAiG,EACA/E,GAIFwhB,KAAKsvD,qBACHzmB,EACAsmB,EACAC,EACArxE,EAAEqwC,UACFrwC,EAAE+vE,aAAe/vE,EAAEqwC,UAAYrwC,EAAEwxE,iBAAiBvuE,gBAClDjD,EAAE0f,iBACFla,EACA/E,GAGF,IAAMke,EACJ8/C,EACA1+D,EAAMoE,EAAG,GACT8d,KAAKwvD,sBACH5mB,EAAS,GACTqmB,EAAY,GACZC,EAAiB,GACjBrmB,EAAS,GACTsmB,EAAY,GACZC,EAAiB,GACjBvzD,GAGJmE,KAAKyvD,aACH7mB,EAAS,GACTqmB,EAAY,GACZC,EAAiB,IACjB,EACAnC,EACAzvE,EACAof,EACAle,GAGFT,EAAEozD,mBAAmB5vD,GAAO87B,OAAO3gB,EAAGle,EAAG+C,GAAOE,MAAO8B,GAAG,KAIhE,IAAK,IAAI0oC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZlC,EAAIkkC,EAAQx/B,OACZhB,EAAIwgC,EAAQuyB,OACZ8X,EAAS/sD,KAAK+4C,cAAcz7D,GAC5B0vE,EAAShtD,KAAK+4C,cAAch7D,GAC5B2xE,EAAS1vD,KAAK4tD,aAAab,GAC3B4C,EAAS3vD,KAAK4tD,aAAaZ,GACjC,GAAID,IAAWC,IAAW0C,GAAUC,GAAS,CAE3C,IAAMpsE,EAAIhC,GAAOiC,MAAMu7D,EAASzhE,GAAIyhE,EAAShhE,GAAIwhE,GAE3C56D,EAAIpD,GAAOU,MACf+d,KAAKymB,kBAAkBumC,EAAQjvE,EAAGwF,EAAG9B,GACrCue,KAAKymB,kBAAkBsmC,EAAQzvE,EAAGiG,EAAGiB,GACrCwqB,GAEInT,EAAKta,GAAO4D,MAAMR,EAAGnG,GAC3B,GAAIqd,EAAK,EAAG,CAEVmE,KAAKqvD,6CACHzmB,EACAqmB,EACAC,EACAQ,EACA3C,EACAzvE,EACAiG,EACA/E,GAGFwhB,KAAKqvD,6CACHxmB,EACAsmB,EACAC,EACAO,EACA3C,EACAjvE,EACAwF,EACA/E,GAGF,IAAMke,EACJ8/C,EACAt6D,EACA8d,KAAKwvD,sBACH5mB,EAAS,GACTqmB,EAAY,GACZC,EAAiB,GACjBrmB,EAAS,GACTsmB,EAAY,GACZC,EAAiB,GACjBvzD,GAGJmE,KAAKyvD,aACH7mB,EAAS,GACTqmB,EAAY,GACZC,EAAiB,GACjBQ,EACA3C,EACAzvE,EACAof,EACAle,GAGFwhB,KAAKyvD,aACH5mB,EAAS,GACTsmB,EAAY,GACZC,EAAiB,GACjBO,EACA3C,EACAjvE,GACC2e,EACDle,kDAqBR,IARA,IAAMwwB,EAAM+nC,EAAiB6Y,sBACvBhD,EAAM7V,EAAiB8Y,sBACvBtS,EAAWv9C,KAAKuxC,iBAAiBv4C,KAIjC+lD,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjC04C,EAAW1xC,KAAKwuD,qBACbviC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MAClB,GAAIyQ,KAAK0wC,cAAc13C,KAAK1b,GAAKy5D,EAAiBoT,oBAAqB,CACrE,IAAMpsE,EAAI2kC,EAAQjB,KACZtG,EAAIuH,EAAQvJ,KACZ36B,EAAIkkC,EAAQx/B,OACZK,EAAIw7D,EAASzhE,GAEbqH,EAAIpD,GAAOU,MAAMlE,EAAE0pC,gCAAgClkC,EAAGhC,GAAOE,MAAO87D,EAASjgE,GAAI0xB,GAEjFnT,EAAKta,GAAO4D,MAAMR,EAAGnG,GAC3B,GAAIqd,EAAK,EAAG,CAEV,IAAMa,EAAInb,GAAO87B,MAAM,GAAMlC,EAAItf,EAAIrd,EAAGouE,GAExCrP,EAASjgE,GAAG+F,WAAWquD,EAAUh1C,GAEjC3e,EAAEozD,mBAAmBz0C,EAAErX,UAAW9B,GAAG,0CAW3C,IADA,IAAMg6D,EAAWv9C,KAAKuxC,iBAAiBv4C,KAC9Bzb,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,MAC5ByiB,KAAK0wC,cAAc13C,KAAKzb,IAC1BggE,EAAShgE,GAAGsG,6CAKPkU,GAOT,IANA,IAAM+3D,EAAa/Y,EAAiBgZ,sBAC9BC,EAAajZ,EAAiBkZ,sBAC9B3V,EAAcvD,EAAiBmZ,uBAC/BC,EAAsBpZ,EAAiBqZ,+BACvCrR,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KAC9BirC,EAAQjkC,KAAK63C,YAAa5T,EAAOA,EAAQA,EAAM6Q,UACtD,KAAI7Q,EAAM0M,aAA0D,CAClE1M,EAAM4M,mBAEN,IAAMxrC,EAAW2qD,EACjB3qD,EAASjC,SAASrL,EAAKm0B,GAAK+X,EAAMtf,mBAElC,IAAMvf,EAAW7jB,GAAOskB,MACtBo+B,EAAM8M,SACNxvD,GAAOU,MACLV,GAAO87B,MAAMtlB,EAAKm0B,GAAI+X,EAAMxf,iBAAkBljC,GAAOE,MACrDL,GAAM+N,MAAMkW,EAAU4+B,EAAM8M,SAAUxvD,GAAOiD,MAC7CjD,GAAOE,MAETquE,GAEIt2C,EAAY8gC,EAClB9gC,EAAU62C,oBAAoBjrD,EAAUC,GAExC1jB,GAAY2uE,MAAM92C,EAAWyqB,EAAM+M,YAAa/M,EAAM+M,aACtD,IAAMuf,EAAoBJ,EAC1BI,EAAkBhtE,EAAE3F,EAAIma,EAAKkyB,OAASzQ,EAAUj2B,EAAE3F,EAClD2yE,EAAkBhtE,EAAEkD,EAAIsR,EAAKkyB,OAASzQ,EAAUj2B,EAAEkD,EAClD8pE,EAAkBjvE,EAAEyK,EAAIgM,EAAKkyB,OAASzQ,EAAUl4B,EAAEyK,EAClDwkE,EAAkBjvE,EAAE8L,EAAI2K,EAAKkyB,QAAUzQ,EAAUl4B,EAAE8L,EAAI,GACvD,IAAK,IAAI7P,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IAEtDoE,GAAYC,MAAM2uE,EAAmBxR,EAASxhE,GAAIggE,EAAShgE,0CAWtDwa,GASX,IARA,IAAMy4D,EAAOzZ,EAAiB0Z,kBACxBC,EAAO3Z,EAAiB4Z,kBACxBC,EAAO7Z,EAAiB8Z,kBACxB9hD,EAAMgoC,EAAiB+Z,iBACvBrvE,EAAOs1D,EAAiBga,kBACxBhS,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjCk9C,EAAkBn+C,EAAKkyB,OAASjqB,KAAK23C,MAAMzB,gBACxCjqB,EAAI,EAAGA,EAAIjsB,KAAKi9C,cAAcj1D,MAAOikC,IAAK,CACjD,IAAM+3B,EAAQhkD,KAAKi9C,cAAcjkD,KAAKizB,GACtC,MAAI+3B,EAAM7nD,MAA2C,CACnD,IAAM7e,EAAI0mE,EAAMvjE,OACV1C,EAAIimE,EAAMtjE,OACV0M,EAAI42D,EAAMC,OACV+M,EAAKhN,EAAMP,GACXwN,EAAKjN,EAAMN,GACXwN,EAAKlN,EAAMnc,GAEX4b,EAAK+M,EAAK9sE,KAAKq7D,EAASzhE,IAExBomE,EAAKgN,EAAKhtE,KAAKq7D,EAAShhE,IAExB8pD,EAAK+oB,EAAKltE,KAAKq7D,EAAS3xD,IACxB6/D,EAAK1P,EAASjgE,GACd4vE,EAAK3P,EAASx/D,GACd2qD,EAAK6U,EAASnwD,GAEpBq2D,EAAGpgE,WAAW0U,EAAKm0B,GAAI+gC,GAEvBvJ,EAAGrgE,WAAW0U,EAAKm0B,GAAIghC,GAEvBrlB,EAAGxkD,WAAW0U,EAAKm0B,GAAIwc,GAEvB,IAAMwb,GAAcT,EAAG7lE,EAAI8lE,EAAG9lE,EAAIiqD,EAAGjqD,GAAK,EACpCumE,GAAcV,EAAGh9D,EAAIi9D,EAAGj9D,EAAIohD,EAAGphD,GAAK,EAE1Cg9D,EAAG7lE,GAAKsmE,EACRT,EAAGh9D,GAAK09D,EAERT,EAAG9lE,GAAKsmE,EACRR,EAAGj9D,GAAK09D,EAERtc,EAAGjqD,GAAKsmE,EACRrc,EAAGphD,GAAK09D,EAER,IAAMhgE,EAAI4qB,EACV5qB,EAAE4H,EAAIxK,GAAOkV,QAAQu6D,EAAIvN,GAAMliE,GAAOkV,QAAQw6D,EAAIvN,GAAMniE,GAAOkV,QAAQy6D,EAAIrpB,GAC3E1jD,EAAEiJ,EAAI7L,GAAO4D,MAAM6rE,EAAIvN,GAAMliE,GAAO4D,MAAM8rE,EAAIvN,GAAMniE,GAAO4D,MAAM+rE,EAAIrpB,GACrE,IACIspB,EAAO1yE,EADA0F,EAAE4H,EAAI5H,EAAE4H,EAAI5H,EAAEiJ,EAAIjJ,EAAEiJ,GAE1B6T,SAASkwD,KACZA,EAAO,cAEThtE,EAAE4H,GAAKolE,EACPhtE,EAAEiJ,GAAK+jE,EAEP,IAAMvqD,EAAWsvC,EAAkB8N,EAAMp9C,SAEzCxlB,GAAM+N,MAAMhL,EAAG6sE,EAAIvvE,GACnBF,GAAOU,MAAMR,EAAMgiE,EAAIhiE,GACvBF,GAAO87B,MAAMzW,EAAUnlB,EAAMA,GAC7BwrE,EAAGhqD,QAAQxhB,GAEXL,GAAM+N,MAAMhL,EAAG8sE,EAAIxvE,GACnBF,GAAOU,MAAMR,EAAMiiE,EAAIjiE,GACvBF,GAAO87B,MAAMzW,EAAUnlB,EAAMA,GAC7ByrE,EAAGjqD,QAAQxhB,GAEXL,GAAM+N,MAAMhL,EAAG+sE,EAAIzvE,GACnBF,GAAOU,MAAMR,EAAMomD,EAAIpmD,GACvBF,GAAO87B,MAAMzW,EAAUnlB,EAAMA,GAC7BinD,EAAGzlC,QAAQxhB,yCAWLsW,GAQV,IAPA,IAAMy4D,EAAOzZ,EAAiBqa,iBACxBV,EAAO3Z,EAAiBsa,iBACxBrQ,EAAMjK,EAAiBua,gBACvB1E,EAAM7V,EAAiBwa,gBACvBxS,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjCm9C,EAAiBp+C,EAAKkyB,OAASjqB,KAAK23C,MAAMxB,eACvClqB,EAAI,EAAGA,EAAIjsB,KAAK0T,aAAa1rB,MAAOikC,IAAK,CAChD,IAAMhY,EAAOjU,KAAK0T,aAAa1a,KAAKizB,GACpC,KAAIhY,EAAK9X,MAA0C,CAEjD,IAAM7e,EAAI22B,EAAKxzB,OAET1C,EAAIk2B,EAAKvzB,OAET+iE,EAAK+M,EAAK9sE,KAAKq7D,EAASzhE,IAExBomE,EAAKgN,EAAKhtE,KAAKq7D,EAAShhE,IAExBkvE,EAAK1P,EAASjgE,GAEd4vE,EAAK3P,EAASx/D,GAEpB0lE,EAAGpgE,WAAW0U,EAAKm0B,GAAI+gC,GAEvBvJ,EAAGrgE,WAAW0U,EAAKm0B,GAAIghC,GAEvB,IAAMrsE,EAAIU,GAAOU,MAAMyhE,EAAID,EAAIzC,GAEzBwQ,EAAKv9C,EAAKxxB,SAEVgvE,EAAK5wE,EAAEmE,SAEP4hB,EAAWuvC,EAAiBliC,EAAKrN,SAEjClK,EAAInb,GAAO87B,MAAOzW,GAAY4qD,EAAKC,GAAOA,EAAI5wE,EAAG+rE,GAEvDK,EAAG3nE,QAAQoX,GAEXwwD,EAAGjqD,QAAQvG,0CAUJ3E,GAMX,IALA,IAAM25D,EAAmB3a,EAAiB4a,8BACpCC,EAAM7a,EAAiB8a,iBACvBjF,EAAM7V,EAAiB+a,iBACvBvU,EAAWv9C,KAAKuxC,iBAAiBv4C,KAE9Bzb,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCyiB,KAAK64C,sBAAsBt7D,GAAK,IAAIgE,GACpCye,KAAK64C,sBAAsBt7D,GAAGsG,UAEhC,IAAK,IAAIooC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,OAAIvJ,EAAQvmB,MAA2C,CACrD,IAAM7e,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OAEZ6uE,EAAiBxwE,GAAO87B,OAAO,EAAIn7B,GAAKA,EAAG1D,EAAGkzE,GAEpD1xD,KAAK64C,sBAAsBv7D,GAAGgI,QAAQysE,GAEtC/xD,KAAK64C,sBAAsB96D,GAAGklB,QAAQ8uD,IAO1C,IAJA,IAAMC,EAAmBhyD,KAAK4uD,oBAAoB72D,GAC5Ck+C,EAAmBj2C,KAAK23C,MAAMtB,+BAAiC2b,EAC/DC,EAAiBjyD,KAAK23C,MAAMrB,6BAA+B0b,EAC3DE,EAAuBriB,GAAsBmiB,EAC1C/lC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,OAAIvJ,EAAQvmB,MAA2C,CACrD,IAAM7e,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OACZusB,EAAIzP,KAAK04C,eAAep7D,GAAK0iB,KAAK04C,eAAe36D,GAEjDgO,EAAIxK,GAAOU,MAAM+d,KAAK64C,sBAAsB96D,GAAIiiB,KAAK64C,sBAAsBv7D,GAAIs0E,GAC/EO,EACJr0E,EACEm4D,GAAoBxmC,EAAI,GAAKwiD,EAAiB1wE,GAAO4D,MAAM4G,EAAGvN,GAC9D0zE,GACEhwE,EAEAwa,EAAInb,GAAO87B,MAAM80C,EAAI3zE,EAAGouE,GAE9BrP,EAASjgE,GAAGgI,QAAQoX,GAEpB6gD,EAASx/D,GAAGklB,QAAQvG,4CAgBxB,IANA,IAAMsS,EAAM+nC,EAAiBqb,iBACvBxF,EAAM7V,EAAiBsb,iBACvBtT,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjCo9C,EAAkBp2C,KAAK23C,MAAMvB,gBAC7B1E,EAAW1xC,KAAKwuD,qBACbviC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MAClB,MAAIyQ,KAAK0wC,cAAc13C,KAAK1b,GAAwC,CAClE,IAAMS,EAAI2kC,EAAQjB,KACZv/B,EAAIwgC,EAAQuyB,OACZ95B,EAAIuH,EAAQvJ,KACZ51B,EAAIw7D,EAASzhE,GAEbqH,EAAIpD,GAAOU,MAAMlE,EAAE0pC,gCAAgClkC,EAAGhC,GAAOE,MAAO87D,EAASjgE,GAAI0xB,GAEjFtS,EAAInb,GAAO87B,MAAM+4B,EAAkBj7B,EAAIj5B,EAAGyC,EAAGioE,GAEnDrP,EAASjgE,GAAG+F,WAAWquD,EAAUh1C,GAEjC3e,EAAEozD,mBAAmBz0C,EAAErX,UAAW9B,GAAG,IAGzC,IAAK,IAAI0oC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,MAAIvJ,EAAQvmB,MAA2C,CACrD,IAAM7e,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZwB,EAAIwgC,EAAQuyB,OAEZtwD,EAAIpD,GAAOU,MAAMs7D,EAASx/D,GAAIw/D,EAASjgE,GAAI0xB,GAE3CtS,EAAInb,GAAO87B,MAAM+4B,EAAkBl0D,EAAGyC,EAAGioE,GAE/CrP,EAASjgE,GAAG2lB,QAAQvG,GAEpB6gD,EAASx/D,GAAGuH,QAAQoX,4CAQX3E,GAIb,IAHA,IAAM60D,EAAM7V,EAAiBub,mBACvB/U,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjC88C,EAAoB91C,KAAK23C,MAAM7B,kBAAoB91C,KAAK4uD,oBAAoB72D,GACzEk0B,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,QAAIvJ,EAAQvmB,MAA6C,CACvD,IAAM7e,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OAClB,GAAIsf,KAAK+4C,cAAcz7D,KAAO0iB,KAAK+4C,cAAch7D,GAAI,CACnD,IAAMmE,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OAEZwZ,EAAInb,GAAO87B,MAAMy4B,EAAoB5zD,EAAG1D,EAAGouE,GAEjDrP,EAASjgE,GAAGgI,QAAQoX,GAEpB6gD,EAASx/D,GAAGklB,QAAQvG,0CAQhB3E,GAOV,IANA,IAAM60D,EAAM7V,EAAiBwb,gBACvBxT,EAAW/+C,KAAKsxC,iBAAiBt4C,KACjCukD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjCu9C,EAAiBv2C,KAAK23C,MAAMpB,eAAiBv2C,KAAK4uD,oBAAoB72D,GACtEy6D,EAAY,EAAM9iB,GAClBgC,EAAW1xC,KAAKwuD,qBACbviC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GACxC3uC,EAAIolC,EAAQnzB,MAClB,MAAIyQ,KAAK0wC,cAAc13C,KAAK1b,GAAuC,CACjE,IAAM4E,EAAIwgC,EAAQuyB,OAClB,GAAI/yD,EAAIswE,EAAW,CACjB,IAAMz0E,EAAI2kC,EAAQjB,KACZtG,EAAIuH,EAAQvJ,KACZ51B,EAAIw7D,EAASzhE,GACbkB,EAAIkkC,EAAQx/B,OACZwZ,EAAInb,GAAO87B,MAAMk5B,EAAiBp7B,GAAKj5B,EAAIswE,GAAYh0E,EAAGouE,GAChErP,EAASjgE,GAAGgG,WAAWouD,EAAUh1C,GACjC3e,EAAEozD,mBAAmBz0C,EAAGnZ,GAAG,KAIjC,IAAK,IAAI0oC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1C,MAAIvJ,EAAQvmB,MAA0C,CACpD,IAAMja,EAAIwgC,EAAQuyB,OAClB,GAAI/yD,EAAIswE,EAAW,CACjB,IAAMl1E,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OACZlC,EAAIkkC,EAAQx/B,OACZwZ,EAAInb,GAAO87B,MAAMk5B,GAAkBr0D,EAAIswE,GAAYh0E,EAAGouE,GAC5DrP,EAASjgE,GAAGgI,QAAQoX,GACpB6gD,EAASx/D,GAAGklB,QAAQvG,yCAQjB3E,GACT,IAAM60D,EAAM7V,EAAiB0b,eACvBlV,EAAWv9C,KAAKuxC,iBAAiBv4C,KAEvCgH,KAAK84C,cAAgB94C,KAAKq5C,cAAcr5C,KAAK84C,eAE7C,IADA,IAAMtC,EAAmBz+C,EAAKkyB,OAASjqB,KAAK23C,MAAMnB,iBACzCvqB,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OAClB,GAAIsf,KAAK+4C,cAAcz7D,KAAO0iB,KAAK+4C,cAAch7D,GAAI,CACnD,IAAMmE,EAAIwgC,EAAQuyB,OACZz2D,EAAIkkC,EAAQx/B,OACZusB,EAAIzP,KAAK84C,cAAcx7D,GAAK0iB,KAAK84C,cAAc/6D,GAC/C2e,EAAInb,GAAO87B,MAAMm5B,EAAmB/mC,EAAIvtB,EAAG1D,EAAGouE,GACpDrP,EAASjgE,GAAGgI,QAAQoX,GACpB6gD,EAASx/D,GAAGklB,QAAQvG,wCAOf3E,GAGT,IAFA,IAAMwlD,EAAWv9C,KAAKuxC,iBAAiBv4C,KACjC05D,EAAmB36D,EAAKm0B,GAAKlsB,KAAKwuD,qBAC/BjxE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAEhCggE,EAAShgE,GAAG8F,WAAWqvE,EAAkB1yD,KAAKw4C,cAAcj7D,IAE9DyiB,KAAKiiD,YAAa,6CAKlB,IAAM0Q,EAAc,GAAM3yD,KAAK23C,MAAMf,oBACrC,GAAI+b,EACF,IAAK,IAAI1mC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GACpC3uC,EAAIolC,EAAQjiC,OACZ1C,EAAI2kC,EAAQhiC,OAClB,GACEsf,KAAK0wC,cAAc13C,KAAK1b,GACxB0iB,KAAK0wC,cAAc13C,KAAKjb,OAExB,CACA,IAAMgpB,EAAS/G,KAAKjH,cAAcC,KAAK1b,GACjC0pB,EAAShH,KAAKjH,cAAcC,KAAKjb,GAGvCuoB,GAAQO,UAAUE,EAAQC,EAAQ2rD,2CAUxC,IAFA,IAAIre,EAAW,EACTse,EAA4B,GACzBr1E,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCq1E,EAAgBr1E,GAAKkyD,GAIvB,IADA,IAAIojB,EAAmB,EACdt1E,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAAK,CACrC,IAAM4e,EAAQ6D,KAAK0wC,cAAc13C,KAAKzb,GACtC,KAAI4e,EAA0C,CAC5C,IAAM22D,EAAsB9yD,KAAKghB,QAAQkhC,sBAKzC,OAJI/lD,GAAyD22D,GAC3DA,EAAoBC,mBAAmB/yD,KAAMziB,GAG3CyiB,KAAKg4C,oBAAoBh/C,KAAM,CACjC,IAAM8gD,EAAS95C,KAAKg4C,oBAAoBh/C,KAAKzb,GACzCu8D,IACFA,EAAOvqD,MAAQkgD,GACfzvC,KAAKg4C,oBAAoBh/C,KAAKzb,GAAK,MAIvCq1E,EAAgBr1E,GAAKkyD,OAChB,CAEL,GADAmjB,EAAgBr1E,GAAK+2D,EACjB/2D,IAAM+2D,EAAU,CAElB,GAAIt0C,KAAKg4C,oBAAoBh/C,KAAM,CACjC,IAAM8gD,EAAS95C,KAAKg4C,oBAAoBh/C,KAAKzb,GACzCu8D,IACFA,EAAOvqD,MAAQ+kD,GAEjBt0C,KAAKg4C,oBAAoBh/C,KAAKs7C,GAAYwF,EAE5C95C,KAAK0wC,cAAc13C,KAAKs7C,GAAYt0C,KAAK0wC,cAAc13C,KAAKzb,GACxDyiB,KAAKi4C,4BAA4Bj/C,OACnCgH,KAAKi4C,4BAA4Bj/C,KAAKs7C,GAAYt0C,KAAKi4C,4BAA4Bj/C,KACjFzb,IAGAyiB,KAAKk4C,yBAAyBl/C,OAChCgH,KAAKk4C,yBAAyBl/C,KAAKs7C,GAAYt0C,KAAKk4C,yBAAyBl/C,KAAKzb,IAEhFyiB,KAAKm4C,gCAAgCn/C,OACvCgH,KAAKm4C,gCAAgCn/C,KACnCs7C,GACEt0C,KAAKm4C,gCAAgCn/C,KAAKzb,IAEhDyiB,KAAKsxC,iBAAiBt4C,KAAKs7C,GAAU5wD,KAAKsc,KAAKsxC,iBAAiBt4C,KAAKzb,IACrEyiB,KAAKuxC,iBAAiBv4C,KAAKs7C,GAAU5wD,KAAKsc,KAAKuxC,iBAAiBv4C,KAAKzb,IACrEyiB,KAAK+4C,cAAczE,GAAYt0C,KAAK+4C,cAAcx7D,GAC9CyiB,KAAKiiD,YACPjiD,KAAKw4C,cAAclE,GAAU5wD,KAAKsc,KAAKw4C,cAAcj7D,IAEnDyiB,KAAK24C,yBACP34C,KAAK24C,uBAAuBrE,GAAYt0C,KAAK24C,uBAAuBp7D,IAElEyiB,KAAK84C,gBACP94C,KAAK84C,cAAcxE,GAAYt0C,KAAK84C,cAAcv7D,IAEhDyiB,KAAKjH,cAAcC,MACrBgH,KAAKjH,cAAcC,KAAKs7C,GAAU5wD,KAAKsc,KAAKjH,cAAcC,KAAKzb,IAE7DyiB,KAAKo4C,iBAAiBp/C,OACxBgH,KAAKo4C,iBAAiBp/C,KAAKs7C,GAAYt0C,KAAKo4C,iBAAiBp/C,KAAKzb,IAEhEyiB,KAAKq4C,uBAAuBr/C,OAC9BgH,KAAKq4C,uBAAuBr/C,KAAKs7C,GAAYt0C,KAAKq4C,uBAAuBr/C,KAAKzb,IAGlF+2D,IACAue,GAAoB12D,GA6BxB,IAxBA,IAAM62D,EAAO,CAEXC,eAAgB,SAACjgD,GACf,OAAOA,EAAMzjB,MAAQ,GAGvB2jE,iBAAkB,SAACxwC,GACjB,OAAOA,EAAQjiC,OAAS,GAAKiiC,EAAQhiC,OAAS,GAGhDyyE,qBAAsB,SAACzwC,GACrB,OAAOA,EAAQnzB,MAAQ,GAGzB6jE,cAAe,SAACn/C,GACd,OAAOA,EAAKxzB,OAAS,GAAKwzB,EAAKvzB,OAAS,GAG1C2yE,eAAgB,SAACrP,GACf,OAAOA,EAAMvjE,OAAS,GAAKujE,EAAMtjE,OAAS,GAAKsjE,EAAMC,OAAS,IAKzDh4B,EAAI,EAAGA,EAAIjsB,KAAKs5C,cAActxD,MAAOikC,IAAK,CACjD,IAAMjZ,EAAQhT,KAAKs5C,cAActgD,KAAKizB,GACtCjZ,EAAMzjB,MAAQqjE,EAAgB5/C,EAAMzjB,OAEtCyQ,KAAKs5C,cAAc4N,SAAS8L,EAAKC,gBAGjC,IAAK,IAAIhnC,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1CvJ,EAAQjiC,OAASmyE,EAAgBlwC,EAAQjiC,QACzCiiC,EAAQhiC,OAASkyE,EAAgBlwC,EAAQhiC,QAE3Csf,KAAK+8C,gBAAgBmK,SAAS8L,EAAKE,kBAGnC,IAAK,IAAIjnC,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GAC9CvJ,EAAQnzB,MAAQqjE,EAAgBlwC,EAAQnzB,OAE1CyQ,KAAKg9C,oBAAoBkK,SAAS8L,EAAKG,sBAGvC,IAAK,IAAIlnC,EAAI,EAAGA,EAAIjsB,KAAK0T,aAAa1rB,MAAOikC,IAAK,CAChD,IAAMhY,EAAOjU,KAAK0T,aAAa1a,KAAKizB,GACpChY,EAAKxzB,OAASmyE,EAAgB3+C,EAAKxzB,QACnCwzB,EAAKvzB,OAASkyE,EAAgB3+C,EAAKvzB,QAErCsf,KAAK0T,aAAawzC,SAAS8L,EAAKI,eAGhC,IAAK,IAAInnC,EAAI,EAAGA,EAAIjsB,KAAKi9C,cAAcj1D,MAAOikC,IAAK,CACjD,IAAM+3B,EAAQhkD,KAAKi9C,cAAcjkD,KAAKizB,GACtC+3B,EAAMvjE,OAASmyE,EAAgB5O,EAAMvjE,QACrCujE,EAAMtjE,OAASkyE,EAAgB5O,EAAMtjE,QACrCsjE,EAAMC,OAAS2O,EAAgB5O,EAAMC,QAKvC,GAHAjkD,KAAKi9C,cAAciK,SAAS8L,EAAKK,gBAG7BrzD,KAAKs4C,8BAA8Bt/C,KAErC,IADA,IAAIs6D,EAAc,EACTC,EAAa,EAAGA,EAAavzD,KAAKxf,QAAS+yE,IAAc,CAChE,IAAMvR,EAAW4Q,EAAgB5yD,KAAKs4C,8BAA8Bt/C,KAAKu6D,IACrEvR,IAAavS,KACfzvC,KAAKs4C,8BAA8Bt/C,KAAKs6D,KAAiBtR,GAM/D,IAAK,IAAI/d,EAAQjkC,KAAK63C,YAAa5T,EAAOA,EAAQA,EAAM6Q,UAAW,CAIjE,IAHA,IAAI2F,EAAanG,EACb0G,EAAY,EACZwY,GAAW,EACNj2E,EAAI0mD,EAAMwM,aAAclzD,EAAI0mD,EAAMuM,YAAajzD,IAAK,CAC3D,IAAM4I,EAAIysE,EAAgBr1E,GACtB4I,GAAK,GACPs0D,EAAax8D,EAASw8D,EAAYt0D,GAClC60D,EAAY98D,EAAS88D,EAAW70D,EAAI,IAEpCqtE,GAAW,EAGX/Y,EAAaO,GACf/W,EAAMwM,aAAegK,EACrBxW,EAAMuM,YAAcwK,EAChBwY,KACEvvB,EAAM0M,cACR3wC,KAAK4wC,cACH3M,KACAA,EAAM0M,gBAKZ1M,EAAMwM,aAAe,EACrBxM,EAAMuM,YAAc,IACdvM,EAAM0M,cACV3wC,KAAK4wC,cACH3M,IACAA,EAAM0M,eAOd3wC,KAAKxf,QAAU8zD,EACft0C,KAAKo8C,mBAAqByW,EAC1B7yD,KAAK08C,+BAAgC,EAGrC,IAAK,IAAIzY,EAAQjkC,KAAK63C,YAAa5T,GAAS,CAC1C,IAAM7rC,EAAO6rC,EAAM6Q,YACf7Q,EAAM0M,cACR3wC,KAAK83C,qBAAqB7T,GAE5BA,EAAQ7rC,0CAQGL,GAEbiI,KAAKyzD,cAAgBzzD,KAAK0zD,yBAAyB37D,EAAKm0B,IAExD,IAAMynC,EAAuB3zD,KAAK25C,0BAE5Bia,EAAkB5zD,KAAKq4C,uBAAuBr/C,KAC9C66D,EAAwB7zD,KAAKs4C,8BAA8Bt/C,KAC3DN,EAAgBsH,KAAKrH,mBAEvBqH,KAAK69C,wCA+BPr1D,GAASqrE,EAAuB,EAAGn7D,GAbF,SAC/Bo7D,EACAC,GAEA,IAAMC,EAAkBJ,EAAgBE,GAClCG,EAAkBL,EAAgBG,GAClCG,EAA0BF,GAAmB,EAEnD,OAAOE,IADyBD,GAAmB,EAE/CD,EAAkBC,EAClBC,KAKNl0D,KAAK69C,uCAAwC,GAI/C,IAAK,IAAItgE,EAAImb,EAAgB,EAAGnb,GAAK,IAAKA,EAAG,CAC3C,IAAM42E,EAAgBN,EAAsBt2E,GACtCygE,EAAiB4V,EAAgBO,GAEvC,GAAIR,EAAuB3V,GAAkBA,GAAkB,EAC7D,MAGFh+C,KAAKqxC,gBAAgB8iB,yCAIZvgB,EAAeC,EAAaC,GAEvC,GAAIF,IAAUC,GAAOA,IAAQC,EAA7B,CAgDA,GAzCA57C,GAAW8H,KAAK0wC,cAAc13C,KAAM46C,EAAOC,EAAKC,GAC5C9zC,KAAKi4C,4BAA4Bj/C,MAEnCd,GAAW8H,KAAKi4C,4BAA4Bj/C,KAAM46C,EAAOC,EAAKC,GAE5D9zC,KAAKk4C,yBAAyBl/C,MAEhCd,GAAW8H,KAAKk4C,yBAAyBl/C,KAAM46C,EAAOC,EAAKC,GAEzD9zC,KAAKm4C,gCAAgCn/C,MAEvCd,GAAW8H,KAAKm4C,gCAAgCn/C,KAAM46C,EAAOC,EAAKC,GAGpE57C,GAAW8H,KAAKsxC,iBAAiBt4C,KAAM46C,EAAOC,EAAKC,GAEnD57C,GAAW8H,KAAKuxC,iBAAiBv4C,KAAM46C,EAAOC,EAAKC,GAEnD57C,GAAW8H,KAAK+4C,cAAenF,EAAOC,EAAKC,GACvC9zC,KAAKiiD,YAEP/pD,GAAW8H,KAAKw4C,cAAe5E,EAAOC,EAAKC,GAEzC9zC,KAAK24C,wBAEPzgD,GAAW8H,KAAK24C,uBAAwB/E,EAAOC,EAAKC,GAElD9zC,KAAK84C,eAEP5gD,GAAW8H,KAAK84C,cAAelF,EAAOC,EAAKC,GAEzC9zC,KAAKjH,cAAcC,MAErBd,GAAW8H,KAAKjH,cAAcC,KAAM46C,EAAOC,EAAKC,GAE9C9zC,KAAKo4C,iBAAiBp/C,MAExBd,GAAW8H,KAAKo4C,iBAAiBp/C,KAAM46C,EAAOC,EAAKC,GAIjD9zC,KAAKg4C,oBAAoBh/C,KAAM,CAEjCd,GAAW8H,KAAKg4C,oBAAoBh/C,KAAM46C,EAAOC,EAAKC,GACtD,IAAK,IAAIv2D,EAAIq2D,EAAOr2D,EAAIu2D,IAAOv2D,EAAG,CAChC,IAAMu8D,EAAS95C,KAAKg4C,oBAAoBh/C,KAAKzb,GACzCu8D,IACFA,EAAOvqD,MAAQokD,GAAWmG,EAAOvqD,MAAOqkD,EAAOC,EAAKC,KAK1D,GAAI9zC,KAAKq4C,uBAAuBr/C,KAAM,CAEpCd,GAAW8H,KAAKq4C,uBAAuBr/C,KAAM46C,EAAOC,EAAKC,GAIzD,IAFA,IAAMp7C,EAAgBsH,KAAKrH,mBACrBy7D,EAAwBp0D,KAAKs4C,8BAA8Bt/C,KACxDzb,EAAI,EAAGA,EAAImb,IAAiBnb,EACnC62E,EAAsB72E,GAAKo2D,GAAWygB,EAAsB72E,GAAIq2D,EAAOC,EAAKC,GAKhF,IAAK,IAAI7nB,EAAI,EAAGA,EAAIjsB,KAAKs5C,cAActxD,MAAOikC,IAAK,CACjD,IAAMjZ,EAAQhT,KAAKs5C,cAActgD,KAAKizB,GACtCjZ,EAAMzjB,MAAQokD,GAAW3gC,EAAMzjB,MAAOqkD,EAAOC,EAAKC,GAIpD,IAAK,IAAI7nB,EAAI,EAAGA,EAAIjsB,KAAK+8C,gBAAgB/0D,MAAOikC,IAAK,CACnD,IAAMvJ,EAAU1iB,KAAK+8C,gBAAgB/jD,KAAKizB,GAC1CvJ,EAAQjiC,OAASkzD,GAAWjxB,EAAQjiC,OAAQmzD,EAAOC,EAAKC,GACxDpxB,EAAQhiC,OAASizD,GAAWjxB,EAAQhiC,OAAQkzD,EAAOC,EAAKC,GAI1D,IAAK,IAAI7nB,EAAI,EAAGA,EAAIjsB,KAAKg9C,oBAAoBh1D,MAAOikC,IAAK,CACvD,IAAMvJ,EAAU1iB,KAAKg9C,oBAAoBhkD,KAAKizB,GAC9CvJ,EAAQnzB,MAAQokD,GAAWjxB,EAAQnzB,MAAOqkD,EAAOC,EAAKC,GAIxD,IAAK,IAAI7nB,EAAI,EAAGA,EAAIjsB,KAAK0T,aAAa1rB,MAAOikC,IAAK,CAChD,IAAMhY,EAAOjU,KAAK0T,aAAa1a,KAAKizB,GACpChY,EAAKxzB,OAASkzD,GAAW1/B,EAAKxzB,OAAQmzD,EAAOC,EAAKC,GAClD7/B,EAAKvzB,OAASizD,GAAW1/B,EAAKvzB,OAAQkzD,EAAOC,EAAKC,GAIpD,IAAK,IAAI7nB,EAAI,EAAGA,EAAIjsB,KAAKi9C,cAAcj1D,MAAOikC,IAAK,CACjD,IAAM+3B,EAAQhkD,KAAKi9C,cAAcjkD,KAAKizB,GACtC+3B,EAAMvjE,OAASkzD,GAAWqQ,EAAMvjE,OAAQmzD,EAAOC,EAAKC,GACpDkQ,EAAMtjE,OAASizD,GAAWqQ,EAAMtjE,OAAQkzD,EAAOC,EAAKC,GACpDkQ,EAAMC,OAAStQ,GAAWqQ,EAAMC,OAAQrQ,EAAOC,EAAKC,GAItD,IAAK,IAAI7P,EAAQjkC,KAAK63C,YAAa5T,EAAOA,EAAQA,EAAM6Q,UACtD7Q,EAAMwM,aAAekD,GAAW1P,EAAMwM,aAAcmD,EAAOC,EAAKC,GAChE7P,EAAMuM,YAAcmD,GAAW1P,EAAMuM,YAAc,EAAGoD,EAAOC,EAAKC,GAAO,+CAIzD/7C,GAClB,YAAYo/C,mBAAqBp/C,EAAKkyB,0DAGblyB,GACzB,IAAMohD,EAAWn5C,KAAK4uD,oBAAoB72D,GAC1C,OAAOohD,EAAWA,8CAGAphD,GAClB,YAAY4/C,MAAM19B,QAAUja,KAAKmrD,2BAA2BpzD,+CAI5D,OAAO23C,GAAoB1vC,KAAKm3C,6DAIhC,IAAMgK,EAASnhD,KAAKohD,oBACpB,YAAYzJ,MAAM19B,QAAUknC,EAASA,+CAMrC,IAAMkT,EAAgBr0D,KAAKo3C,mBAAqB,EAAM1H,IACtD,YAAYwH,iBAAmBmd,EAAgBA,oDAQ/C,kBAAYjY,mBACRp8C,KAAKghB,QAAQC,iBAAiBkkB,gBAC9B,wDASJ,mBAAYiX,mBACRp8C,KAAKghB,QAAQC,iBAAiBkkB,gBAC9B,yDASJ,kBAAYiX,mBACRp8C,KAAKghB,QAAQC,iBAAiB4kB,kBAC9B,0DASJ,kBAAYuW,mBACRp8C,KAAKghB,QAAQC,iBAAiB4kB,kBAC9B,sDAGsB8W,EAAmD3jD,GAC7E2jD,EAAO3jD,KAAOA,EACd2jD,EAAOqD,qBAAuBhnD,EAAK5b,6CAGvB6mD,EAAwBwY,GACpC,IAAM6X,EAAWrwB,EAAM0M,gBAClB2jB,EAAW7X,KAEdA,OAEE6X,GAAY7X,IAEdz8C,KAAK+lD,4BAA6B,IAE/B/lD,KAAKq8C,gBAAkBI,MAEtBA,IACFz8C,KAAK84C,cAAgB94C,KAAKq5C,cAAcr5C,KAAK84C,gBAE/C94C,KAAKq8C,iBAAmBI,GAE1BxY,EAAM0M,aAAe8L,kEA8BrBj0D,GACEwX,KAAKg9C,oBAAoBhkD,KACzB,EACAgH,KAAKg9C,oBAAoBh1D,MACzB+uD,EAAiBwd,oBAQnB,IAAMt7C,EAAM89B,EAAiByd,+BACvBC,EAAQ1d,EAAiB2d,iCACzBC,EAAW5d,EAAiB6d,oCAK5BC,EAAwB,EAE1B7Z,GAAa,EAEb8Z,EAAkB,EAGhBC,EAAuC,SAACryC,GAe5C,GALIA,EAAQnzB,QAAUyrD,IACpB8Z,EAAkB,EAClB9Z,EAAYt4B,EAAQnzB,OAGlBulE,IAAoBD,EAEtB,SAMF,IAAMr2E,EAAIy6B,EAAIv1B,KAAKg/B,EAAQx/B,QAG3B1E,EAAEkY,QAAQs+D,EAAK7d,oBAAsB,EAAIz0B,EAAQuyB,SAEjD,IAAMnsD,EAAMvH,GAAOskB,MAAMmvD,EAAK1jB,iBAAiBt4C,KAAK0pB,EAAQnzB,OAAQ/Q,EAAGi2E,GAKvE,IAAK/xC,EAAQ9nB,QAAQqoB,UAAUn6B,GAAM,CAEnC,IADA,IAAM4rD,EAAahyB,EAAQ9nB,QAAQE,WAAWooB,gBACrCvJ,EAAa,EAAGA,EAAa+6B,EAAY/6B,IAAc,CAC9D,IAAMz2B,EAASyxE,EAEf,GADiBjyC,EAAQ9nB,QAAQslB,gBAAgBp3B,EAAK5F,EAAQy2B,GAC/C50B,GACb,SAIJ,SAGF,UAEFib,KAAKg9C,oBAAoBh1D,MAAQyP,GAC/BuI,KAAKg9C,oBAAoBhkD,KACzB+7D,EACA/0D,KAAKg9C,oBAAoBh1D,mDAQTitE,GAUdj1D,KAAKm9C,kBAAoB,MAW3Bn9C,KAAKk4C,yBAAyBl/C,KAAKi8D,GAKgB,IAAjDj1D,KAAKk4C,yBAAyBl/C,KAAKi8D,OAEnCj1D,KAAKm4C,gCAAgCn/C,KAAKi8D,GAExCj1D,KAAKm4C,gCAAgCn/C,KAAKi8D,GAAYj1D,KAAKm9C,mBAG7Dn9C,KAAKo9C,sBAAsBpkD,KAAKgH,KAAKo9C,sBAAsB7D,UAAY0b,IAI3Ej1D,KAAKi4C,4BAA4Bj/C,KAAKi8D,GAAYj1D,KAAKwxC,2DAMnCjiD,GACpB,OAAOA,GAAS,GAAKA,EAAQyQ,KAAKrH,oBAAsBpJ,IAAUkgD,qDASlE,OAAO/wD,KAAKsK,MAAMgX,KAAKyzD,cAAgB,6DAMhBtjB,GAEvB,YACOsjB,cAAgB/0E,KAAKsK,MAAOmnD,EAAWnwC,KAAK23C,MAAMb,oBAAuB,sDAIhE36C,GAChB,UAASA,gDAIT,IAAK6D,KAAKiiD,WAAY,CAEpB,IAAK,IAAI1kE,EAAI,EAAGA,EAAIyiB,KAAKxf,QAASjD,IAChCyiB,KAAKw4C,cAAcj7D,GAAGsG,UAExBmc,KAAKiiD,YAAa,wCAIThe,GACX,OAAiB,OAAVA,GAAuF,MAApEA,EAAM0M,wDAIhC1M,EACAkwB,EACArwE,EACAgS,GAEA,OAAImuC,GAASjkC,KAAK4tD,aAAa3pB,GACtBA,EAAMxc,gCAAgC3jC,EAAOgS,GAG7CA,EAAIpS,KAAKsc,KAAKuxC,iBAAiBv4C,KAAKm7D,iDAK7CpoC,EACAmpC,EACAC,EACAh8C,EACA00C,EACA7yD,EACAlX,EACAZ,GAGA6oC,EAAQ,GAAK5S,EAAO,EAAI,EAAIA,EAAO,EAEnC+7C,EAAW,GAAKrH,EAAU,EAAI,EAAIA,EAAU,EAE5CsH,EAAgB,GAAK5zE,GAAOkV,QAAQlV,GAAOU,MAAM6B,EAAOkX,EAAQzZ,GAAOE,MAAOyB,wEAI9E6oC,EACAmpC,EACAC,EACAC,EACAnxB,EACAkwB,EACArwE,EACAZ,GAEA,GAAI+gD,GAASmxB,EACXp1D,KAAKsvD,qBACHvjC,EACAmpC,EACAC,EACAlxB,EAAM7V,UACN6V,EAAM6pB,aACN7pB,EAAMz0B,YACN1rB,EACAZ,OAEG,CACL,IAAMiZ,EAAQ6D,KAAK0wC,cAAc13C,KAAKm7D,GACtCn0D,KAAKsvD,qBACHvjC,EACAmpC,EACAC,IACAh5D,EAAyC,EAAI6D,KAAKyxC,kBAClD,EACA3tD,EACAA,EACAZ,kDAMJ0lD,EACAqmB,EACAC,EACArmB,EACAsmB,EACAC,EACAiG,GAEA,IAAMtpC,EACJ6c,EACAqmB,EAAcC,EAAmBA,EACjCrmB,EACAsmB,EAAcC,EAAmBA,EACnC,OAAOrjC,EAAU,EAAIspC,EAAiBtpC,EAAU,uCAIhDA,EACAmpC,EACAC,EACAC,EACAnxB,EACAkwB,EACArtC,EACA5jC,GAEI+gD,GAASmxB,GAEXnxB,EAAMxf,iBAAiBphC,WAAWyjC,EAAUiF,EAAS7oC,GAErD+gD,EAAMtf,mBAAqBmC,EAAUquC,EAAkBD,GAGvDl1D,KAAKuxC,iBAAiBv4C,KAAKm7D,GAAe9wE,WAAWyjC,EAAUiF,EAAS7oC,wCAr+I1DtF,EAAW6I,GAE3B,OACMA,EAAIswD,EAAiBue,UAAa,GAAMve,EAAiBwe,SACzDxe,EAAiBye,OAAS53E,EAAIm5D,EAAiB0e,UAAa,KAChE,6CAIsBnjB,EAAa10D,EAAW6I,GAEhD,OAAQ6rD,GAAO7rD,GAAKswD,EAAiBwe,SAAW33E,GAAKm5D,EAAiB2e,UAAa,6CAijC3D/uC,GACxB,OAAmB,IAAZA,EAAM/oC,GAAuB,IAAZ+oC,EAAMlgC,iDAysBF0V,EAAuB8nC,GACnD,OAKI,OAJD9nC,IAKU,OAAV8nC,GAA0F,MAAvEA,EAAM6gB,4DAyKJxnE,EAAmBS,GAC3C,IAAM43E,EAAQr4E,EAAEmD,OAAS1C,EAAE0C,OAC3B,OAAc,IAAVk1E,EACKA,EAAQ,EAEVr4E,EAAEoD,OAAS3C,EAAE2C,gDAGEpD,EAAmBS,GACzC,OAAOT,EAAEmD,SAAW1C,EAAE0C,QAAUnD,EAAEoD,SAAW3C,EAAE2C,mDAGtBpD,EAAoBS,GAC7C,IAAM43E,EAAQr4E,EAAEmD,OAAS1C,EAAE0C,OAC3B,GAAc,IAAVk1E,EACF,OAAOA,EAAQ,EAEjB,IAAMC,EAAQt4E,EAAEoD,OAAS3C,EAAE2C,OAC3B,OAAc,IAAVk1E,EACKA,EAAQ,EAEVt4E,EAAE2mE,OAASlmE,EAAEkmE,iDAGG3mE,EAAoBS,GAC3C,OAAOT,EAAEmD,SAAW1C,EAAE0C,QAAUnD,EAAEoD,SAAW3C,EAAE2C,QAAUpD,EAAE2mE,SAAWlmE,EAAEkmE,uDAIxEhgB,EACA0X,GAIA,IAFA,IAAM6I,EAAcvgB,EAAMwgB,iBACpB/rD,EAAgBurC,EAAMtrC,mBACnBpb,EAAI,EAAGA,EAAImb,EAAenb,IAAK,CACtC,IAAMkxB,EAA0CktC,EAAWp+D,GAC3DkxB,EAAKogC,KAAOpgC,EACZA,EAAKrW,KAAO,KACZqW,EAAKzmB,MAAQ,EACbymB,EAAKlf,MAAQhS,EAAIinE,8CAmCnBjf,EACAE,GASA,IAAK,IAAI1nD,EAAuC0nD,IAAW,CACzD1nD,EAAE8wD,KAAOtJ,EACT,IAAMswB,EAAkD93E,EAAEqa,KAC1D,IAAIy9D,EAEG,CACL93E,EAAEqa,KAAOmtC,EAAMntC,KACf,MAHAra,EAAI83E,EAMRtwB,EAAMntC,KAAOqtC,EACbF,EAAMv9C,OAASy9C,EAAMz9C,MACrBy9C,EAAMz9C,MAAQ,kDAIdi8C,EACA0X,GAIA,IAFA,IAAMjjD,EAAgBurC,EAAMtrC,mBACxBL,EAA4CqjD,EAAW,GAClDp+D,EAAI,EAAGA,EAAImb,EAAenb,IAAK,CACtC,IAAMkxB,EAA0CktC,EAAWp+D,GACvD+a,EAAOtQ,MAAQymB,EAAKzmB,QACtBsQ,EAASmW,GAGb,OAAOnW,mDAqBPu2C,EACApgC,GAaAA,EAAKogC,KAAOA,EACZpgC,EAAKrW,KAAOy2C,EAAKz2C,KACjBy2C,EAAKz2C,KAAOqW,EACZogC,EAAK7mD,QACLymB,EAAKzmB,MAAQ,oDAsZkB06B,GAC/B,aAAQA,EAAQvmB,kDAwtDQ25D,EAA4B5gB,GACpD,OAAI4gB,EAAIvmE,QAAU2lD,EAAI3lD,MAEbumE,EAAI7gB,OAASC,EAAID,OAEnB6gB,EAAIvmE,MAAQ2lD,EAAI3lD,eA5sITwnD,cAAa,GACbA,cAAa,GACbA,WAAU,GACVA,WAAU,GAAMA,GAAiBgf,WAAa,EAC9Chf,UAASA,GAAiBif,QAAUjf,GAAiBgf,WACrDhf,UACdA,GAAiBif,QAAUjf,GAAiBgf,WAAahf,GAAiBkf,WAC5Dlf,UAAS,GAAKA,GAAiB2e,OAC/B3e,WAAUA,GAAiBye,QAAU,GAAMze,GAAiBkf,WAAa,GACzElf,UAAU,GAAKA,GAAiBgf,YAAc,GAAMhf,GAAiBwe,OACrExe,UAASA,GAAiBmf,MAwR1Bnf,kCAAiC,IAAI9pC,GAsErC8pC,mCAAkC,IAAIp1D,GA8iBtCo1D,8BAA6B,IAAIx1D,GAyTjCw1D,yBAAwB,IAAI9pC,GAU5B8pC,yBAAwB,IAAI9pC,GAoE5B8pC,kBAAiB,IAAI9pC,GACrB8pC,eAAc,IAAIx1D,GAClBw1D,eAAc,IAAIx1D,GAClBw1D,eAAc,IAAIx1D,GAClBw1D,mBAAkB,IAAIx1D,GA8BtBw1D,iBAKAA,mBAKAA,qBACd,IAKcA,4BAEAA,sBACd,KAuScA,6CAA4C,IAAI13B,GAChD03B,0CAAyC,IAAIx1D,GAC7Cw1D,0CAAyC,IAAIx1D,GAqC7Cw1D,2CAA0C,IAAI9pC,GAC9C8pC,wCAAuC,IAAIx1D,GAmR5Cw1D,8BAA6B,IAAIx1D,GACjCw1D,8BAA6B,IAAIx1D,GACjCw1D,8BAA6B,IAAIx1D,GAoZhCw1D,kBAAiB,IAAIx1D,GAuRrBw1D,6BAA4B,IAAI9pC,GAyGhC8pC,mBAAkB,IAAIlQ,GAqCtBkQ,yBAAwB,IAAI9pC,GA8B5B8pC,0BAAyB,IAAIx1D,GAqK7Bw1D,uBAAsB,IAAI9pC,GAC1B8pC,qBAAoB,IAAIx1D,GACxBw1D,qBAAoB,IAAIx1D,GACxBw1D,sBAAqB,IAAIx1D,GACzBw1D,sBAAqB,IAAIx1D,GACzBw1D,qBAAoB,IAAIx1D,GACxBw1D,sBAAqB,IAAIx1D,GACzBw1D,sBAAqB,IAAIx1D,GACzBw1D,sBAAqB,IAAIx1D,GACzBw1D,sBAAqB,IAAIx1D,GACzBw1D,qBAAoB,IAAIx1D,GACxBw1D,oBAAmB,IAAIx1D,GAqIvBw1D,qBAAoB,IAAIx1D,GAsDxBw1D,oBAAmB,IAAIx1D,GACvBw1D,oBAAmB,IAAIx1D,GA2KvBw1D,0BAAyB,IAAIx1D,GAC7Bw1D,0BAAyB,IAAIx1D,GAC7Bw1D,yBAAwB,IAAIx1D,GAC5Bw1D,yBAAwB,IAAIx1D,GAmC5Bw1D,yBAAwB,IAAIx1D,GAC5Bw1D,yBAAwB,IAAIx1D,GAmD5Bw1D,yBAAwB,IAAIx1D,GAC5Bw1D,yBAAwB,IAAI31D,GAC5B21D,0BAAyB,IAAIp1D,GAC7Bo1D,kCAAiC,IAAIp1D,GA+ErCo1D,qBAAoB,IAAIx1D,GACxBw1D,qBAAoB,IAAIx1D,GACxBw1D,qBAAoB,IAAIx1D,GACxBw1D,oBAAmB,IAAI31D,GACvB21D,qBAAoB,IAAIx1D,GA+CxBw1D,oBAAmB,IAAIx1D,GACvBw1D,oBAAmB,IAAIx1D,GACvBw1D,mBAAkB,IAAIx1D,GACtBw1D,mBAAkB,IAAIx1D,GAwDtBw1D,iCAAgC,IAAIx1D,GACpCw1D,oBAAmB,IAAIx1D,GACvBw1D,oBAAmB,IAAIx1D,GA6CvBw1D,oBAAmB,IAAIx1D,GACvBw1D,oBAAmB,IAAIx1D,GAyBvBw1D,sBAAqB,IAAIx1D,GAyCzBw1D,mBAAkB,IAAIx1D,GAuBtBw1D,kBAAiB,IAAIx1D,GA4mBtBw1D,kCAAiC,IAAIx1D,GACrCw1D,oCAAmC,IAAIx1D,GACvCw1D,uCAAsC,IAAIx1D,OAiM9Cy1D,cAAb,uBACEh3C,0BAAuB,EACvBA,WAAoB,YAFtBi0C,gCAII,YAAYkiB,oBAELn5E,GACPgjB,KAAKm2D,MAAQn5E,WAIJi6D,cAAb,uBACEj3C,WAAgByvC,GAChBzvC,SAAM,SAFRi0C,kDAI2B32D,EAA2BS,GAClD,OAAOT,EAAEg1D,IAAMv0D,EAAEu0D,4CAGIh1D,EAAWS,GAChC,OAAOT,EAAIS,EAAEu0D,4CAGQh1D,EAA2BS,GAChD,OAAOT,EAAEg1D,IAAMv0D,WAIN+nE,cAgBX,WAAYrtD,EAA0B8jB,EAAeC,EAAe/zB,EAAeoP,aACjFmI,KAAKuwC,SAAW93C,EAChBuH,KAAKo2D,UAAY75C,EAAQw6B,GAAiBsf,SAAW,EACrDr2D,KAAKs2D,UAAY95C,EAAQu6B,GAAiBsf,SAAW,EACrDr2D,KAAKu2D,UAAYh6C,EAAQw6B,GAAiBmf,SAAW,EACrDl2D,KAAKw2D,UAAYh6C,EAAQu6B,GAAiBmf,SAAW,EACrDl2D,KAAKy2D,QAAUhuE,EACfuX,KAAK02D,OAAS7+D,SAvBlBo8C,qCAgCI,KAAOj0C,KAAKy2D,QAAUz2D,KAAK02D,QAAQ,CACjC,IAAMC,GACH32D,KAAKuwC,SAAS+I,cAActgD,KAAKgH,KAAKy2D,SAASnkB,IAAMyE,GAAiBsf,SAAW,EAQpF,GAAIM,GAAQ32D,KAAKo2D,UAAYO,GAAQ32D,KAAKs2D,SACxC,YAAY/lB,SAAS+I,cAActgD,KAAKgH,KAAKy2D,WAAWlnE,MAE1DyQ,KAAKy2D,UAEP,OAAOhnB,YAIEmM,GAAb,uBAQE57C,UAAiD,KAKjDA,WAAQ,EAIRA,WAAQ,GAMG42D,gFACFC,EAAkB7uE,GAEzB,OAAOA,sEASP,4CAGSs/D,6CAMT,MAAO,uCAKP,MAAO,oCAGAt/D,aAeEsgE,oIAITwO,EACAC,iCAKG9iD,GAEH,OAAOw7B,UAZ8CmnB,IA0B5ChP,oIAIToP,EACAD,iCAKG9iD,GAEH,OAAOw7B,UAZ4BmnB,IAgB1Bxb,oEAAbp+D,eAMcuS,GACV,kDAMejS,EAAWS,GAC1B,mDAMgBT,EAAWS,EAAWqP,GACtC,kBAIS8sD,eAOX,WACEzhD,EACAoC,EACA2B,EACA40C,2BAEA6lB,2CAT0B,EAC5BA,cAAc,EASZA,EAAK1mB,SAAW93C,EAChBw+D,EAAKp2C,QAAUhmB,EACfo8D,EAAKv9D,KAAO8C,EACZy6D,EAAKC,0BAA4B9lB,EACjC6lB,EAAKE,YAAc,6BAlBvBljB,yCAqBgBr5C,GACZ,gDAGaw8D,EAAkC7nE,GAC/C,OAAI6nE,IAAmBp3D,KAAKuwC,WAIxBvwC,KAAK6gB,QAAQoC,UAAUjjB,KAAKtG,KAAMsG,KAAKuwC,SAASe,iBAAiBt4C,KAAKzJ,MACxEyQ,KAAKuwC,SAASc,gBAAgB9hD,EAAOyQ,KAAKk3D,2BAC1Cl3D,KAAKm3D,uDAMP,YAAYA,mBAtCsD1yB,IA0CzDiX,eAGX,WAAY2b,2BACVC,4BAHY,EAIZA,EAAKC,YAAcF,6BALvBpjB,4CAWmB32D,EAAWS,GAC1B,OACGT,EAAI0iB,KAAKu3D,aAAev3D,KAAKu3D,aAAex5E,GAC5CA,EAAIiiB,KAAKu3D,aAAev3D,KAAKu3D,aAAej6E,4CAO/BA,EAAWS,EAAWqP,GACtC,OACG9P,EAAI0iB,KAAKu3D,aAAex5E,EAAIiiB,KAAKu3D,aAAenqE,EAAI4S,KAAKu3D,eACzDv3D,KAAKu3D,aAAej6E,GAAK0iB,KAAKu3D,aAAex5E,GAAKiiB,KAAKu3D,aAAenqE,UAxBdguD,IA6BlD0G,eACX,WAAYnH,EAAmBE,2BAC7B2c,iBAA6B,iBAMhB,EALbA,EAAKC,SAAW9c,EAChB6c,EAAKE,aAAe7c,MAAAA,EAAAA,EAAcF,EAAOv9D,kCAJ7C62D,mCAYI,UAAU9rD,8CAIV,2CAMQqU,EAAiBjZ,GACzB,IAAK,IAAIhG,EAAI,EAAGA,EAAIyiB,KAAK03D,aAAcn6E,IACrC,GAAIyiB,KAAKy3D,SAASl6E,GAAG0lC,UAAUzmB,EAAIjZ,GACjC,SAGJ,iDAMciZ,EAAiBjZ,EAAWL,EAAgBy2B,GAE1D,yCAOAx6B,EACAE,EACAmd,EACAmd,GAGA,6CAMUvc,EAAcZ,EAAiBmd,GACzC,IAAMg+C,EAAY,IAAI1qD,GACtB7P,EAAK5W,WAAW5I,GAAK+P,GACrByP,EAAK5W,WAAWC,GAAKkH,GACrByP,EAAK7W,WAAW3I,GAAK+P,GACrByP,EAAK7W,WAAWE,GAAKkH,GAErB,IAAK,IAAIpQ,EAAI,EAAGA,EAAIyiB,KAAK03D,aAAcn6E,IAErC,IADA,IAAMm3D,EAAa10C,KAAKy3D,SAASl6E,GAAG2lC,gBAC3B/8B,EAAI,EAAGA,EAAIuuD,EAAYvuD,IAAK,CACnC,IAAMyxE,EAAUD,EAChB33D,KAAKy3D,SAASl6E,GAAGujC,YAAY82C,EAASp7D,EAAIrW,GAC1CiX,EAAKy6D,SAASD,wCAQR59C,EAAsBC,+CAIfjH,EAAwBzjB,iDAItBrM,EAAgB2D,EAAgB2V,EAAiBpP,GAEpE,gBArFiDisB,IAyFxCkrC,eAGX,WAAYwS,2BACVe,gBACKpnB,cAAgBqmB,6BALzB9iB,uCAQc1kD,GACV,OAAiF,SAAzEyQ,KAAK0wC,cAAc13C,KAAKzJ,WATiB6rD,IAaxCsN,eAGX,WAAYjwD,SAA0BquD,yDAAwC,uBAC5EiR,cAAMt/D,oBAHkC,KAIxCs/D,EAAK5yB,gBAAkB2hB,6BAL3B7S,wDASIr5C,EACAw8D,EACAjD,GAKA,QAAIn0D,KAAKmlC,uBACOnlC,KAAKuwC,SAASynB,iBAClB7D,UACIhvB,gBAAgB8yB,6BAC1Br9D,EACAoF,KAAKuwC,SACL4jB,oDAOiBv5D,EAAoB+e,EAAoBr8B,GAC/D,IAAM27B,EAAMyvC,EAA4CwP,6BAClDC,EAAOzP,EAA4C0P,8BACnDC,EAAKr4D,KAAKuwC,SAASe,iBAAiBt4C,KAAK1b,GACzCkB,EAAIy6B,EACJp4B,EAAI+Z,EAAQslB,gBAAgBm4C,EAAI75E,EAAGm7B,GACzC,GACE94B,EAAImf,KAAKuwC,SAAS4G,oBAClBn3C,KAAKi4D,6BAA6Br9D,EAASoF,KAAKuwC,SAAUjzD,GAC1D,CACA,IAAMS,EAAI6c,EAAQkoC,UACZw1B,EAAKv6E,EAAE0f,iBACP86D,EAAKx6E,EAAEqwC,UACPoqC,EAAKz6E,EAAE+vE,aAAeyK,EAAKx6E,EAAEwxE,iBAAiBvuE,gBAC9Cy3E,EAAQF,EAAK,EAAI,EAAIA,EAAK,EAC1BG,EAAQF,EAAK,EAAI,EAAIA,EAAK,EAC1BG,IACJ34D,KAAKuwC,SAASG,cAAc13C,KAAK1b,GAC7B,EACA0iB,KAAKuwC,SAASie,qBAEdoK,EAAKr3E,GAAOU,MAAMo2E,EAAIC,EAAIH,GAC1BU,EAAMt3E,GAAOkV,QAAQmiE,EAAIp6E,GACzB8gD,EAAOq5B,EAAQF,EAAQC,EAAQG,EAAMA,EAGrCn2C,EAAU1iB,KAAKuwC,SAASyM,oBAAoBhkD,KAChDgH,KAAKuwC,SAASyM,oBAAoBzD,UAEpC72B,EAAQnzB,MAAQjS,EAChBolC,EAAQjB,KAAO1jC,EACf2kC,EAAQ9nB,QAAUA,EAClB8nB,EAAQuyB,OAAS,EAAIp0D,EAAImf,KAAKuwC,SAAS6G,kBAEvC10B,EAAQx/B,OAAOQ,KAAKlF,EAAE6G,WACtBq9B,EAAQvJ,KAAOmmB,EAAO,EAAI,EAAIA,EAAO,EACrCt/B,KAAKuwC,SAASuoB,oBAAoBx7E,WAjEyBk3D,IAqE/CkU,gCAA+B,IAAInnE,GACnCmnE,iCAAgC,IAAInnE,OAGzC0pE,eAGX,WAAYxyD,EAA0BV,2BACpCghE,cAAMtgE,IACDuvC,OAASjwC,6BALlBk8C,oDAQ2Br5C,EAAoB+e,EAAoBr8B,GAC/D,IAAM07E,EAAO/N,EAAwCgO,8BAC/CC,EAAWjO,EAAwCkO,kCACnDC,EAAUnO,EAAwCoO,iCAClD9Z,EAAM0L,EAAwCqO,6BAC9CtqD,EAAMi8C,EAAwCsO,6BAC9C3M,EAAM3B,EAAwCuO,6BAE9C/3C,EAAO7mB,EAAQkoC,UACfu1B,EAAKr4D,KAAKuwC,SAASe,iBAAiBt4C,KAAK1b,GACzCm8E,EAAKz5D,KAAKuwC,SAASgB,iBAAiBv4C,KAAK1b,GACzC6B,EAAS+5E,EACT75E,EAAQ+5E,EACd,GAAuC,IAAnCp5D,KAAKuwC,SAAS4Y,iBAAwB,CAGxC,IAAMhzD,EAAKxU,GAAY4L,OAAOk0B,EAAK8C,MAAO8zC,EAAIW,OAC1Cp+D,EAAQE,WAAW+B,YAGrB1G,EAAG7Q,QAAQm8B,EAAK8tC,kBAGhBnuE,GAAM+N,MAAMsyB,EAAK8C,MAAMjjC,EAAG6U,EAAIA,GAG9B/U,GAAMC,OAAOogC,EAAK/nB,KAAKpY,EAAG6U,EAAIA,GAG9BA,EAAG8M,QAAQwe,EAAK8tC,mBAIlB5tE,GAAYC,MAAM6/B,EAAK/nB,KAAMvD,EAAI9W,EAAM8W,SAGvC9W,EAAM8W,GAAGzS,KAAK20E,GAKhB,GAFA92E,GAAO4qB,UAAUksD,EAAIr4D,KAAKgoC,OAAO9b,GAAIutC,EAAIp6E,EAAM+W,IAC/C/W,EAAMytB,YAAc,EAChBlS,EAAQyZ,QAAQl1B,EAAQE,EAAOs6B,GAAa,CAC9C,IAAMn7B,EAAIW,EAAO+D,OAEXK,EAAIg8D,EACVh8D,EAAE3F,GAAK,EAAIuB,EAAO6tB,UAAY3tB,EAAM8W,GAAGvY,EAAIuB,EAAO6tB,SAAW3tB,EAAM+W,GAAGxY,EAAImH,GAAgBvG,EAAEZ,EAC5F2F,EAAEkD,GAAK,EAAItH,EAAO6tB,UAAY3tB,EAAM8W,GAAG1P,EAAItH,EAAO6tB,SAAW3tB,EAAM+W,GAAG3P,EAAI1B,GAAgBvG,EAAEiI,EAE5F,IAAM9B,EAAIqqB,EACVrqB,EAAE/G,EAAIoiB,KAAKgoC,OAAO/d,QAAU1mC,EAAE3F,EAAIy6E,EAAGz6E,GACrC+G,EAAE8B,EAAIuZ,KAAKgoC,OAAO/d,QAAU1mC,EAAEkD,EAAI4xE,EAAG5xE,GAErCuZ,KAAKuwC,SAASgB,iBAAiBv4C,KAAK1b,GAAGoG,KAAKiB,GAE5C,IAAM+X,EAAIkwD,EACVlwD,EAAE9e,EAAIoiB,KAAKgoC,OAAO/d,OAASjqB,KAAKuwC,SAASkB,mBAAqBgoB,EAAG77E,EAAI+G,EAAE/G,GACvE8e,EAAEjW,EAAIuZ,KAAKgoC,OAAO/d,OAASjqB,KAAKuwC,SAASkB,mBAAqBgoB,EAAGhzE,EAAI9B,EAAE8B,GACvEuZ,KAAKuwC,SAASwd,mBAAmBzwE,EAAGof,2CAWzBjE,EAA0BlJ,GACvC,gBA7EyDilD,IAqE3CyW,iCAAgC,IAAI1pE,GACpC0pE,qCAAoC,IAAIl+C,GACxCk+C,oCAAmC,IAAIp+C,GACvCo+C,gCAA+B,IAAI1pE,GACnC0pE,gCAA+B,IAAI1pE,GACnC0pE,gCAA+B,IAAI1pE,GsCltLrD,IAAMm4E,GAAqB,IAAI7yB,GACzB8yB,GAAoB,IAAI5zD,GACxB6zD,GAAqB,IAAI7zD,GACzB8zD,GAAqB,IAAI9zD,GACzB+zD,GAAuB,IAAI9kD,GAC3B+kD,GAAwB,IAAI9kD,GAO5B+kD,GAAc,IAAInzB,GAClBozB,GAAmB,IAAI1yD,GACvB2yD,GAAe,IAAI3yD,GACnB4yD,GAAyB,IAAI5yD,GAKtB6yD,yBA4CCjjE,gCA3CG,iBACJ,sBACK,wBAEY,IAAIwtC,mBAEJ,sBACE,+BAGkB,sBAGlC,oBACC,iBAEM,IAAIpjD,sBACV,6BAEuC,oBAI1C7D,yBAGK,4BACK,sBACN,uBAEC,iBAEI,IAAI2oD,iBACL,IAAI0G,gBACiB,CAAC,4BAGF,4BACpB,OAMbstB,UAAY,OACZC,UAAU52E,KAAKyT,4DAKCmrC,QAChB4f,sBAAwB5f,2CAMdpgB,QACVjB,iBAAiBkkB,gBAAkBjjB,6CAKvBogB,QACZrhB,iBAAiB4kB,kBAAoBvD,2CAMjCrlD,yDAAkB,MACvB+iB,KAAKwlB,iBACD,IAAIr9B,UAGNpK,EAAY,IAAI2lC,GAAOzmC,EAAK+iB,aAGlCjiB,EAAEmkD,OAAS,KACXnkD,EAAEwe,OAASyD,KAAK1D,WACZ0D,KAAK1D,kBACFA,WAAW4lC,OAASnkD,QAEtBue,WAAave,IAChBiiB,KAAKstC,YAEAvvD,sCAOGA,MAENiiB,KAAKwlB,iBACD,IAAIr9B,cAIRoyE,EAAyBx8E,EAAEkf,YACxBs9D,GAAI,KACHC,EAAmBD,EACzBA,EAAKA,EAAGniE,KAEJ4H,KAAKkiD,4BACFA,sBAAsBuY,gBAAgBD,EAAInhE,YAG5CqhE,aAAaF,EAAInhE,OAEtBtb,EAAEkf,YAAcs9D,EAElBx8E,EAAEkf,YAAc,aAIV09D,EAA+B58E,EAAE4f,iBAC9Bg9D,GAAK,KACJC,EAAyBD,EAC/BA,EAAMA,EAAIE,eACVD,EAAKE,WAAWC,WAAWh9E,WAK3B8pC,EAA2B9pC,EAAEioC,cAC1B6B,GAAI,KACHC,EAAqBD,EAC3BA,EAAKA,EAAGzvB,UACH6oB,iBAAiBgF,QAAQ6B,EAAIpF,SAEpC3kC,EAAEioC,cAAgB,aAGdtpB,EAAsB3e,EAAE2nC,cACrBhpB,GAAG,KACFs+D,EAAgBt+D,EACtBA,EAAIA,EAAEH,OAEFyD,KAAKkiD,4BACFA,sBAAsB+Y,kBAAkBD,GAG/CA,EAAG90C,iBACH80C,EAAGpzE,QAEH7J,EAAE2nC,cAAgBhpB,EAClB3e,EAAE4nC,gBAAkB,EAEtB5nC,EAAE2nC,cAAgB,KAClB3nC,EAAE4nC,eAAiB,EAGf5nC,EAAEmkD,SACJnkD,EAAEmkD,OAAO3lC,OAASxe,EAAEwe,QAGlBxe,EAAEwe,SACJxe,EAAEwe,OAAO2lC,OAASnkD,EAAEmkD,QAGlBnkD,IAAMiiB,KAAK1D,kBACRA,WAAave,EAAEwe,UAGpByD,KAAKstC,gDAmDGrwD,MACN+iB,KAAKwlB,iBACD,IAAIr9B,UAGNhC,EAAai0E,EAAQc,cAAcj+E,GAGzCkJ,EAAE+7C,OAAS,KACX/7C,EAAEoW,OAASyD,KAAK/C,YACZ+C,KAAK/C,mBACFA,YAAYilC,OAAS/7C,QAEvB8W,YAAc9W,IACjB6Z,KAAKutC,aAIPpnD,EAAEyiC,QAAQH,KAAO,KACjBtiC,EAAEyiC,QAAQxwB,KAAOjS,EAAE2iC,QAAQ7rB,YACvB9W,EAAE2iC,QAAQ7rB,cACZ9W,EAAE2iC,QAAQ7rB,YAAYwrB,KAAOtiC,EAAEyiC,SAEjCziC,EAAE2iC,QAAQ7rB,YAAc9W,EAAEyiC,QAG1BziC,EAAE0iC,QAAQJ,KAAO,KACjBtiC,EAAE0iC,QAAQzwB,KAAOjS,EAAE4iC,QAAQ9rB,YACvB9W,EAAE4iC,QAAQ9rB,cACZ9W,EAAE4iC,QAAQ9rB,YAAYwrB,KAAOtiC,EAAE0iC,SAEjC1iC,EAAE4iC,QAAQ9rB,YAAc9W,EAAE0iC,YAEpBvvB,EAAgBnT,EAAE2iC,QAClBtvB,EAAgBrT,EAAE4iC,YACU5iC,EAAEiiC,2BAI9Bj4B,EAA6BqJ,EAAMipB,iBAChCtyB,GACDA,EAAK2Q,QAAUxH,GAGjBnJ,EAAKuyB,QAAQK,mBAGf5yB,EAAOA,EAAKiI,YAMTjS,uCAKIA,MACP6Z,KAAKwlB,iBACD,IAAIr9B,MAIRhC,EAAE+7C,SACJ/7C,EAAE+7C,OAAO3lC,OAASpW,EAAEoW,QAGlBpW,EAAEoW,SACJpW,EAAEoW,OAAO2lC,OAAS/7C,EAAE+7C,QAGlB/7C,IAAM6Z,KAAK/C,mBACRA,YAAc9W,EAAEoW,YAIjBjD,EAAgBnT,EAAE2iC,QAClBtvB,EAAgBrT,EAAE4iC,QAClBC,EAA4B7iC,EAAEiiC,sBAGpC9uB,EAAMipB,UAAS,GACf/oB,EAAM+oB,UAAS,GAGXp8B,EAAEyiC,QAAQH,OACZtiC,EAAEyiC,QAAQH,KAAKrwB,KAAOjS,EAAEyiC,QAAQxwB,MAG9BjS,EAAEyiC,QAAQxwB,OACZjS,EAAEyiC,QAAQxwB,KAAKqwB,KAAOtiC,EAAEyiC,QAAQH,MAG9BtiC,EAAEyiC,UAAYtvB,EAAM2D,cACtB3D,EAAM2D,YAAc9W,EAAEyiC,QAAQxwB,MAGhCjS,EAAEyiC,QAAQhhC,QAGNzB,EAAE0iC,QAAQJ,OACZtiC,EAAE0iC,QAAQJ,KAAKrwB,KAAOjS,EAAE0iC,QAAQzwB,MAG9BjS,EAAE0iC,QAAQzwB,OACZjS,EAAE0iC,QAAQzwB,KAAKqwB,KAAOtiC,EAAE0iC,QAAQJ,MAG9BtiC,EAAE0iC,UAAYrvB,EAAMyD,cACtBzD,EAAMyD,YAAc9W,EAAE0iC,QAAQzwB,MAGhCjS,EAAE0iC,QAAQjhC,QAEVwyE,EAAQe,eAAeh1E,KAGrB6Z,KAAKutC,cAGFvkB,UACC74B,EAA6BqJ,EAAMipB,iBAChCtyB,GACDA,EAAK2Q,QAAUxH,GAGjBnJ,EAAKuyB,QAAQK,mBAGf5yB,EAAOA,EAAKiI,kDAKGnb,MAKf+iB,KAAKwlB,iBACD,IAAIr9B,UAGN5E,EAAI,IAAIwzD,GAAiB95D,EAAK+iB,aAGpCzc,EAAE2+C,OAAS,KACX3+C,EAAEgZ,OAASyD,KAAKhD,qBACZgD,KAAKhD,4BACFA,qBAAqBklC,OAAS3+C,QAEhCyZ,qBAAuBzZ,EAErBA,gDAGaA,MAKhByc,KAAKwlB,iBACD,IAAIr9B,MAIR5E,EAAE2+C,SACJ3+C,EAAE2+C,OAAO3lC,OAAShZ,EAAEgZ,QAGlBhZ,EAAEgZ,SACJhZ,EAAEgZ,OAAO2lC,OAAS3+C,EAAE2+C,QAGlB3+C,IAAMyc,KAAKhD,4BACRA,qBAAuBzZ,EAAEgZ,sEAIInF,YAM3BgkE,EAAkBl/D,WACrBm/D,EAAiB1tE,GACZ8K,EAASyD,EAAMo/D,wBAAoC,OAAX7iE,EAAiBA,EAASA,EAAO8D,OAChF8+D,EAAiBv9E,EAAMu9E,EAAgB5iE,EAAOG,oBAEzCyiE,SAVgD,OAA9Br7D,KAAKhD,qBACvB,EAaF9F,GACL8I,KAAKs6D,UAAUt1E,SACfo2E,EAAkBp7D,MAClB5I,gCAKF80B,EACA6a,EACAD,OACAE,yDAA6BhnC,KAAKu7D,sCAAsCrvC,GAElEsvC,EAAYvB,GAAiBryE,QAG/BoY,KAAK6lB,oBACF5E,iBAAiBoF,uBACjBR,cAAe,QAGjB41C,UAAW,MAEV1jE,EAAOiiE,GACbjiE,EAAKm0B,GAAKA,EACVn0B,EAAKgvC,mBAAqBA,EAC1BhvC,EAAK+uC,mBAAqBA,EAExB/uC,EAAKivC,mBAAqBA,EAG1BjvC,EAAKkyB,OADHiC,EAAK,EACO,EAAIA,EAEJ,EAGhBn0B,EAAKu0B,QAAUtsB,KAAKq6D,UAAYnuC,EAEhCn0B,EAAKs0B,aAAersB,KAAK07D,mBAGnBnyE,EAAQ2wE,GAAatyE,gBACtBq5B,iBAAiBtrB,eACjBgmE,UAAUr1B,QAAU/8C,EAAM2C,kBAG3B8T,KAAK47D,gBAAkB7jE,EAAKm0B,GAAK,EAAG,SAChC3iC,EAAQ2wE,GAAatyE,QAEhBrE,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC/ChZ,EAAE03C,MAAMljC,QAGPkjC,MAAMljC,QACN4jE,UAAUp1B,MAAQh9C,EAAM2C,qBAI3B8T,KAAK67D,qBAAuB9jE,EAAKm0B,GAAK,EAAG,KACrC3iC,EAAQ2wE,GAAatyE,aACtBk0E,SAAS/jE,QACT4jE,UAAU/0B,SAAWr9C,EAAM2C,kBAG9B6L,EAAKm0B,GAAK,SACPmuC,UAAYtiE,EAAKkyB,QAGpBjqB,KAAK+7D,oBACFC,mBAGFP,UAAW,OAEXE,UAAU5jE,KAAOyjE,EAAUtvE,4DAW3B,IAAIu1B,EAAOzhB,KAAK1D,WAAYmlB,EAAMA,EAAOA,EAAKllB,OACjDklB,EAAKsD,QAAQlhC,UACb49B,EAAKuD,SAAW,0FAWKyf,QAChBw3B,iGAEAA,WAAW,yHAKlB5tD,EACAjR,EACA+0D,WAEKlxC,iBAAiBC,aAAa/M,MAAM/W,GAAM,SAAC4V,OAGxCpY,EAFgCoY,EAAM/C,SAEHrV,eACrCyT,EACKA,EAAS6tD,cAActhE,IACrBu3D,GACFA,EAAGv3D,MAIYyT,aAAoBo2B,OACvC,IAAIlhD,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC3C8R,EAAS8tD,0BAA0B54E,IACrCA,EAAE42D,UAAU9rC,EAAUjR,wCAMjBA,OAActH,yDAAmB,eACvCqkD,UAAU/8C,GAAM,SAACxC,UACpB9E,EAAIqI,KAAKvD,IACF,KAEF9E,+FAUgB2uC,QAChB23B,sGAEAA,gBAAgB,8HAKvB/tD,EACAvqB,EACAquE,WAEKlxC,iBAAiBC,aAAa9M,WACjCtwB,GACA,SAACkvB,OAGOpY,EAFgCoY,EAAM/C,SAEHrV,eACrCyT,EACKA,EAAS6tD,cAActhE,IACrBu3D,GACFA,EAAGv3D,MAKUyT,aAAoBo2B,OACvC,IAAIlhD,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC3C8R,EAAS8tD,0BAA0B54E,IACrCA,EAAE84E,eAAehuD,EAAUvqB,6CAMjBA,OAAWgS,yDAAmB,eACzCumE,eAAev4E,GAAO,SAAC8W,UAC1B9E,EAAIqI,KAAKvD,IACF,KAEF9E,kGAgBgB2uC,QAChB63B,yLAEAA,mBAAmB,iNAO1BjuD,EACAxT,EACAtL,EACAiqB,EACA24C,OAEM/0D,EAAeg9D,EAAQmC,4BAC7B1hE,EAAMimB,YAAY1jB,EAAMoc,EAAWjqB,QAC9B0xB,iBAAiBC,aAAa/M,MAAM/W,GAAM,SAAC4V,OACxCwpD,EAAgCxpD,EAAM/C,SAEtCrV,EAAqB4hE,EAAc5hE,WAEvCpT,EACEqT,EACAtL,EACAqL,EAAQE,WACR0hE,EAAc7iD,WACdH,EACA5e,EAAQkoC,UAAUl4C,gBAEpB,IACIyjB,SACKA,EAAS6tD,cAActhE,GACzB,GAAIu3D,SACFA,EAAGv3D,UAGP,KAEiByT,aAAoBo2B,OACvC,IAAIlhD,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC3C8R,EAAS8tD,0BAA0B54E,IACrCA,EAAE42D,UAAU9rC,EAAUjR,gDAO5BvC,EACAtL,EACAiqB,OACA1jB,yDAAmB,eAEd2mE,kBAAkB5hE,EAAOtL,EAAOiqB,GAAW,SAAC5e,UAC/C9E,EAAIqI,KAAKvD,IACF,KAEF9E,kGAMgB2uC,QAChBi4B,yGAEAA,mBAAmB,iIAK1BruD,EACAvqB,EACAquE,WAEKlxC,iBAAiBC,aAAa9M,WACjCtwB,GACA,SAACkvB,OAGOpY,EAFgCoY,EAAM/C,SAEHrV,WACrCA,EAAQqoB,UAAUn/B,GAAQ,IACxBuqB,SACKA,EAAS6tD,cAActhE,GACzB,GAAIu3D,SACFA,EAAGv3D,UAGP,KAGeyT,MACnB,IAAI9qB,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC3C8R,EAAS8tD,0BAA0B54E,IACrCA,EAAE84E,eAAehuD,EAAUvqB,gDAMdA,OAAWgS,yDAAmB,eAC5C6mE,kBAAkB74E,GAAO,SAAC8W,UAC7B9E,EAAIqI,KAAKvD,IACF,KAEF9E,wFAYgB4uC,QAChBk4B,uIAEAA,SAAS,+JAShBvuD,EACA+wC,EACAC,EACA8S,OAEM9yE,EAAwB+6E,EAAQyC,mBACtCx9E,EAAMytB,YAAc,EACpBztB,EAAM8W,GAAGzS,KAAK07D,GACd//D,EAAM+W,GAAG1S,KAAK27D,QACTp+B,iBAAiBC,aAAa7M,QACjCh1B,GACA,SAACA,EAAuB2zB,OAChBwpD,EAAgCxpD,EAAM/C,SAEtCrV,EAAqB4hE,EAAc5hE,QACnCrL,EAAgBitE,EAAc7iD,WAC9Bx6B,EAA0Bi7E,EAAQ0C,oBACnBliE,EAAQyZ,QAAQl1B,EAAQE,EAAOkQ,GAC3C,KACDyd,EAAmB7tB,EAAO6tB,SAC1BlpB,EAAgBs2E,EAAQxa,mBAC9B97D,EAAMQ,KACH,EAAI0oB,GAAYoyC,EAAOxhE,EAAIovB,EAAWqyC,EAAOzhE,GAC7C,EAAIovB,GAAYoyC,EAAO34D,EAAIumB,EAAWqyC,EAAO54D,GAE5C4nB,SACKA,EAAS6tD,cAActhE,EAAS9W,EAAO3E,EAAO+D,OAAQ8pB,GACxD,GAAImlD,SACFA,EAAGv3D,EAAS9W,EAAO3E,EAAO+D,OAAQ8pB,UAGtC3tB,EAAMytB,eAGSuB,MACnB,IAAI9qB,EAAIyc,KAAKhD,qBAAsBzZ,EAAGA,EAAIA,EAAEgZ,OAC3C8R,EAAS8tD,0BAA0B54E,IACrCA,EAAE8wB,QAAQhG,EAAU+wC,EAAQC,sCAMzBD,EAAYC,OACjB/mD,EAA2B,KAC3BykE,EAAe,cACd1oD,QACH+qC,EACAC,GACA,SAACzkD,EAAoB9W,EAAeZ,EAAgB8pB,UAC9CA,EAAW+vD,IACbA,EAAe/vD,EACf1U,EAASsC,GAEJmiE,KAGJzkE,qCAGE8mD,EAAYC,OAAYvpD,yDAAmB,eAC/Cue,QACH+qC,EACAC,GACA,SAACzkD,EAAoB9W,EAAeZ,EAAgB8pB,UAClDlX,EAAIqI,KAAKvD,GACF,KAGJ9E,+CAOAkK,KAAK1D,yDAOL0D,KAAK/C,mEAIL+C,KAAKhD,qEASLgD,KAAKihB,iBAAiB+E,uDAId+B,MACXA,IAAS/nB,KAAKg9D,oBAIbA,aAAej1C,GACf/nB,KAAKg9D,kBACH,IAAIj/E,EAAIiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACrCxe,EAAEwkC,UAAS,qDAMRviB,KAAKg9D,qDAIEj1C,QACT2zC,eAAiB3zC,mDAIf/nB,KAAK07D,4DAIO3zC,QACd8zC,oBAAsB9zC,wDAIpB/nB,KAAK67D,2DAIC9zC,QACRk1C,cAAgBl1C,kDAId/nB,KAAKi9D,6DAKLj9D,KAAKihB,iBAAiBC,aAAag8C,8DAKnCl9D,KAAKstC,2DAKLttC,KAAKutC,8DAKLvtC,KAAKihB,iBAAiBqkB,8DAKtBtlC,KAAKihB,iBAAiBC,aAAai8C,gEAKnCn9D,KAAKihB,iBAAiBC,aAAak8C,iEAMnCp9D,KAAKihB,iBAAiBC,aAAam8C,oDAIjClmE,OAAayvB,iEACjBrlC,GAAO00C,WAAWj2B,KAAKs6D,UAAWnjE,UAChCmjE,UAAU52E,KAAKyT,GAEhByvB,OACG,IAAI7oC,EAAmBiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACpDxe,EAAEwkC,UAAS,+CAQVviB,KAAKs6D,oDAKLt6D,KAAKy7D,oDAIK1zC,QACZg0C,cAAgBh0C,sDAKd/nB,KAAK+7D,kDAMFppD,MACN3S,KAAKwlB,iBACD,IAAIr9B,UAGP,IAAIpK,EAAmBiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACpDxe,EAAE2b,KAAKnW,EAAE+B,QAAQqtB,GACjB50B,EAAEymC,QAAQvzB,GAAG3L,QAAQqtB,GACrB50B,EAAEymC,QAAQp3B,EAAE9H,QAAQqtB,OAGjB,IAAIxsB,EAAoB6Z,KAAK/C,YAAa9W,EAAGA,EAAIA,EAAEoW,OACtDpW,EAAEsuB,YAAY9B,QAGXsO,iBAAiBC,aAAazM,YAAY9B,sDAKxC3S,KAAKihB,6DAKLjhB,KAAK27D,wCAGR5jE,OAGG,IAAIha,EAAIiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACrCxe,EAAEwmC,MAAM7gC,KAAK3F,EAAE2b,UAMZ,IAAIohE,EAAa96D,KAAKrC,iBAAkBm9D,EAAYA,EAAaA,EAAWv+D,OAC/Eu+D,EAAWwC,KAAKvlE,QAIf4jE,UAAUn1B,UAAY,OACtBm1B,UAAUl1B,cAAgB,OAC1Bk1B,UAAUj1B,cAAgB,MAGzB62B,EAASv9D,KAAKw9D,SACpBD,EAAOtyE,WACL+U,KAAKstC,YACLttC,KAAKihB,iBAAiBqkB,eACtBtlC,KAAKutC,aACLvtC,KAAKihB,iBAAiB4kB,uBAInB,IAAI9nD,EAAIiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACrCxe,EAAEgkD,cAAe,MAEd,IAAI30C,EAAI4S,KAAKihB,iBAAiB+E,cAAe54B,EAAGA,EAAIA,EAAEmP,OACzDnP,EAAE20C,cAAe,MAEd,IAAI57C,EAAI6Z,KAAK/C,YAAa9W,EAAGA,EAAIA,EAAEoW,OACtCpW,EAAE47C,cAAe,EAID/hC,KAAKstC,oBACjBzkD,EAAQmX,KAAKy9D,QACVC,EAAO19D,KAAK1D,WAAYohE,EAAMA,EAAOA,EAAKnhE,WAC7CmhE,EAAK37B,cAIJ27B,EAAK5gE,WAAc4gE,EAAK9gE,gBAKzB8gE,EAAK7gE,WAKT0gE,EAAOI,YACHC,EAAa,MACjB/0E,EAAM+0E,KAAgBF,EACtBA,EAAK37B,cAAe,EAGb67B,EAAa,GAAG,KAEf7/E,EAAmB8K,IAAQ+0E,OAC5B7/E,QACG,IAAIoK,SAGZo1E,EAAOM,QAAQ9/E,GAGfA,EAAEmmC,aAAc,MAIZnmC,EAAE8e,eAKD,IAAIgrB,EAAK9pC,EAAEioC,cAAe6B,EAAIA,EAAKA,EAAGzvB,KAAM,KACzCsqB,EAAUmF,EAAGnF,YAGfA,EAAQqf,cAKPrf,EAAQo7C,aAAgBp7C,EAAQojB,kBAK/BnD,EAAUjgB,EAAQ0e,WAAWhf,WAC7BygB,EAAUngB,EAAQ2e,WAAWjf,eAC/BugB,IAAWE,GAIf06B,EAAOjX,WAAW5jC,GAClBA,EAAQqf,cAAe,MAEjBjhC,EAAQ+mB,EAAG/mB,MAGbA,EAAMihC,eAKVl5C,EAAM+0E,KAAgB98D,EACtBA,EAAMihC,cAAe,SAIlB,IAAIw4B,EAAKx8E,EAAEkf,YAAas9D,EAAIA,EAAKA,EAAGniE,SACnCmiE,EAAGlhE,MAAM0oC,kBAIPjhC,EAAQy5D,EAAGz5D,MAGZA,EAAMlE,aAIX2gE,EAAOQ,SAASxD,EAAGlhE,OACnBkhE,EAAGlhE,MAAM0oC,cAAe,EAEpBjhC,EAAMihC,eAKVl5C,EAAM+0E,KAAgB98D,EACtBA,EAAMihC,cAAe,MAI2D,IAAP,EAAxEw7B,EAAOtiC,MAAMj7B,KAAK27D,UAAW5jE,EAAMiI,KAAKs6D,UAAWt6D,KAAKg9D,gBAC3DO,EAAOS,eAIJ,IAAIzgF,EAAI,EAAGA,EAAIggF,EAAOjwB,cAAe/vD,EAAG,KAErCQ,EAAIw/E,EAAOrwC,SAAS3vC,OACtBQ,EAAE8e,YACJ9e,EAAEgkD,cAAe,QAKlB,IAAIxkD,EAAI,EAAGA,EAAIsL,EAAMzL,QACnByL,EAAMtL,KADuBA,EAIlCsL,EAAMtL,GAAK,SAGPgM,EAAQ4wE,GAAuBvyE,aAGhCq2E,iCAGAh9C,iBAAiBoF,uBACjBs1C,UAAUh1B,WAAap9C,EAAM2C,0EAK7B,IAAInO,EAAIiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OAEhCxe,EAAEgkD,kBAIHhkD,EAAE8e,WAKN9e,EAAE6pC,uDAIG7vB,OACDwlE,EAAmBv9D,KAAKw9D,YAC9BD,EAAOtyE,WACL8T,IAAqB,EACrBA,GACA,EACAiB,KAAKihB,iBAAiB4kB,mBAGpB7lC,KAAK47D,eAAgB,KAClB,IAAI79E,EAAmBiiB,KAAK1D,WAAYve,EAAGA,EAAIA,EAAEwe,OACpDxe,EAAEgkD,cAAe,EACjBhkD,EAAEymC,QAAQve,OAAS,MAGhB,IAAI7Y,EAAsB4S,KAAKihB,iBAAiB+E,cAAe54B,EAAGA,EAAIA,EAAEmP,OAE3EnP,EAAE60C,WAAY,EACd70C,EAAE20C,cAAe,EACjB30C,EAAEi1C,WAAa,EACfj1C,EAAEq0C,MAAQ,SAKL,SAEHy8B,EAA+B,KAC/BC,EAAW,EAEN/wE,EAAI4S,KAAKihB,iBAAiB+E,cAAe54B,EAAGA,EAAIA,EAAEmP,UAEpDnP,EAAE0wE,eAKH1wE,EAAEi1C,WAAavjC,SAIfuH,EAAQ,KACRjZ,EAAE60C,UAEJ57B,EAAQjZ,EAAEq0C,UACL,KACCqD,EAAgB13C,EAAEw1B,cAClBmiB,EAAgB33C,EAAE01B,iBAGpBgiB,EAAGlC,YAAcmC,EAAGnC,wBAIlBhU,EAAakW,EAAGhC,UAChBjU,EAAakW,EAAGjC,UAEhBx7C,EAAoBsnC,EAAGx0B,OACvB7S,EAAoBsnC,EAAGz0B,OAIvB4rC,EAAmBpX,EAAG9xB,eAAaxV,EACnC2+C,EAAmBpX,EAAG/xB,eAAavV,MAGpCy+C,IAAYC,eAIXm4B,EAAoBxvC,EAAGyvC,gBAAc/2E,EACrCg3E,EAAoBzvC,EAAGwvC,gBAAc92E,MAGtC62E,IAAaE,eAMdr4D,EAAiB2oB,EAAGpK,QAAQve,OAE5B2oB,EAAGpK,QAAQve,OAAS4oB,EAAGrK,QAAQve,QACjCA,EAAS4oB,EAAGrK,QAAQve,OACpB2oB,EAAGpK,QAAQ6D,QAAQpiB,IACV4oB,EAAGrK,QAAQve,OAAS2oB,EAAGpK,QAAQve,SACxCA,EAAS2oB,EAAGpK,QAAQve,OACpB4oB,EAAGrK,QAAQ6D,QAAQpiB,QAKfxlB,EAAiB2M,EAAE43C,iBACnBtkD,EAAiB0M,EAAE63C,iBAGnB5lD,EAAoBy6E,GAC1Bz6E,EAAMG,OAAOqI,SAASi9C,EAAGhqC,WAAYra,GACrCpB,EAAMI,OAAOoI,SAASk9C,EAAGjqC,WAAYpa,GACrCrB,EAAM0K,OAAOrG,KAAKkrC,EAAGpK,SACrBnlC,EAAM4K,OAAOvG,KAAKmrC,EAAGrK,SACrBnlC,EAAMuK,KAAO,MAEPzK,EAAsB46E,GAC5BzwE,EAAenK,EAAQE,OAGjB8mB,EAAehnB,EAAOwK,EAE1B0c,MADElnB,EAAOuK,MACD5L,EAAMmoB,GAAU,EAAIA,GAAUE,EAAM,GAEpC,EAGV/Y,EAAEq0C,MAAQp7B,EACVjZ,EAAE60C,WAAY,EAGZ57B,EAAQ83D,IAEVD,EAAa9wE,EACb+wE,EAAW93D,MAII,OAAf63D,GAAuB,EAAI,GAAKj7E,GAAak7E,EAAU,MAEpDvC,gBAAiB,YAKlB92B,EAAgBo5B,EAAWt7C,cAC3BmiB,EAAgBm5B,EAAWp7C,cAC3B8L,EAAakW,EAAGhC,UAChBjU,EAAakW,EAAGjC,UAEhBy7B,EAAU3E,GAAmBl2E,KAAKkrC,EAAGpK,SACrCg6C,EAAU3E,GAAmBn2E,KAAKmrC,EAAGrK,YAE3CoK,EAAGvG,QAAQ81C,GACXtvC,EAAGxG,QAAQ81C,GAGXD,EAAW93B,OAAOpmC,KAAKihB,iBAAiB4kB,mBACxCq4B,EAAWj8B,WAAY,IACrBi8B,EAAW77B,WAGR67B,EAAWJ,aAAgBI,EAAWp4B,cAU3ClX,EAAGrM,UAAS,GACZsM,EAAGtM,UAAS,GAGZg7C,EAAOI,QACPJ,EAAOM,QAAQjvC,GACf2uC,EAAOM,QAAQhvC,GACf0uC,EAAOjX,WAAW4X,GAElBtvC,EAAGmT,cAAe,EAClBlT,EAAGkT,cAAe,EAClBm8B,EAAWn8B,cAAe,MAIrB,IAAIxkD,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBkkC,EAAqB,IAANlkC,EAAUqxC,EAAKC,SAChCpN,EAAKrnB,WACF,IAAIytB,EAA2BpG,EAAKuE,cAAe6B,GAClD01C,EAAOjwB,cAAgBiwB,EAAOpwB,gBAI9BowB,EAAOj4B,iBAAmBi4B,EAAOnwB,kBALqBvlB,EAAKA,EAAGzvB,KAAM,KASlEsqB,EAAqBmF,EAAGnF,YAG1BA,EAAQqf,kBAKNjhC,EAAQ+mB,EAAG/mB,aAEfA,EAAM1G,QACLqnB,EAAK48C,YACLv9D,EAAMu9D,gBAMH17B,EAAUjgB,EAAQ0e,WAAWhf,WAC7BygB,EAAUngB,EAAQ2e,WAAWjf,eAC/BugB,IAAWE,OAKT47B,EAAS9E,GAAkBj2E,KAAKod,EAAM0jB,SACvC1jB,EAAMihC,cACTjhC,EAAMunB,QAAQ81C,GAIhBz7C,EAAQ0jB,OAAOpmC,KAAKihB,iBAAiB4kB,mBAGhCnjB,EAAQo7C,aAORp7C,EAAQojB,cAObpjB,EAAQqf,cAAe,EACvBw7B,EAAOjX,WAAW5jC,GAGd5hB,EAAMihC,eAKVjhC,EAAMihC,cAAe,MAEjBjhC,EAAM1G,QACR0G,EAAMyhB,UAAS,GAGjBg7C,EAAOM,QAAQ/8D,MA5BbA,EAAM0jB,QAAQ9gC,KAAK+6E,GACnB39D,EAAMstC,gCAgCRc,EAAUwqB,GAChBxqB,EAAQhjB,IAAM,EAAIiyC,GAAYpmE,EAAKm0B,GACnCgjB,EAAQjlB,OAAS,EAAIilB,EAAQhjB,GAC7BgjB,EAAQ5iB,QAAU,EAClB4iB,EAAQpI,mBAAqB,GAC7BoI,EAAQnI,mBAAqBhvC,EAAKgvC,mBAEhCmI,EAAQlI,mBAAqBjvC,EAAKivC,mBAEpCkI,EAAQ7iB,cAAe,EACvBkxC,EAAOzB,SAAS5sB,EAAStgB,EAAGrE,cAAesE,EAAGtE,mBAGzC,IAAIhtC,EAAI,EAAGA,EAAIggF,EAAOjwB,cAAe/vD,EAAG,KACrCkkC,EAAe87C,EAAOrwC,SAAS3vC,MACrCkkC,EAAKsgB,cAAe,MAEhBtgB,EAAKrnB,QAITqnB,EAAKmG,0BAGA,IAAIC,EAA2BpG,EAAKuE,cAAe6B,EAAIA,EAAKA,EAAGzvB,KAClEyvB,EAAGnF,QAAQuf,WAAY,EACvBpa,EAAGnF,QAAQqf,cAAe,WAMzB9gB,iBAAiBoF,kBAElBrmB,KAAKi9D,cAAe,MACjBrB,gBAAiB,cA1ItBsC,EAAWQ,YAAW,GACtB9vC,EAAGpK,QAAQ9gC,KAAK66E,GAChB1vC,EAAGrK,QAAQ9gC,KAAK86E,GAChB5vC,EAAGwf,uBACHvf,EAAGuf,8DA4IK0sB,UAMZA,EAAWv+D,OAASyD,KAAKrC,iBACzBm9D,EAAW54B,OAAS,KAChBliC,KAAKrC,wBACFA,iBAAiBukC,OAAS44B,QAE5Bn9D,iBAAmBm9D,IACtB96D,KAAKsoB,kBACAwyC,2CAGQA,UAKXA,EAAW54B,SACb44B,EAAW54B,OAAO3lC,OAASu+D,EAAWv+D,QAEpCu+D,EAAWv+D,SACbu+D,EAAWv+D,OAAO2lC,OAAS44B,EAAW54B,QAEpCliC,KAAKrC,mBAAqBm9D,SACvBn9D,iBAAmBm9D,EAAWv+D,UAEnCyD,KAAKsoB,kBACPwyC,EAAW54B,OAAS,KACpB44B,EAAWv+D,OAAS,KAEbu+D,0CA3zCoB79E,UACnBA,EAAI8P,oBAED,IAAI48B,GAAgB1sC,iBAEpB,IAAI65C,GAAa75C,iBAEjB,IAAIw6C,GAAiBx6C,iBAErB,IAAIugD,GAAgBvgD,iBAEpB,IAAIi/C,GAAcj/C,iBAElB,IAAIuzC,GAAYvzC,iBAEhB,IAAI8iD,GAAa9iD,iBAEjB,IAAImiD,GAAYniD,iBAEhB,IAAI8xC,GAAgB9xC,kBAEpB,IAAI4hD,GAAY5hD,kBAEhB,IAAI44C,GAAa54C,kBAEjB,IAAIgwC,GAAYhwC,SAErB,IAAIkL,6CAIkBkR,aAoaf+gE,4BAA2B,IAAIntD,GAuH/BmtD,mBAAkB,IAAIvtD,GACtButD,oBAAmB,IAAIrtD,GACvBqtD,mBAAkB,IAAI74E,OCvyB1Bo9E,GAOX,WAAY7D,EAA0Br5C,2BAJF,mBACA,yBACM,yBACA,UAEnCq5C,WAAaA,OACbr5C,KAAOA,GCPHm9C,sFAIO,IAAIr9E,GAAO,EAAG,YAIvB,YAIC,aAIU,IAAIA,GAAO,EAAG,gBAIrB,gBAIC,gBAKD,qBAIK,YAIC,IAAIA,GAAO,EAAG,8DAE5BwW,MACEiI,KAAK1D,YAGN0D,KAAK6+D,sBACF1nE,QAAQzT,KAAKsc,KAAK1D,WAAWmlB,KAAKkM,WAAW29B,kBAE/C,IAAI/tE,EAA6ByiB,KAAK1D,WAAY/e,EAAGA,EAAIA,EAAEuhF,SAAU,KAClEr9C,EAAOlkC,EAAEkkC,QACVA,EAAK3kB,mBAKJiiE,EAAQ,IAAIx9E,GACZy9E,EAAQ,IAAIz9E,GACdwU,EAAO,EACPojB,EAAO,EACFve,EAAU6mB,EAAK9kB,iBAAkB/B,EAASA,EAAUA,EAAQ2B,OAAQ,KACrE0iE,EAAK,IAAI19E,GACT29E,EAAQtkE,EACXE,WACAqkE,qBAAqBn/D,KAAK9c,OAAQ8c,KAAKnZ,OAAQ46B,EAAK72B,eAAgBq0E,GACvElpE,GAAQmpE,EACRH,EAAMnhF,GAAKshF,EAAQD,EAAGrhF,EACtBmhF,EAAMt4E,GAAKy4E,EAAQD,EAAGx4E,MAClB24E,EAAe,EAOnBjmD,GAAQ+lD,GAJNE,EAFEp/D,KAAKq/D,WAEQzkE,EAAQ0kE,aAER,GAGjBN,EAAMphF,GAAKshF,EAAQD,EAAGrhF,EAAIwhF,EAC1BJ,EAAMv4E,GAAKy4E,EAAQD,EAAGx4E,EAAI24E,KAE5BL,EAAMnhF,GAAKmY,EACXgpE,EAAMt4E,GAAKsP,EAEXipE,EAAMphF,GAAKu7B,EACX6lD,EAAMv4E,GAAK0yB,IACPpjB,EAAO9S,SAILs8E,EAAgBv/D,KAAK7I,QAAQ0qB,QAAQx8B,UAC3Ck6E,EAAc7oE,QAAQsJ,KAAKia,QAAUlkB,GACrC0rB,EAAKyvB,WAAWquB,EAAeP,OAEzBQ,EAAY/9C,EAAKgG,gCAAgCs3C,EAAO,IAAIx9E,IAClEi+E,EAAUl6E,QAAQ0a,KAAKm5C,UACvBqmB,EAAU9oE,SAASsJ,KAAKy/D,WAAa1pE,GACrC0rB,EAAKyvB,WAAWsuB,EAAWT,GAG3Bt9C,EAAKi+C,aACDj+C,EAAKqsC,aAAersC,EAAK2M,UAAar4B,EAAO0rB,EAAKk+C,qBAAuB3/D,KAAK4/D,8CAKjFC,OACG17E,EAAI,IACJgS,EAAK,IAAI5U,GACT6U,EAAK,IAAI7U,GACf4U,EAAGvY,EAAIoiB,KAAK9c,OAAOtF,EAAIoiB,KAAKnZ,OAASmZ,KAAK9c,OAAOuD,EAAItC,EACrDgS,EAAG1P,EAAIuZ,KAAK9c,OAAOuD,EAAIuZ,KAAKnZ,OAASmZ,KAAK9c,OAAOtF,EAAIuG,EACrDiS,EAAGxY,EAAIoiB,KAAK9c,OAAOtF,EAAIoiB,KAAKnZ,OAASmZ,KAAK9c,OAAOuD,EAAItC,EACrDiS,EAAG3P,EAAIuZ,KAAK9c,OAAOuD,EAAIuZ,KAAKnZ,OAASmZ,KAAK9c,OAAOtF,EAAIuG,MAE/C8V,EAAQ,IAAIqM,GAAQ,EAAG,EAAG,IAEhCu5D,EAAUxlE,YAAYlE,EAAIC,EAAI6D,4DD/FM,sBACxB,cACgB,iBACA,wDAgBrB+F,KAAKzD,gDAOLyD,KAAKkiC,oDAcLliC,KAAK1D,2CAMNmlB,OACAtxB,EAAO,IAAIwuE,GAAiB3+D,KAAMyhB,GAGxCtxB,EAAK2uE,SAAW9+D,KAAK1D,WACrBnM,EAAK2vE,SAAW,KACZ9/D,KAAK1D,kBACFA,WAAWwjE,SAAW3vE,QAExBmM,WAAanM,IAChB6P,KAAKstC,YAGPn9C,EAAK0qE,eAAiBp5C,EAAK9jB,iBAC3BxN,EAAK4vE,eAAiB,KAClBt+C,EAAK9jB,mBACP8jB,EAAK9jB,iBAAiBoiE,eAAiB5vE,GAEzCsxB,EAAK9jB,iBAAmBxN,IACtBsxB,EAAK6G,qDAME7G,MAELzhB,KAAKstC,aAAe,QAChB,IAAInlD,cAKRgI,EAAO6P,KAAK1D,WACTnM,GAAQA,EAAKsxB,OAASA,GAC3BtxB,EAAOA,EAAK2uE,YAID,OAAT3uE,QACI,IAAIhI,MAIRgI,EAAK2vE,WACP3vE,EAAK2vE,SAAShB,SAAW3uE,EAAK2uE,UAE5B3uE,EAAK2uE,WACP3uE,EAAK2uE,SAASgB,SAAW3vE,EAAK2vE,UAE5B9/D,KAAK1D,aAAenM,SACjBmM,WAAanM,EAAK2uE,YAEvB9+D,KAAKstC,YAGHn9C,EAAK0qE,iBACP1qE,EAAK0qE,eAAekF,eAAiB5vE,EAAK4vE,gBAExC5vE,EAAK4vE,iBACP5vE,EAAK4vE,eAAelF,eAAiB1qE,EAAK0qE,gBAExCp5C,EAAK9jB,mBAAqBxN,IAC5BsxB,EAAK9jB,iBAAmBxN,EAAK0qE,kBAE7Bp5C,EAAK6G,uDAOAtoB,KAAK1D,iBACLy+D,WAAW/6D,KAAK1D,WAAWmlB,WAG7B6rB,YAAc,YElJV0yB,GAAb,qCAEuB,cAGb,cAGW,gBAGQ,IAAIz+E,GAAO,EAAG,gBAG/B,WAGL,WAGA,IAIM0+E,kDACD,YACO,cACC,aACD,cAEC,aAED,aACA,kBAEY,IAAI1+E,kBACrB,YAEL,YACA,6DAGEye,KAAKxf,qDAILwf,KAAKkgE,wCAIHjjF,QAEJuD,QAAUvD,EAAI+K,WAEdk4E,KAAO3+E,GAAOymB,UAAUhI,KAAKxf,cAE7B2/E,MAAQ5+E,GAAOymB,UAAUhI,KAAKxf,cAE9B4/E,KAAO7+E,GAAOymB,UAAUhI,KAAKxf,cAE7B6/E,MAAQ5iF,EAAkBuiB,KAAKxf,aAE/B,IAAIjD,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAAG,MAChC2iF,KAAK3iF,GAAGmG,KAAKzG,EAAI8C,SAASxC,SAC1B4iF,MAAM5iF,GAAGmG,KAAKzG,EAAI8C,SAASxC,SAC3B6iF,KAAK7iF,GAAGsG,cAEPs3B,EAAYl+B,EAAIqjF,OAAO/iF,QAEtB8iF,MAAM9iF,GADT49B,EAAI,EACU,EAAIA,EAEJ,MAIdnsB,EAAiBgR,KAAKxf,QAAU,EAChC+/E,EAAiBvgE,KAAKxf,QAAU,OAEjCggF,KAAO/iF,EAAkBuR,QAEzByxE,KAAOhjF,EAAkB8iF,OAEzB,IAAIhjF,EAAI,EAAGA,EAAIyR,IAAUzR,EAAG,KACzB4Y,EAAa6J,KAAKkgE,KAAK3iF,GACvB6Y,EAAa4J,KAAKkgE,KAAK3iF,EAAI,QAC5BijF,KAAKjjF,GAAKgE,GAAOmB,WAAWyT,EAAIC,OAGlC,IAAI7Y,EAAI,EAAGA,EAAIgjF,IAAUhjF,EAAG,KACzB4Y,EAAa6J,KAAKkgE,KAAK3iF,GACvB6Y,EAAa4J,KAAKkgE,KAAK3iF,EAAI,GAC3B8Y,EAAa2J,KAAKkgE,KAAK3iF,EAAI,GAE3BmjF,EAAan/E,GAAOU,MAAMmU,EAAID,EAAI5U,GAAOE,MACzCk/E,EAAap/E,GAAOU,MAAMoU,EAAID,EAAI7U,GAAOiD,MAEzClH,EAAYiE,GAAOkV,QAAQiqE,EAAIC,GAC/B5iF,EAAYwD,GAAO4D,MAAMu7E,EAAIC,QAE9BF,KAAKljF,GAAKqjB,GAAQtjB,EAAGS,QAGvBu8E,UAAU52E,KAAKzG,EAAIka,cACnBypE,UAAY3jF,EAAIu/D,aAChBqkB,KAAO5jF,EAAI6jF,QACXC,KAAO9jF,EAAI+jF,gCAIbvxD,EAAW9sB,MACJ,IAAN8sB,WAIE5uB,EAAYnC,KAAKuiF,KAAKxxD,EAAIzP,KAAK4gE,WAE5BrjF,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,OAC7B4iF,MAAM5iF,GAAGmG,KAAKsc,KAAKkgE,KAAK3iF,IACzByiB,KAAKqgE,MAAM9iF,GAAK,QACb6iF,KAAK7iF,GAAG8F,WAAWosB,EAAGzP,KAAKs6D,gBAE7B8F,KAAK7iF,GAAGmZ,QAAQ7V,QAChBq/E,KAAK3iF,GAAG8F,WAAWosB,EAAGzP,KAAKogE,KAAK7iF,QAGlC,IAAIA,EAAI,EAAGA,EAAIoF,IAAcpF,OAC3B2jF,eACAC,eACAD,kBAGD7qC,EAAgB,EAAI5mB,EACjBlyB,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAClCgE,GAAO87B,MAAMgZ,EAAO90C,GAAOU,MAAM+d,KAAKkgE,KAAK3iF,GAAIyiB,KAAKmgE,MAAM5iF,GAAIgE,GAAOE,MAAOue,KAAKogE,KAAK7iF,+CAQlFyR,EAAiBgR,KAAKxf,QAAU,EAE7BjD,EAAI,EAAGA,EAAIyR,IAAUzR,EAAG,KACzB4Y,EAAa6J,KAAKkgE,KAAK3iF,GACvB6Y,EAAa4J,KAAKkgE,KAAK3iF,EAAI,GAE3BsD,EAAYU,GAAOU,MAAMmU,EAAID,EAAI8pE,EAAOjf,KACxCogB,EAAYvgF,EAAEuC,YAEdi+E,EAAcrhE,KAAKqgE,MAAM9iF,GACzB+jF,EAActhE,KAAKqgE,MAAM9iF,EAAI,MAE/B8jF,EAAMC,IAAQ,OAIZ71E,EAAa41E,GAAOA,EAAMC,GAC1B/1E,EAAa+1E,GAAOD,EAAMC,GAEhCnrE,EAAG7S,WAAW0c,KAAK6gE,KAAOp1E,GAAMuU,KAAKwgE,KAAKjjF,GAAK6jF,GAAIvgF,GACnDuV,EAAG/S,WAAW2c,KAAK6gE,KAAOt1E,GAAMyU,KAAKwgE,KAAKjjF,GAAK6jF,GAAIvgF,sCAO9C2d,WACD+hE,EAAiBvgE,KAAKxf,QAAU,EAC7BjD,EAAI,EAAGA,EAAIgjF,IAAUhjF,OACvBkjF,KAAKljF,GAAKihB,4CAYX+hE,EAAiBvgE,KAAKxf,QAAU,EAE7BjD,EAAI,EAAGA,EAAIgjF,IAAUhjF,EAAG,KACzB4Y,EAAa6J,KAAKkgE,KAAK3iF,GACvB6Y,EAAa4J,KAAKkgE,KAAK3iF,EAAI,GAC3B8Y,EAAa2J,KAAKkgE,KAAK3iF,EAAI,GAE3BgkF,EAAavhE,KAAKqgE,MAAM9iF,GACxBikF,EAAaxhE,KAAKqgE,MAAM9iF,EAAI,GAC5BkkF,EAAazhE,KAAKqgE,MAAM9iF,EAAI,GAE5BmjF,EAAan/E,GAAOU,MAAMmU,EAAID,EAAI8pE,EAAOyB,MACzCf,EAAap/E,GAAOU,MAAMoU,EAAID,EAAI6pE,EAAO0B,MAEzCC,EAAgBlB,EAAG1/E,gBACnB6gF,EAAgBlB,EAAG3/E,mBAErB4gF,EAAQC,GAAU,OAIhBvkF,EAAYiE,GAAOkV,QAAQiqE,EAAIC,GAC/B5iF,EAAYwD,GAAO4D,MAAMu7E,EAAIC,GAE/BniE,EAAgBoC,GAAQtjB,EAAGS,GAEzB+jF,EAAcvgF,GAAO87B,OAAO,EAAIukD,EAAOlB,EAAGqB,WAAY9B,EAAO+B,OAC7DC,EAAc1gF,GAAO87B,MAAM,EAAIwkD,EAAOlB,EAAGoB,WAAY9B,EAAOiC,OAE5DC,EAAa5gF,GAAOC,KAAKsgF,EAAK7B,EAAOmC,MACrCC,EAAa9gF,GAAOU,MAAM6/E,EAAKG,EAAKhC,EAAOqC,MAC3CC,EAAaN,EAEf9oD,EACFooD,EAAKhgF,GAAO4D,MAAMg9E,EAAIA,GAAMX,EAAKjgF,GAAO4D,MAAMk9E,EAAIA,GAAMZ,EAAKlgF,GAAO4D,MAAMo9E,EAAIA,MACnE,IAATppD,GAIJA,EAAO,EAAIA,UAEPvH,EAAYpT,EAAQwB,KAAKygE,KAAKljF,GAE3Bq0B,EAAInT,IAETmT,GADApT,GAAS,EAAIC,IACDuB,KAAKygE,KAAKljF,QAGjBq0B,GAAKnT,IAEVmT,GADApT,GAAS,EAAIC,IACDuB,KAAKygE,KAAKljF,OAGlBupC,GAAmB9mB,KAAK+gE,KAAO5nD,EAAOvH,EAE5Czb,EAAG9S,WAAWk+E,EAAKz6C,EAASq7C,GAC5B/rE,EAAG/S,WAAWm+E,EAAK16C,EAASu7C,GAC5BhsE,EAAGhT,WAAWo+E,EAAK36C,EAASy7C,mCAQ3BC,WACGp1E,EAAa,IAAIkZ,GAAQ,GAAK,GAAK,IAEhC/oB,EAAI,EAAGA,EAAIyiB,KAAKxf,QAAU,IAAKjD,EACtCilF,EAAKnoE,YAAY2F,KAAKkgE,KAAK3iF,GAAIyiB,KAAKkgE,KAAK3iF,EAAI,GAAI6P,YAlHtC6yE,OAAM,IAAI1+E,GAqCV0+E,QAAO,IAAI1+E,GACX0+E,QAAO,IAAI1+E,GACX0+E,SAAQ,IAAI1+E,GACZ0+E,SAAQ,IAAI1+E,GACZ0+E,QAAO,IAAI1+E,GACX0+E,QAAO,IAAI1+E,GxC9K5B,IAAMuY,GAAyB,IAAIvY,GAC7ByY,GAAyB,IAAIzY,GAC7B2Y,GAA6B,IAAIoM,GAAQ,GAAK,GAAK,IACnD7L,GAAyB,IAAI6L,GA+C7BhL,GAAyB,IAAIgL,GAoE7BjK,GAAwB,IAAIiK,GAAQ,EAAG,EAAG,GAC1CpJ,GAAqB3b,GAAOymB,UAAU,GACtCxK,GAAqB,IAAI7b,GyC/HlB8gF,mDACwB,IAAIlhF,GAAO,EAAG,kBAE/B,eACF,eACC,mBACC,2DAEUmhF,EAAqB5sE,UACxCkK,KAAK2iE,sBAAsBD,EAAa5sE,gDAGrByxB,EAAoBzxB,UACvCkK,KAAK4iE,sBAAsBr7C,EAAYzxB,oDAGhB+sE,EAAkB/sE,OAE1CgtE,EAAoBD,EAASjlF,EAAI,GAAMoiB,KAAK+iE,QAC5CC,EAAoB,GAAMhjE,KAAKijE,SAAWJ,EAASp8E,SAClDqP,EAAIxR,IAAIw+E,EAAWE,oDAGIl7D,EAAiBhS,OAEzCotE,EAAqBp7D,EAAQlqB,EAAI,GAAMoiB,KAAK+iE,QAC5CI,EAAqB,GAAMnjE,KAAKijE,SAAWn7D,EAAQrhB,SAClDqP,EAAIxR,IAAI4+E,EAAYC,uDAGMC,EAAoBttE,OAC/C+sE,EAAmB/sE,EAAIpS,KAAK0/E,UAClC7hF,GAAO87B,MAAM,EAAIrd,KAAKqjE,OAAQR,EAAUA,GAExCthF,GAAO87B,MAAO,GAAMrd,KAAKijE,SAAYjjE,KAAKsjE,SAAUF,EAAYA,GACzDP,sDAG0BA,EAAkB/sE,OAC7CstE,EAAqBttE,EAAIpS,KAAKm/E,UAEpCthF,GAAO87B,MAAO,EAAIrd,KAAKsjE,SAAYtjE,KAAKijE,SAAUG,EAAYA,GAC9D7hF,GAAO87B,MAAMrd,KAAKqjE,OAAQD,EAAYA,GAC/BA,mDAGuBlnE,EAAepG,OACvCstE,EAAqBttE,EAAIpS,KAAKwY,UACpC3a,GAAOU,MAAMmhF,EAAYpjE,KAAK+wC,SAAUqyB,GAEjCA,mDAGuBA,EAAoBttE,OAC5CoG,EAAgBpG,EAAIpS,KAAK0/E,UAE/B7hF,GAAOskB,MAAM7F,KAAK+wC,SAAU70C,EAAOA,GAC5BA,gDAGoB4L,EAAiBhS,OACtC+sE,EAAmB7iE,KAAKujE,yBAAyBz7D,EAAShS,GAC1DstE,EAAqBpjE,KAAKwjE,4BAA4BX,EAAU/sE,UAC/DkK,KAAKyjE,yBAAyBL,EAAYttE,iDAGtBoG,EAAepG,OACpCstE,EAAqBpjE,KAAK0jE,yBAAyBxnE,EAAOpG,GAC1D+sE,EAAmB7iE,KAAK2jE,4BAA4BP,EAAYttE,UAC/DkK,KAAK4jE,yBAAyBf,EAAU/sE,sDAGfgS,EAAiBhS,OAC3C+sE,EAAmB7iE,KAAKujE,yBAAyBz7D,EAAShS,UACzDkK,KAAKwjE,4BAA4BX,EAAU/sE,YAMzC+tE,0EACqC,yEAM3BrnE,OACbsnE,EAAuC9jE,KAAK+jE,MAC9CD,IACFA,EAAIE,OACJF,EAAIG,UAAUznE,EAAGjZ,EAAE3F,EAAG4e,EAAGjZ,EAAEkD,GAC3Bq9E,EAAII,OAAO1nE,EAAGlb,EAAEgkB,kDAIA9I,OACZsnE,EAAuC9jE,KAAK+jE,MAC9CD,GACFA,EAAIK,8CAIWpkF,EAAoB6N,EAAqBqM,OACpD6pE,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,CACPA,EAAIM,YACJN,EAAIO,OAAOtkF,EAAS,GAAGnC,EAAGmC,EAAS,GAAG0G,OACjC,IAAIlJ,EAAI,EAAGA,EAAIqQ,EAAarQ,IAC/BumF,EAAIQ,OAAOvkF,EAASxC,GAAGK,EAAGmC,EAASxC,GAAGkJ,GAExCq9E,EAAIS,YACJT,EAAIU,YAAcvqE,EAAM6M,gBAAgB,GACxCg9D,EAAIW,mDAIgB1kF,EAAoB6N,EAAqBqM,OACzD6pE,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,CACPA,EAAIM,YACJN,EAAIO,OAAOtkF,EAAS,GAAGnC,EAAGmC,EAAS,GAAG0G,OACjC,IAAIlJ,EAAI,EAAGA,EAAIqQ,EAAarQ,IAC/BumF,EAAIQ,OAAOvkF,EAASxC,GAAGK,EAAGmC,EAASxC,GAAGkJ,GAExCq9E,EAAIS,YACJT,EAAIY,UAAYzqE,EAAM6M,gBAAgB,IACtCg9D,EAAIjyB,OACJiyB,EAAIU,YAAcvqE,EAAM6M,gBAAgB,GACxCg9D,EAAIW,6CAIUzpE,EAAgBjX,EAAgBkW,OAC1C6pE,EAAuC9jE,KAAK+jE,MAC9CD,IACFA,EAAIM,YACJN,EAAIa,IAAI3pE,EAAOpd,EAAGod,EAAOvU,EAAG1C,EAAQ,EAAW,EAAR0a,IAAW,GAClDqlE,EAAIU,YAAcvqE,EAAM6M,gBAAgB,GACxCg9D,EAAIW,kDAIezpE,EAAgBjX,EAAgBkX,EAAchB,OAC7D6pE,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,KACDc,EAAa5pE,EAAOpd,EACpBinF,EAAa7pE,EAAOvU,EAC1Bq9E,EAAIM,YACJN,EAAIa,IAAIC,EAAIC,EAAI9gF,EAAQ,EAAW,EAAR0a,IAAW,GACtCqlE,EAAIO,OAAOO,EAAIC,GACff,EAAIQ,OAAOM,EAAK3pE,EAAKrd,EAAImG,EAAQ8gF,EAAK5pE,EAAKxU,EAAI1C,GAC/C+/E,EAAIY,UAAYzqE,EAAM6M,gBAAgB,IACtCg9D,EAAIjyB,OACJiyB,EAAIU,YAAcvqE,EAAM6M,gBAAgB,GACxCg9D,EAAIW,gDAKaK,EAAmB/gF,EAAgBghF,EAA0B/8E,OAC1E87E,EAAuC9jE,KAAK+jE,SAC9CD,KACa,OAAXiB,MACG,IAAIxnF,EAAI,EAAGA,EAAIyK,IAASzK,EAAG,KACxByd,EAAS8pE,EAAQvnF,GACjB0c,EAAQ8qE,EAAOxnF,GACrBumF,EAAIY,UAAYzqE,EAAM6M,kBAEtBg9D,EAAIM,YACJN,EAAIa,IAAI3pE,EAAOpd,EAAGod,EAAOvU,EAAG1C,EAAQ,EAAW,EAAR0a,IAAW,GAClDqlE,EAAIjyB,WAED,CACLiyB,EAAIY,UAAY,4BAEX,IAAInnF,EAAI,EAAGA,EAAIyK,IAASzK,EAAG,KACxByd,EAAS8pE,EAAQvnF,GAEvBumF,EAAIM,YACJN,EAAIa,IAAI3pE,EAAOpd,EAAGod,EAAOvU,EAAG1C,EAAQ,EAAW,EAAR0a,IAAW,GAClDqlE,EAAIjyB,6CASO17C,EAAYC,EAAY6D,OACnC6pE,EAAuC9jE,KAAK+jE,MAC9CD,IACFA,EAAIM,YACJN,EAAIO,OAAOluE,EAAGvY,EAAGuY,EAAG1P,GACpBq9E,EAAIQ,OAAOluE,EAAGxY,EAAGwY,EAAG3P,GACpBq9E,EAAIU,YAAcvqE,EAAM6M,gBAAgB,GACxCg9D,EAAIW,gDAIajoE,OACbsnE,EAAuC9jE,KAAK+jE,MAC9CD,SACGrnE,cAAcD,GAEnBsnE,EAAIM,YACJN,EAAIO,OAAO,EAAG,GACdP,EAAIQ,OAAO,EAAG,GACdR,EAAIU,YAAcl+D,GAAQ0+D,IAAIl+D,gBAAgB,GAC9Cg9D,EAAIW,SAEJX,EAAIM,YACJN,EAAIO,OAAO,EAAG,GACdP,EAAIQ,OAAO,EAAG,GACdR,EAAIU,YAAcl+D,GAAQ2+D,MAAMn+D,gBAAgB,GAChDg9D,EAAIW,cAEC1nE,aAAaP,sCAILjZ,EAAW2hF,EAAcjrE,OAClC6pE,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,CACPA,EAAIY,UAAYzqE,EAAM6M,kBACtBo+D,GAAQC,GAAS9B,WAEX+B,GADNF,GAAQC,GAAS7B,UACY,EAC7BQ,EAAIuB,SAAS9hF,EAAE3F,EAAIwnF,EAAO7hF,EAAEkD,EAAI2+E,EAAOF,EAAMA,uCAM/BtnF,EAAW6I,EAAW6+E,OAChCxB,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,CACPA,EAAIE,OACJF,EAAIyB,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCzB,EAAI0B,KAAO,qBACLvrE,EAAiB4pE,EAAU4B,mBACjC3B,EAAIY,UAAYzqE,EAAM6M,kBACtBg9D,EAAI4B,SAASJ,EAAS1nF,EAAG6I,GACzBq9E,EAAIK,mDAQevmF,EAAW6I,EAAW6+E,OACrCxB,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,KACDvgF,EAAYsgF,EAAU8B,oBAAoBrhF,IAAI1G,EAAG6I,GAGjD6kD,EAAa65B,GAASp0B,SAC5BxvD,GAAOU,MAAMsB,EAAG+nD,EAAI/nD,OAGdsS,EAAasvE,GAAS9B,OAC5B9hF,GAAO87B,MAAM,EAAIxnB,EAAItS,EAAGA,OAGlBqiF,EAAc,GAAMT,GAASlC,SAAYkC,GAAS7B,SACxD/hF,GAAO87B,MAAMuoD,EAAIriF,EAAGA,GACpBA,EAAEkD,IAAM,MACFo/E,EAAahC,EAAUiC,qBAAqBxhF,IAChD,GAAMw/E,EAAIiC,OAAOC,MACjB,GAAMlC,EAAIiC,OAAOh2D,QAEnBxuB,GAAOskB,MAAMtiB,EAAGsiF,EAAItiF,GAEpBugF,EAAIE,OACJF,EAAIyB,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCzB,EAAI0B,KAAO,qBACLvrE,EAAiB4pE,EAAUoC,wBACjCnC,EAAIY,UAAYzqE,EAAM6M,kBACtBg9D,EAAI4B,SAASJ,EAAS/hF,EAAE3F,EAAG2F,EAAEkD,GAC7Bq9E,EAAIK,4CAIQ/mE,EAAcnD,OACtB6pE,EAAuC9jE,KAAK+jE,SAC9CD,EAAK,CACPA,EAAIU,YAAcvqE,EAAM6M,sBAClBlpB,EAAYwf,EAAK5W,WAAW5I,EAC5B6I,EAAY2W,EAAK5W,WAAWC,EAC5BvE,EAAYkb,EAAK7W,WAAW3I,EAAIwf,EAAK5W,WAAW5I,EAChD6xB,EAAYrS,EAAK7W,WAAWE,EAAI2W,EAAK5W,WAAWC,EACtDq9E,EAAIoC,WAAWtoF,EAAG6I,EAAGvE,EAAGutB,WArNCpI,IAyJdw8D,sBAA8B,IAAIv9D,GAAQ,GAAK,GAAK,IAepDu9D,uBAA8B,IAAItiF,GAClCsiF,wBAA+B,IAAItiF,GACnCsiF,2BAAmC,IAAIv9D,GAAQ,GAAK,GAAK,IAgDnE,IC1SK6/D,GD0SCC,GAAyB,IAAIvC,GAC7BsB,GAAmB,IAAI1C,GE1SvB4D,+EAQkC,OANtCz+E,uDAYA0+E,qCAAsC,+DAMDvoB,QACrCuoB,oCAAsCvoB,wEAOpC/9C,KAAKsmE,6CCpBHC,uFAKY9tE,EAA0B07D,aAMtCqS,2DAIwC,qBAIC,mBAI1B,IAAIjlF,2BAIM,IAAIA,gBAIvB,kBAIW,IAAIA,mBAIZ,eAIM,IAAI+kB,wBAIL,8BAQgB,uDAUlCmgE,SAAS,0CAMGC,QACZC,SAASjjF,KAAKgjF,uCAMF5wE,UACVA,EAAIpS,KAAKsc,KAAK2mE,0CAMRzB,QACR0B,WAAWljF,KAAKwhF,GAAMxuE,QAAQ,oCAMtBZ,UACNA,EAAIpS,KAAKsc,KAAK4mE,YAAYlwE,QAAQ,uCAMxByiD,QACZ0tB,mBAAmBnjF,KAAKy1D,uCAMZrjD,UACVA,EAAIpS,KAAKsc,KAAK6mE,qDAOPrrC,QACTsrC,QAAUtrC,4CAQRx7B,KAAK8mE,iDAMU3qE,QACjB4qE,QAAU5qE,oDAOR6D,KAAK+mE,yCAME9sE,QACT+sE,QAAQtjF,KAAKuW,oCAMJnE,UACPA,EAAIpS,KAAKsc,KAAKgnE,6CAMJC,QACZC,WAAaD,+CAOXjnE,KAAKknE,qDAMW9P,QAClB+P,iBAAmB/P,qDAOjBp3D,KAAKmnE,qDAOK94D,QACZ+4D,WAAa/4D,+CAQXrO,KAAKonE,4CAUEnjC,GACVjkC,KAAKqnE,cACFA,QAAQz2B,eACoB,EAA/B5wC,KAAKqnE,QAAQviB,sBAGZuiB,QAAUpjC,EACXjkC,KAAKqnE,cACFA,QAAQz2B,gBACX5wC,KAAKqnE,QAAQviB,2DASV9kD,KAAKqnE,qCAWZn7C,EACAo7C,OACAC,yDAA+BD,EAAkBA,EAAgBlqF,OAAS,KAE5C,OAA1B4iB,KAAKmnE,uBACD,IAAIh/E,UAERq/E,EAA2B,OAE1BC,iBAAmBznE,KAAKknE,WAAah7C,MAEpCw7C,EAAK,IAAIx3B,OACfw3B,EAAGztE,MAAMvW,KAAKsc,KAAKgnE,SACnBU,EAAGvrE,MAAQ6D,KAAK+mE,QAChBW,EAAGzjC,MAAQjkC,KAAKqnE,QAITrnE,KAAKynE,gBAAkB,GAAK,MAC5BA,iBAAmB,MAGlBjpE,EAAiC,EAAzBgoE,EAAcmB,SAAiBlpE,GAEvChc,EAAW+jF,EAAcmB,SACzBC,EAAuB,IAAIrmF,GAAO7C,KAAK6hB,IAAI/B,GAAQ9f,KAAK+hB,IAAIjC,IAGlEkpE,EAAGtiE,SAAS9gB,IACV0b,KAAK2mE,SAAS/oF,EAAIgqF,EAAqBhqF,EAAI6E,EAAWud,KAAK4mE,WAAWhpF,EACtEoiB,KAAK2mE,SAASlgF,EAAImhF,EAAqBnhF,EAAIhE,EAAWud,KAAK4mE,WAAWngF,GAGxEihF,EAAGvuB,SAASz1D,KAAKsc,KAAK6mE,oBACD,IAAjB7mE,KAAK8mE,SAEPY,EAAGvuB,SAAS91D,WAAW2c,KAAK8mE,QAASc,OAGjCzT,EAAgBn0D,KAAKmnE,iBAAiBtmB,eAAe6mB,GACvD1nE,KAAKonE,iBACFA,WAAWS,gBAAgB7nE,KAAKmnE,iBAAkBhT,GAErDmT,GAAmBE,EAA2BD,IAChDD,EAAgBE,GAA4BrT,KAE5CqT,SAEGA,4CA7NA9oF,KAAKM,mBFtEhB,SAAYmnF,GACVA,mDACAA,2CACAA,iDACAA,2CACAA,0CACAA,0DACAA,4DACAA,6DACAA,+DACAA,yCACAA,4CACAA,iDAZF,CAAYA,KAAAA,YAeC2B,gDAmBI,eAM4B,YAK7B,uDAvBWA,OAChBpkF,oDAEA1G,mDACA+qF,qDACA/pE,qFAoBG8C,eACL9jB,MAAQ8jB,EAAM9jB,WACd+qF,QAAUjnE,EAAMinE,aAChB/pE,KAAO8C,EAAM9C,KACXgC,cAIEgoE,yBAICC,OAAkCC,yDAAoBD,EAAO7qF,gCAMtD,OALZ6qF,OAASA,OACTC,UAAYA,iEAObC,EAAO,EACF5qF,EAAI,EAAGA,EAAIyiB,KAAKkoE,UAAW3qF,IAClC4qF,GAAQnoE,KAAKioE,OAAO1qF,GAAGP,aAElBmrF,WAIEC,kDAqEM,kBACE,0BACQ,eACqB,uBACKA,EAAkBC,2CAC5C,oBACL,OAGfzgF,uDAIA0gF,mBAAoB,OACpBC,QAAU,OACVC,cAAcJ,EAAkBC,0BAChC/jF,IAAI,yCAITmkF,OACAC,yDAA0BD,EAAWrrF,YAEhCurF,aAAeF,OACfG,kBAAoBF,OACpBG,aAAe,MACf,IAAItrF,EAAI,EAAGA,EAAIyiB,KAAK4oE,oBAAqBrrF,OACvCsrF,cAAgB7oE,KAAK2oE,aAAaprF,GAAG2qF,eAGvC5jF,IAAI0b,KAAK8oE,4CAIP9oE,KAAKuoE,oCAGHh5E,QACJw5E,UAAY/oE,KAAKuoE,UAAYh5E,OAC7Bg5E,QAAUvoE,KAAK6oE,aAAet5E,EAAQyQ,KAAK6oE,aAAet5E,OAC1Dy5E,QAAUhpE,KAAKipE,qEAKd15E,EAAQyQ,KAAK8oE,WACdxkF,IAAIiL,GAASyQ,KAAK6oE,aAAe,EAAIt5E,EAAQ,2CAI5CA,EAAQyQ,KAAK8oE,WACdxkF,IAAc,IAAViL,EAAcyQ,KAAK6oE,aAAe,EAAIt5E,EAAQ,mCAG1C25E,OACPC,EAAUnpE,KAAK+oE,sBAChBA,WAAY,EACbG,IACFA,EAAQ,GAAKC,GAAWnpE,KAAKopE,sBAExBD,wCAIc,OAAjBnpE,KAAKgpE,cACD,IAAI7gF,aAEL6X,KAAKgpE,QAAQhsF,2CAIC,OAAjBgjB,KAAKgpE,cACD,IAAI7gF,aAEL6X,KAAKgpE,QAAQhrE,6CAIC,OAAjBgC,KAAKgpE,cACD,IAAI7gF,aAEL6X,KAAKgpE,QAAQjB,mDAGIhqB,QACnBuqB,kBAAoBvqB,sDAIlB/9C,KAAKsoE,2DAGUtrF,WAClBuS,EAAQ,EACHhS,EAAI,EAAGA,EAAIyiB,KAAK4oE,oBAAqBrrF,UACtCkrF,EAAazoE,KAAK2oE,aAAaprF,GAC/B2qF,EAAYO,EAAWP,UACpB/hF,EAAI,EAAGA,EAAI+hF,IAAa/hF,IAAKoJ,KAChCk5E,EAAWR,OAAO9hF,GAAGnJ,QAAUA,SAC1BuS,SAIL,+DAIJqkD,EAAQ,EACNrkD,EAAQyQ,KAAK8oE,MACVvrF,EAAI,EAAGA,EAAIyiB,KAAK4oE,oBAAqBrrF,EAAG,KACzCkrF,EAAazoE,KAAK2oE,aAAaprF,GAC/Bu2D,EAAMF,EAAQ60B,EAAWP,aAC3B34E,GAASqkD,GAASrkD,EAAQukD,SACrB20B,EAAWR,OAAO14E,EAAQqkD,GAEnCA,EAAQE,SAEH,cAzLcs0B,oBACrBjC,GAAyBkD,iBAAmBlD,GAAyBmD,oBAChDlB,mBAA4C,CACjE,IAAIN,KAEFM,GAAkBmB,iBAClB,SAEF,IAAIzB,KAEFM,GAAkBmB,iBAAmBpD,GAAyBqD,qBAC9D,kBAEF,IAAI1B,KAEFM,GAAkBmB,iBAClB,UAEF,IAAIzB,MAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,MAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,MAEFM,GAAkBmB,iBAClB,UAEF,IAAIzB,OAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,OAEFM,GAAkBmB,iBAClB,gBAEF,IAAIzB,KAEFM,GAAkBmB,iBAClB,QAEF,IAAIzB,GACF,KACAM,GAAkBmB,iBAClB,WAEF,IAAIzB,QAEFM,GAAkBmB,iBAClB,mBAEF,IAAIzB,KAEFM,GAAkBmB,iBAAmBpD,GAAyBsD,gBAC9D,2BAGmBrB,uBAAqD,CAC1E,IAAIJ,GAA4BI,GAAkBsB,kBzCtH/C,IAAMC,GAAuB,GAQvBC,GAAb,+BACO,2BACgB,0BACA,0BAKA1yE,GAA8B,GAAI,IAAM,EAAI8I,KAAKoqB,qBAEzD,sBAEG,mBAEH,kBACD,0BACQ,2BACC,2BACA,4BACC,iBACX,wBACO,kBACN,oBACE,2BACO,yBACF,0BACC,oBACN,cACN,mBACK,uBAEI,GAINhsB,GACX,WAAqBL,EAA2BC,EAAuB6rE,2BAAlD9rE,YAA2BC,iBAAuB6rE,GAG5DC,0BACUC,gDAAAA,wEAIL1wE,GACV2G,KAAK+pE,KAAKC,eAAiB3wE,OACxB0wE,KAAKC,aAAe,UAEpBD,KAAKE,eAAe5wE,mDAOL4qC,QACjB8lC,KAAKG,uBAAuBjmC,UAjBID,IAuB5BmmC,GAAb,mCAG4B,IAAI5oF,iBACF,IAAIA,mCAEhB,sBACC,kBACJ,GAIT6oF,0BAKQhT,EAAkCv8D,EAAgBs+C,2CAEvDguB,iBAAmB/P,IACnBv2C,QAAUhmB,IACVwvE,WAAalxB,sEAGCv+C,UACZ,yCAGaw8D,EAAkC7nE,MAClD6nE,IAAmBp3D,KAAKmnE,wBACnB,MAEH3qE,EAAK7a,GAAY+/D,SACjBn+D,EAAIyc,KAAKmnE,iBAAiBruE,oBAAoBvJ,UAChDyQ,KAAK6gB,QAAQoC,UAAUzmB,EAAIjZ,IACnByc,KAAKmnE,iBAAiBmD,oBAAoB/6E,GAClD7L,KAAKsc,KAAKqqE,aAEP,SA1BkB5lC,IAgChBuuB,oEAWoB,kBACX,kBACuB,gBACA71E,EACzC61E,EAAKuX,oBACL,SAAChtF,UAAM,IAAI4sF,qBAES,qBAEqB,IAAI5oF,qBACvB,iBACe,IAAIA,qBAEnB,0BACwB,IAAIA,2BACJ,IAAIA,iBAE/B,iBACqB,IAAI8kD,oBACF,IAAIA,0BAGe,8BACK,SAQ5DmkC,EAAoB,IAAI50B,GAExBz+C,EAAkB,IAAI5V,GAAO,GAAI,MAClCy/B,QAAU,IAAIo5C,GAAQjjE,KAEtBgwE,iBAAmBlgB,EAAKjmC,QAAQypD,qBAAqBD,KAErDE,OAAS,OACTC,WAAa,KACbX,aAAe,OAEf9nB,sBAAwB,IAAI4nB,WAC5B9oD,QAAQ4pD,uBAAuB3jB,EAAK/E,yBACpClhC,QAAQ6pD,2BAGR1D,iBAAiB3vB,gBAAgB,MACjC2vB,iBAAiB5vB,WAAW,SAG3BuzB,EAAU,IAAIznD,YACf0nD,aAAe9jB,EAAKjmC,QAAQgqD,WAAWF,wEAIxBzxE,mDAIQ4qC,yCAKVvhB,uCAGFA,qCAUFA,EAAoB8hB,OAC5Bn4C,EAAuBq2B,EAAQ+lB,iBAET,IAAxBp8C,EAAStG,gBAIP48B,EAA6BD,EAAQE,cACrCC,EAA6BH,EAAQI,cAErCn9B,EAAyBqtE,EAAKiY,kBAC9BrlF,EAAyBotE,EAAKkY,kBACpCxlF,EAAiBC,EAAQC,EAAQ4+C,EAAan4C,OAExCs1C,EAAiCqxB,EAAKmY,yBAC5CzoD,EAAQ0oD,iBAAiBzpC,OAEpB,IAAIpkD,EAAI,EAAGA,EAAI8O,EAAStG,YAAcia,KAAKqrE,aAAerY,EAAKuX,qBAAsBhtF,EAAG,KACrFoW,EAAmBqM,KAAKsrE,SAAStrE,KAAKqrE,cAC5C13E,EAAGgvB,SAAWA,EACdhvB,EAAGkvB,SAAWA,EACdlvB,EAAGyR,SAAS1hB,KAAKi+C,EAAc17C,OAAO1I,IACtCoW,EAAGzQ,OAAOQ,KAAKi+C,EAAcz+C,QAC7ByQ,EAAGjK,MAAQ9D,EAAOrI,GAClBoW,EAAG+X,cAAgBrf,EAASpG,OAAO1I,GAAGmuB,cACtC/X,EAAGgY,eAAiBtf,EAASpG,OAAO1I,GAAGouB,eACvChY,EAAGjG,WAAai0C,EAAcn1B,YAAYjvB,KACxCyiB,KAAKqrE,iDAKM3oD,EAAoBoE,qCAGrB9gC,uCAGEA,wCAECulF,QACZZ,WAAaY,oCAGHC,GACfpF,GAAYqF,WAAW,EAAG9B,GAAsB6B,QAC3Cb,WAAa,EAAIhB,qCAGPpmF,QACVmoF,aAAahoF,KAAKH,QAElBooF,gBAAiB,OACjBC,sBAAsBloF,KAAKH,QAC3BsoF,sBAAsBhoF,UAGD,OAAtBmc,KAAKgqE,oBACFhpD,QAAQ05C,aAAa16D,KAAKgqE,mBAC1BA,aAAe,UAGlB8B,EAAsC,aAGrC9qD,QAAQq7C,eAAe94E,GAAG,SAACqX,cACjBA,EAAQkoC,UACZjmC,YACQjC,EAAQqoB,UAAU1/B,KAE/BuoF,EAAclxE,GACP,MAMTkxE,EAAa,KACTrqD,EAAOqqD,EAAYhpC,UACnBzkB,EAAsB,IAAIwY,GAChCxY,EAAG/kB,MAAQ0G,KAAK+qE,aAChB1sD,EAAG7kB,MAAQioB,EACXpD,EAAGj0B,OAAO1G,KAAKH,GACf86B,EAAG6Q,SAAW,IAAOzN,EAAK2M,eACrB47C,aAAehqE,KAAKghB,QAAQ4M,YAAYvP,GAC7CoD,EAAKc,UAAS,sCAIDwpD,QACVC,iBAAiBtoF,KAAKqoF,QACtBE,gBAAiB,4CAGC1oF,MAClByc,KAAKisE,oBAIJC,EAAa,GACbC,EAAc5qF,GAAOU,MAAM+d,KAAKgsE,iBAAkBzoF,EAAG,IAAIhC,IAC/D4qF,EAAIz1E,QAAQw1E,QACPE,aAAapsE,KAAKgsE,iBAAkBG,QACpCF,gBAAiB,0CAGF1oF,QACfmoF,aAAahoF,KAAKH,GAEG,OAAtByc,KAAKgqE,mBAIJqC,UAAU9oF,mCAGFA,QAERooF,gBAAiB,EAElB3rE,KAAKgqE,oBACFhpD,QAAQ05C,aAAa16D,KAAKgqE,mBAC1BA,aAAe,MAGlBhqE,KAAKisE,qBACFK,kBAAkB/oF,qCAIVA,QACVmoF,aAAahoF,KAAKH,GAEnByc,KAAKgqE,mBACFA,aAAauC,UAAUhpF,4CAKxBA,EAAY,IAAIhC,GAAOtC,GAAe,GAAI,IAAK,IAC/C0F,EAAYpD,GAAO87B,OAAO,EAAG95B,EAAG,IAAIhC,SACrC6qF,aAAa7oF,EAAGoB,wCAGHygB,EAAkB+zC,GAChCn5C,KAAK0qE,cACF1pD,QAAQwrD,YAAYxsE,KAAK0qE,aACzBA,OAAS,UAGV/mD,EAAgB,IAAIN,GAC1BM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAK0hB,GACjBue,EAAGE,QAAS,OACP6mD,OAAS1qE,KAAKghB,QAAQgqD,WAAWrnD,QACjC+mD,OAAO+B,kBAAkBtzB,OAExBp+C,EAAwB,IAAIwe,GAClCxe,EAAOhY,SAAW,OAEZ2pF,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQE,EACX2xE,EAAGzyD,QAAU,GACbyyD,EAAG/rD,YAAc,OASZ+pD,OAAOiC,cAAcD,gCAGhBE,OACNx1E,EAAWw1E,EAASxiD,GAAK,EAAI,EAAIwiD,EAASxiD,GAAK,EAE/CwiD,EAASC,QACPD,EAASE,WACXF,EAASE,YAAa,EAEtB11E,EAAW,EAGbgvE,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,uBACtCA,YAAchB,QAGjBxtE,OACAywE,EAASG,aACX5wE,MAGEywE,EAASI,gBACX7wE,OAGEywE,EAASK,aACX9wE,MAEEywE,EAASM,YACX/wE,MAEEywE,EAASO,WACXhxE,OAEEywE,EAASQ,kBACXjxE,OAEFiqE,GAAYiH,SAASlxE,QAEhB6kB,QAAQssD,iBAAiBV,EAASW,kBAClCvsD,QAAQwsD,gBAAgBZ,EAASa,yBACjCzsD,QAAQ0sD,qBAAqBd,EAASe,uBACtC3sD,QAAQ4sD,eAAehB,EAASiB,wBAEhC1G,iBAAiB7vB,sBAAsBs1B,EAASkB,qBAGhDzC,aAAe,OAGfrqD,QAAQs8C,KACXlmE,EACAw1E,EAAS7lC,mBACT6lC,EAAS9lC,mBACT8lC,EAAS5lC,oBAMX/qC,GAAcmqE,GAAapmE,KAAKghB,SAE5B5pB,EAAW,KACX4I,KAAK+tE,YAGLnB,EAASoB,UAAW,KAChBtgC,EAAY1tC,KAAKghB,QAAQitD,eACzBC,EAAeluE,KAAKghB,QAAQmtD,kBAC5BC,EAAapuE,KAAKghB,QAAQqtD,gBAChCjI,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,4BAA8Bj9B,EAAY,IAAMwgC,EAAe,IAAME,QAElEzD,YAAchB,OAGbjxE,EAAgBsH,KAAKmnE,iBAAiBxuE,mBACtC21E,EAAatuE,KAAKmnE,iBAAiBoH,wBACnCC,EAAYxuE,KAAKmnE,iBAAiBsH,eAClCC,EAAa1uE,KAAKmnE,iBAAiBwH,gBACzCvI,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,mCACEjyE,EACA,IACA41E,EACA,IACAE,EACA,IACAE,QAEC/D,YAAchB,OAGbiF,EAAa5uE,KAAKghB,QAAQk8C,gBAC1BntD,EAAS/P,KAAKghB,QAAQm8C,gBACtBtrD,EAAU7R,KAAKghB,QAAQo8C,iBACvByR,EAAU7uE,KAAKghB,QAAQq8C,iBAC7B+I,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,oCACEiE,EACA,IACA7+D,EACA,IACA8B,EACA,IACAg9D,EAAQC,QAAQ,SAEfnE,YAAchB,OAKbpmF,EAAIyc,KAAKghB,QAAQ+tD,qBAClBC,aAAaj3E,KAAO/Z,EAAMgiB,KAAKgvE,aAAaj3E,KAAMxU,EAAEwU,WACpDi3E,aAAa1oC,QAAUtoD,EAAMgiB,KAAKgvE,aAAa1oC,QAAS/iD,EAAE+iD,cAC1D0oC,aAAazoC,MAAQvoD,EAAMgiB,KAAKgvE,aAAazoC,MAAOhjD,EAAEgjD,YACtDyoC,aAAaxoC,UAAYxoD,EAAMgiB,KAAKgvE,aAAaxoC,UAAWjjD,EAAEijD,gBAC9DwoC,aAAavoC,cAAgBzoD,EAAMgiB,KAAKgvE,aAAavoC,cAAeljD,EAAEkjD,oBACtEuoC,aAAatoC,cAAgB1oD,EAAMgiB,KAAKgvE,aAAatoC,cAAenjD,EAAEmjD,oBACtEsoC,aAAapoC,SAAW5oD,EAAMgiB,KAAKgvE,aAAapoC,SAAUrjD,EAAEqjD,eAC5DooC,aAAaroC,WAAa3oD,EAAMgiB,KAAKgvE,aAAaroC,WAAYpjD,EAAEojD,iBAEhEsoC,eAAel3E,MAAQxU,EAAEwU,UACzBk3E,eAAe3oC,SAAW/iD,EAAE+iD,aAC5B2oC,eAAe1oC,OAAShjD,EAAEgjD,WAC1B0oC,eAAezoC,WAAajjD,EAAEijD,eAC9ByoC,eAAexoC,eAAiBljD,EAAEkjD,mBAClCwoC,eAAevoC,eAAiBnjD,EAAEmjD,mBAClCuoC,eAAeroC,UAAYrjD,EAAEqjD,cAC7BqoC,eAAetoC,YAAcpjD,EAAEojD,WAGlCimC,EAASsC,YAAa,KAClB3rF,EAAIyc,KAAKghB,QAAQ+tD,aAEjBI,EAAa,IAAI9oC,MACnBrmC,KAAK+tE,YAAc,EAAG,KAClBpmD,EAAgB,EAAI3nB,KAAK+tE,YAC/BoB,EAAWp3E,KAAO4vB,EAAQ3nB,KAAKivE,eAAel3E,KAC9Co3E,EAAW7oC,QAAU3e,EAAQ3nB,KAAKivE,eAAe3oC,QACjD6oC,EAAW5oC,MAAQ5e,EAAQ3nB,KAAKivE,eAAe1oC,MAC/C4oC,EAAW3oC,UAAY7e,EAAQ3nB,KAAKivE,eAAezoC,UACnD2oC,EAAW1oC,cAAgB9e,EAAQ3nB,KAAKivE,eAAexoC,cACvD0oC,EAAWzoC,cAAgB/e,EAAQ3nB,KAAKivE,eAAevoC,cACvDyoC,EAAWvoC,SAAWjf,EAAQ3nB,KAAKivE,eAAeroC,SAClDuoC,EAAWxoC,WAAahf,EAAQ3nB,KAAKivE,eAAetoC,WAGtDy/B,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,sBACEpnF,EAAEwU,KAAK+2E,QAAQ,GACf,KACAK,EAAWp3E,KAAK+2E,QAAQ,GACxB,MACA9uE,KAAKgvE,aAAaj3E,KAAK+2E,QAAQ,GAC/B,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,yBACEpnF,EAAE+iD,QAAQwoC,QAAQ,GAClB,KACAK,EAAW7oC,QAAQwoC,QAAQ,GAC3B,MACA9uE,KAAKgvE,aAAa1oC,QAAQwoC,QAAQ,GAClC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,uBACEpnF,EAAEgjD,MAAMuoC,QAAQ,GAChB,KACAK,EAAW5oC,MAAMuoC,QAAQ,GACzB,MACA9uE,KAAKgvE,aAAazoC,MAAMuoC,QAAQ,GAChC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,4BACEpnF,EAAEijD,UAAUsoC,QAAQ,GACpB,KACAK,EAAW3oC,UAAUsoC,QAAQ,GAC7B,MACA9uE,KAAKgvE,aAAaxoC,UAAUsoC,QAAQ,GACpC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,gCACEpnF,EAAEkjD,cAAcqoC,QAAQ,GACxB,KACAK,EAAW1oC,cAAcqoC,QAAQ,GACjC,MACA9uE,KAAKgvE,aAAavoC,cAAcqoC,QAAQ,GACxC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,gCACEpnF,EAAEmjD,cAAcooC,QAAQ,GACxB,KACAK,EAAWzoC,cAAcooC,QAAQ,GACjC,MACA9uE,KAAKgvE,aAAatoC,cAAcooC,QAAQ,GACxC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,0BACEpnF,EAAEqjD,SAASkoC,QAAQ,GACnB,KACAK,EAAWvoC,SAASkoC,QAAQ,GAC5B,MACA9uE,KAAKgvE,aAAapoC,SAASkoC,QAAQ,GACnC,UAECnE,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,6BACEpnF,EAAEojD,WAAWmoC,QAAQ,GACrB,KACAK,EAAWxoC,WAAWmoC,QAAQ,GAC9B,MACA9uE,KAAKgvE,aAAaroC,WAAWmoC,QAAQ,GACrC,UAECnE,YAAchB,MAIjB3pE,KAAK2rE,iBAAmB3rE,KAAKgqE,aAAc,KACvCoF,EAAQ,GAERC,EAAe,IAAI9tF,GACzB8tF,EAAazxF,EACV,EAAIwxF,GACH,EAAIA,GAAUpvE,KAAK0rE,aAAa9tF,EAAIoiB,KAAK4rE,sBAAsBhuF,GAC/DoiB,KAAK6rE,sBAAsBjuF,GAC/ByxF,EAAa5oF,EACV,EAAI2oF,GACH,EAAIA,GAAUpvE,KAAK0rE,aAAajlF,EAAIuZ,KAAK4rE,sBAAsBnlF,GAC/DuZ,KAAK6rE,sBAAsBplF,QAE1BolF,sBAAsBxoF,WAAW+T,EAAUi4E,QAE3CzD,sBAAsBvoF,WAAW+T,EAAU4I,KAAK6rE,2BAC/ChxE,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI/I,KAAKsc,KAAK4rE,uBACpB/wE,EAAM9X,SAAW,EAAIid,KAAKsvE,yBAEpBjhE,EAAW,IAAI+7D,GAAepqE,KAAKmnE,iBAAkBtsE,EAAOmF,KAAK6rE,uBACjEzuE,EAAO,IAAI6P,GACXzQ,EAAK,IAAI7a,GACf6a,EAAG2I,cACHtK,EAAMimB,YAAY1jB,EAAMZ,EAAI,QACvBwkB,QAAQm5B,UAAU9rC,EAAUjR,MAI/B4C,KAAKisE,eAAgB,KACjB7+E,EAAa,IAAIkZ,GAAQ,EAAG,EAAG,GACrC8/D,GAAY1rE,UAAUsF,KAAKgsE,iBAAkB,EAAG5+E,GAEhDA,EAAE+M,OAAO,GAAK,GAAK,IACnBisE,GAAY/rE,YAAY2F,KAAK0rE,aAAc1rE,KAAKgsE,iBAAkB5+E,MAGhEw/E,EAAS2C,0BACLC,EAAiB,GACjBC,EAAc,GAEXlyF,EAAI,EAAGA,EAAIyiB,KAAKqrE,eAAgB9tF,EAAG,KACpCuG,EAAQkc,KAAKsrE,SAAS/tF,UAExBuG,EAAM4F,MAER08E,GAAY1rE,UAAU5W,EAAMshB,SAAU,GAAI,IAAIkB,GAAQ,GAAK,IAAM,SACxDxiB,EAAM4F,OAEf08E,GAAY1rE,UAAU5W,EAAMshB,SAAU,EAAG,IAAIkB,GAAQ,GAAK,GAAK,MAG7DsmE,EAAS8C,mBAAoB,KACzBv5E,EAAKrS,EAAMshB,SACXhP,EAAa7U,GAAOskB,MACxB1P,EACA5U,GAAO87B,MAAMoyD,EAAa3rF,EAAMZ,OAAQ3B,GAAOE,MAC/C,IAAIF,IAEN6kF,GAAY/rE,YAAYlE,EAAIC,EAAI,IAAIkQ,GAAQ,GAAK,GAAK,UACjD,GAAIsmE,EAAS+C,mBAAoB,KAChCx5E,EAAKrS,EAAMshB,SACXhP,EAAa7U,GAAO4qB,UACxBhW,EACAq5E,EAAiB1rF,EAAM4nB,cACvB5nB,EAAMZ,OACN,IAAI3B,IAEN6kF,GAAY/rE,YAAYlE,EAAIC,EAAI,IAAIkQ,GAAQ,GAAK,GAAK,QAGpDsmE,EAASgD,oBAAqB,KAC1Bj9E,EAAkBpR,GAAOgR,UAAUzO,EAAMZ,OAAQ,IAAI3B,IACrD4U,EAAKrS,EAAMshB,SACXhP,EAAa7U,GAAO4qB,UACxBhW,EACAq5E,EAAiB1rF,EAAM6nB,eACvBhZ,EACA,IAAIpR,IAEN6kF,GAAY/rE,YAAYlE,EAAIC,EAAI,IAAIkQ,GAAQ,GAAK,GAAK,2CAM3CqM,QACZqO,QAAQvM,YAAY9B,uDAIlB,6CA2BiBsxB,EAAwB4rC,OAE1C52E,EAAc+G,KAAKmnE,iBAAiBjuE,iBACpCR,EAAgBurC,EAAMtrC,mBACtBm3E,EAAa7rC,EAAMwgB,iBACnBsrB,EAAWr3E,EAAgBo3E,EAC3BE,EAAahd,EAAKid,iBAAiB7yF,OACpCyyF,IACHA,EAAoBnxF,KAAKsK,MAAM0P,EAAgBs3E,MAE7CH,EAAoB,OAGnB,IAAItyF,EAAIuyF,EAAYvyF,EAAIwyF,EAAUxyF,IAErC0b,EAAY1b,GAAKy1E,EAAKid,iBACpBvxF,KAAKsK,MAAMzL,EAAIsyF,GAAqBG,GACpCnuD,6DAQ8BquD,OAC5BC,EAAmB/H,GAAkBC,oBAAoB,GAAGH,UAC5DkI,EAAgBhI,GAAkBC,oBAAoB,GAAGJ,YAE1DoI,qBAAuB,WAExBnI,EAAY,EACP3qF,EAAI,EAAGA,EAAI4yF,EAAkB5yF,IAChC6yF,EAAc7yF,GAAGP,MAAQkzF,SAIxBG,qBAAqBnI,GAAa,IAAIJ,GAAuBsI,EAAc7yF,IAChF2qF,UAEGoI,uBAAyB,IAAItI,GAChChoE,KAAKqwE,qBACLnI,GAIFlV,EAAKud,sBAAsB,CAACvwE,KAAKswE,wBAAyB,uDAOtDtwE,KAAKqwE,uBACPrd,EAAKud,sBAAsBnI,GAAkBC,oBAAqB,QAE7DgI,qBAAuB,oEAQkBtyB,GAChDiV,EAAKwd,kBAAkBC,mBAAmB1yB,qDASJ/gE,OAChCuS,EAAQyjE,EAAKwd,kBAAkBE,iBAAiB1zF,UAGtDg2E,EAAKwd,kBAAkBlsF,IAAIiL,GAAS,EAAIA,EAAQ,GACzCyjE,EAAKwd,kBAAkBG,sEAS9B3d,EAAK4d,aAAaC,sCAAqC,GAChD7d,EAAKwd,kBAAkBG,yDAO9BG,OACAC,yDAAoCD,EAAqB1zF,OAEzD41E,EAAKwd,kBAAkBhI,cAAcsI,EAAsBC,UA5tBrCxsC,IAEDyuB,gBAAe,IAAIqT,GACnBrT,qBAAoB,IAAIoV,GAExBpV,sBAA6B,KA4ErCA,qBAAoC,GAGpCA,qBAAoC,GAGpCA,4BAA4C,IAAInnD,GA2gBxCmnD,oBAA8B,EACnD,IAAI1sD,IAAU0qE,YAAY,IAAM,EAAM,EAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,EAAM,IAAM,EAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,EAAM,EAAM,IAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,IAAM,IAAM,EAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,EAAM,IAAM,IAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,IAAM,EAAM,IAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,IAAM,IAAM,EAAM,MAC5C,IAAI1qE,IAAU0qE,YAAY,EAAM,IAAM,IAAM,MAGvBhe,yBAAwBA,GAAKid,iBAAiB7yF,W4CzwB1D6zF,yBA4BChlF,EAAuBilF,YA8CxBC,IAEPC,EAASC,MAAMrL,MAAQsL,OAAOC,WAAa,KAC3CH,EAASC,MAAMthE,OAASuhE,OAAOE,YAAc,cAsCtCC,IAEHC,EAAU1L,QAAU2L,EAAWC,cACjCzM,GAASpC,QAAU2O,EAAU1L,MAAQ2L,EAAWC,aAE9CF,EAAU3hE,SAAW4hE,EAAWE,eAClC1M,GAASlC,SAAWyO,EAAU3hE,OAAS4hE,EAAWE,uBA0D7CC,EACPhiE,EACAiiE,EACA10F,EACA20F,EACAC,EACAC,EACAn6E,OAEMo6E,EAAuCriE,EAAOsiE,YAAYC,SAASC,cAAc,OACjFC,EAA6CJ,EAAgBC,YACjEC,SAASC,cAAc,OAEzBC,EAAiBC,MAAQ,QACzBD,EAAiBH,YAAYC,SAASI,eAAeV,QAC/CW,EAA6CP,EAAgBC,YACjEC,SAASC,cAAc,OAEnBK,EAAiCN,SAASC,cAAc,gBAC9DK,EAAazN,KAAO,EACpByN,EAAaV,IAAMA,EAAIW,WACvBD,EAAaT,IAAMA,EAAIU,WACvBD,EAAa56E,KAAOA,EAAK66E,WACzBD,EAAa31F,MAAQK,EAAKu1F,WAC1BD,EAAaE,iBAAiB,UAAU,SAAC1+E,GACvC69E,EAAOc,SAASH,EAAa31F,MAAO,QAEtC01F,EAAiBN,YAAYO,GACtBA,WAsDAI,EACPjjE,EACAiiE,EACA10F,EACA20F,OAEMgB,EAAmCX,SAASC,cAAc,gBAChEU,EAAejmF,KAAO,WACtBimF,EAAeC,QAAU51F,EACzB21F,EAAeH,iBAAiB,SAAS,SAAC1+E,GACxC69E,EAAOgB,EAAeC,YAExBnjE,EAAOsiE,YAAYY,GACnBljE,EAAOsiE,YAAYC,SAASI,eAAeV,IAC3CjiE,EAAOsiE,YAAYC,SAASC,cAAc,OACnCU,WAkJAE,EACPpjE,EACAiiE,EACA1jE,OAEM8kE,EAAiCd,SAASC,cAAc,gBAC9Da,EAAapmF,KAAO,SACpBomF,EAAa9B,MAAMrL,MAAQ,MAC3BmN,EAAan2F,MAAQ+0F,EACrBoB,EAAaN,iBAAiB,QAASxkE,GACvCyB,EAAOsiE,YAAYe,GACnBrjE,EAAOsiE,YAAYC,SAASC,cAAc,OACnCa,kCAtZwBjC,mBA3BrB,kBACD,oBACE,aACP,kBAGwB,IAAItH,qBAErB,gBAGL,eACD,qBACM,qBACA,qBACU,IAAIroF,sBACJ,IAAIA,qBACf,mBACA,uBACY,eAGe,gBAGC,IAAI6xF,iBAigB5B,IAAI7xF,GA9fpB2vF,EAAMmC,MAAK,SAAC/1F,EAAGS,OACPoG,EAAI7G,EAAEygB,SAASu1E,cAAcv1F,EAAEggB,iBAC3B,IAAN5Z,EACK7G,EAAE0gB,KAAKs1E,cAAcv1F,EAAEigB,MAEzB7Z,SAEJ,IAAI5G,EAAI,EAAGA,EAAI2zF,EAAM9zF,SAAUG,EAAG,KACjCwO,EAAIiU,KAAKuzE,MAAMC,IAAItC,EAAM3zF,GAAGwgB,UAC3BhS,QACEwnF,MAAME,IAAIvC,EAAM3zF,GAAGwgB,SAAWhS,EAAI,IAAIqnF,KAE7CrnF,EAAE0nF,IAAIvC,EAAM3zF,GAAGygB,KAAMzgB,OAEjBm2F,EAA2B1zE,KAAK2zE,UAAYtB,SAAS5wD,KAAK2wD,YAC9DC,SAASC,cAAc,QAEzBoB,EAAQrC,MAAMjsE,SAAW,WACzBsuE,EAAQrC,MAAMzoF,KAAO,MACrB8qF,EAAQrC,MAAMuC,OAAS,MACvBF,EAAQrC,MAAMwC,gBAAkB,qBAChCH,EAAQrC,MAAMp3E,MAAQ,QACtBy5E,EAAQrC,MAAM7L,KAAO,mBACrBkO,EAAQrC,MAAMyC,OAAS,MACvBJ,EAAQK,UAAY,UAEdC,EAA6Bh0E,KAAKi0E,YAAc5B,SAAS5wD,KAAK2wD,YAClEC,SAASC,cAAc,QAEzB0B,EAAU3C,MAAMjsE,SAAW,WAC3B4uE,EAAU3C,MAAMzoF,KAAO,MACvBorF,EAAU3C,MAAMuC,OAAS,MACzBI,EAAU3C,MAAMwC,gBAAkB,qBAClCG,EAAU3C,MAAMp3E,MAAQ,QACxB+5E,EAAU3C,MAAM7L,KAAO,mBACvBwO,EAAU3C,MAAMyC,OAAS,MACzBE,EAAUD,UAAY,GAEtB1B,SAAS5wD,KAAK4vD,MAAMwC,gBAAkB,YAEhCzC,EAA2BiB,SAAS5wD,KAAK2wD,YAAYC,SAASC,cAAc,QAClFlB,EAASC,MAAMjsE,SAAW,WAC1BgsE,EAASC,MAAMzoF,KAAO,MACtBwoF,EAASC,MAAM6C,IAAM,MAQrB5C,OAAOuB,iBAAiB,UAAU,SAAC1+E,GACjCg9E,OAEFG,OAAOuB,iBAAiB,qBAAqB,SAAC1+E,GAC5Cg9E,OAEFA,QAEMgD,EAA4B/C,EAASgB,YAAYC,SAASC,cAAc,QAC9E6B,EAAU9C,MAAM+C,UAAY,SAC5BD,EAAU9C,MAAMp3E,MAAQ,OACxBk6E,EAAUJ,UACR,yBACAn0E,GACA,gBACAK,GACA,YACAC,GACA,QAEIm0E,EAA2BjD,EAASgB,YAAYC,SAASC,cAAc,QAEvEX,EAA8B3xE,KAAKs0E,aAAeD,EAASjC,YAC/DC,SAASC,cAAc,QAEzBX,EAAWN,MAAMjsE,SAAW,WAC5BusE,EAAWN,MAAMzoF,KAAO,MACxB+oF,EAAWN,MAAMpoF,MAAQ,MACzB0oF,EAAWN,MAAM6C,IAAM,MACvBvC,EAAWN,MAAMuC,OAAS,UAEpBlC,EAAgC1xE,KAAKu0E,YAAc5C,EAAWS,YAClEC,SAASC,cAAc,WAazBhB,OAAOuB,iBAAiB,UAAU,SAAC1+E,GACjCs9E,OAEFH,OAAOuB,iBAAiB,qBAAqB,SAAC1+E,GAC5Cs9E,OAEFA,IAEArL,GAAYrC,MAAQ/jE,KAAK+jE,MAAQ/jE,KAAKu0E,YAAYC,WAAW,KAAM,CACjEnuE,OAAO,QAGHouE,EAA+BJ,EAASjC,YAAYC,SAASC,cAAc,QACjFmC,EAAapD,MAAMjsE,SAAW,WAC9BqvE,EAAapD,MAAMwC,gBAAkB,wBACrCY,EAAapD,MAAMqD,QAAU,MAC7BD,EAAapD,MAAMpoF,MAAQ,MAC3BwrF,EAAapD,MAAM6C,IAAM,MACzBO,EAAapD,MAAMuC,OAAS,MAC5Ba,EAAapD,MAAMsD,UAAY,SAG/BF,EAAarC,YAAYC,SAASI,eAAe,UACjDgC,EAAarC,YAAYC,SAASC,cAAc,WAC1CsC,EAAoCvC,SAASC,cAAc,UAC3DuC,EAAiCxC,SAASC,cAAc,eACzDwC,WAAaD,OACbD,eAAiBA,EACtBC,EAAYE,cAAgB/0E,KAAKg1E,aACjCH,EAAYhC,iBAAiB,UAAU,SAAC1+E,GACtCsgD,EAAKugC,aAAelC,SAAS+B,EAAY73F,OACzCy3D,EAAKwgC,cAGPL,EAAe/B,iBAAiB,UAAU,kBAAMp+B,EAAKygC,iCAE9Bl1E,KAAKuzE,MAAM4B,uCAAQ,KAA/Bp3E,UACHq3E,EAAS/C,SAASC,cAAc,UACtC8C,EAAOC,KAAOt3E,EACdq3E,EAAOp4F,MAAQ+gB,EACf62E,EAAeU,IAAIF,kCAGrBX,EAAarC,YAAYwC,GACzBH,EAAarC,YAAYC,SAASC,cAAc,OAChDmC,EAAarC,YAAYyC,GACzBD,EAAeG,cAAgB,OAC1BG,oBAELT,EAAarC,YAAYC,SAASC,cAAc,OAEhDmC,EAAarC,YAAYC,SAASC,cAAc,WAkC1CiD,EAAuCd,EAAarC,YACxDC,SAASC,cAAc,UAEzBR,EACEyD,EACA,YACAv1E,KAAKw1E,WAAWzuC,oBAChB,SAAC/pD,GACCy3D,EAAK+gC,WAAWzuC,mBAAqB/pD,IAEvC,EACA,GACA,GAEF80F,EACEyD,EACA,YACAv1E,KAAKw1E,WAAW1uC,oBAChB,SAAC9pD,GACCy3D,EAAK+gC,WAAW1uC,mBAAqB9pD,IAEvC,EACA,GACA,GAGF80F,EACEyD,EACA,YACAv1E,KAAKw1E,WAAWxuC,oBAChB,SAAChqD,GACCy3D,EAAK+gC,WAAWxuC,mBAAqBhqD,IAEvC,EACA,IACA,GAGF80F,EACEyD,EACA,QACAv1E,KAAKw1E,WAAWprD,IAChB,SAACptC,GACCy3D,EAAK+gC,WAAWprD,GAAKptC,IAEvB,GACA,IACA,GAsBF+1F,EACE0B,EACA,QACAz0E,KAAKw1E,WAAWjI,aAChB,SAACvwF,GACCy3D,EAAK+gC,WAAWjI,YAAcvwF,KAGlC+1F,EACE0B,EACA,gBACAz0E,KAAKw1E,WAAW/H,oBAChB,SAACzwF,GACCy3D,EAAK+gC,WAAW/H,mBAAqBzwF,KAGzC+1F,EACE0B,EACA,iBACAz0E,KAAKw1E,WAAW7H,kBAChB,SAAC3wF,GACCy3D,EAAK+gC,WAAW7H,iBAAmB3wF,KAGvC+1F,EACE0B,EACA,eACAz0E,KAAKw1E,WAAW3H,mBAChB,SAAC7wF,GACCy3D,EAAK+gC,WAAW3H,kBAAoB7wF,KAIxC+1F,EACE0B,EACA,gCACAz0E,KAAKw1E,WAAW1H,gBAChB,SAAC9wF,GACCy3D,EAAK+gC,WAAW1H,eAAiB9wF,SAM/By4F,EAAqChB,EAAarC,YACtDC,SAASC,cAAc,aAEcmD,EAAcrD,YACnDC,SAASC,cAAc,WAEbF,YAAYC,SAASI,eAAe,SAChDM,EACE0C,EACA,SACAz1E,KAAKw1E,WAAWzI,YAChB,SAAC/vF,GACCy3D,EAAK+gC,WAAWzI,WAAa/vF,KAIjC+1F,EACE0C,EACA,YACAz1E,KAAKw1E,WAAWxI,eAChB,SAAChwF,GACCy3D,EAAK+gC,WAAWxI,cAAgBhwF,KAIpC+1F,EACE0C,EACA,SACAz1E,KAAKw1E,WAAWvI,YAChB,SAACjwF,GACCy3D,EAAK+gC,WAAWvI,WAAajwF,KAGjC+1F,EACE0C,EACA,QACAz1E,KAAKw1E,WAAWtI,WAChB,SAAClwF,GACCy3D,EAAK+gC,WAAWtI,UAAYlwF,KAGhC+1F,EACE0C,EACA,iBACAz1E,KAAKw1E,WAAWjG,mBAChB,SAACvyF,GACCy3D,EAAK+gC,WAAWjG,kBAAoBvyF,KAGxC+1F,EACE0C,EACA,kBACAz1E,KAAKw1E,WAAW9F,oBAChB,SAAC1yF,GACCy3D,EAAK+gC,WAAW9F,mBAAqB1yF,KAGzC+1F,EACE0C,EACA,mBACAz1E,KAAKw1E,WAAW7F,oBAChB,SAAC3yF,GACCy3D,EAAK+gC,WAAW7F,mBAAqB3yF,KAGzC+1F,EACE0C,EACA,oBACAz1E,KAAKw1E,WAAW5F,qBAChB,SAAC5yF,GACCy3D,EAAK+gC,WAAW5F,oBAAsB5yF,KAG1C+1F,EACE0C,EACA,mBACAz1E,KAAKw1E,WAAWrI,UAChB,SAACnwF,GACCy3D,EAAK+gC,WAAWrI,SAAWnwF,KAG/B+1F,EACE0C,EACA,aACAz1E,KAAKw1E,WAAWxH,WAChB,SAAChxF,GACCy3D,EAAK+gC,WAAWxH,UAAYhxF,KAGhC+1F,EACE0C,EACA,UACAz1E,KAAKw1E,WAAWtG,aAChB,SAAClyF,GACCy3D,EAAK+gC,WAAWtG,YAAclyF,SAoB5B04F,EAA6BjB,EAAarC,YAAYC,SAASC,cAAc,QACnFoD,EAAWlD,MAAQ,SACnBU,EAAqBwC,EAAY,aAAa,SAACvhF,GAC7CsgD,EAAKkhC,WAEPzC,EAAqBwC,EAAY,mBAAmB,SAACvhF,GACnDsgD,EAAKmhC,gBAEP1C,EAAqBwC,EAAY,eAAe,SAACvhF,GAC/CsgD,EAAKwgC,mBAEFY,cAAgB3C,EAAqBwC,EAAY,QAAQ,SAACvhF,GAC7DsgD,EAAKqhC,gBAIPxE,OAAOuB,iBACL,eACA,SAAC1+E,GACCA,EAAE4hF,oBAEJ,GAGFpE,EAAWkB,iBAAiB,aAAa,SAAC1+E,GACxCsgD,EAAKuhC,gBAAgB7hF,MAEvBw9E,EAAWkB,iBAAiB,aAAa,SAAC1+E,GACxCsgD,EAAKwhC,gBAAgB9hF,MAEvBw9E,EAAWkB,iBAAiB,WAAW,SAAC1+E,GACtCsgD,EAAKyhC,cAAc/hF,MAErBw9E,EAAWkB,iBAAiB,cAAc,SAAC1+E,GACzCsgD,EAAK0hC,iBAAiBhiF,MAGxBw9E,EAAWkB,iBAAiB,aAAa,SAAC1+E,GACxCsgD,EAAK2hC,gBAAgBjiF,MAEvBw9E,EAAWkB,iBAAiB,cAAc,SAAC1+E,GACzCsgD,EAAK4hC,iBAAiBliF,MAExBw9E,EAAWkB,iBAAiB,YAAY,SAAC1+E,GACvCsgD,EAAK6hC,eAAeniF,MAGtBm9E,OAAOuB,iBAAiB,WAAW,SAAC1+E,GAClCsgD,EAAK8hC,cAAcpiF,MAErBm9E,OAAOuB,iBAAiB,SAAS,SAAC1+E,GAChCsgD,EAAK+hC,YAAYriF,WAGd8gF,gBAEAwB,YAAcxqF,iDAInBk5E,GAAS9B,OAASrjE,KAAK02E,OAAS12E,KAAK02E,OAAOpH,qBAAuB,EACnEnK,GAASp0B,SAASzsD,IAAI,EAAG,GAAK6gF,GAAS9B,2CAIvBsT,OACVvxE,EAAmB+/D,GAASp0B,SAASlvB,QAE3Czc,EAASnC,QAAQ0zE,GACjBxR,GAASp0B,SAASrtD,KAAK0hB,yDASlB0vE,WAAWf,UAAY,OACtB7C,EAAQlxE,KAAKuzE,MAAMC,IAAIxzE,KAAK40E,eAAe53F,UAC7Ck0F,EAAO,WACUA,EAAMiE,uCAAQ,KAAtBpL,UACHqL,EAAS/C,SAASC,cAAc,UACtC8C,EAAOC,KAAOtL,EACdqL,EAAOp4F,MAAQk0F,EAAMsC,IAAIzJ,GAAO6I,gBAC3BkC,WAAWQ,IAAIF,qFAMnBwB,8BACA9B,WAAWC,cAAgB,OAC3BC,aAAelC,SAAS9yE,KAAK80E,WAAW/M,QAAQ,GAAG/qF,YACnDi4F,8CAGW4B,GAChB1R,GAAS9B,QAAUwT,EACnB1R,GAAS9B,OAASllF,EAAQgnF,GAAS9B,OAAQ,IAAM,4CAK5BlvE,OACf2T,EAAkB,IAAIvmB,GAAO4S,EAAE2iF,QAAS3iF,EAAE4iF,SAC1C76E,EAAgBipE,GAAS6R,qBAAqBlvE,EAAS,IAAIvmB,YAE5D01F,QAAQvzF,KAAKokB,GAEd9H,KAAKk3E,cACHl3E,KAAK02E,aACFA,OAAOS,UAAUj7E,GAItB8D,KAAKo3E,aAAc,KAEfhU,EAAqB+B,GAASkS,2BAA2BvvE,EAAS,IAAIvmB,IACtE+1F,EAAe/1F,GAAOU,MAAMmhF,EAAYpjE,KAAKu3E,cAAe,IAAIh2F,IAChEyZ,EAAiBzZ,GAAOU,MAAM+d,KAAKw3E,cAAeF,EAAM,IAAI/1F,IAClE4jF,GAASp0B,SAASrtD,KAAKsX,4CAIJ7G,OACf2T,EAAkB,IAAIvmB,GAAO4S,EAAE2iF,QAAS3iF,EAAE4iF,SAC1C76E,EAAgBipE,GAAS6R,qBAAqBlvE,EAAS,IAAIvmB,WAEzD4S,EAAEsjF,YACH,OACEP,cAAe,EAChBl3E,KAAK03E,QACH13E,KAAK02E,aACFA,OAAOiB,eAAez7E,GAGzB8D,KAAK02E,aACFA,OAAOkB,UAAU17E,cAIvB,OACEk7E,cAAe,OACfG,cAAc7zF,KAAKyhF,GAASkS,2BAA2BvvE,EAAS,IAAIvmB,UACpEi2F,cAAc9zF,KAAKyhF,GAASp0B,iDAKlB58C,OACb2T,EAAkB,IAAIvmB,GAAO4S,EAAE2iF,QAAS3iF,EAAE4iF,SAC1C76E,EAAgBipE,GAAS6R,qBAAqBlvE,EAAS,IAAIvmB,WAEzD4S,EAAEsjF,YACH,OACEP,cAAe,EAChBl3E,KAAK02E,aACFA,OAAOmB,QAAQ37E,cAGnB,OACEk7E,cAAe,2CAKHjjF,OACf2T,EAAkB,IAAIvmB,GAAO4S,EAAE2jF,QAAQ,GAAGhB,QAAS3iF,EAAE2jF,QAAQ,GAAGf,SAChE76E,EAAgBipE,GAAS6R,qBAAqBlvE,EAAS,IAAIvmB,IAC7Dye,KAAK02E,aACFA,OAAOS,UAAUj7E,GAExB/H,EAAE4hF,0DAGoB5hF,OAChB2T,EAAkB,IAAIvmB,GAAO4S,EAAE2jF,QAAQ,GAAGhB,QAAS3iF,EAAE2jF,QAAQ,GAAGf,SAChE76E,EAAgBipE,GAAS6R,qBAAqBlvE,EAAS,IAAIvmB,IAC7Dye,KAAK02E,aACFA,OAAOkB,UAAU17E,GAExB/H,EAAE4hF,wDAGkB5hF,GAChB6L,KAAK02E,aACFA,OAAOmB,QAAQ73E,KAAK02E,OAAOhL,cAElCv3E,EAAE4hF,0DAGoB5hF,GAClBA,EAAE4jF,OAAS,OACRC,WAAW,EAAI,KACX7jF,EAAE4jF,OAAS,QACfC,WAAW,KAElB7jF,EAAE4hF,uDAGiB5hF,UACXA,EAAEnO,SACH,eACEiyF,QAAS,YAEX,aACEP,SAAU,YAEZ,YACC13E,KAAKi4E,OACHj4E,KAAK02E,aACFA,OAAOjiE,YAAY,IAAIlzB,GAAO,EAAG,SAGnC22F,WAAW,IAAI32F,IAAQ,GAAK,cAGhC,aACCye,KAAKi4E,OACHj4E,KAAK02E,aACFA,OAAOjiE,YAAY,IAAIlzB,IAAQ,EAAG,SAGpC22F,WAAW,IAAI32F,GAAO,GAAK,cAG/B,YACCye,KAAKi4E,OACHj4E,KAAK02E,aACFA,OAAOjiE,YAAY,IAAIlzB,GAAO,EAAG,SAGnC22F,WAAW,IAAI32F,GAAO,GAAI,eAG9B,UACCye,KAAKi4E,OACHj4E,KAAK02E,aACFA,OAAOjiE,YAAY,IAAIlzB,GAAO,GAAI,SAGpC22F,WAAW,IAAI32F,GAAO,EAAG,eAG7B,YACE42F,uBAQF,SACEH,WAAW,eAEb,SACEA,WAAW,cAEb,SACE/C,qBAEF,IACCj1E,KAAK02E,aACFA,OAAO0B,uBAGX,SACExC,uBAEF,SACED,kBAEF,SACE0C,0BAEF,SACEC,0BAGF,IACCt4E,KAAK03E,SAEP1kB,GAAKwd,kBAAkB+H,sBAGtB,IACCv4E,KAAK03E,SAEP1kB,GAAKwd,kBAAkBgI,YASzBx4E,KAAK02E,aACFA,OAAO+B,SAAStkF,EAAEnO,yCAIRmO,UACTA,EAAEnO,SACH,eACEiyF,QAAS,YAEX,aACEP,SAAU,EAOf13E,KAAK02E,aACFA,OAAOgC,WAAWvkF,EAAEnO,wCAIX2yF,MACZ34E,KAAK44E,YAAa,MACfC,aAAeF,EAEhB34E,KAAK64E,YAAc74E,KAAK84E,sBACrBR,oBAGDS,IAAgB,IAAM/4E,KAAK84E,gBAAkB94E,KAAK64E,aAAe,KACpE/J,QAAQ,GACR8D,gBACEiD,cAAc74F,MAAQ+7F,YAEtBlD,cAAc74F,MAAQ,+CAKzBgjB,KAAKg1E,cAAgB,SAClBA,aAAeh1E,KAAKkxE,MAAM9zF,aAE5B43F,oBACAgE,uBACA/D,6DAIClL,EAAO/pE,KAAKkxE,MAAMlxE,KAAKg1E,cACzBiE,EAAOj5E,KAAK40E,eAAe7M,QACtBxqF,EAAI,EAAGA,EAAI07F,EAAK77F,SAAUG,EAAG,KAC9Bu0D,EAAOmnC,EAAKnnC,KAAKv0D,MACnBu0D,GAAQA,EAAKujC,OAAStL,EAAKhsE,SAAU,CACnCiC,KAAK40E,eAAeG,gBAAkBx3F,SACnCq3F,eAAeG,cAAgBx3F,OAC/Bq5F,iCAKXqC,EAAOj5E,KAAK80E,WAAW/M,YAClB,IAAIxqF,EAAI,EAAGA,EAAI07F,EAAK77F,SAAUG,EAAG,KAC9Bu0D,EAAOmnC,EAAKnnC,KAAKv0D,MACnBu0D,GAAQA,EAAKujC,OAAStL,EAAK/rE,KAAM,CAC/BgC,KAAK80E,WAAWC,gBAAkBx3F,SAC/Bu3F,WAAWC,cAAgBx3F,wDAQjCy3F,eACDh1E,KAAKg1E,cAAgBh1E,KAAKkxE,MAAM9zF,cAC7B43F,aAAe,QAEjBgE,uBACA/D,kDAGSiE,0DAEdlmB,GAAK4d,aAAahpF,QACbsxF,GACHlmB,GAAKwd,kBAAkB5oF,aAGpBixF,YAAc,EAEf74E,KAAK02E,aACFA,OAAOyC,iCAGTzC,OAAS12E,KAAKkxE,MAAMlxE,KAAKg1E,cAAcnL,YACvCqP,QACEf,kDAKF3C,WAAW3I,OAAS7sE,KAAKw1E,WAAW3I,gDAIpC2I,WAAW3I,OAAQ,OACnB2I,WAAW1I,YAAa,4CAIxB8L,aAAe54E,KAAK44E,mDAGL3sF,QACfwqF,YAAcz2E,KAAKy2E,aAAexqF,MAEnC0sF,EAAuB1sF,EAAO+T,KAAKy2E,oBAClCA,YAAcxqF,EAEf0sF,EAAe,MACjBA,EAAe,UAGZS,YAAcT,OACdU,eAEDr5E,KAAKo5E,YAAc,WAChBE,MAA6B,IAApBt5E,KAAKq5E,aAAuBr5E,KAAKo5E,gBAC1CC,aAAe,OACfD,WAAa,OAEbzF,UAAUI,UAAY/zE,KAAKs5E,MAAMxK,QAAQ,GAAG8D,YAG/C+F,EAAe,EAAG,KACd7U,EAAuC9jE,KAAK+jE,MAG5CmV,EAAc,EAAC,MAGjBpV,EAAK,CACPA,EAAIyV,UAAU,EAAG,EAAGzV,EAAIiC,OAAOC,MAAOlC,EAAIiC,OAAOh2D,QAOjD+zD,EAAIE,OAGJF,EAAIG,UAAU,GAAMH,EAAIiC,OAAOC,MAAO,GAAMlC,EAAIiC,OAAOh2D,QACvD+zD,EAAIn8C,MAAM,GAAI,OAGR57B,EAAa,GAAMo5E,GAASlC,SAAYkC,GAAS7B,SACvDQ,EAAIn8C,MAAM57B,EAAGA,GACb+3E,EAAI0V,WAAaztF,EAGjB+3E,EAAIn8C,MAAM,EAAIw9C,GAAS9B,OAAQ,EAAI8B,GAAS9B,QAC5CS,EAAI0V,WAAarU,GAAS9B,OAE1BS,EAAIG,WAAWkB,GAASp0B,SAASnzD,GAAIunF,GAASp0B,SAAStqD,GAEnDuZ,KAAK02E,aACFA,OAAOpZ,KAAKt9D,KAAKw1E,YAKxBxiB,GAAKwd,kBAAkBiJ,QAAQP,OAI3BQ,EAAM15E,KAAKkxE,MAAMlxE,KAAKg1E,cAAch3E,KACpCg1D,GAAK4d,aAAa+I,yCACpBD,GAAO,MACPA,GAAO1mB,GAAKwd,kBAAkBoJ,WAE5B55E,KAAK02E,aACFA,OAAOmD,UAAUH,GASxB5V,EAAIK,UAIF+U,EAAY,SACTjE,UAAS,QAIX6E,WAAWnB,a3C15BTz6E,GAA6B,qJ4CpBtC67E,GAAQ,SAAU/hF,GACpB,OAAOA,GAAMA,EAAGtZ,MAAQA,MAAQsZ,MAMhC+hF,GAA2B,iBAAdC,YAA0BA,aACvCD,GAAuB,iBAAVzI,QAAsBA,SACnCyI,GAAqB,iBAARE,MAAoBA,OACjCF,GAAuB,iBAAVG,IAAsBA,KAEnCC,SAAS,cAATA,MCZe,SAAUC,GACzB,IACE,QAASA,IACT,MAAOC,GACP,OAAO,QCDOC,IAAM,WACtB,OAA8E,GAAvEC,OAAOC,eAAe,GAAI,EAAG,CAAEhH,IAAK,WAAc,OAAO,KAAQ,MCHtEiH,GAA6B,GAAGC,qBAChCC,GAA2BJ,OAAOI,+BAGpBA,KAA6BF,GAA2BG,KAAK,CAAEC,EAAG,GAAK,GAI/D,SAA8BC,GACtD,IAAIC,EAAaJ,GAAyB36E,KAAM86E,GAChD,QAASC,GAAcA,EAAWC,YAChCP,OCZa,SAAUQ,EAAQj+F,GACjC,MAAO,CACLg+F,aAAuB,EAATC,GACdC,eAAyB,EAATD,GAChBE,WAAqB,EAATF,GACZj+F,MAAOA,ICLP41F,GAAW,GAAGA,YAED,SAAU56E,GACzB,OAAO46E,GAASgI,KAAK5iF,GAAIooD,MAAM,GAAI,ICAjCg7B,GAAQ,GAAGA,SAGEd,IAAM,WAGrB,OAAQC,OAAO,KAAKG,qBAAqB,MACtC,SAAU1iF,GACb,MAAsB,UAAfqjF,GAAQrjF,GAAkBojF,GAAMR,KAAK5iF,EAAI,IAAMuiF,OAAOviF,IAC3DuiF,UCVa,SAAUviF,GACzB,GAAU9a,MAAN8a,EAAiB,MAAMsjF,UAAU,wBAA0BtjF,GAC/D,OAAOA,MCAQ,SAAUA,GACzB,OAAOujF,GAAcC,GAAuBxjF,QCL7B,SAAUA,GACzB,MAAqB,iBAAPA,EAAyB,OAAPA,EAA4B,mBAAPA,MCKtC,SAAU3Y,EAAOo8F,GAChC,IAAKC,GAASr8F,GAAQ,OAAOA,EAC7B,IAAI8yE,EAAIr6D,EACR,GAAI2jF,GAAoD,mBAAxBtpB,EAAK9yE,EAAMuzF,YAA4B8I,GAAS5jF,EAAMq6D,EAAGyoB,KAAKv7F,IAAS,OAAOyY,EAC9G,GAAmC,mBAAvBq6D,EAAK9yE,EAAMs8F,WAA2BD,GAAS5jF,EAAMq6D,EAAGyoB,KAAKv7F,IAAS,OAAOyY,EACzF,IAAK2jF,GAAoD,mBAAxBtpB,EAAK9yE,EAAMuzF,YAA4B8I,GAAS5jF,EAAMq6D,EAAGyoB,KAAKv7F,IAAS,OAAOyY,EAC/G,MAAMwjF,UAAU,4CCZdM,GAAiB,GAAGA,kBAEP,SAAU5jF,EAAIhS,GAC7B,OAAO41F,GAAehB,KAAK5iF,EAAIhS,ICA7BqsF,GAAW6H,GAAO7H,SAElBwJ,GAASH,GAASrJ,KAAaqJ,GAASrJ,GAASC,kBAEpC,SAAUt6E,GACzB,OAAO6jF,GAASxJ,GAASC,cAAct6E,GAAM,QCH7B8jF,KAAgBxB,IAAM,WACtC,OAEQ,GAFDC,OAAOC,eAAelI,GAAc,OAAQ,IAAK,CACtDkB,IAAK,WAAc,OAAO,KACzBl2F,KCADy+F,GAAiCxB,OAAOI,+BAIhCmB,GAAcC,GAAiC,SAAkCC,EAAGznF,GAG9F,GAFAynF,EAAIC,GAAgBD,GACpBznF,EAAI2nF,GAAY3nF,GAAG,GACf4nF,GAAgB,IAClB,OAAOJ,GAA+BC,EAAGznF,GACzC,MAAO8lF,IACT,GAAI+B,GAAIJ,EAAGznF,GAAI,OAAO8nF,IAA0BC,GAA2B5/E,EAAEk+E,KAAKoB,EAAGznF,GAAIynF,EAAEznF,SChB5E,SAAUyD,GACzB,IAAK0jF,GAAS1jF,GACZ,MAAMsjF,UAAUiB,OAAOvkF,GAAM,qBAC7B,OAAOA,GCAPwkF,GAAuBjC,OAAOC,qBAItBsB,GAAcU,GAAuB,SAAwBR,EAAGznF,EAAGkoF,GAI7E,GAHAC,GAASV,GACTznF,EAAI2nF,GAAY3nF,GAAG,GACnBmoF,GAASD,GACLN,GAAgB,IAClB,OAAOK,GAAqBR,EAAGznF,EAAGkoF,GAClC,MAAOpC,IACT,GAAI,QAASoC,GAAc,QAASA,EAAY,MAAMnB,UAAU,2BAEhE,MADI,UAAWmB,IAAYT,EAAEznF,GAAKkoF,EAAWz/F,OACtCg/F,OCdQF,GAAc,SAAUa,EAAQ32F,EAAKhJ,GACpD,OAAO4/F,GAAqBlgF,EAAEigF,EAAQ32F,EAAKq2F,GAAyB,EAAGr/F,KACrE,SAAU2/F,EAAQ32F,EAAKhJ,GAEzB,OADA2/F,EAAO32F,GAAOhJ,EACP2/F,MCLQ,SAAU32F,EAAKhJ,GAC9B,IACE6/F,GAA4B3C,GAAQl0F,EAAKhJ,GACzC,MAAOq9F,GACPH,GAAOl0F,GAAOhJ,EACd,OAAOA,GCLP8/F,GAAS,wBACD5C,GAAO4C,KAAWC,GAAUD,GAAQ,ICF5CE,GAAmB7C,SAASvH,SAGE,mBAAvBqK,GAAMC,gBACfD,GAAMC,cAAgB,SAAUllF,GAC9B,OAAOglF,GAAiBpC,KAAK5iF,KAIjC,ICFIy7E,GAAKD,GAAK4I,MDEGa,GAAMC,cERnBC,GAAUjD,GAAOiD,WAEe,mBAAZA,IAA0B,cAAcpT,KAAKmT,GAAcC,yBCFlFC,UAAiB,SAAUp3F,EAAKhJ,GAC/B,OAAOigG,GAAMj3F,KAASi3F,GAAMj3F,QAAiB9I,IAAVF,EAAsBA,EAAQ,MAChE,WAAY,IAAImhB,KAAK,CACtBk/E,QAAS,QACTC,KAAyB,SACzBC,UAAW,4CCRTr3F,GAAK,EACLs3F,GAAU9+F,KAAKM,YAEF,SAAUgH,GACzB,MAAO,UAAYu2F,YAAer/F,IAAR8I,EAAoB,GAAKA,GAAO,QAAUE,GAAKs3F,IAAS5K,SAAS,KCDzFuC,GAAOsI,GAAO,WAED,SAAUz3F,GACzB,OAAOmvF,GAAKnvF,KAASmvF,GAAKnvF,GAAO03F,GAAI13F,QCNtB,GLQbm3F,GAAUjD,GAAOiD,QAGjBQ,GAAU,SAAU3lF,GACtB,OAAOokF,GAAIpkF,GAAMw7E,GAAIx7E,GAAMy7E,GAAIz7E,EAAI,KAGjC4lF,GAAY,SAAUC,GACxB,OAAO,SAAU7lF,GACf,IAAItO,EACJ,IAAKgyF,GAAS1jF,KAAQtO,EAAQ8pF,GAAIx7E,IAAKjL,OAAS8wF,EAC9C,MAAMvC,UAAU,0BAA4BuC,EAAO,aACnD,OAAOn0F,IAIb,GAAIo0F,GAAiB,CACnB,IAAIb,GAAQ,IAAIE,GACZY,GAAQd,GAAMzJ,IACdwK,GAAQf,GAAMb,IACd6B,GAAQhB,GAAMxJ,IAClBA,GAAM,SAAUz7E,EAAIkmF,GAElB,OADAD,GAAMrD,KAAKqC,GAAOjlF,EAAIkmF,GACfA,GAET1K,GAAM,SAAUx7E,GACd,OAAO+lF,GAAMnD,KAAKqC,GAAOjlF,IAAO,IAElCokF,GAAM,SAAUpkF,GACd,OAAOgmF,GAAMpD,KAAKqC,GAAOjlF,QAEtB,CACL,IAAImmF,GAAQC,GAAU,SACtBC,GAAWF,KAAS,EACpB1K,GAAM,SAAUz7E,EAAIkmF,GAElB,OADArB,GAA4B7kF,EAAImmF,GAAOD,GAChCA,GAET1K,GAAM,SAAUx7E,GACd,OAAOsmF,GAAUtmF,EAAImmF,IAASnmF,EAAGmmF,IAAS,IAE5C/B,GAAM,SAAUpkF,GACd,OAAOsmF,GAAUtmF,EAAImmF,KAIzB,IMhDII,GAAOlB,MNgDM,CACf5J,IAAKA,GACLD,IAAKA,GACL4I,IAAKA,GACLuB,QAASA,GACTC,UAAWA,uBOpDb,IAAIY,EAAmBC,GAAoBjL,IACvCkL,EAAuBD,GAAoBd,QAC3CgB,EAAWpC,OAAOA,QAAQnB,MAAM,WAEnCgC,UAAiB,SAAUpB,EAAGh2F,EAAKhJ,EAAO+qF,GACzC,IAAI6W,IAAS7W,KAAYA,EAAQ6W,OAC7BC,IAAS9W,KAAYA,EAAQiT,WAC7B8D,IAAc/W,KAAYA,EAAQ+W,YAClB,mBAAT9hG,IACS,iBAAPgJ,GAAoBo2F,GAAIp/F,EAAO,SAAS6/F,GAA4B7/F,EAAO,OAAQgJ,GAC9F04F,EAAqB1hG,GAAO+hG,OAASJ,EAASK,KAAmB,iBAAPh5F,EAAkBA,EAAM,KAEhFg2F,IAAM9B,IAIE0E,GAEAE,GAAe9C,EAAEh2F,KAC3B64F,GAAS,UAFF7C,EAAEh2F,GAIP64F,EAAQ7C,EAAEh2F,GAAOhJ,EAChB6/F,GAA4Bb,EAAGh2F,EAAKhJ,IATnC6hG,EAAQ7C,EAAEh2F,GAAOhJ,EAChB+/F,GAAU/2F,EAAKhJ,KAUrBm9F,SAAS8E,UAAW,YAAY,WACjC,MAAsB,mBAARj/E,MAAsBw+E,EAAiBx+E,MAAM++E,QAAU7B,GAAcl9E,eC9BpEk6E,GCCbgF,GAAY,SAAUC,GACxB,MAA0B,mBAAZA,EAAyBA,OAAWjiG,MAGnC,SAAUkiG,EAAWC,GACpC,OAAOC,UAAUliG,OAAS,EAAI8hG,GAAUK,GAAKH,KAAeF,GAAUhF,GAAOkF,IACzEG,GAAKH,IAAcG,GAAKH,GAAWC,IAAWnF,GAAOkF,IAAclF,GAAOkF,GAAWC,ICTvF9nF,GAAO7Y,KAAK6Y,KACZvO,GAAQtK,KAAKsK,SAIA,SAAUw2F,GACzB,OAAOC,MAAMD,GAAYA,GAAY,GAAKA,EAAW,EAAIx2F,GAAQuO,IAAMioF,ICJrEvN,GAAMvzF,KAAKuzF,OAIE,SAAUuN,GACzB,OAAOA,EAAW,EAAIvN,GAAIyN,GAAUF,GAAW,kBAAoB,GCLjEtN,GAAMxzF,KAAKwzF,IACXD,GAAMvzF,KAAKuzF,OAKE,SAAU1iF,EAAOnS,GAChC,IAAIuiG,EAAUD,GAAUnwF,GACxB,OAAOowF,EAAU,EAAIzN,GAAIyN,EAAUviG,EAAQ,GAAK60F,GAAI0N,EAASviG,ICL3DwiG,GAAe,SAAUC,GAC3B,OAAO,SAAUC,EAAOC,EAAIC,GAC1B,IAGIhjG,EAHAg/F,EAAIC,GAAgB6D,GACpB1iG,EAAS6iG,GAASjE,EAAE5+F,QACpBmS,EAAQ2wF,GAAgBF,EAAW5iG,GAIvC,GAAIyiG,GAAeE,GAAMA,GAAI,KAAO3iG,EAASmS,GAG3C,IAFAvS,EAAQg/F,EAAEzsF,OAEGvS,EAAO,OAAO,OAEtB,KAAMI,EAASmS,EAAOA,IAC3B,IAAKswF,GAAetwF,KAASysF,IAAMA,EAAEzsF,KAAWwwF,EAAI,OAAOF,GAAetwF,GAAS,EACnF,OAAQswF,IAAgB,OAIb,CAGfM,SAAUP,IAAa,GAGvBlrE,QAASkrE,IAAa,IC5BpBlrE,GAAU0rE,GAAuC1rE,WAGpC,SAAUioE,EAAQ0D,GACjC,IAGIr6F,EAHAg2F,EAAIC,GAAgBU,GACpBp/F,EAAI,EACJ+a,EAAS,GAEb,IAAKtS,KAAOg2F,GAAII,GAAIiC,GAAYr4F,IAAQo2F,GAAIJ,EAAGh2F,IAAQsS,EAAO6F,KAAKnY,GAEnE,KAAOq6F,EAAMjjG,OAASG,GAAO6+F,GAAIJ,EAAGh2F,EAAMq6F,EAAM9iG,SAC7Cm3B,GAAQpc,EAAQtS,IAAQsS,EAAO6F,KAAKnY,IAEvC,OAAOsS,GCZL+lF,GCFa,CACf,cACA,iBACA,gBACA,uBACA,iBACA,WACA,WDL2BiC,OAAO,SAAU,mBAIlC/F,OAAOgG,qBAAuB,SAA6BvE,GACrE,OAAOwE,GAAmBxE,EAAGqC,YERnB9D,OAAOkG,0BCMFC,GAAW,UAAW,YAAc,SAAiB1oF,GACpE,IAAIm9E,EAAOwL,GAA0BjkF,EAAEggF,GAAS1kF,IAC5CyoF,EAAwBG,GAA4BlkF,EACxD,OAAO+jF,EAAwBtL,EAAKmL,OAAOG,EAAsBzoF,IAAOm9E,MCJzD,SAAU/qF,EAAQ20F,GAIjC,IAHA,IAAI5J,EAAO0L,GAAQ9B,GACfvE,EAAiBoC,GAAqBlgF,EACtCi+E,EAA2BmG,GAA+BpkF,EACrDnf,EAAI,EAAGA,EAAI43F,EAAK/3F,OAAQG,IAAK,CACpC,IAAIyI,EAAMmvF,EAAK53F,GACV6+F,GAAIhyF,EAAQpE,IAAMw0F,EAAepwF,EAAQpE,EAAK20F,EAAyBoE,EAAQ/4F,MCTpF+6F,GAAc,kBAEdC,GAAW,SAAUC,EAASC,GAChC,IAAIlkG,EAAQgc,GAAKmoF,GAAUF,IAC3B,OAAOjkG,GAASokG,IACZpkG,GAASqkG,KACW,mBAAbH,EAA0B5G,GAAM4G,KACrCA,IAGJC,GAAYH,GAASG,UAAY,SAAUG,GAC7C,OAAO/E,OAAO+E,GAAQC,QAAQR,GAAa,KAAKS,eAG9CxoF,GAAOgoF,GAAShoF,KAAO,GACvBqoF,GAASL,GAASK,OAAS,IAC3BD,GAAWJ,GAASI,SAAW,OAElBJ,GCnBbrG,GAA2ByF,GAA2D1jF,KAqBzE,SAAUqrE,EAASgX,GAClC,IAGY30F,EAAQpE,EAAKy7F,EAAgBC,EAAgB3G,EAHrD4G,EAAS5Z,EAAQ39E,OACjBw3F,EAAS7Z,EAAQmS,OACjB2H,EAAS9Z,EAAQ+Z,KASrB,GANE13F,EADEw3F,EACO1H,GACA2H,EACA3H,GAAOyH,IAAW5E,GAAU4E,EAAQ,KAEnCzH,GAAOyH,IAAW,IAAI1C,UAEtB,IAAKj5F,KAAO+4F,EAAQ,CAQ9B,GAPA2C,EAAiB3C,EAAO/4F,GAGtBy7F,EAFE1Z,EAAQ+W,aACV/D,EAAaJ,GAAyBvwF,EAAQpE,KACf+0F,EAAW/9F,MACpBoN,EAAOpE,IACtBg7F,GAASY,EAAS57F,EAAM27F,GAAUE,EAAS,IAAM,KAAO77F,EAAK+hF,EAAQga,cAE5C7kG,IAAnBukG,EAA8B,CAC3C,UAAWC,UAA0BD,EAAgB,SACrDO,GAA0BN,EAAgBD,IAGxC1Z,EAAQka,MAASR,GAAkBA,EAAeQ,OACpDpF,GAA4B6E,EAAgB,QAAQ,GAGtDQ,GAAS93F,EAAQpE,EAAK07F,EAAgB3Z,QCnDzB,SAAU/vE,GACzB,GAAiB,mBAANA,EACT,MAAMsjF,UAAUiB,OAAOvkF,GAAM,sBAC7B,OAAOA,MCAM,SAAUm6D,EAAIgwB,EAAM/kG,GAEnC,GADA8hG,GAAU/sB,QACGj1E,IAATilG,EAAoB,OAAOhwB,EAC/B,OAAQ/0E,GACN,KAAK,EAAG,OAAO,WACb,OAAO+0E,EAAGyoB,KAAKuH,IAEjB,KAAK,EAAG,OAAO,SAAU7kG,GACvB,OAAO60E,EAAGyoB,KAAKuH,EAAM7kG,IAEvB,KAAK,EAAG,OAAO,SAAUA,EAAGS,GAC1B,OAAOo0E,EAAGyoB,KAAKuH,EAAM7kG,EAAGS,IAE1B,KAAK,EAAG,OAAO,SAAUT,EAAGS,EAAGqP,GAC7B,OAAO+kE,EAAGyoB,KAAKuH,EAAM7kG,EAAGS,EAAGqP,IAG/B,OAAO,WACL,OAAO+kE,EAAGiwB,MAAMD,EAAM7C,gBCjBT,SAAUE,GACzB,OAAOjF,OAAOiB,GAAuBgE,QCDtBr+E,MAAMkhF,SAAW,SAAiBC,GACjD,MAAuB,SAAhBjH,GAAQiH,SCHE/H,OAAOkG,wBAA0BnG,IAAM,WAGxD,OAAQiC,OAAOgG,gBCHAC,KAEXD,OAAON,MAEkB,iBAAnBM,OAAOE,SCCfC,GAAwBjF,GAAO,OAC/B8E,GAASrI,GAAOqI,OAChBI,GAAwBC,GAAoBL,GAASA,IAAUA,GAAOM,eAAiBnF,MAE1E,SAAU1/E,GAIvB,OAHGo+E,GAAIsG,GAAuB1kF,KAC1BwkF,IAAiBpG,GAAImG,GAAQvkF,GAAO0kF,GAAsB1kF,GAAQukF,GAAOvkF,GACxE0kF,GAAsB1kF,GAAQ2kF,GAAsB,UAAY3kF,IAC9D0kF,GAAsB1kF,ICX7B8kF,GAAUC,GAAgB,cAIb,SAAUC,EAAe5lG,GACxC,IAAIw0B,EASF,OAREywE,GAAQW,KAGM,mBAFhBpxE,EAAIoxE,EAAcC,cAEarxE,IAAMzQ,QAASkhF,GAAQzwE,EAAEqtE,WAC/CvD,GAAS9pE,IAEN,QADVA,EAAIA,EAAEkxE,OACUlxE,OAAI10B,GAH+C00B,OAAI10B,GAKlE,SAAWA,IAAN00B,EAAkBzQ,MAAQyQ,GAAc,IAAXx0B,EAAe,EAAIA,ICZ5D+gB,GAAO,GAAGA,KAGVyhF,GAAe,SAAU/B,GAC3B,IAAIqF,EAAiB,GAARrF,EACTsF,EAAoB,GAARtF,EACZuF,EAAkB,GAARvF,EACVwF,EAAmB,GAARxF,EACXyF,EAAwB,GAARzF,EAChB0F,EAAmB,GAAR1F,GAAayF,EAC5B,OAAO,SAAUxD,EAAO0D,EAAYrB,EAAMsB,GASxC,IARA,IAOIzmG,EAAOsb,EAPP0jF,EAAI0H,GAAS5D,GACb7F,EAAOsB,GAAcS,GACrB2H,EAAgBC,GAAKJ,EAAYrB,EAAM,GACvC/kG,EAAS6iG,GAAShG,EAAK78F,QACvBmS,EAAQ,EACRs0F,EAASJ,GAAkBK,GAC3B15F,EAAS84F,EAASW,EAAO/D,EAAO1iG,GAAU+lG,EAAYU,EAAO/D,EAAO,QAAK5iG,EAEvEE,EAASmS,EAAOA,IAAS,IAAIg0F,GAAYh0F,KAAS0qF,KAEtD3hF,EAASqrF,EADT3mG,EAAQi9F,EAAK1qF,GACiBA,EAAOysF,GACjC6B,GACF,GAAIqF,EAAQ94F,EAAOmF,GAAS+I,OACvB,GAAIA,EAAQ,OAAQulF,GACvB,KAAK,EAAG,OAAO,EACf,KAAK,EAAG,OAAO7gG,EACf,KAAK,EAAG,OAAOuS,EACf,KAAK,EAAG4O,GAAKy8E,KAAKxwF,EAAQpN,QACrB,GAAIqmG,EAAU,OAAO,EAGhC,OAAOC,GAAiB,EAAIF,GAAWC,EAAWA,EAAWj5F,OAIhD,CAGf25F,QAASnE,GAAa,GAGtBoE,IAAKpE,GAAa,GAGlB19D,OAAQ09D,GAAa,GAGrBqE,KAAMrE,GAAa,GAGnBsE,MAAOtE,GAAa,GAGpBuE,KAAMvE,GAAa,GAGnBwE,UAAWxE,GAAa,OC7DTc,GAAW,YAAa,cAAgB,GzBCrD2D,GAAUnK,GAAOmK,QACjBC,GAAWD,IAAWA,GAAQC,SAC9BC,GAAKD,IAAYA,GAASC,GAG1BA,GAEFlH,IADAkB,GAAQgG,GAAGnJ,MAAM,MACD,GAAKmD,GAAM,GAClBiG,OACTjG,GAAQiG,GAAUjG,MAAM,iBACVA,GAAM,IAAM,MACxBA,GAAQiG,GAAUjG,MAAM,oBACblB,GAAUkB,GAAM,IAI/B,OAAiBlB,KAAYA,G0BfzByF,GAAUC,GAAgB,cAEb,SAAU0B,GAIzB,OAAOC,IAAc,KAAOpK,IAAM,WAChC,IAAIjyF,EAAQ,GAKZ,OAJkBA,EAAM46F,YAAc,IAC1BH,IAAW,WACrB,MAAO,CAAE6B,IAAK,IAE2B,IAApCt8F,EAAMo8F,GAAaG,SAASD,QCZnCnK,GAAiBD,OAAOC,eACxBp7F,GAAQ,GAERylG,GAAU,SAAU7sF,GAAM,MAAMA,MAEnB,SAAUysF,EAAa1c,GACtC,GAAIqU,GAAIh9F,GAAOqlG,GAAc,OAAOrlG,GAAMqlG,GACrC1c,IAASA,EAAU,IACxB,IAAIsX,EAAS,GAAGoF,GACZK,IAAY1I,GAAIrU,EAAS,cAAeA,EAAQ+c,UAChDC,EAAY3I,GAAIrU,EAAS,GAAKA,EAAQ,GAAK8c,GAC3CG,EAAY5I,GAAIrU,EAAS,GAAKA,EAAQ,QAAK7qF,EAE/C,OAAOkC,GAAMqlG,KAAiBpF,IAAW/E,IAAM,WAC7C,GAAIwK,IAAchJ,GAAa,OAAO,EACtC,IAAIE,EAAI,CAAE5+F,QAAS,GAEf0nG,EAAWtK,GAAewB,EAAG,EAAG,CAAEhB,YAAY,EAAMxH,IAAKqR,KACxD7I,EAAE,GAAK,EAEZqD,EAAOzE,KAAKoB,EAAG+I,EAAWC,OCtB1BC,GAAU7E,GAAwCl+D,OAIlDgjE,GAAsBC,GAA6B,UAEnDC,GAAiBC,GAAwB,UAK7CC,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,QAASmD,KAAwBE,IAAkB,CACnFljE,OAAQ,SAAgBshE,GACtB,OAAOyB,GAAQjlF,KAAMwjF,EAAYlE,UAAUliG,OAAS,EAAIkiG,UAAU,QAAKpiG,UC6C9DsoG,2BAIYA,cAAqB,EAIrBA,iBAAwB,EAKxBA,cAAqB,EAIrBA,gBAAuB,EAIvBA,kBAAyB,EAIzBA,gBAAuB,KAEvBA,wBAA+B,GAC/BA,wBAA+B,GAC/BA,yBAAgC,GAKhCA,eAAsB,GACtBA,gBAAuB,GAKvBA,wBAA+B,GAI/BA,wBAA+B,EAI/BA,yBAAgC,IAIhCA,eAAsB,IAKtBA,8BAAqC,QAOjDC,0BA6BCvpF,EAAgBzD,uDAzBa,4BAeT,6BAIE,IAU3BuoB,QAAU9kB,IACVirE,iBAAmB1uE,IACnBuoB,QAAQ4pD,mGAIR5pD,QAAQ4pD,uBAAuB,kCAO3BtD,EAA2Boe,OAGlC,IAAInoG,EAAI,EACRA,EAAImoG,GAAqB1lF,KAAK2lF,YAAYvoG,OAASooG,GAAcI,6BAC/DroG,EACF,KACM42E,EAAgBmT,EAAgB/pF,QACjC4pF,iBAAiBttB,iBACpBsa,MACAn0D,KAAKmnE,iBAAiBnP,iBAAiB7D,SAGpCwxB,YAAYxnF,KAAK6B,KAAKmnE,iBAAiB0e,2BAA2B1xB,kCAO/DjoC,YACD45D,EAAKxoG,EAAWS,UAChBT,EAAIoB,KAAKsK,MAAM1L,EAAIS,GAAKA,OAG5BgoG,uBAAyBD,EAC5B9lF,KAAK+lF,uBAAyB75D,EAC9BlsB,KAAKgmF,kCAEDC,EACJ,EAAMvnG,KAAKwnG,IAAIlmF,KAAK+lF,uBAAyB/lF,KAAKgmF,yBAA2B,IACzE/rF,GAAQ,IAAIqM,IAAU0qE,YAC1B,IAAM,KAAS,EAAMiV,GACrB,IAAM,IAAQvnG,KAAKwnG,IAAI,GAAMD,GAC7B,IAAM,IAAQA,EACd,KAGO1oG,EAAI,EAAGA,EAAIyiB,KAAK2lF,YAAYvoG,SAAUG,OACxC4pF,iBAAiBjuE,iBAAiB8G,KAAK2lF,YAAYpoG,GAAG4oG,YAAYziG,KAAKuW,8CAYtDm9D,EAAkC7nE,GACtD6nE,IAAmBp3D,KAAKmnE,wBAOvBwe,YAAc3lF,KAAK2lF,YAAYzjE,QAAO,SAACllC,UACnCA,EAAMmpG,aAAe52F,aA1GUy0C,IAuH/BoiD,kFAImB,gBAIT,gBAKA,oBAII,gBAKa,IAAI7kG,aAcM,gBACU,WAgElDoiC,EAAK,IAAIN,GACTgjE,EAAS94D,EAAKvM,QAAQgqD,WAAWrnD,GAG9BpmC,EAAI,EAAGA,EAAIioG,GAAcc,cAAe/oG,MAC1CgpG,WAAWhpG,GAAK,SAGlB,IAAIA,EAAI,EAAGA,EAAIioG,GAAcgB,WAAYjpG,MACvCkpG,QAAQlpG,GAAK,OAGfyjC,QAAQ0lE,WAAW,IAAInlG,GAAO,GAAM,SAK/BsZ,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,IAAK,IACjB,IAAIA,GAAO,IAAK,IAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,IAAQ,GAAI,IAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAOikG,GAAcmB,oBAAsB,IAAK,GACpD,IAAIplG,GAAOikG,GAAcmB,qBAAsB,GAC/C,IAAIplG,GAAOikG,GAAcmB,oBAAqB,IAC9C,IAAIplG,GAAOikG,GAAcmB,oBAAsB,GAAI,KAErD9rF,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAOikG,GAAcoB,sBAAuB,GAChD,IAAIrlG,GAAOikG,GAAcoB,qBAAuB,IAAK,GACrD,IAAIrlG,GAAOikG,GAAcoB,qBAAuB,GAAI,IACpD,IAAIrlG,GAAOikG,GAAcoB,qBAAsB,KAEjD/rF,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,OAE3BovC,iBAAmB,IAAIpB,GAAuBl4D,EAAKvM,QAASuM,EAAK45C,oBAEjE2f,YAAc,IAEdC,cAGAC,iBAAmB,IAAItsE,KACvBssE,iBAAiBnsE,SACpB2qE,GAAcoB,qBAAuBpB,GAAcmB,oBACnD,KAIGM,qBAAuB,IAAItlG,OAC1BulG,EAAM,IAAI3lG,IAAQ,GAAI,YACvB0lG,qBAAqBzsC,iBAAiB0sC,EAAK,GAGhDl0B,GAAKud,sBAAsB6V,EAAQe,WAAYf,EAAQgB,mBAClDC,gBAAkBr0B,GAAKs0B,4BAC5Bt0B,GAAKu0B,qCAAoC,wEAKpC,IAAIhqG,EAAI,EAAGA,EAAIyiB,KAAKwnF,qBAAsBjqG,SAExCgpG,WAAWhpG,GAAK,6CAkBjBkqG,EACJ,sHAcGD,qBAAuB,OACvBE,YAAc,MAGbC,EAAW,IAAIjtE,GACrBitE,EAAS9sE,SAAS2qE,GAAcoC,aAAcpC,GAAcoC,kBAGtDC,EAAWtmG,GAAOymB,UAAU,GAClC6/E,EAAS,GAAGvjG,KAAKkhG,GAAcoC,cAAepC,GAAcoC,cAC5DC,EAAS,GAAGvjG,IAAIkhG,GAAcoC,aAAcpC,GAAcoC,cAC1DC,EAAS,GAAGvjG,IAAIkhG,GAAcoC,cAAepC,GAAcoC,kBACrDE,EAAqB,IAAIptE,GAC/BotE,EAAmBxjG,IAAIujG,EAAU,GAEjCA,EAAS,GAAGvjG,KAAKkhG,GAAcoC,aAAcpC,GAAcoC,kBACrDG,EAAoB,IAAIrtE,GAC9BqtE,EAAkBzjG,IAAIujG,EAAU,OAG1BG,EAAc,IAAIzuE,GACxByuE,EAAYjlG,SAAwC,GAA7ByiG,GAAcoC,iBAE/BK,GAAM,IAAI3hF,IAAU0qE,YAAY,IAAK,IAAK,IAAK,KAC/CkX,GAAQ,IAAI5hF,IAAU0qE,YAAY,IAAK,IAAK,IAAK,KACjDmX,GAAO,IAAI7hF,IAAU0qE,YAAY,IAAK,IAAK,IAAK,UAEjDoX,YAAY9jG,IAAIkhG,GAAc6C,YAAa,OAE3C,IAAI9qG,EAAI,EAAGA,EAAIioG,GAAc8C,YAAa/qG,QACxC,IAAI4I,EAAI,EAAGA,EAAIq/F,GAAc+C,aAAcpiG,IAAK,KAC7C2rD,EAAO21C,EAAKthG,EAAIq/F,GAAc8C,YAAc/qG,GAG5Cyd,EAAS,IAAIzZ,GACjBikG,GAAcmB,oBACiB,EAA7BnB,GAAcoC,aAAmBrqG,EACjCioG,GAAcoC,aAChBpC,GAAcgD,sBACiB,EAA7BhD,GAAcoC,aAAmBzhG,EACjCq/F,GAAcoC,qBAIV91C,OACD,SAEEk5B,WAAWhwE,EAAQ2sF,eAErB,SAEE3c,WAAWhwE,EAAQ+sF,eAErB,SAEE/c,WAAWhwE,EAAQ8sF,eAErB,SAEE9c,WAAWhwE,EAAQgtF,eAErB,SACES,QAAQztF,aAEV,SAEE0tF,iBAAiB1tF,EAAQmtF,aAE3B,SAEEO,iBAAiB1tF,EAAQitF,aAE3B,SAEES,iBAAiB1tF,EAAQktF,wCAUtBltF,EAAgBH,EAAgB9N,OAC1C9P,EAAM,IAAIomC,GAChBpmC,EAAImoB,SAAS1hB,KAAKsX,GAClB/d,EAAI8P,KAAOA,EACEiT,KAAKghB,QAAQgqD,WAAW/tF,GAChC0vF,cAAc9xE,EAAO,oCAIbG,OAIPH,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS2qE,GAAcmD,aAAcnD,GAAcmD,kBAEnD1rG,EAAM,IAAIomC,GAChBpmC,EAAImoB,SAAS1hB,KAAKsX,GAClB/d,EAAI8P,OACJ9P,EAAIuhB,MAAQ,MACNijB,EAAOzhB,KAAKghB,QAAQgqD,WAAW/tF,GACrCwkC,EAAKkrD,cAAc9xE,EAAO,OAIpB+tF,EAAoB,IAAIvxD,GAC9BuxD,EAAkBtvF,MAAQ0G,KAAK+qE,aAC/B6d,EAAkBpvF,MAAQioB,EAC1BmnE,EAAkB5/D,kBAAmB,EACrC4/D,EAAkBrxD,WAAWjzC,IAAI,EAAG,GACpCskG,EAAkBr/D,aAAa7lC,KAAKsX,QAE/BgmB,QAAQ4M,YAAYg7D,QAEpBnC,QAAQzmF,KAAK0nF,aAAejmE,OAC5BimE,uDAIiB1sF,EAAgBf,OAIhC4uF,EAAmB,IAAItnG,GAAO,EAAGikG,GAAcsD,sBAE/CC,EAAU,IAAIviB,GACpBuiB,EAAQC,kBAAkBhpF,KAAKmnE,kBAC/B4hB,EAAQptE,YAAY3gB,GACpB+tF,EAAQE,YAAYJ,GACpBE,EAAQG,QAAQ,IAAI3nG,GAAOikG,GAAc2D,qBAAsB,IAC/DJ,EAAQK,YAAY5D,GAAc6D,sBAClCN,EAAQO,SAASrvF,QACZssF,WAAWvmF,KAAKwnF,sBAAwBuB,OACxCvB,8DAGenuF,qDACCA,kDAGO4qC,6DACCA,wCAGXvhB,mDACCA,sCAGHA,iDACCA,oCAGHA,EAAoB8hB,+CACnB9hB,EAAS8hB,qCAGT9hB,EAAoBoE,gDACnBpE,EAASoE,oCAMX9gC,+CACCA,OACXujG,EAAS,SACLvjG,OACD,SACEqhG,gBAAkB,YAEpB,IACHkC,eAEG,IACHA,gBAEG,IACHA,eAEG,IACHA,IAGAA,IACEvpF,KAAKqnF,gBAAkBkC,OACpBlC,gBAAkBrnF,KAAKqnF,iBAAmBkC,OAE1ClC,gBAAkBrnF,KAAKqnF,gBAAkBkC,GAGlDv2B,GAAKw2B,0BAA0BxpF,KAAKqnF,oDAGpBrhG,iDACCA,qCAGFzC,gDACCA,mCAGHA,8CACCA,qCAGCA,gDACCA,gCAMNqpF,OACN1gD,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAC7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAEI0gD,QAENya,gBAAkBr0B,GAAKs0B,gCAGvB,IAAI/pG,EAAI,EAAGA,EAAIyiB,KAAKwnF,qBAAsBjqG,IAAK,KAC5C+pF,EAA4B,GAC5ByhB,EAAU/oF,KAAKumF,WAAWhpG,MAC5BwrG,EAAS,CACXA,EAAQlvC,iBAAiB75C,KAAKqnF,qBACxBoC,EAAmBV,EAAQzrB,KAC/BpxC,EACAo7C,EACAke,GAAcI,iCAEXiB,iBAAiB6C,IAAIpiB,EAAiBmiB,SAK1C5C,iBAAiBvpB,KAAKpxC,QAGtBi7C,iBAAiBwiB,wBAAwB3pF,KAAKgnF,iBAAkBhnF,KAAKinF,0BAGrE,IAAI1pG,EAAI,EAAGA,EAAIyiB,KAAK0nF,YAAanqG,IAAK,KACnCqsG,EAAO5pF,KAAKymF,QAAQlpG,GACtBqsG,GAIFA,EAAKC,mBAAmB7pF,KAAKooF,aAAa,QAGvCtB,aAAe56D,EAGhBlsB,KAAK8mF,YAActB,GAAcsE,kBAC9BhD,aAAetB,GAAcsE,gBAC7B1B,YAAYxqG,IAAM,GAI3BwoF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,+CACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,uCACtCA,YAAchB,wJAQZ,IAAIyc,SA7ecpzB,IA4CJozB,iBAAgB,CACrC,IAAIte,KAEFM,GAAkBmB,iBAClB,SAEF,IAAIzB,KAEFM,GAAkBmB,iBAAmBpD,GAAyBqD,qBAC9D,kBAEF,IAAI1B,MAEFM,GAAkBmB,iBAClB,UAEF,IAAIzB,OAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,MAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,GACF,IACAM,GAAkBmB,iBAClB,kBAEF,IAAIzB,GACF,GACAM,GAAkBmB,iBAClB,kBAEF,IAAIzB,GACF,IAGAM,GAAkBmB,iBAClB,0BAEF,IAAIzB,GACF,IACAM,GAAkBmB,iBAClB,0BAImB6c,cAAa,CAAC,IAAIpe,GAA4Boe,GAAQ2D,gBACtD3D,mBAAkBA,GAAQe,WAAW/pG,OC7U9D,OAAiB,WACf,IAAI+kG,EAAOzF,GAAS18E,MAChB1H,EAAS,GAOb,OANI6pF,EAAKjI,SAAQ5hF,GAAU,KACvB6pF,EAAK6H,aAAY1xF,GAAU,KAC3B6pF,EAAK8H,YAAW3xF,GAAU,KAC1B6pF,EAAK+H,SAAQ5xF,GAAU,KACvB6pF,EAAKgI,UAAS7xF,GAAU,KACxB6pF,EAAKiI,SAAQ9xF,GAAU,KACpBA,GCXL+xF,IrGOoB/P,IAAM,WAE5B,IAAIgQ,EAAKjsF,GAAG,IAAK,KAEjB,OADAisF,EAAGtvC,UAAY,EACW,MAAnBsvC,EAAGlQ,KAAK,WAGME,IAAM,WAE3B,IAAIgQ,EAAKjsF,GAAG,KAAM,MAElB,OADAisF,EAAGtvC,UAAY,EACU,MAAlBsvC,EAAGlQ,KAAK,WqGlBGgG,GAIhBtE,KAA8B,KAAd,KAAK3/E,OAAgBkuF,KACvCE,GAA2B7tF,EAAE4B,OAAO2gF,UAAW,QAAS,CACtD/D,cAAc,EACd1H,IAAKgX,SC2BHC,yBAQFrzB,EACAsP,EACAxB,EACA1pC,EACA2U,EACAuS,YAgBSgoC,EAAQnnG,EAAWjC,EAAWqI,UACjCA,EAAI,IACNA,GAAK,GAEHA,EAAI,IACNA,GAAK,GAEHA,EAAI,EAAI,EACHpG,EAAc,GAATjC,EAAIiC,GAASoG,EAEvBA,EAAI,GACCrI,EAELqI,EAAI,EAAI,EACHpG,GAAKjC,EAAIiC,IAAM,EAAI,EAAIoG,GAAK,EAE9BpG,WAEAonG,EAASl7E,EAAW1jB,EAAW4L,OAClCxT,EAAGqX,EAAGzd,EADuCT,yDAAI,KAE3C,IAANyO,EACF5H,EAAIqX,EAAIzd,EAAI4Z,MACP,KACCrW,EAAYqW,EAAI,GAAMA,GAAK,EAAI5L,GAAK4L,EAAI5L,EAAI4L,EAAI5L,EAChDxI,EAAY,EAAIoU,EAAIrW,EAC1B6C,EAAIumG,EAAQnnG,EAAGjC,EAAGmuB,EAAI,EAAI,GAC1BjU,EAAIkvF,EAAQnnG,EAAGjC,EAAGmuB,GAClB1xB,EAAI2sG,EAAQnnG,EAAGjC,EAAGmuB,EAAI,EAAI,SAErB,CAAEtrB,EAAAA,EAAGqX,EAAAA,EAAGzd,EAAAA,EAAGT,EAAAA,oCAzDM,2BACE,sBACL,mBAGM,IAAIgpB,OAU3BzL,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI/I,KAAKgjF,GACf7rE,EAAM9X,SAAWmiF,MAGXwC,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQumD,EACXglB,EAAG7sE,MAAQA,OAqCN+vF,YAAYlnG,KAAKinG,EAASjsG,KAAKM,SAAU,EAAG,KACjD0oF,EAAGztE,MAAMvW,KAAKsc,KAAK4qF,kBACdzjB,iBAAmB/P,OAGnByzB,KAAO7qF,KAAKmnE,iBAAiBniB,oBAAoB0iB,QAEjDojB,kBAAoB9qF,KAAK+qF,oBAAsB56C,OAC/C66C,eAA0C,GAAzBhrF,KAAK8qF,0BAIrBtmC,EAAcxkD,KAAK6qF,KAAKpmC,iBACxB37D,EAAMkX,KAAKmnE,iBAAiBruE,oBAC5BqzE,EAAMnsE,KAAKmnE,iBAAiBmD,oBACzB/sF,EAAIinE,EAAajnE,EAAIinE,EAAcxkD,KAAK6qF,KAAKlyF,mBAAoBpb,IAExEgE,GAAOU,MAAM6G,EAAIvL,GAAImpF,EAAQyF,EAAI5uF,IAEjCgE,GAAO0pG,MAAM9e,EAAI5uF,GAAIi+C,EAAO2wC,EAAI5uF,kDAI7BstG,KAAKK,kBAAiB,+CAIvBlrF,KAAK+qF,qBAAuB/qF,KAAKgrF,eAC5B,EAEF,GAAOhrF,KAAKgrF,eAAiBhrF,KAAK+qF,qBAAuB/qF,KAAKgrF,4CAE3D9+D,MACNA,EAAK,GAAKlsB,KAAK+qF,oBAAsB,EAAK,MACvCA,oBAAsBrsG,KAAKwzF,IAAIlyE,KAAK+qF,oBAAsB7+D,EAAI,WAC7Di/D,EAAQnrF,KAAKorF,aAEbrmB,EAAS/kE,KAAKmnE,iBAAiBjuE,iBAC/BsrD,EAAcxkD,KAAK6qF,KAAKpmC,iBAGrBlnE,EAAIinE,EAAajnE,EAAIinE,EAAcxkD,KAAK6qF,KAAKlyF,mBAAoBpb,IAC9DwnF,EAAOxnF,GAIfD,GAAK6tG,2CAKJnrF,KAAK+qF,qBAAuB,WAI1BM,wEAKU,UACsB,gBACvB,mBACa,IAAI9pG,KAK9B+pG,WAAa,MAEb,IAAI/tG,EAAI,EAAGA,EAAI8tG,EAAOE,SAAUhuG,MAC9BiuG,MAAMjuG,GAAK,OAGbkuG,gBACAtkB,iBAAiB1vB,UAAU,QAG3B,IAAIl6D,EAAI,EAAGA,EAAI8tG,EAAOK,aAAcnuG,IAAK,KACtComC,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAMuZ,KAAewtF,EAAOM,oBAAsBN,EAAOO,aAAeruG,GACtFsd,EAAM9X,SAAW,EACP0+B,EAAKkrD,cAAc9xE,EAAO,IAElCgxF,YAAY,CACZC,OAAO,WAIX94B,GAAKu0B,qCAAoC,GACzCv0B,GAAKw2B,iGAGa9mE,mDACCA,OAEbqpE,EAAQrpE,EAAQE,cAAc8D,cAC9BslE,EAAQtpE,EAAQI,cAAc4D,iBAC/BqlE,GAASA,EAAMD,OAAWE,GAASA,EAAMF,MAAQ,KAC9CnqD,EAAgB,IAAI91B,GAC1B6W,EAAQ0oD,iBAAiBzpC,QAMpBsqD,eAAevoG,KAAKi+C,EAAc17C,OAAO,SACzCimG,WAAY,gCAITtf,OACJlqB,EAAgBsQ,GAAKs0B,4BACvBp7D,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAC7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAGI0gD,GAGP5sE,KAAKksF,iBAEFC,OAAOnsF,KAAKisF,eAAgBvpC,QAC5BwpC,WAAY,OAId,IAAI3uG,EAAI,EAAGA,EAAI8tG,EAAOE,SAAUhuG,IAAK,KAClC6uG,EAAMpsF,KAAKwrF,MAAMjuG,GACX,OAAR6uG,IAGJA,EAAI9uB,KAAKpxC,GACLkgE,EAAIC,WAEND,EAAIE,YACCd,MAAMjuG,GAAK,uCAKRgG,EAAWm/D,OACjB0pC,EAAMpsF,KAAKwrF,MAAMxrF,KAAKsrF,YAChB,OAARc,IAEFA,EAAIE,YACCd,MAAMxrF,KAAKsrF,YAAc,WAE3BE,MAAMxrF,KAAKsrF,YAAc,IAAIb,GAChCzqF,KAAKmnE,iBACL5jF,EACAsa,GAAY,EAAK,GACjBA,GAAY,GAAM,IAClBA,GAAY,GAAK,GACjB6kD,KAEI1iD,KAAKsrF,YAAcD,EAAOE,gBACzBD,WAAa,6CAOZ3nE,EAAK,IAAIN,GACTgjE,EAASrmF,KAAKghB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,IAAK,IACjB,IAAIA,GAAO,IAAK,IAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,IAAQ,GAAI,IAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,IAAQ,GAAI,KAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,IAAK,IACjB,IAAIA,IAAQ,IAAK,IACjB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,KAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,IAAK,IAChB,IAAIA,GAAO,IAAK,IAChB,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,KAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,6CAMzB,IAAIwwF,SAvKar4B,IACXq4B,gBAAe,EACfA,YAAW,GACXA,uBAAsB,EACtBA,gBAAe,QC9HnBkB,+DAKD5oE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAI8kB,GACZ5/B,EAAW,CAAC,IAAIwB,IAAQ,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,IAAQ,EAAG,IACxFsZ,EAAM2xF,WAAWzsG,EAAU,GAC3BsmG,EAAO1Z,cAAc9xE,EAAO,KAGzBssE,iBAAiB1vB,UAAU,OAC3B0vB,iBAAiBslB,WAAW,QAGzB5xF,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,IAAQ,IAAK,MAAO,OAC3CmmF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ62D,GAAKs0B,4BAChB5f,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,cACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,oFAM5B,6CAIA,IAAIsoD,SAnCev5B,ICMjB25B,2DAkBT35B,GAAKud,sBAAsBoc,EAAYxF,WAAYwF,EAAYvF,qBAGvDzjE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAI8kB,GACZ5/B,EAAW,CAAC,IAAIwB,IAAQ,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,IAAQ,EAAG,IACxFsZ,EAAM2xF,WAAWzsG,EAAU,GAC3BsmG,EAAO1Z,cAAc9xE,EAAO,KAGzBssE,iBAAiB1vB,UAAU,UAExB58C,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAG,GAAK,IAAIt5B,GAAO,EAAG,KAAM,OACrCmmF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ62D,GAAKs0B,4BAChB5f,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,OACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,OAK3BtgB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,EAAG,KAAM,IAAIA,IAAQ,IAAK,MAChDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,IAAK,KAAM,IAAIA,GAAO,EAAG,MAC/CkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,IAAK,KAAM,IAAIA,IAAQ,IAAK,MAClDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,IAAK,KAAM,IAAIA,IAAQ,IAAK,MAClDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,IAAK,KAAM,IAAIA,GAAO,GAAK,IACjDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,IAAK,KAAM,IAAIA,IAAQ,GAAK,MACjDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,IAAK,IAAM,IAAIA,IAAQ,IAAK,IAClDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAK,IAAM,IAAIA,IAAQ,GAAK,IAClDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,GAAK,IAAM,IAAIA,GAAO,GAAK,IAChDkgC,EAAKkrD,cAAc9xE,EAAO,QAIpB8oB,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,UAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,IAAK,IAAM,IAAIA,GAAO,IAAK,IAChDkgC,EAAKkrD,cAAc9xE,EAAO,qFAKrB,6CAIA,IAAI8xF,SAjIkB35B,IACR25B,iBAAgB,CACrC,IAAI7kB,GACF,IACAM,GAAkBmB,iBAClB,sBAGmBojB,cAAa,CAClC,IAAI3kB,GAA4B2kB,GAAY5C,eAC5C,IAAI/hB,GAA4BI,GAAkBsB,kBAE7BijB,mBAAkBA,GAAYxF,WAAW/pG,WCfrDwvG,oEAEK,MAKVvG,EAAS,KAEL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAI3BA,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGM,YAAa,EAChBN,EAAGve,SAAS9gB,IAAI,EAAK,OACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAChDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,IAAM,EAAK,IAAIt5B,IAAQ,EAAK,GAAM,GACjDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,EAAK,IAAM,IAAIt5B,GAAO,EAAK,GAAM,GAChDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,EAAK,IAAM,IAAIt5B,GAAO,GAAM,GAAM,GACjDkgC,EAAKkrD,cAAc9xE,EAAO,OAEpBgyF,EAAK,IAAItvD,GACfsvD,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQioB,EACXorE,EAAGtjE,aAAajlC,IAAI,EAAK,GACzBuoG,EAAGrjE,aAAallC,IAAI,EAAK,GACzBuoG,EAAGr1D,eAAiB,EACpBq1D,EAAG30D,WAAa,IAAOz5B,GACvBouF,EAAG/uD,eAAiB,IACpB+uD,EAAGv0D,aAAc,IACZw0D,QAAUr4C,EAAKzzB,QAAQ4M,YAAYi/D,KAGrC1lB,iBAAiB1vB,UAAU,SAC1Bs1C,EAAe/5B,GAAKs0B,8BACrBngB,iBAAiBslB,WAAW,QAGzB/kB,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ4wF,MAELlyF,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,GAAK,IAAIt5B,GAAO,EAAK,GAAM,GAE/CmmF,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,cACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,KAI9B+oD,OAAS,6DAGJpgB,2CACCA,GACPA,EAASxiD,GAAK,SACX4iE,QAAU,EAAIpgB,EAASxiD,SAEzB0iE,QAAQG,cAAc,IAAOvuG,KAAK+hB,IAAIT,KAAKgtF,QAAUvuF,uDAInD,6CAIA,IAAImuF,SA5EkB55B,ICFpBk6B,+DAIDvpE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,EAAG,GACd,IAAIA,GAAO,EAAG,IAEhBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,SAC1Bs1C,EAAe/5B,GAAKs0B,8BACrBngB,iBAAiBslB,WAAW,QAGzB5xF,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,MACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ4wF,EACXrlB,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,OACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,OAK3BtgB,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,UAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,qFAKrB,6CAIA,IAAIqyF,SA7EgBl6B,ICalBm6B,0BAGCC,EAAqBC,yDAFV,kBACA,IAGhBC,cAAgBF,IAChBG,cAAgBF,wEAKA50F,EAA0B07D,GAC/C17D,EAAOghD,oBACL0a,EACAz1E,KAAKM,UAAYghB,KAAKutF,cAAgBvtF,KAAKstF,eAAiBttF,KAAKstF,sBAdvB/mB,IAwBnCinB,kCAsILnH,mDAlIyB,IAuHxBoH,UAAY,IAAIjnB,KAChBknB,qBAAuB,IAAIP,GAC9BK,EAAOG,sBACPH,EAAOI,yBAIJzmB,iBAAiB1vB,UAAU,QAC3B0vB,iBAAiBzvB,oBAAoB81C,EAAOK,sBAC5C1mB,iBAAiBvvB,qBAAoB,OAIlCj0B,EAAK,IAAIN,GACfgjE,EAAS94D,EAAKvM,QAAQgqD,WAAWrnD,OAK3B9oB,EAAQ,IAAI6f,GACZ3K,EAASy9E,EAAOM,kBAAoBN,EAAOO,qBACjDlzF,EAAMggB,SACJ2yE,EAAOQ,iBAAmBR,EAAOO,qBACjCP,EAAOO,qBACP,IAAIxsG,GAAO,EAAK,GAChB,GAEF8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SACJ2yE,EAAOO,qBACPh+E,EACA,IAAIxuB,IAAQisG,EAAOQ,iBAAkBR,EAAOM,mBAC5C,GAEFzH,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SACJ2yE,EAAOO,qBACPh+E,EACA,IAAIxuB,GAAOisG,EAAOQ,iBAAkBR,EAAOM,mBAC3C,GAEFzH,EAAO1Z,cAAc9xE,EAAO,OAKtBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SACsB,EAA1B2yE,EAAOQ,iBACPR,EAAOO,qBACP,IAAIxsG,GAAO,GAAoC,EAA/BisG,EAAOO,sBACvB,GAEF1H,EAAO1Z,cAAc9xE,EAAO,OAKtBA,EAAQ,IAAI6f,GACZuzE,EAAuD,EAApC1gE,EAAK45C,iBAAiBvuE,YAGzCxb,EAFeowG,EAAOU,eAAiBD,EAEfT,EAAOW,cAC/BnoB,EAAQwnB,EAAOQ,iBAAmBR,EAAOY,cAAgBZ,EAAOa,aAEhEt+E,EAASy9E,EAAOM,kBAAoBN,EAAOc,eAA0B,GAATlxG,EAElEyd,EAAMggB,SAASozE,EAAkB7wG,EAAQ,IAAImE,IAAQykF,EAAOj2D,GAAS,GACrEs2E,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SAASozE,EAAkB7wG,EAAQ,IAAImE,GAAOykF,EAAOj2D,GAAS,GACpEs2E,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SACJmrD,EAAQioB,EACRA,EACA,IAAI1sG,GAAO,EAAKwuB,EAAS3yB,EAAS6wG,GAClC,GAEF5H,EAAO1Z,cAAc9xE,EAAO,OAKtB0zF,EAAmD,EAApChhE,EAAK45C,iBAAiBvuE,YAAoB40F,EAAOU,wBACjET,UAAUzE,kBAAkBz7D,EAAK45C,oBACjCsmB,UAAUe,YAAYjhE,EAAKmgE,wBAC3BD,UAAU9xE,YACb,IAAIp6B,GACFisG,EAAOQ,iBAAmBR,EAAOY,cACjCZ,EAAOM,kBAAoBN,EAAOc,eAAgC,GAAfC,MAGlDd,UAAUxE,YAAY,IAAI1nG,GAAO,EAAK,MACtCksG,UAAUvE,QAAQ,IAAI3nG,GAAO,EAAKgtG,MAClCd,UAAUnE,SAAS,IAAIhjF,GAAQ,EAAG,EAAG,EAAG,MACxCmnF,UAAUrE,YAAY,OACtBqE,UAAU5zC,iBAAiBmZ,GAAKs0B,6BAIvCt0B,GAAKu0B,qCAAoC,GAEzCv0B,GAAKud,sBAAsBid,EAAOrG,WAAYqG,EAAOpG,4EAG3Cxa,OACN1gD,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAE7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAGI0gD,QACN6hB,uBAAyBviE,EAE1BlsB,KAAKyuF,uBAAyBz7B,GAAK07B,6BAChCD,uBAAyBz7B,GAAK07B,4BAIhCjB,UAAU5zC,iBAAiBmZ,GAAKs0B,iCAIjCtnF,KAAKytF,UAAUkB,wBAEZlB,UAAUnE,SACbt2B,GAAKid,iBAAiBvxF,KAAKsK,MAAMgX,KAAKyuF,uBAAyBz7B,GAAK07B,6BAGjEjB,UAAUnE,SAAS,IAAIhjF,GAAQ,EAAG,EAAG,EAAG,SAI1CmnF,UAAUnwB,KAAKpxC,WAEd0iE,EAAS,CACb,8BACA,iCACA,8CACA,8CAEOrxG,EAAI,EAAGA,EAAIqxG,EAAOxxG,SAAUG,EACnC6oF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAYikB,EAAOrxG,SAC7CotF,YAAchB,oCAIP3jF,OACV6oG,EAAY,SACR7oG,OACD,IACH6oG,cAEG,IACHA,eAEG,IACHA,gBAEG,IACHA,eAEG,IACHA,gBAEG,IACHA,iBAEG,QAGG5nB,EAAWjnE,KAAKytF,UAAUqB,cAE9B7nB,EAAWjpF,EADXipF,GAAYumB,EAAOuB,uBACQvB,EAAOwB,oBAC7BvB,UAAUrE,YAAYniB,aAG1B,QAGGA,EAAWjnE,KAAKytF,UAAUqB,cAE9B7nB,EAAWnpF,EADXmpF,GAAY,EAAMumB,EAAOuB,uBACEvB,EAAOyB,oBAC7BxB,UAAUrE,YAAYniB,wBAOjCjU,GAAKw2B,0BAA0BqF,sDAIxB,6CAOA,IAAIrB,SApUax6B,IAiBHw6B,yBAAwB,GAIxBA,yBAAwB,GAIxBA,qBAAoB,GAIpBA,oBAAmB,EAInBA,wBAAuB,IAIvBA,iBAAgB,GAKhBA,kBAAiB,GAIjBA,kBAAiB,EAKjBA,iBAAgB,EAKhBA,gBAAe,IAIfA,sBAAqB,IAKrBA,0BAAyB,KAIzBA,iBAAgB,EAIhBA,iBAAgB,IAKhBA,iBAA0C,CAC/D,IAAI1lB,KAEFM,GAAkBmB,iBAClB,SAEF,IAAIzB,KAEFM,GAAkBmB,iBAAmBpD,GAAyBqD,qBAC9D,kBAEF,IAAI1B,MAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,MAEFM,GAAkBmB,iBAClB,UAEF,IAAIzB,OAEFM,GAAkBmB,iBAClB,WAEF,IAAIzB,OAEFM,GAAkBmB,iBAClB,gBAEF,IAAIzB,QAEFM,GAAkBmB,iBAClB,oBAGmBikB,cAA4C,CACjE,IAAIxlB,GAA4BwlB,GAAOzD,gBAElByD,mBAAkBA,GAAOrG,WAAW/pG,WCjJhD8xG,wEAeQ,oBACM,iBACH,iBACA,MAkDZvrE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,IAAQ,GAAI,GAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,GAAO,GAAI,GAAI,IAAIA,GAAO,GAAI,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,IACxFsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,IAAQ,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,IAAQ,EAAG,WACxFsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3Bs0F,aAAe,IACfhoB,iBAAiB1vB,UAAU,MAC3B23C,YAAc,OACdC,WAAY,EAGjBr8B,GAAKud,sBAAsB2e,EAAiB/H,WAAY+H,EAAiB9H,iBACzEp0B,GAAKu0B,qCAAoC,KAEpCF,gBAAkBr0B,GAAKs0B,8BACvB32C,aAAe,4FAMhB3wC,KAAKqvF,cAELrvF,KAAK2wC,aAGEu+C,EAAiBI,WAAWC,qBAGnCvvF,KAAK2wC,qBACL3wC,KAAKqnF,gBAEE6H,EAAiBI,WAAWE,+BAGnCxvF,KAAKqnF,gBAGE6H,EAAiBI,WAAWG,iCAGnCzvF,KAAKqnF,gBAGE6H,EAAiBI,WAAWI,gCAGnC1vF,KAAKqnF,gBAGE6H,EAAiBI,WAAWK,qBAE9B3vF,KAAKqnF,gBAEP6H,EAAiBI,WAAWM,iDAGrB5pG,eACTqpG,UAAoB,MAARrpG,OACZqhG,gBAAkB,OAClB12C,aAAe,EACZ3qD,OACD,SACEqhG,wBACA12C,yBAEF,SACE02C,6BAEF,SACE12C,aACH,YAEC,SACE02C,uBACA12C,yBAEF,SACE02C,8BAEF,SACEA,6BAEF,SACEA,uBACA12C,yBAEF,SACE02C,gBAAkB,eAEpB,SACEA,0BACA12C,yBAEF,SACE02C,gBACH,UACG12C,yBAEF,SACE02C,gBAAkB,UAClB12C,yBAEF,SACE02C,gBAAkB,eAEpB,SACEA,8BAEF,SACEA,kBAKTr0B,GAAKw2B,0BAA0BxpF,KAAK6vF,gEAGrBtsG,mDACCA,GACZyc,KAAKqvF,UAAW,KACZx0F,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI/I,KAAKH,GACfsX,EAAM9X,SAAW,OAGXyZ,EAAK7a,GAAY+/D,cAElBylB,iBAAiBwiB,wBAAwB9uF,EAAO2B,GAEnCwD,KAAKovF,aAAepvF,KAAK2wC,eAAiB3wC,KAAKovF,YAAYtqC,uBAEtEqqC,cAAgBnvF,KAAKmvF,aAAe,GAAKn8B,GAAK07B,2BAE/ChnB,EAAK,IAAIr3B,GACfq3B,EAAG7sE,MAAQA,EACX6sE,EAAGvrE,MAAQ6D,KAAKqnF,oBAEdrnF,KAAKqnF,wBAILrnF,KAAKqnF,mBAGL3f,EAAGvrE,aAELurE,EAAGvsB,WAAan7C,KAAK2wC,aACrB+2B,EAAGztE,MAAMvW,KAAKsvE,GAAKid,iBAAiBjwE,KAAKmvF,eACzCznB,EAAGzjC,MAAQjkC,KAAKovF,iBACXA,YAAcpvF,KAAKmnE,iBAAiBniB,oBAAoB0iB,QACxDiE,gBAAiB,mCAIXpoF,8CACCA,QACT6rG,YAAc,oDAGSnrD,6DACCA,GACzBA,IAAUjkC,KAAKovF,mBACZA,YAAc,wDAKhB,IAAInrD,EAAQjkC,KAAKmnE,iBAAiB2oB,uBAAwB7rD,EAAOA,EAAQA,EAAM6Q,UAEhF7Q,IAAUjkC,KAAKovF,eACfnrD,EAAM6gB,mBACN7gB,EAAM8rD,4BAID5oB,iBAAiB6oB,mBAAmB/rD,gCAKnC2oC,OACJqjB,EAAiBj9B,GAAKs0B,oCACvB+H,WACFY,EAAiBf,EAAiBI,WAAWM,mBAC9CV,EAAiBI,WAAWM,gBAC1B5vF,KAAKqvF,iBACCY,8BAIC5I,gBAAkB4I,OAClBt/C,0BAEFu+C,EAAiBI,WAAWC,sBAG1BlI,uBACA12C,aACH,aAECu+C,EAAiBI,WAAWE,6BAC1BnI,0BACA12C,0BAEFu+C,EAAiBI,WAAWG,+BAC1BpI,gBACH,UACG12C,aAAe,aAEjBu+C,EAAiBI,WAAWI,8BAC1BrI,gBACH,UACG12C,aAAe,aAEjBu+C,EAAiBI,WAAWK,0BAC1BtI,gBACH,UACG12C,kCAGA02C,gBAAkB4I,OAClBt/C,aAAe,IAKtB3wC,KAAKmnE,iBAAiB4oB,4BACnBG,8DAGItjB,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,kDACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,sDACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,6CACtCA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,mEAEGA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,8CACtCA,YAAchB,sDAIZ,6CAIA,IAAIulB,SAtWuBl8B,IAIbk8B,cAAa,CAClCiB,iBAAkB,GAAK,GACvBP,gBAAkB,GAAK,GAAO,EAC9BL,iBAAmB,GAAK,GAAO,EAC/BC,wBAA0B,GAAK,GAAO,EACtCC,0BAA4B,GAAK,GAAO,EACxCC,yBAA2B,GAAK,GAAO,GACvCC,qBAAuB,GAAK,GAAO,IASdT,iBAAgB,CACrC,IAAIpnB,KAEFM,GAAkBmB,iBAClB,SAEF,IAAIzB,GACFonB,GAAiBI,WAAWM,gBAC5BxnB,GAAkBmB,iBAClB,QAEF,IAAIzB,GACFonB,GAAiBI,WAAWC,iBAC5BnnB,GAAkBmB,iBAClB,SAEF,IAAIzB,GACFonB,GAAiBI,WAAWE,wBAC5BpnB,GAAkBmB,iBAClB,iBAEF,IAAIzB,GACFonB,GAAiBI,WAAWG,0BAC5BrnB,GAAkBmB,iBAClB,mBAEF,IAAIzB,GACFonB,GAAiBI,WAAWI,yBAC5BtnB,GAAkBmB,iBAClB,kBAEF,IAAIzB,GACFonB,GAAiBI,WAAWK,qBAC5BvnB,GAAkBmB,iBAClB,mBAImB2lB,cAAa,CAClC,IAAIlnB,GAA4BI,GAAkBsB,iBAClD,IAAI1B,GAA4BknB,GAAiBnF,gBAE5BmF,mBAAkBA,GAAiB/H,WAAW/pG,WCrE1DgzG,6DAOJC,6BACH,UAIM1sE,EAAK,IAAIN,KACVitE,SAAW77C,EAAKzzB,QAAQgqD,WAAWrnD,OAGhC9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,KACfuwG,SAAS3jB,cAAc9xE,EAAO,OAI7BA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,KACfuwG,SAAS3jB,cAAc9xE,EAAO,OAI7BA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,EAAG,GACd,IAAIA,GAAO,EAAG,IAEhBsZ,EAAMvW,IAAIvE,EAAU,KACfuwG,SAAS3jB,cAAc9xE,EAAO,KAIlCssE,iBAAiB1vB,UAAU,SAExB58C,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAG,EAAG,IAAIt5B,GAAO,EAAG,GAAI,OACjCmmF,EAAK,IAAIr3B,GACfq3B,EAAG7sE,MAAQA,EACX6sE,EAAGvrE,MAAQ62D,GAAKs0B,gCACVrjD,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,OACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,OAK3BtgB,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,IACjBuW,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,MACrBssE,iBAAiBwiB,wBAAwB9uF,EAAO4mB,EAAK72B,oBAIpD+4B,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,GAAK,IAAIt5B,IAAQ,EAAG,IAAM,GAC9CkgC,EAAKkrD,cAAc9xE,EAAO,MACrBssE,iBAAiBwiB,wBAAwB9uF,EAAO4mB,EAAK72B,oBAIpD+4B,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,GAAK,IAAIt5B,GAAO,EAAG,IAAM,IAC7CkgC,EAAKkrD,cAAc9xE,EAAO,MACrBssE,iBAAiBwiB,wBAAwB9uF,EAAO4mB,EAAK72B,oBAIpD+4B,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,EAAG,GAAI,IAAIA,GAAO,GAAK,MAC5CkgC,EAAKkrD,cAAc9xE,EAAO,OAEpBmf,EAAW,IAAId,GACrBc,EAASb,KAAO,GAChBa,EAAShf,OAAOpd,EAAI,GAAMid,EAAM7G,UAAUpW,EAAIid,EAAM3G,UAAUtW,EAC9Do8B,EAAShf,OAAOvU,EAAI,GAAMoU,EAAM7G,UAAUvN,EAAIoU,EAAM3G,UAAUzN,EAC9DuzB,EAASZ,EAAI,EACbqI,EAAK8uE,YAAYv2E,OAIX2J,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,GAAK,GAAM,IAAIA,GAAO,GAAK,MAChDkgC,EAAKkrD,cAAc9xE,EAAO,OAEpBmf,EAAW,IAAId,GACrBc,EAASb,KAAO,GAChBa,EAAShf,OAAOpd,EAAI,GAAMid,EAAM7G,UAAUpW,EAAIid,EAAM3G,UAAUtW,EAC9Do8B,EAAShf,OAAOvU,EAAI,GAAMoU,EAAM7G,UAAUvN,EAAIoU,EAAM3G,UAAUzN,EAC9DuzB,EAASZ,EAAI,EACbqI,EAAK8uE,YAAYv2E,OAIX2J,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAK,KAAM,IAAIA,IAAQ,GAAK,IAClDkgC,EAAKkrD,cAAc9xE,EAAO,OAEpBmf,EAAW,IAAId,UACrBc,EAASb,KAAO,GAChBa,EAAShf,OAAOpd,EAAI,GAAMid,EAAM7G,UAAUpW,EAAIid,EAAM3G,UAAUtW,EAC9Do8B,EAAShf,OAAOvU,EAAI,GAAMoU,EAAM7G,UAAUvN,EAAIoU,EAAM3G,UAAUzN,EAC9DuzB,EAASZ,EAAI,EACbqI,EAAK8uE,YAAYv2E,oFAKZ,6CAIA,IAAIo2E,SAtJWp9B,ICHbw9B,+DAKD7sE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,EAAG,GACd,IAAIA,GAAO,EAAG,IAEhBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,SAGxB58C,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ,IACXurE,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,KAAK,EAAG,GAClBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ,IACXurE,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,GAAI,IAAIA,GAAO,EAAG,KAAM,IAAIA,GAAO,EAAG,MACxFsZ,EAAMvW,IAAIvE,EAAU,OACd2nF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ,IACXurE,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC/jD,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,UAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,qFAKrB,6CAIA,IAAI21F,SAhG8Bx9B,ICChCy9B,+DAID9sE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,EAAG,GACd,IAAIA,GAAO,EAAG,IAEhBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,SAGxB58C,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,QACHurE,EAAGvsB,aACHusB,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,KAAK,EAAG,GAClBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,SACHurE,EAAGvsB,aACHusB,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAG,QACZ6sD,EAAK,IAAIr3B,GACfq3B,EAAGvrE,SACHurE,EAAGvsB,aACHusB,EAAGtiE,SAAS9gB,IAAI,EAAG,GACnBojF,EAAGlpE,OAAS,GACZkpE,EAAGpkD,gBAAkB,EACrBokD,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM3V,IAAI,EAAG,EAAG,EAAG,KACjB6iF,iBAAiBniB,oBAAoB0iB,OAIpC/jD,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,UAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,qFAIrB,6CAGA,IAAI41F,SAlGuBz9B,ICDzB09B,+DAKD/sE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,GAChB,IAAIA,GAAO,GAAI,GACf,IAAIA,GAAO,EAAG,GACd,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAI,IAChB,IAAIA,IAAQ,GAAI,IAChB,IAAIA,IAAQ,EAAG,GACf,IAAIA,IAAQ,EAAG,IAEjBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO,GAAI,IACf,IAAIA,GAAO,GAAI,IACf,IAAIA,GAAO,EAAG,GACd,IAAIA,GAAO,EAAG,IAEhBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,SAGxB58C,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvsB,WACD,EACFusB,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM+2E,YAAY,IAAK,EAAG,EAAG,OAC3B7J,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,KAAK,EAAG,GAClBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvsB,WACD,EACFusB,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM+2E,YAAY,EAAG,IAAK,EAAG,OAC3B7J,iBAAiBniB,oBAAoB0iB,OAIpC7sE,EAAQ,IAAI6f,GAQlB7f,EAAMggB,SAAS,EAAG,QACZ6sD,EAAK,IAAIr3B,GACfq3B,EAAGvsB,WACD,EACFusB,EAAGtiE,SAAS9gB,IAAI,EAAG,GACnBojF,EAAGlpE,OAAS,GACZkpE,EAAGpkD,gBAAkB,EACrBokD,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAM+2E,YAAY,EAAG,EAAG,IAAK,OAC3B7J,iBAAiBniB,oBAAoB0iB,OAIpC/jD,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI0e,UAClB1e,EAAMpO,IAAInI,IAAI,EAAG,GACjBuW,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,qFAKrB,6CAIA,IAAI61F,SA5GqB19B,ICCvB29B,6DA+CJpK,WAAa,CAAC,IAAI/f,GAAiB,IAAIA,MAGvCW,iBAAiB1vB,UAAU,OAC3B0vB,iBAAiBzvB,oBAAoBi5C,EAAwB9C,sBAC7D1mB,iBAAiBvvB,qBAAoB,OAGpC4yB,EAAoB,IAAI50B,GAC9B40B,EAAkBzmF,OAAS0wD,EAAK0yB,iBAAiBvuE,YACjD4xE,EAAkB3zB,cAAe,IAC5B+5C,kBAAoBn8C,EAAKzzB,QAAQypD,qBAAqBD,KACtDomB,kBAAkBl5C,oBAAoBi5C,EAAwB9C,oBAGnE76B,GAAKu0B,qCAAoC,OAIjC5jE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GACjC9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,IACpBwrE,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI6f,GACZ1f,EAAS,IAAIzZ,GAAO,EAAK,KAC/BsZ,EAAMggB,SACJ81E,EAAwBE,iBAAiBjzG,EACzC+yG,EAAwBE,iBAAiBpqG,EACzCuU,EACA,GAEFymB,EAAKkrD,cAAc9xE,EAAO,OAEpBmf,EAAW,IAAId,GACrBc,EAASb,KAAOw3E,EAAwBG,UACxC92E,EAAShf,OAAOtX,KAAKsX,GACrBgf,EAASZ,EAAI,EACbqI,EAAK8uE,YAAYv2E,OAId,IAAIz8B,EAAI,EAAGA,EAAIk3D,EAAK8xC,WAAWnpG,SAAUG,EAAG,KACzCwzG,EAAmB,EAAJxzG,GAAS,EAAM,EAC9BwrG,EAAUt0C,EAAK8xC,WAAWhpG,GAChCwrG,EAAQptE,YACN,IAAIp6B,GACFovG,EAAwBK,kBAAkBpzG,EAAImzG,EAC9CJ,EAAwBK,kBAAkBvqG,IAG9CsiG,EAAQG,QAAQyH,EAAwBM,eACxClI,EAAQE,YACN,IAAI1nG,GACFovG,EAAwBO,kBAAkBtzG,EAAImzG,EAC9CJ,EAAwBO,kBAAkBzqG,IAG9CsiG,EAAQK,YAAYuH,EAAwBQ,YAC5CpI,EAAQO,SACF,EAAJ/rG,EACIozG,EAAwBS,oBACxBT,EAAwBU,oBAE9BtI,EAAQC,kBAAsB,EAAJzrG,EAAQk3D,EAAKm8C,kBAAoBn8C,EAAK0yB,oFAIxDyF,OACN1gD,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAC7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAGI0gD,OAEN,IAAIrvF,EAAI,EAAGA,EAAIyiB,KAAKumF,WAAWnpG,SAAUG,OACvCgpG,WAAWhpG,GAAG+/E,KAAKpxC,sDAKnB,6CAIA,IAAIykE,SA5I8B39B,IAOpB29B,sBAAqB,IAIrBA,oBAAmB,IAAIpvG,GAAO,GAAK,IAInCovG,aAAY,EAIZA,cAAa,IAKbA,qBAAoB,IAAIpvG,IAAQ,EAAK,GAMrCovG,qBAAoB,IAAIpvG,GAAO,GAAM,GAIrCovG,iBAAgB,IAAIpvG,GAAO,EAAK,GAIhCovG,uBAAqB,IAAIrqF,IAAU0qE,YAAY,GAAM,GAAM,IAAM,KAIjE2f,wBAAsB,IAAIrqF,IAAU0qE,YAAY,IAAM,GAAM,GAAM,SC5C9EsgB,iFAMiB,MAOlB3tE,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC4tE,EAAM,CACV,IAAIhwG,GAAO+vG,EAAQE,SAAUF,EAAQG,YACrC,IAAIlwG,GAAO+vG,EAAQI,UAAWJ,EAAQG,YACtC,IAAIlwG,GAAO+vG,EAAQI,UAAWJ,EAAQK,SACtC,IAAIpwG,GAAO+vG,EAAQE,SAAUF,EAAQK,UAEjC92F,EAAQ,IAAI8kB,GAClB9kB,EAAM2xF,WAAW+E,EAAKA,EAAIn0G,QAC1BipG,EAAO1Z,cAAc9xE,EAAO,KAGzBssE,iBAAiB1vB,UAAU,OAC3B0vB,iBAAiBslB,WAAW,QAIzB5xF,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,GAAO,EAAK,MAAO,OAC1CmmF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ62D,GAAKs0B,4BAChB5f,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,cACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,iEAKtB1gD,iDACCA,GAIZ+tG,EAAQE,UAAYjuG,EAAE3F,GACtB2F,EAAE3F,GAAK0zG,EAAQI,WACfJ,EAAQG,YAAcluG,EAAEkD,GACxBlD,EAAEkD,GAAK6qG,EAAQK,QACA,KACTC,EAAa,IAAIrwG,GACrB,IAAO+vG,EAAQE,SAAWF,EAAQI,WAClC,IAAOJ,EAAQG,WAAaH,EAAQK,UAEhCE,EAAYtwG,GAAOU,MAAMsB,EAAGquG,EAAY,IAAIrwG,IAClDswG,EAAUzuG,iBACL0uG,oBAAoBD,qCAIb7rG,sDACCA,GAEPA,OACD,SACE+rG,oBAAqB,YAEvB,SACEA,oBAAqB,+CAKLF,OACnBz6B,EAAiBp3D,KAAKghB,QAAQs6C,4BAC/BlE,QACG,IAAIjvE,UAEN6pG,EAAgB56B,EAAe04B,2BAChCkC,QACG,IAAI7pG,UAEN8pG,EAAeD,EAAcr5F,sBAE/BqH,KAAK+xF,mBAAoB,KACrBG,EAAoB,KAEpBprE,EAAUvlC,GAAO87B,MAAM60E,EAAoBD,EAAcJ,EAAW,IAAItwG,IAC9EywG,EAAc7gD,mBAAmBrqB,OAC5B,KACCqrE,EAAkB,EAElBxrE,EAAQplC,GAAO87B,MAAM80E,EAAkBF,EAAcJ,EAAW,IAAItwG,IAC1EywG,EAAc9gD,WAAWvqB,uDAKpB,6CAIA,IAAI2qE,SA1Gct+B,IACJs+B,aAAY,EACZA,aAAY,EACZA,cAAa,EACbA,WAAU,MCAtBc,qEAEsB,2BACJ,IAKtBjrB,iBAAiBslB,WAAW,OAG3B5xF,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,IACjBuW,EAAM9X,SAAW,OAGX4gC,EAAK,IAAIN,GACfM,EAAG52B,SACEslG,UAAY59C,EAAKzzB,QAAQgqD,WAAWrnD,KACpC0uE,UAAU1lB,cAAc9xE,EAAO,OAG9B2B,EAAK,IAAI7a,UACf6a,EAAG2I,gBACEgiE,iBAAiBwiB,wBAAwB9uF,EAAO2B,KAGhDoxB,sFAQCg7D,EAAoB,IAAIvxD,GAC9BuxD,EAAkBtvF,MAAQ0G,KAAK+qE,aAC/B6d,EAAkBpvF,MAAQwG,KAAKqyF,UAC/BzJ,EAAkB5/D,kBAAmB,EACrC4/D,EAAkBrxD,WAAWjzC,IAAI,EAAG,GACpCskG,EAAkBr/D,aAAa7lC,KAAKsc,KAAKqyF,UAAU9rE,oBAC9CumE,QAAU9sF,KAAKghB,QAAQ4M,YAAYg7D,yCAQpC5oF,KAAK8sF,cACF9rE,QAAQ05C,aAAa16D,KAAK8sF,cAC1BA,QAAU,WAEVl/D,+CAQO5nC,UACNA,OACD,SACEssG,wEAGUtsG,oCASNzC,8CACCA,GACVyc,KAAKuyF,OAAOhvG,SACT+uG,6CAOKxpG,UAGLA,EAAIrC,GAAK,GAAOqC,EAAIrC,EAAI,GAAOqC,EAAIlL,GAAK,GAAOkL,EAAIlL,EAAI,+BAMpDgvF,OAEJ4lB,EAAmB,GAEnBC,EAA8B,GAC9BC,EAA2B,EAAMD,EAEjCE,EAAa,OAEdC,qBAAuB,EAAMhmB,EAASxiD,GACvCpqB,KAAK4yF,oBAAsBF,SACxBE,qBAAuBF,OAIxBG,EAAa7yF,KAAK4yF,oBAAsBH,EAA8B,EAAMh0F,GAC5Eq0F,EAAc,IAAIvxG,GAAO7C,KAAK6hB,IAAIsyF,GAAan0G,KAAK+hB,IAAIoyF,IAAan8F,QACzE87F,GAKAxyF,KAAKuyF,OAAOvyF,KAAKqyF,UAAU9rE,gBAC3BvmB,KAAKqyF,UAAU5rE,oBAAoBzhC,SAAW2tG,QAEzCN,UAAUxI,mBAAmBiJ,GAAa,2CAEtClmB,6CAIJ,IAAIwlB,SA9HkBhC,OC7BhB,SAAUzT,EAAQ32F,EAAKhJ,GACtC,IAAI+1G,EAAc7W,GAAYl2F,GAC1B+sG,KAAepW,EAAQC,GAAqBlgF,EAAEigF,EAAQoW,EAAa1W,GAAyB,EAAGr/F,IAC9F2/F,EAAOoW,GAAe/1G,GCKzBg2G,GAAuBjQ,GAAgB,sBACvCkQ,GAAmB,iBACnBC,GAAiC,iCAKjCC,GAA+BzO,IAAc,KAAOpK,IAAM,WAC5D,IAAIjyF,EAAQ,GAEZ,OADAA,EAAM2qG,KAAwB,EACvB3qG,EAAMi4F,SAAS,KAAOj4F,KAG3B+qG,GAAkBjO,GAA6B,UAE/CkO,GAAqB,SAAUrX,GACjC,IAAKN,GAASM,GAAI,OAAO,EACzB,IAAIsX,EAAatX,EAAEgX,IACnB,YAAsB91G,IAAfo2G,IAA6BA,EAAajR,GAAQrG,IAQ3DsJ,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,QALpBoR,KAAiCC,IAKK,CAClD9S,OAAQ,SAAgBgC,GACtB,IAGI/kG,EAAG0uC,EAAG7uC,EAAQsL,EAAKypB,EAHnB6pE,EAAI0H,GAAS1jF,MACbjM,EAAI+vF,GAAmB9H,EAAG,GAC1Bx9F,EAAI,EAER,IAAKjB,GAAK,EAAGH,EAASkiG,UAAUliG,OAAQG,EAAIH,EAAQG,IAElD,GAAI81G,GADJlhF,GAAW,IAAP50B,EAAWy+F,EAAIsD,UAAU/hG,IACF,CAEzB,GAAIiB,GADJkK,EAAMu3F,GAAS9tE,EAAE/0B,SACH61G,GAAkB,MAAM3X,UAAU4X,IAChD,IAAKjnE,EAAI,EAAGA,EAAIvjC,EAAKujC,IAAKztC,IAASytC,KAAK9Z,GAAGohF,GAAex/F,EAAGvV,EAAG2zB,EAAE8Z,QAC7D,CACL,GAAIztC,GAAKy0G,GAAkB,MAAM3X,UAAU4X,IAC3CK,GAAex/F,EAAGvV,IAAK2zB,GAI3B,OADApe,EAAE3W,OAASoB,EACJuV,KCtDX,OAAiB,SAAU0wF,EAAajF,GACtC,IAAIH,EAAS,GAAGoF,GAChB,QAASpF,GAAU/E,IAAM,WAEvB+E,EAAOzE,KAAK,KAAM4E,GAAY,WAAc,MAAM,GAAM,OCLxDgU,GAAWpT,GAAuC1rE,QAIlD++E,GAAgB,GAAG/+E,QAEnBg/E,KAAkBD,IAAiB,EAAI,CAAC,GAAG/+E,QAAQ,GAAI,GAAK,EAC5Di/E,GAAgBC,GAAoB,WACpCxO,GAAiBC,GAAwB,UAAW,CAAEP,WAAW,EAAMjK,EAAG,IAI9EyK,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,OAAQ2R,KAAkBC,KAAkBvO,IAAkB,CAC9F1wE,QAAS,SAAiBm/E,GACxB,OAAOH,GAEHD,GAAcrR,MAAMpiF,KAAMs/E,YAAc,EACxCkU,GAASxzF,KAAM6zF,EAAevU,UAAUliG,OAAS,EAAIkiG,UAAU,QAAKpiG,MCR5E,IAAIgoG,GAAsBC,GAA6B,UACnDC,GAAiBC,GAAwB,SAAU,CAAEP,WAAW,EAAMgP,EAAG,EAAGjZ,EAAG,IAE/E3I,GAAMxzF,KAAKwzF,IACXD,GAAMvzF,KAAKuzF,IACXghB,GAAmB,iBACnBc,GAAkC,kCAKtCzO,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,QAASmD,KAAwBE,IAAkB,CACnF4O,OAAQ,SAAgBpgD,EAAOqgD,GAC7B,IAIIC,EAAaC,EAAmBpgG,EAAGk4B,EAAGmoE,EAAMC,EAJ5CrY,EAAI0H,GAAS1jF,MACbtX,EAAMu3F,GAASjE,EAAE5+F,QACjBk3G,EAAcpU,GAAgBtsC,EAAOlrD,GACrC6rG,EAAkBjV,UAAUliG,OAWhC,GATwB,IAApBm3G,EACFL,EAAcC,EAAoB,EACL,IAApBI,GACTL,EAAc,EACdC,EAAoBzrG,EAAM4rG,IAE1BJ,EAAcK,EAAkB,EAChCJ,EAAoBliB,GAAIC,GAAIwN,GAAUuU,GAAc,GAAIvrG,EAAM4rG,IAE5D5rG,EAAMwrG,EAAcC,EAAoBlB,GAC1C,MAAM3X,UAAUyY,IAGlB,IADAhgG,EAAI+vF,GAAmB9H,EAAGmY,GACrBloE,EAAI,EAAGA,EAAIkoE,EAAmBloE,KACjCmoE,EAAOE,EAAcroE,KACT+vD,GAAGuX,GAAex/F,EAAGk4B,EAAG+vD,EAAEoY,IAGxC,GADArgG,EAAE3W,OAAS+2G,EACPD,EAAcC,EAAmB,CACnC,IAAKloE,EAAIqoE,EAAaroE,EAAIvjC,EAAMyrG,EAAmBloE,IAEjDooE,EAAKpoE,EAAIioE,GADTE,EAAOnoE,EAAIkoE,KAECnY,EAAGA,EAAEqY,GAAMrY,EAAEoY,UACbpY,EAAEqY,GAEhB,IAAKpoE,EAAIvjC,EAAKujC,EAAIvjC,EAAMyrG,EAAoBD,EAAajoE,WAAY+vD,EAAE/vD,EAAI,QACtE,GAAIioE,EAAcC,EACvB,IAAKloE,EAAIvjC,EAAMyrG,EAAmBloE,EAAIqoE,EAAaroE,IAEjDooE,EAAKpoE,EAAIioE,EAAc,GADvBE,EAAOnoE,EAAIkoE,EAAoB,KAEnBnY,EAAGA,EAAEqY,GAAMrY,EAAEoY,UACbpY,EAAEqY,GAGlB,IAAKpoE,EAAI,EAAGA,EAAIioE,EAAajoE,IAC3B+vD,EAAE/vD,EAAIqoE,GAAehV,UAAUrzD,EAAI,GAGrC,OADA+vD,EAAE5+F,OAASsL,EAAMyrG,EAAoBD,EAC9BngG,SCbEygG,4DACqE,oDAOzE,IAAIx8F,EAAK,EAAGA,EAAKgI,KAAKy0F,kBAAkBr3G,SAAU4a,OAEhDy8F,kBAAkBz8F,GAAI+wF,QAAQ2L,uCAS5B3L,EAAwB54C,QAE5BskD,kBAAkBt2F,KAAK,CAAE4qF,QAAAA,EAAS54C,SAAAA,iCAM7BjkB,kBAEJyoE,EAAqC,GAElC38F,EAAK,EAAGA,EAAKgI,KAAKy0F,kBAAkBr3G,SAAU4a,EAAI,KAEnD+wF,EAAU/oF,KAAKy0F,kBAAkBz8F,GAAI+wF,QAErC54C,EAAWnwC,KAAKy0F,kBAAkBz8F,GAAIm4C,SAAWjkB,EACnDikB,GAAY,GACdwkD,EAAkBx2F,KAAK4qF,QAGpB0L,kBAAkBz8F,GAAIm4C,SAAWA,EAEtC44C,EAAQzrB,KAAKpxC,sBAGNl0B,OAED+wF,EAAU4L,EAAkB38F,GAElC+wF,EAAQ2L,WAERjgD,EAAKggD,kBAAoBhgD,EAAKggD,kBAAkBvyE,QAAO,SAACllC,UAC/CA,EAAM+rG,UAAYA,MAPpB/wF,EAAK,EAAGA,EAAK28F,EAAkBv3G,SAAU4a,IAAzCA,YAiBA48F,gGACkC,iFAKd3wD,QACxB4wD,oBAAoB5wD,4CAMHA,QACjB6wD,iBAAiB32F,KAAK8lC,+CAMFA,QACpB6wD,iBAAiBd,OAAOh0F,KAAK80F,iBAAiBpgF,QAAQuvB,GAAQ,sDAI5DjkC,KAAK80F,wBAzB0B9wD,IA6B7B+wD,2BAIYA,qBAAoB,GACpBA,sBAAqB,GAIrBA,gBACrBA,GAAgBC,kBAAoBD,GAAgBE,mBAI/BF,kBAAiB,EACjBA,kBAAiB,EAIjBA,eAAc,GACdA,gBAAe,GAIfA,mBAAgD,GAA9BA,GAAgBzM,YAClCyM,oBAAkD,GAA/BA,GAAgBxM,aAInCwM,oBACrBA,GAAgBC,kBAAoBD,GAAgBzM,YAAc,GAC7CyM,qBACrBA,GAAgBE,mBAAqBF,GAAgBxM,aAAe,GAK/CwM,iBAAgB,IAAIzuF,GAAQ,EAAK,EAAK,GACtCyuF,sBAAqB,IAAIzuF,GAAQ,EAAK,GAAK,IAC3CyuF,eAAc,IAAIzuF,GAAQ,GAAK,GAAK,IACpCyuF,cAAa,IAAIzuF,GAAQ,EAAK,EAAK,GACnCyuF,gBAAe,IAAIzuF,GAAQ,EAAK,GAAK,GACrCyuF,wBAAuB,IAAIzuF,GAAQ,GAAK,GAAK,GAK7CyuF,aAAY,GAKZA,oBAC0C,IAA9DA,GAAgBzM,YAAcyM,GAAgBxM,cAAsB,GAMhDwM,qBAAoB,GACpBA,sBAAqB,GACrBA,oBAAmB,EACnBA,sBAAqB,EAKrBA,kCAAiC,EAKjCA,yBAAuD,EAA/BA,GAAgBxM,aAIxCwM,0BAAuD,EAA9BA,GAAgBzM,YAMzCyM,6BAA4B,EAK5BA,yBAAwB,EACxBA,4BAA2B,EAC3BA,8BAA6B,EAC7BA,iCAAgC,OAisB7CG,GAtrBCC,4EAEMJ,GAAgBC,kBAAoBD,GAAgBC,kBAAoB,cACtED,GAAgBE,mBAAqB,iBAClCF,GAAgBE,mBAAqB,cACxB,IAAIT,mBACjB,+BACc,eACI,cACA,gBAIS,IAAIY,GAA4BnuC,EAAKjmC,WAK/EmmD,iBAAiB1vB,UAAUs9C,GAAgBM,oBAC3CC,qBAEAC,iBAEAC,eAEAC,cAEAC,oFAIAloD,WAAWmoD,yDAQX,IAAIp4G,EAAI,EAAGA,EAAIw3G,GAAgBa,eAAgBr4G,OAC7Cs4G,WAAWt4G,GAAK23G,GAAiBY,WACjC5oE,SAAS3vC,GAAK,yCAOJK,EAAW6I,UAErBuZ,KAAK61F,WAAWV,EAAQY,kBAAkBn4G,EAAG6I,wCAMnC7I,EAAW6I,EAAWuvG,QAElCH,WAAWV,EAAQY,kBAAkBn4G,EAAG6I,IAAMuvG,kCAMtCp4G,EAAW6I,UAEjBuZ,KAAKktB,SAASioE,EAAQY,kBAAkBn4G,EAAG6I,oCAMrC7I,EAAW6I,EAAWg7B,OAE7Bw0E,EAAcj2F,KAAKktB,SAASioE,EAAQY,kBAAkBn4G,EAAG6I,IAC3DwvG,QACGj1E,QAAQwrD,YAAYypB,QAEtB/oE,SAASioE,EAAQY,kBAAkBn4G,EAAG6I,IAAMg7B,6CAO3CkC,EAAK,IAAIN,GACfM,EAAG52B,YACEmpG,SAAWl2F,KAAKghB,QAAQgqD,WAAWrnD,OAClC9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SACJk6E,GAAgBoB,gBAChBpB,GAAgBqB,iBAChB,IAAI70G,GAAOwzG,GAAgBoB,gBAAiBpB,GAAgBqB,kBAC5D,QAEGF,SAASvpB,cAAc9xE,EAAOk6F,GAAgBsB,gBAC9CH,SAAS5vE,gBACZ6uE,EAAQmB,YACNvB,GAAgBC,kBAAoB,EACpCD,GAAgBE,mBAAqB,GAEvC,2CAYG,IAAIr3G,EAAI,EAAGA,EAAIm3G,GAAgBC,kBAAmBp3G,QAChD,IAAI6I,EAAI,EAAGA,EAAIsuG,GAAgBE,mBAAoBxuG,OAClDuZ,KAAKu2F,YAAY34G,EAAG6I,KAAOyuG,GAAiBY,WAI1CU,EAAyB,IAAhB93G,KAAKM,SAEhBw3G,EAASzB,GAAgB0B,mBAA2B,IAANhwG,OAC3CiwG,gBAAgB94G,EAAG6I,GAExB+vG,EACAzB,GAAgB0B,kBAAoB1B,GAAgB4B,wBAE/CC,YAAYh5G,EAAG6I,EAAGyuG,GAAiBY,OAExCU,EACAzB,GAAgB0B,kBACd1B,GAAgB4B,mBAChB5B,GAAgB8B,sBAEbC,qBAAqBl5G,EAAG6I,EAAGyuG,GAAiB6B,UAE5CD,qBAAqBl5G,EAAG6I,EAAGyuG,GAAiB8B,mDAUjDrzE,EAAK,IAAIN,GACTgjE,EAASrmF,KAAKghB,QAAQgqD,WAAWrnD,GACjC9oB,EAAQ,IAAI8kB,GACZs3E,EAAa,IAAI11G,GACrB21G,EAAW,IAAI31G,GACjB4zG,EAAQzlF,WAAWunF,EAAYC,OACzBn3G,EAAW,CACf,IAAIwB,GAAO01G,EAAWr5G,EAAGq5G,EAAWxwG,GACpC,IAAIlF,GAAO21G,EAASt5G,EAAGq5G,EAAWxwG,GAClC,IAAIlF,GAAO21G,EAASt5G,EAAGs5G,EAASzwG,GAChC,IAAIlF,GAAO01G,EAAWr5G,EAAGs5G,EAASzwG,IAEpCoU,EAAM2xF,WAAWzsG,EAAU,GAC3BsmG,EAAO1Z,cAAc9xE,EAAO,2CAMPjd,EAAW6I,OAC1B2e,EAAW+vF,EAAQmB,YAAY14G,EAAG6I,GAClCk9B,EAAK,IAAIN,GACT5B,EAAOzhB,KAAKghB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SACJk6E,GAAgBoB,gBAChBpB,GAAgBqB,iBAChBjB,EAAQgC,iBAAiB/xF,GACzB,GAEFqc,EAAKkrD,cAAc9xE,EAAOk6F,GAAgBsB,gBACrCe,QAAQx5G,EAAG6I,EAAGg7B,QACdm1E,YAAYh5G,EAAG6I,EAAGyuG,GAAiBmC,mDAMdz5G,EAAW6I,EAAWuvG,OAC1C5wF,EAAW+vF,EAAQmB,YAAY14G,EAAG6I,GAClCoU,EAAQ,IAAI6f,QACbk8E,YAAYh5G,EAAG6I,EAAGuvG,GACvBn7F,EAAMggB,SACJk6E,GAAgBoB,gBAChBpB,GAAgBqB,iBAChBjB,EAAQgC,iBAAiB/xF,GACzB,OAEIsiE,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MACD,IAGFurE,EAAG7sE,MAAQA,EACX6sE,EAAGztE,MAAMvW,KACPsyG,IAAad,GAAiB6B,IAAMhC,GAAgBuC,WAAavC,GAAgBwC,kBAE7EtzD,EAAQjkC,KAAKmnE,iBAAiBniB,oBAAoB0iB,QACnDl6B,WAAWgqD,iBAAiBvzD,WAG3BvrC,EAAgBurC,EAAMtrC,mBAEtB8+F,EAAiBz3F,KAAKmnE,iBAAiBuwB,oBACvCnoG,EAAQ00C,EAAMwgB,iBACXlnE,EAAI,EAAGA,EAAImb,IAAiBnb,EAEnCk6G,EAAeloG,EAAQhS,GAAKyiB,KAAK61F,WAAWV,EAAQY,kBAAkBn4G,EAAG6I,IAGvEuvG,IAAad,GAAiB6B,UAC3BvpD,WAAWmqD,OAAOj/F,4CASpB,IAAIjS,EAAIuZ,KAAK43F,aAAcnxG,GAAKuZ,KAAK63F,UAAWpxG,SAC9CmwG,YAAY52F,KAAK83F,QAASrxG,EAAGyuG,GAAiB6C,yDAOrB3yF,OAC1Bi1C,EAAW,IAAIhK,GACfpM,EAAQjkC,KAAKmnE,iBAAiBniB,oBAAoB3K,QACnD7M,WAAWgqD,iBAAiBvzD,OAC3B8kD,EAAU,IAAIviB,GACpBuiB,EAAQtiB,SAASxiC,GACjB8kD,EAAQC,kBAAkBhpF,KAAKmnE,kBAC/B4hB,EAAQptE,YAAYw5E,EAAQgC,iBAAiB/xF,IAC7C2jF,EAAQE,YAAY,IAAI1nG,GAAO,GAAMwzG,GAAgBqB,mBACrDrN,EAAQiP,SAA2C,GAAlCjD,GAAgBoB,iBACjCpN,EAAQG,QAAQ,IAAI3nG,GAAOwzG,GAAgBoB,gBAAiBpB,GAAgBqB,mBAC5ErN,EAAQK,YAAY,IACpBL,EAAQO,SAASyL,GAAgBkD,sBACjClP,EAAQlvC,iBAAiB,UACpBq+C,UAAUxO,IAAIX,EAASgM,GAAgBoD,qCACvC3qD,WAAW4qD,SAASrD,GAAgBsD,wEAMlBC,EAAiBC,OAClCC,EAAiBx4F,KAAKk2F,SAAStrG,eAAerH,EAC9Ck1G,EAA2B,CAAC,GAC5BC,EAA2B,CAAC,GAClCvD,EAAQwD,YAAYH,EAAgBC,EAAgBC,GAEpDJ,EAAUn6G,EAAQm6G,EAAS,EAAGvD,GAAgBC,kBAAoB,GAClEuD,EAAUp6G,EAAQo6G,EAAS,EAAGxD,GAAgBE,mBAAqB,GAKjEj1F,KAAKu2F,YAAY+B,EAASC,KAAarD,GAAiB6C,MACvDU,EAAe,KAAOH,GAAWI,EAAe,KAAOH,SAGnDK,2BAEA1C,SAAS5vE,gBAAgB6uE,EAAQmB,YAAYgC,EAASC,GAAU,sDASnEM,GAAW,EACTL,EAAiBx4F,KAAKk2F,SAAStrG,eAAerH,SAChDyc,KAAK84F,0BAA4B/D,GAAgBgE,iCAC9CC,2BAA2BR,GAChCK,GAAW,QAERC,2BAA6B,EAC3BD,kDAOsBI,EAAgBC,EAAgBC,EAAcC,OACrEv+F,EAAQ,IAAI6f,GACZsrD,EAAQmzB,EAAOF,EAAS,EACxBlpF,EAASqpF,EAAOF,EAAS,EACzBG,EAAUJ,EAASjzB,EAAQ,EAC3BszB,EAAUJ,EAASnpF,EAAS,EAClClV,EAAMggB,SACJk6E,GAAgBoB,gBAAkBnwB,EAClC+uB,GAAgBqB,iBAAmBrmF,OAE/BwpF,EAAe,IAAI53G,GACzB43G,EAAa/+C,iBACX26C,EAAQgC,iBAAiBhC,EAAQmB,YAAY+C,EAASC,IACtD,QAEGnyB,iBAAiBwiB,wBAAwB9uF,EAAO0+F,0CAGjClgG,qDACCA,kDAGO4qC,6DACCA,wCAGXvhB,mDACCA,sCAGHA,iDACCA,oCAGHA,EAAoB8hB,+CACnB9hB,EAAS8hB,qCAGT9hB,EAAoBoE,gDACnBpE,EAASoE,oCAOX9gC,MAETga,KAAKw5F,kBAIJhB,EAAiBx4F,KAAKk2F,SAAStrG,eAAerH,EAC9C+0G,EAAoB,CAAC,GACrBC,EAAoB,CAAC,UAC3BpD,EAAQwD,YAAYH,EAAgBF,EAASC,GACrCvyG,OACD,IACHsyG,EAAQ,eAEL,IACHC,EAAQ,eAEL,IACHD,EAAQ,eAEL,IACHC,EAAQ,eAEL,IAECv4F,KAAK84F,0BAA4B,OAC9BA,0BAA4B,OAO5BF,gFAIQ5yG,QAGdyzG,kBAAkBnB,EAAQ,GAAIC,EAAQ,SACtCiB,cAAe,sCAGJxzG,iDACCA,qCAGFzC,gDACCA,QACXu1G,0BAA4B,kCAMpBv1G,iDACCA,GACTyc,KAAKw5F,kBAKLx5F,KAAK44F,sBAAuB,KACzBJ,EAAiBx4F,KAAKk2F,SAAStrG,eAAerH,EAC9C+0G,EAAoB,CAAC,GACrBC,EAAoB,CAAC,GAC3BpD,EAAQwD,YAAYH,EAAgBF,EAASC,OAGvC91G,EAAWlB,GAAOU,MAAMsB,EAAG4xG,EAAQgC,iBAAiBqB,GAAiB,IAAIj3G,IACzEm4G,EAAWh7G,KAAKwnG,IAAIzjG,EAAS7E,GAC7B+7G,EAAWj7G,KAAKwnG,IAAIzjG,EAASgE,GAC/BizG,EAAWC,GAAYD,GAAY3E,GAAgBoB,gBACrDmC,EAAQ,IAAM71G,EAAS7E,EAAI,EAAM,GAAK,EAC7B+7G,GAAY5E,GAAgBoB,kBACrCoC,EAAQ,IAAM91G,EAASgE,EAAI,EAAM,GAAK,QAEnCgzG,kBAAkBnB,EAAQ,GAAIC,EAAQ,SAExCiB,cAAe,qCAGLj2G,gDACCA,gCAGNqpF,OACN1gD,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAC7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAGI0gD,QAENsrB,UAAU56B,KAAKpxC,QAEfstE,cAAe,EAEhBx5F,KAAK84F,2BAA6B,SAC/BA,2BAA6B5sE,OAG9BssE,EAAiBx4F,KAAKk2F,SAAStrG,eAAerH,EAC9C+0G,EAAoB,CAAC,GACrBC,EAAoB,CAAC,GAC3BpD,EAAQwD,YAAYH,EAAgBF,EAASC,GAEzCv4F,KAAKu2F,YAAY+B,EAAQ,GAAIC,EAAQ,MAAQrD,GAAiBmC,YAC3DT,YAAY0B,EAAQ,GAAIC,EAAQ,GAAIrD,GAAiBY,YACrDsB,QAAQkB,EAAQ,GAAIC,EAAQ,GAAI,YAIlCqB,wBAAwB55F,KAAK83F,QAAS93F,KAAK63F,UAAW73F,KAAK83F,QAAS93F,KAAK63F,mBAIxEgC,EAAiB75F,KAAKwtC,WAAWssD,oBAE9B9hG,EAAK,EAAGA,EAAK6hG,EAAez8G,SAAU4a,UAEvCg6F,EAAgB6H,EAAe7hG,GAC/BzI,EAAQyiG,EAAcvtC,iBAEtB5rD,EAAiBmH,KAAKmnE,iBAAiBruE,oBAEvCihG,EAAiB/5F,KAAKmnE,iBAAiBmD,oBACvC5xE,EAAgBs5F,EAAcr5F,mBAC3Bpb,EAAI,EAAGA,EAAImb,IAAiBnb,EAAG,KAGhCy8G,EAAU7E,EAAQgC,iBACtBhC,EAAQmB,YAAYt2F,KAAK83F,QAAS93F,KAAK43F,aAAe,IAElDqC,EAAmBphG,EAAetJ,EAAQhS,GAG1CkF,EAAWlB,GAAOU,MAAMg4G,EAAkBD,EAAS,IAAIz4G,IAEvDm4G,EAAWh7G,KAAKwnG,IAAIzjG,EAAS7E,MAEjC87G,EAAW3E,GAAgBzM,aAE3B7lG,EAASgE,GAAmC,EAA/BsuG,GAAgBzM,aAC7B7lG,EAASgE,EAAI,EACb,KAGM0yD,EAAW53D,GAAOU,MAAM+3G,EAASC,EAAkB,IAAI14G,IAC7D43D,EAAS/1D,YAET22G,EAAexqG,EAAQhS,GAAGmG,KAAKy1D,EAASziD,QAAQq+F,GAAgBmF,8BAC3D,GAAIR,GAAY3E,GAAgBoB,iBAAmB1zG,EAASgE,EAAI,EAAK,KAGpE0zG,EAAUz7G,KAAKM,SAAW+1G,GAAgBoB,gBAAkB1zG,EAAS7E,EACrEu7D,EAAW,IAAI53D,GAAO44G,EAASpF,GAAgBxM,cACrDpvC,EAAS/1D,YAET22G,EAAexqG,EAAQhS,GAAGmG,KAAKy1D,EAASziD,QAAQq+F,GAAgBqF,8BAMjEC,kBACAC,gBACAC,mDAOA,IAAI9zG,EAAIuZ,KAAK43F,aAAcnxG,GAAKuZ,KAAK63F,YAAapxG,OAChD+zG,SAASrF,EAAQmB,YAAYt2F,KAAK83F,QAASrxG,GAAIsuG,GAAgB0F,uDAQjED,SACHx6F,KAAKk2F,SAAStrG,eAAerH,EAC7B4xG,EAAQuF,UACN3F,GAAgB4F,cAChB5F,GAAgB6F,mBAChB58G,EAAMgiB,KAAK84F,0BAA4B/D,GAAgBgE,0BAA2B,KAEpF,uCAiBF3yB,GAAYqF,WACV,EACAzrE,KAAK2qE,4BACK3qE,KAAKwtC,WAAWqtD,sCAA6B76F,KAAKwtC,WAAWstD,gBAEpEnwB,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,0CACtCA,YAAchB,oCAOLvkE,EAAkBnL,OAAgB43C,0DAE1CkpD,EAAQx5G,GAAOymB,UAAU,GACzBgzF,EAAO51F,EAASxnB,EAAIm3G,GAAgBzM,YACpC2S,EAAO71F,EAAS3e,EAAIsuG,GAAgBxM,aAC1CwS,EAAM,GAAGz2G,IAAI8gB,EAASxnB,EAAGq9G,GACzBF,EAAM,GAAGz2G,IAAI8gB,EAASxnB,EAAGwnB,EAAS3e,GAClCs0G,EAAM,GAAGz2G,IAAI02G,EAAM51F,EAAS3e,GAC5Bs0G,EAAM,GAAGz2G,IAAI02G,EAAMC,GACfppD,EACFu0B,GAAY7oE,YAAYw9F,EAAO,EAAG9gG,GAElCmsE,GAAYpqE,iBAAiB++F,EAAO,EAAG9gG,sDAkBlC,6CAIA,IAAIk7F,wCAMe8B,GAC1BA,EAAW3yG,IACTywG,GAAgBmG,eAAiBnG,GAAgBoG,iBACjDpG,GAAgBqG,eAAiBrG,GAAgBsG,sDAO5BpE,EAAoBC,GAC3C/B,EAAQmG,cAAcrE,GACtBC,EAAS5yG,IACPywG,GAAgBmG,eAAiBnG,GAAgBoG,iBACjDpG,GAAgBqG,eAAiBrG,GAAgBsG,uDAK3Bj2F,EAAkBxnB,EAAa6I,OAGjDwwG,EAAa,IAAI11G,GACvB4zG,EAAQmG,cAAcrE,GACtBr5G,EAAE,GAAKc,KAAKsK,OACToc,EAASxnB,EAAIq5G,EAAWr5G,GAAKm3G,GAAgBzM,YAAcyM,GAAgBoB,iBAE9E1vG,EAAE,GAAK/H,KAAKsK,OACToc,EAAS3e,EAAIwwG,EAAWxwG,GAAKsuG,GAAgBxM,aAAewM,GAAgBqB,sDAOvDx4G,EAAW6I,OAAWqP,yDAAc,IAAIvU,GAG1D01G,EAAa,IAAI11G,UACvB4zG,EAAQmG,cAAcrE,GACfnhG,EAAIxR,IACT1G,EAAIm3G,GAAgBzM,YAAc2O,EAAWr5G,EAC7C6I,EAAIsuG,GAAgBxM,aAAe0O,EAAWxwG,6CAQlB7I,EAAW6I,UAKlC7I,EAAI6I,EAAIsuG,GAAgBC,2DAMF5vF,iEAAgC,IAAI7jB,IACtD+C,IACT8gB,EAASxnB,EAAIm3G,GAAgBoB,gBAC7B/wF,EAAS3e,EAAIsuG,GAAgBqB,oDAOT94G,EAAYS,EAAY4L,UACvC,IAAI2c,GACT6uF,EAAQoG,KAAKj+G,EAAE6G,EAAGpG,EAAEoG,EAAGwF,GACvBwrG,EAAQoG,KAAKj+G,EAAEke,EAAGzd,EAAEyd,EAAG7R,GACvBwrG,EAAQoG,KAAKj+G,EAAES,EAAGA,EAAEA,EAAG4L,iCAORrM,EAAWS,EAAW4L,UAChCrM,GAAK,EAAMqM,GAAK5L,EAAI4L,SA/qBFqpE,KAsrB7B,SAAYkiC,GACVA,qBACAA,mBACAA,mBACAA,iBACAA,qBACAA,mBACAA,oBAPF,CAAYA,KAAAA,YAcCE,0BAUCl5F,mDATK,UACF,uBAE2C,OASnD8kB,QAAU9kB,IACVs/F,mBAAqBt/F,EAAMgmD,wBAC3BlhC,QAAQ4pD,6FAIT5qE,KAAKghB,cACFA,QAAQ4pD,uBAAuB5qE,KAAKw7F,qDAO7BC,QACTC,SAAWD,4CAOTz7F,KAAK07F,uCAMAC,QACPC,OAASD,0CAOP37F,KAAK47F,iDAMYxkC,EAAkC7nE,OAGpD0gB,EAAWmnD,EAAesgC,oBAAoBnoG,MAChD0gB,SAEeA,QAEVilF,GAAiB6B,SACfqB,SAASrD,GAAgB8G,4BACzBlE,QAAQ,cAEVzC,GAAiB8B,WACfoB,SAASrD,GAAgB+G,iCApESlH,IC14BpCmH,uEACQA,EAAQC,8BACPD,EAAQE,sCACLF,EAAQG,qCACO,uBACW,OAoB1Cl7E,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAG,QAI9BoiC,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GACjC9oB,EAAQ,IAAI8kB,GACZ5/B,EAAW,CACf,IAAIwB,IAAQw6G,EAAQI,qBAAsB,GAC1C,IAAI56G,GAAOw6G,EAAQI,qBAAsB,GACzC,IAAI56G,GAAOw6G,EAAQI,qBAAsBJ,EAAQjO,mBACjD,IAAIvsG,IAAQw6G,EAAQI,qBAAsBJ,EAAQjO,oBAEpDjzF,EAAM2xF,WAAWzsG,EAAU,OACrB9C,EAAM,IAAIwjC,UAChBxjC,EAAI4d,MAAQA,EACZ5d,EAAIg9B,QAAU,EACdh9B,EAAI0jC,YAAc,EAClB0lE,EAAO1Z,cAAc1vF,KAIlBm/G,kBAEAC,wFAODr8F,KAAKs8F,qBACFt7E,QAAQwrD,YAAYxsE,KAAKs8F,oBACzBA,cAAgB,kDAQlBt8F,KAAKs8F,cAAe,KACjB34E,EAAK,IAAIN,QACVi5E,cAAgBt8F,KAAKghB,QAAQgqD,WAAWrnD,OACvC44E,EAAe,IAAI7hF,GACzB6hF,EAAa1hF,SACXkhF,EAAQI,qBACRJ,EAAQS,gBACR,IAAIj7G,GAAO,EAAGye,KAAKy8F,YACnB,OAEIx/G,EAAM,IAAIwjC,GAChBxjC,EAAI4d,MAAQ0hG,EACZt/G,EAAIg9B,QAAU,EACdh9B,EAAI0jC,YAAc,OACb27E,cAAc3vB,cAAc1vF,4CAQ/B+iB,KAAKs8F,mBACFI,sBAEAN,yDAQsB,OAAzBp8F,KAAK28F,uBACFA,gBAAgBzR,kBAAiB,QACjCyR,gBAAkB,WAGpBx1B,iBAAiB1vB,UAAUskD,EAAQI,qBAAuB,QAEvDthG,EAAQ,IAAI6f,GAClB7f,EAAMggB,SACJ7a,KAAK0hB,UAAYq6E,EAAQI,qBACzBn8F,KAAK0hB,UAAYq6E,EAAQE,sBACzB,IAAI16G,GAAO,EAAGw6G,EAAQE,uBACtB,OAEIv0B,EAAK,IAAIr3B,GACfq3B,EAAGvrE,SACHurE,EAAG7sE,MAAQA,OACN8hG,gBAAkB38F,KAAKmnE,iBAAiBniB,oBAAoB0iB,WAI3Dx8C,EAAalrB,KAAKmnE,iBAAiBmD,oBACnC/6E,EAAQyQ,KAAK28F,gBAAgBl4C,iBAE1BlnE,EAAI,EAAGA,EAAIyiB,KAAK28F,gBAAgBhkG,qBAAsBpb,EAAG,KAE1DoH,EAAIumC,EAAW37B,EAAQhS,GAC7BoH,EAAEL,IAAIuZ,KAAgB,EAAKA,KAAgB,GAC3ClZ,EAAEvB,YAEFuB,EAAE+R,QAAQsJ,KAAK48F,iDAKL52G,UACNA,OACD,SAEE62G,0BAEF,SAEEn7E,UAAY5jC,EAAMkiB,KAAK0hB,UAAYq6E,EAAQe,cAAef,EAAQgB,mBAClEn1G,kBAEF,SAEE85B,UAAY1jC,EAAMgiB,KAAK0hB,UAAYq6E,EAAQe,cAAef,EAAQiB,mBAClEp1G,kBAEF,SAEEq1G,YAAYj9F,KAAKy8F,WAAaV,EAAQmB,sCAExC,SAEED,YAAYj9F,KAAKy8F,WAAaV,EAAQmB,sCAExC,SAEEN,cAAgB5+G,EACnBgiB,KAAK48F,cAAgBb,EAAQoB,kBAC7BpB,EAAQqB,uBAELx1G,kBAEF,SAEEg1G,cAAgB9+G,EACnBkiB,KAAK48F,cAAgBb,EAAQoB,kBAC7BpB,EAAQsB,uBAELz1G,kEAGU5B,wCAQFzC,UAEfA,EAAE3F,IAAMm+G,EAAQI,sBAChB54G,EAAE3F,GAAKm+G,EAAQI,sBACf54G,EAAEkD,GAAK,GACPlD,EAAEkD,GAAqC,EAAhCs1G,EAAQE,wDAIF14G,GACVyc,KAAKs9F,YAAY/5G,iDACJA,mCAILA,GAETyc,KAAKs9F,YAAY/5G,QAEds5G,sBAGAI,YAAY15G,EAAEkD,8CAELlD,iCAINqpF,2CACCA,OAGPsH,EAAM,EACNN,EAAS,KAET5zE,KAAK28F,wBACDptG,EAAQyQ,KAAK28F,gBAAgBl4C,iBAE7Bv5B,EAAalrB,KAAKmnE,iBAAiBmD,oBAEnCv/C,EAAY/qB,KAAKmnE,iBAAiBruE,oBAE/Bvb,EAAI,EAAGA,EAAIyiB,KAAK28F,gBAAgBhkG,mBAAoBpb,IAAK,KAG1DoH,EAAIumC,EAAW37B,EAAQhS,GAC7BoH,EAAEvB,YAEFuB,EAAE+R,QAAQsJ,KAAK48F,eAKL7xE,EAAUx7B,EAAQhS,GACtBkJ,EAAIuZ,KAAKy8F,WACbvoB,IAEAN,QAOA2pB,EAAcrpB,GAAO6nB,EAAQjO,kBAAoB9tF,KAAKy8F,YACtDe,EAAc5pB,EAAS5zE,KAAKy8F,WAClCr2B,GAAYqF,WACV,GACA,oBACU8xB,EAAc,EAAMC,EAAcD,EAAc,EAAM,yCAQ7Db,sBACAL,sBACAD,oDAMYqB,QACZhB,WAAat+G,EAChBs/G,EACA1B,EAAQmB,2BACRnB,EAAQjO,kBAAoBiO,EAAQmB,iCAEjCt1G,2DAIE,6CAIA,IAAIm0G,SA1Rc/oC,IAOJ+oC,oBAAmB,EACnBA,qBAAoB,EACpBA,wBAAuBA,GAAQ/N,iBAAmB,EAClD+N,yBAAwBA,GAAQjO,kBAAoB,EACpDiO,mBAAkBA,GAAQE,sBAAwB,IAClDF,8BAA6D,GAAhCA,GAAQE,sBACrCF,iBAAgB,KAChBA,gBAAe,IACfA,gBAAe,GACfA,oBAAmB,IACnBA,qBAAoB,GACpBA,oBAAmB,GACnBA,oBAAmB,GACnBA,wBAAuB,MCtCnC2B,mEAKD/5E,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAKjCg6E,EAAQ,EACZC,EAAQ,EAEDn3G,EAAI,GAAMA,EAAI,EAAKA,GAAKm3G,EAAO,KAChC/iG,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAMkF,GAClB,IAAIlF,IAAQ,GAAMkF,EAAIm3G,GACtB,IAAIr8G,GAAO,EAAK,KAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAGzB,IAAIjd,GAAK,GAAMA,EAAI,GAAMA,GAAK+/G,EAAO,KAClC9iG,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAI+/G,EAAO,GAAM,IAAIp8G,GAAO,EAAK,KAClFsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,SAC1Bs1C,EAAe/5B,GAAKs0B,gCACtByF,KACG5lB,iBAAiBslB,WAAW,QAI3B5xF,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,KAAK,GAAI,IACnBuW,EAAM9X,SAAW,MACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ4wF,EACXrlB,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,cACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,8EAM5B,IAAIy5D,SAtDW1qC,ICKb6qC,8EACe,IAAInjF,0BACA,IAAI/4B,WAMxBgiC,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAKjCg6E,EAAQ,EACL//G,GAAK,GAAMA,EAAI,GAAMA,GAAK+/G,EAAO,KAClC9iG,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,GAAO3D,GAAI,IACf,IAAI2D,GAAO3D,EAAI+/G,GAAQ,IACvB,IAAIp8G,GAAO,EAAK,KAElBsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,QACXub,GAAKs0B,+BAEnBngB,iBAAiBslB,WAAW,MAI9BqR,iBAAmB,IAAIpjF,KACvBojF,iBAAiBjjF,SAAS,GAAM,KAGhCkjF,qBAAuB,IAAIp8G,OAC1BulG,EAAM,IAAI3lG,IAAQ,GAAI,YACvBw8G,qBAAqBvjD,iBAAiB0sC,EAAK,8DAGtCta,2CACCA,OAELzwE,EAAQ62D,GAAKs0B,4BACb5f,EAAK,IAAIx3B,MAEfw3B,EAAGtiE,SAAS9gB,IAAI,EAAK,IACrBojF,EAAGvuB,SAAS70D,IAAI,GAAM,GACtBojF,EAAGvrE,MAAQA,KAEPA,EAAgF,KAC5EnU,EAAQgY,KAAKmnE,iBAAiBxuE,mBACpC+uE,EAAGvuB,SAAS70D,IAAY,EAAR0D,GAAa,EAAM,GAAM,GACzC0/E,EAAGvrE,iBAGAgrE,iBAAiBtmB,eAAe6mB,QAGhCP,iBAAiBwiB,wBAAwB3pF,KAAK89F,iBAAkB99F,KAAK+9F,gEAInE,IAAIF,SAlEa7qC,ICPfgrC,iFACkB,YAMnBr6E,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAMjC5rB,EAAO,EAEJxa,GAAK,GAAMA,EAAI,GAAMA,GAAKwa,EAAM,KACjC8C,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,GAAOhE,GAAI,IAAO,IAAIgE,GAAOhE,EAAIwa,GAAO,IAAO,IAAIxW,GAAO,EAAK,KACrFsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAEzB,IAAItd,GAAK,GAAMA,EAAI,GAAMA,GAAKwa,EAAM,KACjC8C,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,IAAQ,GAAMhE,GAAI,IAAIgE,IAAQ,GAAMhE,EAAIwa,GAAO,IAAIxW,GAAO,EAAK,KACrFsZ,EAAMvW,IAAIvE,EAAU,GACpBsmG,EAAO1Z,cAAc9xE,EAAO,OAEtB5L,EAAY,CAAC,IAAI1N,GAAO,GAAMhE,GAAI,IAAIgE,GAAO,GAAMhE,EAAIwa,GAAO,IAAIxW,GAAO,EAAK,KACpFsZ,EAAMvW,IAAI2K,EAAW,GACrBo3F,EAAO1Z,cAAc9xE,EAAO,YAK3BojG,oBAAsB,MAEtB92B,iBAAiB1vB,UAAU,QACXub,GAAKs0B,+BAEnBngB,iBAAiBslB,WAAW,+DAIzB7f,8CACCA,KAEP5sE,KAAKi+F,qBAAuB,MAI9Bj+F,KAAKi+F,wBAED9hG,EAAQ62D,GAAKs0B,4BACb5f,EAAK,IAAIx3B,MAEfw3B,EAAGtiE,SAAS9gB,IAAI,EAAK,IACrBojF,EAAGvuB,SAAS70D,IAAI,GAAM,GACtBojF,EAAGvrE,MAAQA,KAEPA,EAAgF,KAC5EnU,EAAQgY,KAAKmnE,iBAAiBxuE,mBACpC+uE,EAAGvuB,SAAS70D,IAAY,EAAR0D,GAAa,EAAM,GAAM,GACzC0/E,EAAGvrE,iBAGAgrE,iBAAiBtmB,eAAe6mB,8CAI9B,IAAIs2B,SAtEiBhrC,ICEnBkrC,+DAKDv6E,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAQ/B9oB,EAAQ,IAAI6f,GACZ36B,EAAW,CACf,IAAIwB,IAAQ,GAAM,IAClB,IAAIA,IAAQ,GAAM,GAClB,IAAIA,IAAQ,GAAM,GAClB,IAAIA,IAAQ,GAAM,KAEpBsZ,EAAMvW,IAAIvE,GACVsmG,EAAO1Z,cAAc9xE,EAAO,OAGxBsjG,EAAS,GACbP,EAAQO,EAAS,GACjBC,EAAS,GACTT,EAAQS,EAAS,EAGXvjG,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IAAO,IAAIA,GAAO,GAAM,IACnFsZ,EAAMvW,IAAIvE,GACVsmG,EAAO1Z,cAAc9xE,EAAO,OAGzB,IAAIjd,GAAKwgH,EAAQxgH,EAAIwgH,EAAQxgH,GAAK+/G,EAAO,KACtC9iG,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,IAAQ,GAAM,GAAM,IAAIA,GAAO3D,EAAG,IAAO,IAAI2D,GAAO3D,EAAI+/G,EAAO,KACrF9iG,EAAMvW,IAAIvE,GACVsmG,EAAO1Z,cAAc9xE,EAAO,OAGzB,IAAIpU,EAAI,EAAKA,EAAI03G,EAAQ13G,GAAKm3G,EAAO,KAClC/iG,EAAQ,IAAI6f,GACZ36B,EAAW,CAAC,IAAIwB,GAAO,GAAMkF,GAAI,IAAIlF,GAAO,GAAMkF,EAAIm3G,GAAQ,IAAIr8G,GAAO,GAAM,KACrFsZ,EAAMvW,IAAIvE,GACVsmG,EAAO1Z,cAAc9xE,EAAO,KAI3BssE,iBAAiB1vB,UAAU,OAC1Bs1C,EAAe/5B,GAAKs0B,4BAGlBzsF,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAInI,IAAI,EAAG,IACjBuW,EAAM9X,SAAW,OACX2kF,EAAK,IAAIr3B,GACfq3B,EAAGvrE,MAAQ4wF,EACXrlB,EAAG7sE,MAAQA,MACLopC,EAAQwQ,EAAK0yB,iBAAiBniB,oBAAoB0iB,cACpDA,EAAGvrE,SACAuwF,mBAAmBzoD,EAAO,8EAK5B,IAAIi6D,SArEiBlrC,ICUnBqrC,kHACgC,wCACC,8FAInCr+F,KAAKs+F,iGAKLt+F,KAAKu+F,0CAX6Br6D,IAehCs6D,+EAqJyC,IAAIH,KA/IjDr9E,QAAQy9E,iBAAiBlxE,EAAKmxE,qBAE9B19E,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAG,QAI9BoiC,EAAK,IAAIN,GACTgjE,EAAS94D,EAAKvM,QAAQgqD,WAAWrnD,GACjC9oB,EAAQ,IAAI8kB,GACZ5/B,EAAqB,CACzB,IAAIwB,IACDi9G,EAAwBG,UACxBH,EAAwBG,SAAWH,EAAwBI,SAE9D,IAAIr9G,GACFi9G,EAAwBG,UACvBH,EAAwBG,SAAWH,EAAwBI,SAE9D,IAAIr9G,GACFi9G,EAAwBG,SACxBH,EAAwBG,SAAWH,EAAwBI,SAE7D,IAAIr9G,IACDi9G,EAAwBG,SACzBH,EAAwBG,SAAWH,EAAwBI,UAG/D/jG,EAAM2xF,WAAWzsG,OACX9C,EAAM,IAAIwjC,GAChBxjC,EAAI4d,MAAQA,EACZ5d,EAAIg9B,QAAU,EACdh9B,EAAIg9B,QAAU,EACdh9B,EAAI0jC,YAAc,EAClB0lE,EAAO1Z,cAAc1vF,KAIlBkqF,iBAAiB1vB,UAAU,QAGxB58C,EAAQ,IAAI6f,GAElB7f,EAAMggB,SACJ,IACA,IACA,IAAIt5B,GACFi9G,EAAwBK,aACxBL,EAAwBK,aAAeL,EAAwBI,SAEjE,OAGIl3B,EAAK,IAAIr3B,GAEfq3B,EAAG7sE,MAAQA,EAIX6sE,EAAGvrE,MACD,SAKGwgG,gBAAkBpvE,EAAK45C,iBAAiBniB,oBAAoB0iB,WAK3Dx8C,EAAuBqC,EAAK45C,iBAAiBmD,oBAC7C/6E,EAAgBg+B,EAAKovE,gBAAgBl4C,iBAOlClnE,EAAI,EAAGA,EAAIgwC,EAAKovE,gBAAgBhkG,qBAAsBpb,EAAG,KAC1DoH,EAAYumC,EAAW37B,EAAQhS,GACrCoH,EAAEL,IAAIuZ,KAAeA,MACrBlZ,EAAE0J,gBACF1J,EAAE+R,QAAQ8nG,EAAwBM,4EAK5BlyB,2CACCA,WAGLr9E,EAAgByQ,KAAK28F,gBAAgBl4C,iBAGrCv5B,EAAuBlrB,KAAKmnE,iBAAiBmD,oBAO1C/sF,EAAI,EAAGA,EAAIyiB,KAAK28F,gBAAgBhkG,qBAAsBpb,EAAG,KAC1DoH,EAAYumC,EAAW37B,EAAQhS,GACrCoH,EAAE0J,gBACF1J,EAAE+R,QAAQ8nG,EAAwBM,kBAK5BlQ,EAAmB,CACvB,sCACA,wCAEOrxG,EAAI,EAAGA,EAAIqxG,EAAOxxG,SAAUG,EACnC6oF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAYikB,EAAOrxG,SAC7CotF,YAAchB,oCAKT3jF,UACNA,OACD,SACE+4G,oCAEF,SACEC,qFAGUh5G,2DAMd04G,kBAAkBJ,mCAAqCt+F,KAAK0+F,kBAC9DJ,0FAIEI,kBAAkBH,oCAAsCv+F,KAAK0+F,kBAC/DH,6EAaI,IAAIC,SA/J8BxrC,IAwJpBwrC,YAAW,GACXA,gBAAeA,GAAwBG,SAAW,EAClDH,WAAU,GACVA,2BAA0BA,GAAwBI,QAAU,GAC5DJ,YAAW,MCpMvBS,6DAOJ93B,iBAAiBslB,WAAW,MAC5BtlB,iBAAiB1vB,UAAU,MAC3B0vB,iBAAiB3vB,gBAAgB,MACjC2vB,iBAAiB5vB,WAAW,SAE3B2nD,EAAM,IAAI77E,GACVgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWk0B,GAEjCv7E,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGM,YAAa,EAChBN,EAAGve,SAAS9gB,IAAI,EAAK,OACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,GAAO,GAAM,GAAM,GACjDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,IAAQ,GAAM,GAAM,GAClDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,GAAO,EAAK,IAAO7C,KAAKggB,GAAK,GAC3D+iB,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,GAAO,GAAM,IAAO7C,KAAKggB,GAAK,GAC5D+iB,EAAKkrD,cAAc9xE,EAAO,GAE1B8oB,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,KAChB66G,QAAU1qD,EAAKzzB,QAAQgqD,WAAWrnD,GACvC9oB,EAAMggB,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,KAC1C49G,QAAQxyB,cAAc9xE,EAAO,OAE5BgyF,EAAK,IAAItvD,GACfsvD,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQi7C,EAAK0qD,QAChBtS,EAAGtjE,aAAajlC,IAAI,EAAK,GACzBuoG,EAAGrjE,aAAallC,IAAI,EAAK,GACzBuoG,EAAGr1D,eAAiB,EACpBq1D,EAAG30D,WAAa,EAChB20D,EAAG/uD,eAAiB,IACpB+uD,EAAGv0D,aAAc,IACZw0D,QAAUr4C,EAAKzzB,QAAQ4M,YAAYi/D,OAElCnlB,EAAK,IAAIr3B,GACfq3B,EAAGvrE,YAEGijG,EAAS,IAAI1kF,UACnB0kF,EAAOvkF,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAEhDmmF,EAAG7sE,MAAQukG,IACNj4B,iBAAiBniB,oBAAoB0iB,8DAGhCkF,OACJ3gF,GAAO,IAAIozG,MAAOC,eACnBxS,QAAQG,cAAc,GAAMvuG,KAAK+hB,IAAIxU,EAAO,8CAEtC2gF,6CAIJ,IAAIqyB,SAlEejsC,ICW5Bl1D,GAAa,YAAa,UAAWsoF,GAAQ/gD,QAC7CvnC,GAAa,YAAa,SAAUutF,GAAOhmD,QAC3CvnC,GAAa,YAAa,WAAYyuF,GAASlnD,QAC/CvnC,GAAa,YAAa,eAAgB6uF,GAAYtnD,QACtDvnC,GAAa,YAAa,eAAgB8uF,GAAYvnD,QACtDvnC,GAAa,YAAa,YAAaovF,GAAU7nD,QACjDvnC,GAAa,YAAa,SAAU0vF,GAAOnoD,QAC3CvnC,GAAa,YAAa,mBAAoBoxF,GAAiB7pD,QAC/DvnC,GAAa,YAAa,OAAQsyF,GAAK/qD,QACvCvnC,GAAa,YAAa,kBAAmB0yF,GAAwBnrD,QACrEvnC,GAAa,YAAa,oBAAqB2yF,GAAiBprD,QAChEvnC,GAAa,YAAa,kBAAmB4yF,GAAerrD,QAC5DvnC,GAAa,YAAa,mBAAoB6yF,GAAwBtrD,QACtEvnC,GAAa,YAAa,UAAWwzF,GAAQjsD,QAC7CvnC,GAAa,YAAa,eAAgBs0F,GAAY/sD,QACtDvnC,GAAa,YAAa,UAAWq3F,GAAQ9vD,QAC7CvnC,GAAa,YAAa,UAAWi+F,GAAQ12D,QAC7CvnC,GAAa,YAAa,OAAQ4/F,GAAKr4D,QACvCvnC,GAAa,YAAa,SAAU+/F,GAAOx4D,QAC3CvnC,GAAa,YAAa,aAAckgG,GAAW34D,QACnDvnC,GAAa,YAAa,cAAeogG,GAAW74D,QACpDvnC,GAAa,YAAa,sBAAuB0gG,GAAwBn5D,QACzEvnC,GAAa,YAAa,YAAamhG,GAAS55D,QC5ClD,OAAiB,SAAUroD,GACzB,GAAoB,iBAATA,GAAuC,UAAlBq+F,GAAQr+F,GACtC,MAAMs+F,UAAU,wBAElB,OAAQt+F,MCFO,GAAGuiH,QAAU,SAAgBv3G,GAC5C,IAAI+wF,EAAMwD,OAAOf,GAAuBx7E,OACpC1H,EAAS,GACT9Z,EAAIkhG,GAAU13F,GAClB,GAAIxJ,EAAI,GAAUghH,UAALhhH,EAAe,MAAMihH,WAAW,+BAC7C,KAAMjhH,EAAI,GAAIA,KAAO,KAAOu6F,GAAOA,GAAc,EAAJv6F,IAAO8Z,GAAUygF,GAC9D,OAAOzgF,GCLLonG,GAAgB,GAAI5wB,QACpB9lF,GAAQtK,KAAKsK,MAEbqX,GAAM,SAAUziB,EAAGY,EAAGmhH,GACxB,OAAa,IAANnhH,EAAUmhH,EAAMnhH,EAAI,GAAM,EAAI6hB,GAAIziB,EAAGY,EAAI,EAAGmhH,EAAM/hH,GAAKyiB,GAAIziB,EAAIA,EAAGY,EAAI,EAAGmhH,IAG9EC,GAAM,SAAUhiH,GAGlB,IAFA,IAAIY,EAAI,EACJob,EAAKhc,EACFgc,GAAM,MACXpb,GAAK,GACLob,GAAM,KAER,KAAOA,GAAM,GACXpb,GAAK,EACLob,GAAM,EACN,OAAOpb,GAeX8mG,GAAE,CAAEl7F,OAAQ,SAAUm7F,OAAO,EAAMxD,OAZtB2d,KACY,UAAvB,KAAQ5wB,QAAQ,IACG,MAAnB,GAAIA,QAAQ,IACS,SAArB,MAAMA,QAAQ,IACuB,yBAArC,mBAAsBA,QAAQ,MAC1BwL,IAAM,WAEVolB,GAAc9kB,KAAK,QAKgC,CAEnD9L,QAAS,SAAiB+wB,GACxB,IAKI1rG,EAAGuN,EAAGvb,EAAG8lC,EALT6zE,EAASC,GAAgB//F,MACzBggG,EAActgB,GAAUmgB,GACxB7mG,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACvBinG,EAAO,GACP3nG,EAAS,IAGT4nG,EAAW,SAAU1hH,EAAG4O,GAG1B,IAFA,IAAImC,GAAS,EACTiT,EAAKpV,IACAmC,EAAQ,GACfiT,GAAMhkB,EAAIwa,EAAKzJ,GACfyJ,EAAKzJ,GAASiT,EAAK,IACnBA,EAAKxZ,GAAMwZ,EAAK,MAIhB29F,EAAS,SAAU3hH,GAGrB,IAFA,IAAI+Q,EAAQ,EACRnC,EAAI,IACCmC,GAAS,GAChBnC,GAAK4L,EAAKzJ,GACVyJ,EAAKzJ,GAASvG,GAAMoE,EAAI5O,GACxB4O,EAAKA,EAAI5O,EAAK,KAId4hH,EAAe,WAGjB,IAFA,IAAI7wG,EAAQ,EACRxD,EAAI,KACCwD,GAAS,GAChB,GAAU,KAANxD,GAAsB,IAAVwD,GAA+B,IAAhByJ,EAAKzJ,GAAc,CAChD,IAAI5F,EAAI4yF,OAAOvjF,EAAKzJ,IACpBxD,EAAU,KAANA,EAAWpC,EAAIoC,EAAIwzG,GAAO3kB,KAAK,IAAK,EAAIjxF,EAAEvM,QAAUuM,EAE1D,OAAOoC,GAGX,GAAIi0G,EAAc,GAAKA,EAAc,GAAI,MAAMP,WAAW,6BAE1D,GAAIK,GAAUA,EAAQ,MAAO,MAC7B,GAAIA,IAAW,MAAQA,GAAU,KAAM,OAAOvjB,OAAOujB,GAKrD,GAJIA,EAAS,IACXG,EAAO,IACPH,GAAUA,GAERA,EAAS,MAKX,GAHAp+F,GADAvN,EAAIyrG,GAAIE,EAASz/F,GAAI,EAAG,GAAI,IAAM,IAC1B,EAAIy/F,EAASz/F,GAAI,GAAIlM,EAAG,GAAK2rG,EAASz/F,GAAI,EAAGlM,EAAG,GACxDuN,GAAK,kBACLvN,EAAI,GAAKA,GACD,EAAG,CAGT,IAFA+rG,EAAS,EAAGx+F,GACZvb,EAAI65G,EACG75G,GAAK,GACV+5G,EAAS,IAAK,GACd/5G,GAAK,EAIP,IAFA+5G,EAAS7/F,GAAI,GAAIla,EAAG,GAAI,GACxBA,EAAIgO,EAAI,EACDhO,GAAK,IACVg6G,EAAO,GAAK,IACZh6G,GAAK,GAEPg6G,EAAO,GAAKh6G,GACZ+5G,EAAS,EAAG,GACZC,EAAO,GACP7nG,EAAS8nG,SAETF,EAAS,EAAGx+F,GACZw+F,EAAS,IAAM/rG,EAAG,GAClBmE,EAAS8nG,IAAiBb,GAAO3kB,KAAK,IAAKolB,GAU7C,OAPEA,EAAc,EAEPC,IADTh0E,EAAI3zB,EAAOlb,SACW4iH,EAClB,KAAOT,GAAO3kB,KAAK,IAAKolB,EAAc/zE,GAAK3zB,EAC3CA,EAAO8nD,MAAM,EAAGn0B,EAAI+zE,GAAe,IAAM1nG,EAAO8nD,MAAMn0B,EAAI+zE,IAErDC,EAAO3nG,SCzFT+nG,0EAGc,cACP,cACC,UAEM,cACP,cACC,IAMZC,MAAM,GAAK,IAAI/+G,IAAQ,GAAK,KAC5B++G,MAAM,GAAK,IAAI/+G,GAAO,GAAK,KAC3B++G,MAAM,GAAK,IAAI/+G,GAAO,EAAK,KAC3Bg/G,SAAW,IACXC,UAAYx8G,KAEZy8G,MAAM,GAAK,IAAIl/G,IAAQ,IAAM,MAC7Bk/G,MAAM,GAAK,IAAIl/G,GAAO,IAAM,MAC5Bk/G,MAAM,GAAK,IAAIl/G,GAAO,GAAK,MAC3Bk/G,MAAM,GAAK,IAAIl/G,IAAQ,GAAK,MAC5Bm/G,SAAW,IACXC,UAAY38G,8DAYP4oF,2CACCA,OAELltF,EAAa,IAAIiC,GACvBjC,EAAW6D,EAAEe,IAAI,EAAK,KACtB5E,EAAW4B,EAAE6jB,kBAEPxlB,EAAa,IAAIgC,GACvBhC,EAAWwlB,kBAEL9lB,EAAQ,IAAIopB,GAClBppB,EAAMG,OAAOohH,kBAAkB5gG,KAAKsgG,MAAOtgG,KAAKugG,SAAUvgG,KAAKwgG,WAC/DnhH,EAAMI,OAAOmhH,kBAAkB5gG,KAAKygG,MAAOzgG,KAAK0gG,SAAU1gG,KAAK2gG,WAC/DthH,EAAMK,WAAWgE,KAAKhE,GACtBL,EAAMM,WAAW+D,KAAK/D,GACtBN,EAAM+E,aAAaE,IAAI,EAAK,OAEtBnF,EAAS,IAAIupB,GAEbm4F,EAAMl9G,EAAYxE,EAAQE,GAE1ByhH,EAAc,IAAIn/G,GACxBm/G,EAAYx/G,EAAEoC,KAAK/D,EAAW2B,GAE9Bw/G,EAAYv9G,EAAEG,KAAK/D,EAAW4D,GAAGF,WAAWlE,EAAOyE,OAAQvE,EAAM+E,kBAE3DoG,EAAgB,IAAI+d,GAC1B/d,EAAchL,OAAOohH,kBAAkB5gG,KAAKsgG,MAAOtgG,KAAKugG,SAAUvgG,KAAKwgG,WACvEh2G,EAAc/K,OAAOmhH,kBAAkB5gG,KAAKygG,MAAOzgG,KAAK0gG,SAAU1gG,KAAK2gG,WACvEn2G,EAAc9K,WAAWgE,KAAKhE,GAC9B8K,EAAc7K,WAAW+D,KAAKo9G,GAC9Bt2G,EAAc3H,UAAW,MACnBiF,EAAe,IAAIugB,GACzBvgB,EAAaE,MAAQ,MACf6C,EAAiB,IAAI2d,MAE3BtpB,EAAW2L,EAAgB/C,EAAc0C,GAEzC47E,GAAYqF,WACV,EACAzrE,KAAK2qE,2BACIk2B,EAAM,OAAS,6BAAoB1hH,EAAOwD,iCACjDxD,EAAOyE,+BACOiH,EAAepI,SAASqsF,QAAQ,UAE7CnE,YAAchB,GAEnBvD,GAAY3pE,cAAc/c,GAE1B0mF,GAAY7oE,YAAYyC,KAAKsgG,MAAOtgG,KAAKugG,SAAU,IAAIj6F,GAAQ,GAAK,GAAK,KACzE8/D,GAAYrpE,aAAard,GAEzB0mF,GAAY3pE,cAAc9c,GAE1BymF,GAAY7oE,YAAYyC,KAAKygG,MAAOzgG,KAAK0gG,SAAU,IAAIp6F,GAAQ,GAAK,GAAK,KACzE8/D,GAAYrpE,aAAapd,GAEzBymF,GAAY3pE,cAAcqkG,GAE1B16B,GAAY7oE,YAAYyC,KAAKygG,MAAOzgG,KAAK0gG,SAAU,IAAIp6F,GAAQ,GAAK,GAAK,KACzE8/D,GAAYrpE,aAAa+jG,GAErBD,EAAK,KACD1qG,EAAKhX,EAAO2E,MAClBsiF,GAAY1rE,UAAUvE,EAAI,GAAM,IAAImQ,GAAQ,GAAK,GAAK,SAEhDlQ,EAAK7U,GAAOskB,MAAM1P,EAAIhX,EAAO+D,OAAQ,IAAI3B,IAC/C6kF,GAAY/rE,YAAYlE,EAAIC,EAAI,IAAIkQ,GAAQ,GAAK,GAAK,gDAKjD,IAAI+5F,SA9GgBrtC,IACfqtC,iBAAgB,MCFnBU,6EACA,IAAIrmF,cACJ,IAAIA,KAKRsmF,SAASnmF,SAAS,GAAM,KACxBomF,SAASpmF,SAAS,IAAK,gEAGlB+xD,2CACCA,OAEL7iF,EAAS,IAAIgc,GACnBhc,EAAOkH,GAAG3M,IAAI,EAAK,GAAO,EAAM5F,KAAK+hB,IAAI4+F,KAAK33F,MAAQ,MACtD3d,EAAOic,GAAK,KACZjc,EAAOqD,EAAE1J,KAAKqG,EAAOkH,IACrBlH,EAAOzM,EAAIyM,EAAOic,GAClBjc,EAAOmc,YAAYriB,cAEboG,EAAS,IAAI8b,GACnB9b,EAAOgH,GAAG3M,IAAI,GAAM,IACpB2F,EAAO+b,GAAK,GACZ/b,EAAOmD,EAAE9I,KAAK,GAAM,GACpB2F,EAAO3M,EAAI,IACX2M,EAAOic,YAAYriB,cAKbxE,EAAQ,IAAI21B,GAClB31B,EAAMG,OAAOqI,SAASmY,KAAKghG,SAAU,GACrC3hH,EAAMI,OAAOoI,SAASmY,KAAKihG,SAAU,GACrC5hH,EAAM0K,OAAOrG,KAAKqG,GAClB1K,EAAM4K,OAAOvG,KAAKuG,GAClB5K,EAAMuK,KAAO,MAEPzK,EAAS,IAAI81B,GAEnB3rB,EAAenK,EAAQE,GAEvB+mF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,2BAAqBxrF,EAAOwK,EAAEmlF,QAAQ,UAChEnE,YAAchB,GAEnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,qCACclhF,GAAYpH,uCAA8BoH,GAAYuC,oBAEtE2+E,YAAchB,OAEb5pF,EAAW,GAEXL,EAAa,IAAIiC,GACvBoI,EAAOa,aAAalL,EAAY,OAC3B,IAAInC,EAAI,EAAGA,EAAIyiB,KAAKghG,SAASxgH,UAAWjD,EAC3CwC,EAASxC,GAAKoE,GAAYC,MAAMlC,EAAYsgB,KAAKghG,SAAShhH,WAAWzC,GAAI,IAAIgE,IAE/E6kF,GAAY7oE,YAAYxd,EAAUigB,KAAKghG,SAASxgH,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,SAEzE3mB,EAAa,IAAIgC,GACvBsI,EAAOW,aAAajL,EAAY,OAI3B,IAAIpC,EAAI,EAAGA,EAAIyiB,KAAKihG,SAASzgH,UAAWjD,EAC3CwC,EAASxC,GAAKoE,GAAYC,MAAMjC,EAAYqgB,KAAKihG,SAASjhH,WAAWzC,GAAI,IAAIgE,IAE/E6kF,GAAY7oE,YAAYxd,EAAUigB,KAAKihG,SAASzgH,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,KAC/E8/D,GAAY86B,gBAAgBvhH,EAAW4D,EAAE3F,EAAG+B,EAAW4D,EAAEkD,aAAO,GAAKqoF,QAAQ,KAE7E7kF,EAAOW,aAAajL,EAAYR,EAAOwK,OAClC,IAAIpM,EAAI,EAAGA,EAAIyiB,KAAKihG,SAASzgH,UAAWjD,EAC3CwC,EAASxC,GAAKoE,GAAYC,MAAMjC,EAAYqgB,KAAKihG,SAASjhH,WAAWzC,GAAI,IAAIgE,IAE/E6kF,GAAY7oE,YAAYxd,EAAUigB,KAAKihG,SAASzgH,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,KAC/E8/D,GAAY86B,gBAAgBvhH,EAAW4D,EAAE3F,EAAG+B,EAAW4D,EAAEkD,YAAMtH,EAAOwK,EAAEmlF,QAAQ,KAEhF7kF,EAAOW,aAAajL,EAAY,OAC3B,IAAIpC,EAAI,EAAGA,EAAIyiB,KAAKihG,SAASzgH,UAAWjD,EAC3CwC,EAASxC,GAAKoE,GAAYC,MAAMjC,EAAYqgB,KAAKihG,SAASjhH,WAAWzC,GAAI,IAAIgE,IAE/E6kF,GAAY7oE,YAAYxd,EAAUigB,KAAKihG,SAASzgH,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,KAC/E8/D,GAAY86B,gBAAgBvhH,EAAW4D,EAAE3F,EAAG+B,EAAW4D,EAAEkD,YAAO,GAAKqoF,QAAQ,SAGxE,IAAInlF,EAAI,EAAKA,EAAI,EAAKA,GAAK,GAAK,CACnCM,EAAOW,aAAajL,EAAYgK,OAC3B,IAAIpM,EAAI,EAAGA,EAAIyiB,KAAKihG,SAASzgH,UAAWjD,EAC3CwC,EAASxC,GAAKoE,GAAYC,MAAMjC,EAAYqgB,KAAKihG,SAASjhH,WAAWzC,GAAI,IAAIgE,IAE/E6kF,GAAY7oE,YAAYxd,EAAUigB,KAAKihG,SAASzgH,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,KAC/E8/D,GAAY86B,gBAAgBvhH,EAAW4D,EAAE3F,EAAG+B,EAAW4D,EAAEkD,YAAMkD,EAAEmlF,QAAQ,gDAMpE,IAAIiyB,SAnGmB/tC,ICErBmuC,+DAQDx9E,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAOtB8oB,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,EAAK,GAAM,IAAIA,IAAQ,EAAK,IAClD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,IAAQ,EAAK,GAAM,IAAIA,IAAQ,EAAK,IAClD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,IAAQ,EAAK,GAAM,IAAIA,IAAQ,EAAK,IAClD8kG,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAGnlB,MAAQ,IAAOC,OACZ4nF,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9tB,EAAKtU,GAAOymB,UAAU,GAC5BnS,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,OAETuW,EAAQ,IAAI8kB,GAClB9kB,EAAMumG,YAAYvrG,EAAI,GACtBwwF,EAAO1Z,cAAc9xE,EAAO,OAOtB8oB,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAC/C8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAC/C8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMggB,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAC/C8kG,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9tB,EAAKtU,GAAOymB,UAAU,GAC5BnS,EAAG,GAAGvR,KAAK,EAAK,GAChBuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,KAAK,EAAK,OAEVuW,EAAQ,IAAI8kB,GAClB9kB,EAAMumG,YAAYvrG,EAAI,GACtBwwF,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,GAAM,OACjB+hG,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9tB,EAAKtU,GAAOymB,UAAU,IAC5BnS,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,KAAK,EAAK,GAChBuR,EAAG,GAAGvR,KAAK,EAAK,GAChBuR,EAAG,GAAGvR,KAAK,EAAK,GAChBuR,EAAG,GAAGvR,KAAK,EAAK,OAEVuW,EAAQ,IAAI8kB,GAClB9kB,EAAMumG,YAAYvrG,EAAI,IACtBwwF,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,GACtBq/B,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGM,YAAa,MAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,QAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbwH,EAAKkrD,cAAcD,OAKb/oD,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,GACtBq/B,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGM,YAAa,MAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,SAEf6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbwH,EAAKkrD,cAAcD,OAKb/oD,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,GACtBq/B,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGM,YAAa,UAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAEjCnlB,EAAQ,EACNwvB,EAAQvvB,GAAQ,EAChB1e,EAAWwB,GAAOymB,UAAU,GACzBzqB,EAAI,EAAGA,EAAI,IAAKA,EACvBwC,EAASxC,GAAG+G,IAAI,GAAMkc,GAAMhC,GAAQ,GAAM8B,GAAM9B,IAChDA,GAASwvB,MAGLnzB,EAAQ,IAAI6f,GAClB7f,EAAMvW,IAAIvE,EAAU,OAEd2sF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbwH,EAAKkrD,cAAcD,OAKb/oD,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,GACrBq/B,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGM,YAAa,MAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbwH,EAAKkrD,cAAcD,OAKb/oD,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,GACtBq/B,EAAG52B,OACH42B,EAAGM,YAAa,IAEXo9E,YAAc5sD,EAAKzzB,QAAQgqD,WAAWrnD,OAErC9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,QAEX2pF,EAAK,IAAIjsD,UACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,IACT2gF,YAAY10B,cAAcD,8DAIvBE,OACJjoF,EAAIqb,KAAKqhG,YAAY56E,oBAAoB5E,QAC/Cl9B,EAAE/G,GAAK,OACFyjH,YAAY50B,kBAAkB9nF,2CAExBioF,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,sDACtCA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,kEAEGA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,mEAEGA,YAAchB,6CAIZ,IAAIw3B,SA1OyBnuC,ICP3BsuC,4EAGa,iBACF,IAKf37E,eAAiB,MAEhBp8B,EAAQ,IAAIge,GAIVjqB,EAAI,GAEJqmC,EAAK,IAAIN,GACfM,EAAGve,SAAS3e,GAAKnJ,MAEX+oG,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAI/B/b,EAAI,IAEJ5E,EAAI,GAEJoC,EAAW,IAAI7jB,GACrB6jB,EAAS3e,EAAI,UACMN,EAAI,EAAGA,EAAI6c,IAAK7c,EAAG,CACpCif,EAASxnB,GAAKgqB,EAAItqB,UACCC,EAAI,EAAGA,EAAIqqB,IAAKrqB,EAAG,KAE9Bsd,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAASv9B,EAAGA,EAAG8nB,EAAU,GAC/BihF,EAAO1Z,cAAc9xE,EAAO,KAC1B45C,EAAK9uB,eACPvgB,EAASxnB,GAAK,EAAMN,EAEtB8nB,EAAS3e,GAAK,EAAMnJ,MA0BlBA,EAAI,GAEJud,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAASv9B,EAAGA,WAGZM,EAAI,IAAI2D,IAAQ,EAAK,KAErBkF,EAAI,IAAIlF,GAERggH,EAAS,IAAIhgH,GAAO,MAAQ,MAE5Bw2F,EAAS,IAAIx2F,GAAO,MAAO,GAEdhE,EAAI,EAAGA,EAAI+jH,EAAME,UAAWjkH,EAAG,CAChDkJ,EAAE/C,KAAK9F,WAEYuI,EAAI5I,EAAG4I,EAAIm7G,EAAME,UAAWr7G,EAAG,KAE1Cw9B,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAK+C,GAYJguD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,KACxB45C,EAAK9uB,eACPl/B,EAAEwc,QAAQ80E,GAGZn6F,EAAEqlB,QAAQs+F,YAITE,aAAel4G,EAAM2C,6EAGhB0gF,OAEJ80B,EAAK1hG,KAAKghB,QAAQ2gF,oBAElB5xF,EAAS2xF,EAAGxgF,aAAai8C,gBAIzBykC,EAAmB,EAFPF,EAAGxgF,aAAag8C,gBAEO,EAEnC2kC,EAAgBnjH,KAAK6Y,KAAK7Y,KAAKkhH,IAAIgC,GAAoBljH,KAAKkhH,IAAI,IACtEx5B,GAAYqF,WACV,EACAzrE,KAAK2qE,2CACoB56D,qBAAiB8xF,SAEvCl3B,YAAchB,2CAERiD,GAEXxG,GAAYqF,WACV,EACAzrE,KAAK2qE,mCACY3qE,KAAKyhG,aAAa3yB,QAAQ,mCAA0B9uE,KAAK2lB,sBAEvEglD,YAAchB,6CAWZ,IAAI23B,SApJYtuC,IACFsuC,WAAU,OCPtBQ,+DAMDn+E,EAAK,IAAIN,GAETgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAIxB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QAEjBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG7B9oB,EAAQ,IAAI0e,UAClB1e,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,IAE1B8oB,EAAGve,SAAS9gB,IAAI,EAAK,GACrBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC/B9oB,EAAM9X,SAAW,EACjB0+B,EAAKkrD,cAAc9xE,EAAO,+EAInB,IAAIinG,SAnCmB9uC,ICArB+uC,qEACqB,SAOtBp+E,EAAK,IAAIN,GAETgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAIxB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,SAEjBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG7B9oB,EAAQ,IAAI0e,UAClB1e,EAAM9X,SAAW,GACjB0+B,EAAKkrD,cAAc9xE,EAAO,IAE1B8oB,EAAGve,SAAS9gB,IAAI,EAAK,MACrBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,2EAIL,OAAjBmF,KAAKgiG,aACFhhF,QAAQwrD,YAAYxsE,KAAKgiG,cACzBA,QAAU,SACV,KAECr+E,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QAChB09G,QAAUhiG,KAAKghB,QAAQgqD,WAAWrnD,OAGjC9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OACZi/G,QAAQr1B,cAAc9xE,EAAO,sCAItB7U,UACNA,OACD,SACEi8G,yDAMF,IAAIF,SA9DsB/uC,ICSxBkvC,sEAIsB,OAO1Bh1E,SAAW,IAAI/rB,MAAM+gG,EAAcC,WAAaD,EAAcE,iBAC9DC,UAAY,IAAIlhG,MAAM+gG,EAAcC,WAAaD,EAAcE,mBAG5Dz+E,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,GAAO,GAAM,KAClD8kG,EAAO1Z,cAAc9xE,EAAO,WAGxBynG,EAAK,CAAC,GAAM,IAAO,EAAK,EAAK,IAE1Bn8G,EAAI,EAAGA,EAAI+7G,EAAcE,gBAAiBj8G,EAAG,KAC9C0U,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,QAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,OAET,IAAInjC,EAAI,EAAGA,EAAI2kH,EAAcC,aAAc5kH,EAAG,KAC3ComC,EAAK,IAAIN,GACfM,EAAG52B,WAEGvO,EAAI2H,EAAI+7G,EAAcC,WAAa5kH,IAEpC8kH,UAAU7jH,GAAKA,EACpBmlC,EAAG1T,SAAWwkC,EAAK4tD,UAAU7jH,OAEvBZ,EAAI,EAGV+lC,EAAGve,SAAS9gB,IAAIg+G,EAAGn8G,GAAKvI,EAAG,IAAO,IAAML,OAClCkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,KAEhCuJ,SAAS1uC,GAAKijC,EAEnBA,EAAKkrD,cAAcD,0EAKT1mF,UACNA,OACD,IACCga,KAAKuiG,gBACFvhF,QAAQwrD,YAAYxsE,KAAKuiG,eACzBA,SAAW,UAIV1nG,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,QAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAG/rD,YAAc,QAEXgD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGE,QAAS,EACZF,EAAGve,SAAS9gB,KAAK,GAAM,QAElBi+G,SAAWviG,KAAKghB,QAAQgqD,WAAWrnD,QACnC4+E,SAAS51B,cAAcD,QAEvB61B,SAAS91B,kBAAkB,IAAIlrF,GAAO,IAAO,kCAS9CqrF,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,uCACtCA,YAAchB,6CAiCZ,IAAIu4B,SAjIoBlvC,IACVkvC,iBAAgB,EAChBA,cAAa,OCJzBM,+DAKLnc,EAAS,KAGL1iE,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,QAMjBw7E,EALJumB,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAUzB9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,OAGd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,EAAK,QAEhBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAGpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,IAAQ,GAAM,OAC5Cy/B,QAAQ4M,YAAY60E,GAEzB3iC,EAAWr+C,MAML5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,OAGd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QAEfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAGpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,IAAQ,EAAK,OAC3Cy/B,QAAQ4M,YAAY60E,GAEzB3iC,EAAWr+C,MAML5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,OAGd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGve,SAAS9gB,IAAI,GAAM,QAEhBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAGpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,GAAO,GAAM,OAC3Cy/B,QAAQ4M,YAAY60E,OAGnBC,EAAM,IAAIrrE,UAChBqrE,EAAIz3G,WAAWo7F,EAAQ5kE,EAAM,IAAIlgC,GAAO,GAAM,IAAO,IAAIA,GAAO,EAAK,MAChEy/B,QAAQ4M,YAAY80E,8EAMtB,IAAIF,SA1FuBxvC,ICIzB2vC,+DASLtc,EAAS,KAEL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAIxBilE,EAAWumB,EAIPxrF,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,OAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAEpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,GAAO,EAAK,IAC/CkhH,EAAIvqE,WAAa,EAAMz5B,GACvBgkG,EAAI3kE,eAAiB,IACrB2kE,EAAInqE,aAAc,IACb3H,SAAW8jB,EAAKzzB,QAAQ4M,YAAY60E,GAEzC3iC,EAAWr+C,MAKL5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,OAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAEpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,GAAO,EAAK,IAC/CkhH,EAAInqE,aAAc,IACbtX,QAAQ4M,YAAY60E,GAEzB3iC,EAAWr+C,MAKL5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAK,SAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGI,eAAgB,EACnBJ,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAEpB4nG,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAW60E,EAAUr+C,EAAM,IAAIlgC,GAAO,EAAK,OAC1Cy/B,QAAQ4M,YAAY60E,OAEnBC,EAAM,IAAIrrE,GAChBqrE,EAAIz3G,WAAWo7F,EAAQ5kE,EAAM,IAAIlgC,GAAO,EAAK,IAAO,IAAIA,GAAO,EAAK,IAEpEmhH,EAAI1qE,cAAgB,IACpB0qE,EAAIpqE,aAAc,IAEbzH,SAAW4jB,EAAKzzB,QAAQ4M,YAAY80E,OAKnC7nG,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAK,SAEd8I,EAAK,IAAIN,UACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,IACRmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,kEAKhB7U,UACNA,OACD,SACE6qC,SAAS+xE,aAAa5iG,KAAK6wB,SAASgyE,uBACpChyE,SAASp3B,WAAW8oB,UAAS,aAG/B,SACEoO,SAASiyE,aAAa5iG,KAAK2wB,SAASkyE,uBACpClyE,SAASl3B,WAAW8oB,UAAS,iCAK5BqqD,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,oDACtCA,YAAchB,OACb9iD,EAAS7mB,KAAK2wB,SAASmyE,eAAel2B,EAASxiD,IACrDg8C,GAAYqF,WAAW,EAAGzrE,KAAK2qE,oCAA8B9jD,EAAOioD,QAAQ,UACvEnE,YAAchB,6CAIZ,IAAIg5B,SA7HkB3vC,IACR2vC,WAAU,OCZtBI,sEAGiB,OAMlBp/E,EAAgB,IAAIN,GACpBgjE,EAAiB5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEzC9oB,EAAqB,IAAIwkB,GAC/BxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAuB,IAAI0e,GACjC1e,EAAM9X,SAAW,MAEZ,IAAIxF,EAAI,EAAGA,EAAIwlH,EAAYvB,UAAWjkH,EAAG,KACtComC,EAAgB,IAAIN,GAC1BM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,EAAM,EAAM/G,KAE5B2vC,SAAS3vC,GAAKk3D,EAAKzzB,QAAQgqD,WAAWrnD,KAEtCuJ,SAAS3vC,GAAGovF,cAAc9xE,EAAO,KAEjCqyB,SAAS3vC,GAAGkvF,kBAAkB,IAAIlrF,GAAO,GAAM,uEAK9CqrF,2CACCA,6CAgBJ,IAAIm2B,SApDkB/vC,IACR+vC,WAAkB,OCD9BC,kFAGsB,aAChB,YACD,IAKTz/C,gFAIA,IAAIhmE,EAAI,EAAGA,EAAIylH,EAAWxB,UAAWjkH,EAAG,KACvCK,EAAIqB,GAAe,GAAM,IACzBwH,EAAIxH,GAAe,GAAM,IAI7BrB,EAAIO,EAAQP,GAAI,EAAK,GACrB6I,EAAItI,EAAQsI,GAAI,EAAK,QAChBw8G,cAAc1lH,GAAK,IAAIgE,GAAO3D,EAAG6I,QAGnCjG,QAAUwiH,EAAWxB,yCAGZx7G,UACNA,OACD,SACEk9G,QAAUljG,KAAKkjG,iBAGjB,SACE3/C,yCAKCqpB,2CACCA,OAEL/xE,EAAQ,IAAI6f,GAClB7f,EAAMvW,IAAI0b,KAAKijG,cAAejjG,KAAKxf,SAEnC4lF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,qDACtCA,YAAchB,GAEnBvD,GAAY7oE,YAAY1C,EAAM7a,WAAY6a,EAAMra,QAAS,IAAI8lB,GAAQ,GAAK,GAAK,SAE1E,IAAI/oB,EAAI,EAAGA,EAAIyiB,KAAKxf,UAAWjD,EAClC6oF,GAAY1rE,UAAUsF,KAAKijG,cAAc1lH,GAAI,EAAK,IAAI+oB,GAAQ,GAAK,GAAK,KACxE8/D,GAAY86B,gBACVlhG,KAAKijG,cAAc1lH,GAAGK,EAAI,IAC1BoiB,KAAKijG,cAAc1lH,GAAGkJ,EAAI,cACvBlJ,IAIFsd,EAAM6X,kBACJi4D,YAAc,GAGjB3qE,KAAKkjG,aACF3/C,qDAKA,IAAIy/C,SAtEiBhwC,IACPgwC,WAAU,OCOtBG,qEAIM,MAKT9c,EAAS5xC,EAAKzzB,QAAQgqD,WAAW,IAAI3nD,IAGnCM,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGM,YAAa,EAChBN,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,GAAO,GAAM,GAAM,GACjDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAK,GAAM,IAAIt5B,IAAQ,GAAM,GAAM,GAClDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAM,GAAK,IAAIt5B,GAAO,EAAK,IAAO,GACjDkgC,EAAKkrD,cAAc9xE,EAAO,GAC1BA,EAAMggB,SAAS,GAAM,GAAK,IAAIt5B,GAAO,GAAM,IAAO,GAClDkgC,EAAKkrD,cAAc9xE,EAAO,OAEpBgyF,EAAK,IAAItvD,UACfsvD,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQioB,EACXorE,EAAGtjE,aAAajlC,IAAI,EAAK,IACzBuoG,EAAGrjE,aAAallC,IAAI,EAAK,GACzBuoG,EAAGr1D,eAAiB,EACpBq1D,EAAG30D,WAAa,IAAOz5B,GACvBouF,EAAG/uD,eAAiB,IACpB+uD,EAAGv0D,aAAc,IACZw0D,QAAUr4C,EAAKzzB,QAAQ4M,YAAYi/D,KAGrCrsG,QAAU,6DAGLosF,8CACCA,GAEP5sE,KAAKxf,QAAU2iH,EAAQ3B,QAAS,KAC5B79E,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOzhB,KAAKghB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,KAAO,MACtB4G,EAAKkrD,cAAc9xE,EAAO,KAExBmF,KAAKxf,mDAKF,IAAI2iH,SA7DcnwC,IACJmwC,WAAU,QC2H9BC,GApHCC,2EACW,YACmB,IAAI9hH,cACH,IAAIA,uEAKrCqZ,EACA9W,EACAZ,EACA8pB,OAGMiD,EADerV,EAAQkoC,UACFpc,qBACvBzW,GAEY,IADQA,EAAS1gB,OAIrB,QAIP+zG,OAAQ,OACRC,QAAQ7/G,KAAKI,QACb0zB,SAAS9zB,KAAKR,GAKZ8pB,UA/B0B03B,IAqC/B8+D,2EACW,YACmB,IAAIjiH,cACH,IAAIA,uEAKrCqZ,EACA9W,EACAZ,EACA8pB,OAGMiD,EADerV,EAAQkoC,UACFpc,qBACvBzW,GAEY,IADQA,EAAS1gB,OAIrB,QAIP+zG,OAAQ,OACRC,QAAQ7/G,KAAKI,QACb0zB,SAAS9zB,KAAKR,GAIZ,UA9BsBwhD,IAqC3B++D,6EAEwBliH,GAAOymB,UAAUy7F,EAAwBC,wBACxCniH,GAAOymB,UAAUy7F,EAAwBC,sBACrD,sEAKf9oG,EACA9W,EACAZ,EACA8pB,OAGMiD,EADerV,EAAQkoC,UACFpc,qBACvBzW,GAEY,IADQA,EAAS1gB,OAIrB,QAMP+7E,SAAStrE,KAAKxf,SAASkD,KAAKI,QAC5BgK,UAAUkS,KAAKxf,SAASkD,KAAKR,KAChC8c,KAAKxf,QAEHwf,KAAKxf,UAAYijH,EAAwBC,WAGpC,EAIF,UAtC2Bh/D,IACrB++D,cAAa,EAyC9B,SAAKL,GACHA,6BACAA,qBACAA,+BAHF,CAAKA,KAAAA,YAMQ/uF,yEAGW,aACmB,gBACF,cACL,IAAIkF,YACR,IAAI8F,aAEhB,WAEY+jF,GAAYO,cAKnC,IAAIpmH,EAAI,EAAGA,EAAI,IAAKA,IAClBqmH,WAAWrmH,GAAK,IAAIm9B,OAKnBiJ,EAAK,IAAIN,GACTgjE,EAASrxB,EAAKh0C,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItB9a,EAAqB,GAG3BA,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BA,EAAqB,GAG3BA,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BmC,EAAI,EACJnE,EAAImE,GAAK,EAAM4U,GAAO,IACtB/K,EAAI+K,GAAO,GAAO/Y,EAElBgC,EAAqB,GAG3BA,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG,GAClChM,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,GAClCgC,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,EAAIgO,GACtChM,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG7J,GAClCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG7J,GACnCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,EAAIgO,GACvChM,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,GACnCgC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG,KAE9B63G,WAAW,GAAGt/G,IAAIvE,EAAU,KAI5B6jH,WAAW,GAAG/oF,SAAS,GAAK,MAI5BgpF,SAAS9gH,SAAW,KAIpB+gH,OAAOx/G,IAAI,IAAI/C,IAAQ,EAAG,GAAI,IAAIA,GAAO,EAAG,MAG9CwiH,YAAc,MACd,IAAIxmH,EAAI,EAAGA,EAAI82B,EAAQ2vF,cAAezmH,IACpC2vC,SAAS3vC,GAAK,cAGhB0mH,QAAU,IAEVC,OAASd,GAAYO,2EAGVp0G,OACV40G,EAAWnkG,KAAKktB,SAASltB,KAAK+jG,aACnB,OAAbI,SACGnjF,QAAQwrD,YAAY23B,QACpBj3E,SAASltB,KAAK+jG,aAAe,UAG9BpgF,EAAgB,IAAIN,GAEpBzlC,EAAYqB,GAAe,GAAM,IACjCwH,EAAYxH,EAAc,EAAK,IACrC0kC,EAAGve,SAAS9gB,IAAI1G,EAAG6I,GACnBk9B,EAAGnlB,MAAQvf,GAAewf,GAAOA,IAEjCklB,EAAG1T,SAAW,GACd0T,EAAG1T,SAAS1gB,MAAQA,EAEN,IAAVA,IACFo0B,EAAGH,eAAiB,SAGhB4gF,EAAYpkG,KAAKktB,SAASltB,KAAK+jG,aAAe/jG,KAAKghB,QAAQgqD,WAAWrnD,MAExEp0B,EAAQ,EAAG,KACPm9E,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQmF,KAAK4jG,WAAWr0G,GAC3Bm9E,EAAGhsD,SAAW,GACd0jF,EAASz3B,cAAcD,QAClB,GAAIn9E,EAAQ,EAAG,KACdm9E,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQmF,KAAK6jG,SAChBn3B,EAAGhsD,SAAW,GACd0jF,EAASz3B,cAAcD,OAClB,KACCA,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQmF,KAAK8jG,OAChBp3B,EAAGhsD,SAAW,GACd0jF,EAASz3B,cAAcD,QAGpBq3B,aAAe/jG,KAAK+jG,YAAc,GAAK1vF,EAAQ2vF,sDAI/C,IAAIzmH,EAAI,EAAGA,EAAI82B,EAAQ2vF,cAAezmH,EAAG,KACtCkkC,EAAOzhB,KAAKktB,SAAS3vC,MACd,OAATkkC,cACGT,QAAQwrD,YAAY/qD,aACpByL,SAAS3vC,GAAK,wCAMTyI,UACNA,OACD,QACA,QACA,QACA,QACA,QACA,SACEglF,WAAW8H,SAAS9sF,EAAK,IAAM,aAGjC,SACEwmF,wBAGF,IACCxsE,KAAKkkG,SAAWd,GAAYO,eACzBO,OAASd,GAAYiB,MACjBrkG,KAAKkkG,SAAWd,GAAYiB,WAChCH,OAASd,GAAYkB,WACjBtkG,KAAKkkG,SAAWd,GAAYkB,kBAChCJ,OAASd,GAAYO,yCAKtB/2B,OACJ23B,GAAuB33B,EAASC,OAASD,EAASE,0DAE7CF,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,sDACtCA,YAAchB,GACX3pE,KAAKkkG,aACNd,GAAYO,UACfv9B,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,0EAICy4B,GAAYiB,MACfj+B,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,yDAGxCy4B,GAAYkB,WACfl+B,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,2DAKDA,YAAchB,OAEbvI,EAAI,GACJhiB,EAAS,IAAI79D,GAAO,EAAK,IACzBV,EAAI,IAAIU,GAAO6/E,EAAI5gE,GAAMR,KAAKikG,SAAU7iC,EAAI9gE,GAAMN,KAAKikG,UACvD5kD,EAAS99D,GAAOskB,MAAMu5C,EAAQv+D,EAAG,IAAIU,OAEvCye,KAAKkkG,SAAWd,GAAYO,UAAW,KACnCt1F,EAAW,IAAIg1F,WAChBriF,QAAQ3M,QAAQhG,EAAU+wC,EAAQC,GAEnChxC,EAASi1F,MAAO,CAClBl9B,GAAY1rE,UAAU2T,EAASk1F,QAAS,EAAK,IAAIj9F,GAAQ,GAAK,GAAK,KACnE8/D,GAAY/rE,YAAY+kD,EAAQ/wC,EAASk1F,QAAS,IAAIj9F,GAAQ,GAAK,GAAK,SAClEk+F,EAAOjjH,GAAOskB,MAClBwI,EAASk1F,QACThiH,GAAO87B,MAAM,GAAKhP,EAASmJ,SAAUj2B,GAAOE,MAC5C,IAAIF,IAEN6kF,GAAY/rE,YAAYgU,EAASk1F,QAASiB,EAAM,IAAIl+F,GAAQ,GAAK,GAAK,UAEtE8/D,GAAY/rE,YAAY+kD,EAAQC,EAAQ,IAAI/4C,GAAQ,GAAK,GAAK,UAE3D,GAAItG,KAAKkkG,SAAWd,GAAYiB,MAAO,KACtCh2F,EAAW,IAAIm1F,WAChBxiF,QAAQ3M,QAAQhG,EAAU+wC,EAAQC,GAEnChxC,EAASi1F,MAAO,CAClBl9B,GAAY1rE,UAAU2T,EAASk1F,QAAS,EAAK,IAAIj9F,GAAQ,GAAK,GAAK,KACnE8/D,GAAY/rE,YAAY+kD,EAAQ/wC,EAASk1F,QAAS,IAAIj9F,GAAQ,GAAK,GAAK,SAClEk+F,EAAOjjH,GAAOskB,MAClBwI,EAASk1F,QACThiH,GAAO87B,MAAM,GAAKhP,EAASmJ,SAAUj2B,GAAOE,MAC5C,IAAIF,IAEN6kF,GAAY/rE,YAAYgU,EAASk1F,QAASiB,EAAM,IAAIl+F,GAAQ,GAAK,GAAK,UAEtE8/D,GAAY/rE,YAAY+kD,EAAQC,EAAQ,IAAI/4C,GAAQ,GAAK,GAAK,UAE3D,GAAItG,KAAKkkG,SAAWd,GAAYkB,WAAY,KAC3Cj2F,EAAW,IAAIo1F,QAChBziF,QAAQ3M,QAAQhG,EAAU+wC,EAAQC,GACvC+mB,GAAY/rE,YAAY+kD,EAAQC,EAAQ,IAAI/4C,GAAQ,GAAK,GAAK,SAEzD,IAAI/oB,EAAI,EAAGA,EAAI8wB,EAAS7tB,UAAWjD,EAAG,KACnCgG,EAAI8qB,EAASi9D,SAAS/tF,GACtBiB,EAAI6vB,EAASvgB,UAAUvQ,GAC7B6oF,GAAY1rE,UAAUnX,EAAG,EAAK,IAAI+iB,GAAQ,GAAK,GAAK,KACpD8/D,GAAY/rE,YAAY+kD,EAAQ77D,EAAG,IAAI+iB,GAAQ,GAAK,GAAK,SACnDk+F,EAAOjjH,GAAOskB,MAAMtiB,EAAGhC,GAAO87B,MAAM,GAAK7+B,EAAG+C,GAAOE,MAAO,IAAIF,IACpE6kF,GAAY/rE,YAAY9W,EAAGihH,EAAM,IAAIl+F,GAAQ,GAAK,GAAK,MAIvDi+F,SACGN,SAAY,IAAOxlG,GAAS,+CA+C5B,IAAI4V,SA9Sc2+C,IACZ3+C,eAAc,QC7CnBowF,GCrFCC,+DAMHlpG,EAAI,IAAIja,GAAO,EAAK,KACrBy/B,QAAQ0lE,WAAWlrF,OAElBwxB,EAAS,IAAI7rB,MAAM,GAEnBqtC,EAAS,IAAIrtC,MAAM,GAGjBwiB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,GACrBq/B,EAAGnlB,MAAQ,EACXmlB,EAAGe,eAAepgC,IAAI,EAAK,GAC3Bq/B,EAAGL,gBAAkB,EACrBK,EAAGJ,cAAgB,EACnBI,EAAGH,eAAiB,EACpBG,EAAGM,YAAa,EAChBN,EAAGQ,OAAQ,EACXR,EAAGI,eAAgB,EACnBJ,EAAGE,QAAS,EACZF,EAAGU,QAAS,EACZV,EAAGF,aAAe,EAElBuJ,EAAO,GAAKynB,EAAKzzB,QAAQgqD,WAAWrnD,OAI5B+oD,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,EACjB+rD,EAAGzyD,QAAU,EACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAIwkB,GAClBxkB,EAAM9X,SAAW,iBACjB8X,EAAMlG,UAAUrQ,IAAI,EAAK,GACzBuW,EAAM7G,UAAU1P,IAAI,EAAK,GACzBuW,EAAM3G,UAAU5P,IAAI,iBAAoB,GACxCuW,EAAM5F,UAAU3Q,IAAI,EAAK,GACzBuW,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EAErB23E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAIlBA,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,EACjB+rD,EAAGzyD,QAAU,EACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAIwkB,GAClBxkB,EAAM9X,SAAW,iBACjB8X,EAAMlG,UAAUrQ,IAAI,EAAK,GACzBuW,EAAM7G,UAAU1P,IAAI,EAAK,mBACzBuW,EAAM3G,UAAU5P,IAAI,iBAAoB,mBACxCuW,EAAM5F,UAAU3Q,IAAI,EAAK,GACzBuW,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EAErB23E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAIlBA,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,EACjB+rD,EAAGzyD,QAAU,EACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAIwkB,GAClBxkB,EAAM9X,SAAW,iBACjB8X,EAAMlG,UAAUrQ,IAAI,EAAK,GACzBuW,EAAM7G,UAAU1P,IAAI,EAAK,mBACzBuW,EAAM3G,UAAU5P,IAAI,EAAK,GACzBuW,EAAM5F,UAAU3Q,IAAI,EAAK,GACzBuW,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EAErB23E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAIlBA,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,EACjB+rD,EAAGzyD,QAAU,EACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAIwkB,GAClBxkB,EAAM9X,SAAW,iBACjB8X,EAAMlG,UAAUrQ,IAAI,EAAK,GACzBuW,EAAM7G,UAAU1P,IAAI,iBAAoB,mBACxCuW,EAAM3G,UAAU5P,IAAI,iBAAoB,GACxCuW,EAAM5F,UAAU3Q,IAAI,EAAK,GACzBuW,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EAErB23E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAKpB/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,iBAAmB,KACnCq/B,EAAGnlB,MAAQ,EACXmlB,EAAGe,eAAepgC,IAAI,EAAK,GAC3Bq/B,EAAGL,gBAAkB,EACrBK,EAAGJ,cAAgB,GACnBI,EAAGH,eAAiB,GACpBG,EAAGM,YAAa,EAChBN,EAAGQ,OAAQ,EACXR,EAAGI,eAAgB,EACnBJ,EAAGE,QAAS,EACZF,EAAGU,QAAS,EACZV,EAAGF,aAAe,EAElBuJ,EAAO,GAAKynB,EAAKzzB,QAAQgqD,WAAWrnD,OAI5B+oD,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,EACdgsD,EAAG/rD,YAAc,GACjB+rD,EAAGzyD,QAAU,GACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAI6f,GAEZ7kB,EAAKtU,GAAOymB,UAAU,GAC5BnS,EAAG,GAAGvR,IAAI,kBAAmB,kBAC7BuR,EAAG,GAAGvR,KAAK,iBAAmB,kBAC9BuR,EAAG,GAAGvR,KAAK,kBAAoB,kBAC/BuR,EAAG,GAAGvR,IAAI,mBAAoB,kBAC9BuW,EAAMvW,IAAIuR,EAAI,GAEd62E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAKpB/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,kBAAoB,KACpCq/B,EAAGnlB,MAAQ,EACXmlB,EAAGe,eAAepgC,IAAI,EAAK,GAC3Bq/B,EAAGL,gBAAkB,EACrBK,EAAGJ,cAAgB,GACnBI,EAAGH,eAAiB,GACpBG,EAAGM,YAAa,EAChBN,EAAGQ,OAAQ,EACXR,EAAGI,eAAgB,EACnBJ,EAAGE,QAAS,EACZF,EAAGU,QAAS,EACZV,EAAGF,aAAe,EAElBuJ,EAAO,GAAKynB,EAAKzzB,QAAQgqD,WAAWrnD,OAI5B+oD,EAAK,IAAIjsD,GACfisD,EAAGhsD,SAAW,EACdgsD,EAAG/rD,YAAc,GACjB+rD,EAAGzyD,QAAU,GACbyyD,EAAGrqD,UAAW,EACdqqD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,MACrBmsD,EAAGxqD,OAAO1B,WAAa,MAEjB3lB,EAAQ,IAAI6f,GAEZ7kB,EAAKtU,GAAOymB,UAAU,GAC5BnS,EAAG,GAAGvR,IAAI,kBAAoB,kBAC9BuR,EAAG,GAAGvR,IAAI,iBAAmB,kBAC7BuR,EAAG,GAAGvR,KAAK,kBAAmB,kBAC9BuR,EAAG,GAAGvR,KAAK,mBAAoB,kBAC/BuW,EAAMvW,IAAIuR,EAAI,GAEd62E,EAAG7xE,MAAQA,EAEXmyB,EAAO,GAAG2/C,cAAcD,OAKpB/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,GACrBq/B,EAAGnlB,MAAQ,EACXmlB,EAAGe,eAAepgC,IAAI,EAAK,GAC3Bq/B,EAAGL,gBAAkB,EACrBK,EAAGJ,cAAgB,EACnBI,EAAGH,eAAiB,EACpBG,EAAGM,YAAa,EAChBN,EAAGQ,OAAQ,EACXR,EAAGI,eAAgB,EACnBJ,EAAGE,QAAS,EACZF,EAAGU,QAAS,EACZV,EAAGF,aAAe,EAElBuJ,EAAO,GAAKynB,EAAKzzB,QAAQgqD,WAAWrnD,OAI9BkpE,EAAK,IAAItvD,GACfsvD,EAAGvzF,MAAQ0zB,EAAO,GAClB6/D,EAAGrzF,MAAQwzB,EAAO,GAClB6/D,EAAG7jE,kBAAmB,EACtB6jE,EAAGtjE,aAAajlC,IAAI,EAAK,GACzBuoG,EAAGrjE,aAAallC,IAAI,iBAAmB,KACvCuoG,EAAGr1D,eAAiB,EACpBq1D,EAAGz0D,aAAc,EACjBy0D,EAAGnvD,WAAa,EAChBmvD,EAAGjvD,WAAa,EAChBivD,EAAGv0D,aAAc,EACjBu0D,EAAG30D,WAAa,EAChB20D,EAAG/uD,eAAiB,EACpB0Q,EAAO,GAAKiG,EAAKzzB,QAAQ4M,YAAYi/D,OAI/BA,EAAK,IAAIx1D,UACfw1D,EAAGvzF,MAAQ0zB,EAAO,GAClB6/D,EAAGrzF,MAAQwzB,EAAO,GAClB6/D,EAAG7jE,kBAAmB,EACtB6jE,EAAGtjE,aAAajlC,IAAI,EAAK,GACzBuoG,EAAGrjE,aAAallC,KAAK,kBAAoB,GACzCuoG,EAAGt1D,WAAWjzC,KAAK,EAAK,GACxBuoG,EAAGr1D,eAAiB,EACpBq1D,EAAGz0D,aAAc,EACjBy0D,EAAGj1D,kBAAoB,GACvBi1D,EAAG/0D,iBAAmB,EACtB+0D,EAAGv0D,aAAc,EACjBu0D,EAAG30D,WAAa,EAChB20D,EAAG70D,cAAgB,GACnBwW,EAAO,GAAKiG,EAAKzzB,QAAQ4M,YAAYi/D,8DAK7BjgB,2CACCA,6CAIJ,IAAI83B,SAtRgB1xC,ICIlB9hB,6DAMJlwB,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAK,QAGlCojH,EAAgB,GAGlBte,EAAS,KAGL1iE,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,IACrB+hG,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAG3B9oB,EAAQ,IAAIwkB,GAGZulF,EAAK,IAAInkF,GACfmkF,EAAG/pG,MAAQA,EACX+pG,EAAG3qF,QAAU,EACb2qF,EAAGjkF,YAAcgkF,EAGjB9pG,EAAMvW,IAAI,IAAI/C,IAAQ,IAAO,IAAO,IAAIA,IAAQ,GAAM,KACtD8kG,EAAO1Z,cAAci4B,GAGrB/pG,EAAMvW,IAAI,IAAI/C,GAAO,IAAO,IAAO,IAAIA,GAAO,GAAM,KACpD8kG,EAAO1Z,cAAci4B,GAGrB/pG,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,IAAO,IAAIA,GAAO,GAAM,KACpD8kG,EAAO1Z,cAAci4B,GAGrB/pG,EAAMvW,IAAI,IAAI/C,IAAQ,IAAO,IAAO,IAAIA,GAAO,IAAO,KACtD8kG,EAAO1Z,cAAci4B,OAKfl2G,EAAM,IAAI/M,GAChB+M,EAAIpN,EAAE8hB,SAAS,MAAS3E,IACxB/P,EAAInL,EAAEG,KAAKtC,GAAM+N,MAAMT,EAAIpN,EAAG,IAAIC,GAAO,EAAK,GAAM,IAAIA,SAGlDxB,EAAW,GACjBA,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,IAAQ,EAAK,GAAM,IAAIA,IAChExB,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,GAAO,EAAK,GAAM,IAAIA,IAC/DxB,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,GAAO,EAAK,IAAM,IAAIA,QAGzDkN,EAAQ,IAAIisB,GAClBjsB,EAAMnK,IAAIvE,EAAU,OAGd8kH,EAAM,IAAIpkF,GAChBokF,EAAIhqG,MAAQpM,EACZo2G,EAAI5qF,QAAU,MAGRprB,EAAM,IAAIlN,GAChBkN,EAAIvN,EAAE8hB,UAAU,MAAS3E,IACzB5P,EAAItL,EAAEG,KAAKtC,GAAM+N,MAAMN,EAAIvN,EAAG,IAAIC,IAAQ,EAAK,GAAM,IAAIA,KAEzDxB,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,IAAQ,EAAK,GAAM,IAAIA,IAChExB,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,GAAO,EAAK,GAAM,IAAIA,IAC/DxB,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,GAAO,EAAK,IAAM,IAAIA,QAGzDqN,EAAQ,IAAI8rB,GAClB9rB,EAAMtK,IAAIvE,EAAU,OAGd+kH,EAAM,IAAIrkF,GAChBqkF,EAAIjqG,MAAQjM,EACZk2G,EAAI7qF,QAAU,MAGR0J,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGH,eAAiB,EACpBG,EAAGJ,cAAgB,GAEnBI,EAAGve,SAAS9gB,IAAI,EAAK,GACrBq/B,EAAGnlB,MAAQC,GACXklB,EAAGM,YAAa,IACXlD,OAAS0zB,EAAKzzB,QAAQgqD,WAAWrnD,KACjC5C,OAAO4rD,cAAck4B,KACrB9jF,OAAO4rD,cAAcm4B,OAKpBjqG,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,QAGd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,WAEGnjC,EAAI,EAAGA,EAAI,KAAMA,EAAG,KAE7BomC,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,IAAI,EAAK,EAAM,KAAO/G,OAE5BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAErClC,EAAKkrD,cAAcD,OAGbv1E,EAAU,GAEViiB,EAAIqI,EAAKqsC,aAET30C,EAAOsI,EAAK2M,UAIZrqC,EAAS+S,GAAQ,EAAMsiB,EAAKD,GAG5B0zE,EAAK,IAAIl+D,GACfk+D,EAAGtjE,aAAa1lC,UAChBgpG,EAAGrjE,aAAa3lC,UAChBgpG,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQioB,EACXorE,EAAG7jE,kBAAmB,EACtB6jE,EAAG39D,SAAW/V,EAAOhiB,EACrB01F,EAAGz9D,UAAYjW,EAAOp1B,EAASoT,IAE1B6pB,QAAQ4M,YAAYi/D,yEAKf7mG,UACNA,OACD,QAGK0W,EAAIsD,KAAK+gB,OAAOua,eAAe,IAAI/5C,GAAO,GAAM,KAAQ,IAAIA,IAE5DgC,EAAIyc,KAAK+gB,OAAO2G,cAAc,IAAInmC,GAAO,EAAK,GAAM,IAAIA,SACzDw/B,OAAOmwB,WAAWx0C,EAAGnZ,aAIzB,SAEIw9B,OAAO2+C,YAAY,cAIvB,SAEI3+C,OAAO2+C,aAAa,gDAKhB15E,gCAGL4mF,2CACCA,6CAIJ,IAAI17B,SAnLiB8hB,ICHnB+xC,+EAEgB,MAMjBphF,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,OACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/BxzB,EAAO,IAAIkvB,GAEjBlvB,EAAK7L,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IAClDkgC,EAAKkrD,cAAcx8E,EAAM,OAEnB0K,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,GAAO,GAAK,GAAM,GAC/CkgC,EAAKkrD,cAAc9xE,EAAO,OAIpB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QAGfuW,EAAQ,IAAI6f,UAClB7f,EAAMggB,SAAS,EAAK,MAEfkG,OAAS0zB,EAAKzzB,QAAQgqD,WAAWrnD,KACjC5C,OAAO4rD,cAAc9xE,EAAO,KAE5B8pB,kBAAoB1lC,GAAe,GAAM,MAEzC8hC,OAAO0rD,kBAAkB,IAAIlrF,GAAO,GAAM,QAC1Cw/B,OAAOikF,mBAAmBvwD,EAAK9vB,mBAqBtCrlC,GAAYsI,QACZ6B,GAAY7B,uEAIZtI,GAAYsI,QACZ6B,GAAY7B,aAEPm5B,OAAOuF,gBAAgB,IAAI/kC,GAAO,EAAK,IAAO,QAC9CojC,kBAAoB1lC,GAAe,GAAM,SACzC8hC,OAAO0rD,kBAAkB,IAAIlrF,GAAO,GAAM,WAC1Cw/B,OAAOikF,mBAAmBhlG,KAAK2kB,gDAG1BioD,2CACCA,GAEPttF,GAAYC,MAAQ,IAEtB6mF,GAAYqF,WACV,EACAzrE,KAAK2qE,iCACUrrF,GAAYC,MAAMuvF,QAAQ,iCACvCxvF,GAAY6C,MAAQ7C,GAAYC,OAChCuvF,QAAQ,gCAAuBxvF,GAAY+C,SAASysF,QAAQ,UAE3DnE,YAAchB,IAGjBlgF,GAAYlK,MAAQ,IAEtB6mF,GAAYqF,WACV,EACAzrE,KAAK2qE,uCACgBlhF,GAAYlK,oCAC/BkK,GAAYtH,MAAQsH,GAAYlK,OAChCuvF,QAAQ,gBAAOrlF,GAAYuC,wBAE1B2+E,YAAchB,GAGnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,iDAC0BlhF,GAAYqC,UAAYrC,GAAYlK,OAAOuvF,QACxE,gBACIrlF,GAAYuC,aAAa8iF,QAAQ,cAEpCnE,YAAchB,GAGnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,2CACqB,IAASlhF,GAAYwC,KAAQxC,GAAYlK,OAAOuvF,QAAQ,iBAChF,IAASrlF,GAAY0C,SACrB2iF,QAAQ,6BAEPnE,YAAchB,IAGjB3pE,KAAK+tE,YAAc,IAAO,QACvBk3B,mDAKA,IAAIF,SA7HqB/xC,ICCvBkyC,oEAEK,UACF,MAKR7e,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAE7CmrF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EAEXwrF,EAAO1Z,cAAcD,OAKf/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OAEfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,QAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,EACbwH,EAAKkrD,cAAcD,OAEby4B,EAAM,IAAI3vE,UAChB2vE,EAAIl6G,WAAWo7F,EAAQ5kE,GACvB0jF,EAAIj2E,SAAW,IACfi2E,EAAI/1E,UAAY,MACX09D,QAAUr4C,EAAKzzB,QAAQ4M,YAAYu3E,KAGrCC,MAAO,IACPpY,OAAS,iEAGAhnG,UACNA,OACD,SACEo/G,MAAQplG,KAAKolG,mCAKZx4B,GACN5sE,KAAKolG,MAAQx4B,EAASxiD,GAAK,SACxB4iE,QAAU,EAAMpgB,EAASxiD,QAI1BqL,EAAe,IAAIl0C,GACzBk0C,EAAa73C,EAAI,EAAM0iB,GAAM,EAAMN,KAAKgtF,QACxCv3D,EAAahvC,EAAI,EAAM,EAAM6Z,GAAM,EAAMN,KAAKgtF,YAGxCp3D,EAAgB,EAAM51B,KAAKgtF,YAE5BF,QAAQuY,gBAAgB5vE,QACxBq3D,QAAQwY,iBAAiB1vE,GAE9BwwC,GAAY1rE,UAAU+6B,EAAc,EAAK,IAAInvB,GAAQ,GAAK,GAAK,6CAEpDsmE,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,wBACtCA,YAAchB,6CAIZ,IAAIu7B,SAnFiBlyC,IJAnBuyC,sEACO,UACH,aACG,YACDd,GAAuBe,cAS9B7hF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,MACf4qF,WAAahkF,EAAKkrD,cAAc9xE,EAAO,KAEvC6qG,SAAW,MACXC,MAAQ,SAKPhiF,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,KAEhC5gC,SAAW,OACV8X,EAAQ,IAAI0e,UAClB1e,EAAM9X,SAAW0xD,EAAK1xD,WACjBs+G,YAAc5/E,EAAKkrD,cAAc9xE,EAAO,IAE7C4mB,EAAKgrD,kBAAkB,IAAIlrF,GAAO,GAAM,OAEnCy9C,QAAUylE,GAAuBe,yEAI1B9iF,EAAoB8hB,+CACnB9hB,EAAS8hB,OAElB7hB,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,cAErBH,IAAa3iB,KAAKylG,YAAc9iF,IAAa3iB,KAAKqhG,aAIlDx+E,IAAa7iB,KAAKylG,YAAc5iF,IAAa7iB,KAAKqhG,aAIrCrhG,KAAKqhG,YAAYv+D,UAAUvc,cAE/B9/B,EAAIuZ,KAAK2lG,MAAQ3lG,KAAKjd,SAAW,EAAMgC,IAClD29B,EAAQg8C,YAAW,gCAIXkO,2CACCA,6CAIJ,IAAI24B,SA/EuBvyC,KAmFtC,SAAYyxC,GACVA,6BACAA,yBACAA,0BAHF,CAAYA,KAAAA,YKtFCmB,+DAOH96B,EAAU,IAAIznD,GACpBynD,EAAQ1lE,SAAS9gB,IAAI,EAAK,QACpB+hG,EAAS5xC,EAAKzzB,QAAQgqD,WAAWF,GAEjCxtF,EAAI,GACJmyB,EAAI,IAAIluB,GAAO,EAAKjE,GAEpBuoH,EAAOpxD,EAAKqxD,QAAQzf,EAAQ7kF,GAAa,EAAG,EAAKlkB,GAEjDyoH,EAAW,IAAIxoE,UACrBwoE,EAASzsG,MAAQ+sF,EACjB0f,EAASvsG,MAAQqsG,EACjBE,EAASx8E,aAAa1lC,UACtBkiH,EAASv8E,aAAa9lC,KAAK+rB,KACtBuR,QAAQ4M,YAAYm4E,iEAIzBj2F,EACAk2F,EACAC,EACAp/G,EACAvJ,OAEkB28B,EAAU,GACXxK,EAAI,IAAIluB,GAAO,EAAKjE,GAGpBiG,EAAIusB,EAAOyW,cAAc1E,QAAQ5e,QAAQ+iG,GAAa1gH,QAAQmqB,GAE3Dq7D,EAAU,IAAIznD,GAClCynD,EAAQ/9E,OACR+9E,EAAQ1lE,SAAS1hB,KAAKH,OACLk+B,EAAOzhB,KAAKghB,QAAQgqD,WAAWF,GAEvBjwE,EAAQ,IAAI6f,MACrC7f,EAAMggB,SAAS,IAAOv9B,EAAGA,GACzBmkC,EAAKkrD,cAAc9xE,EAAOof,GAEtBgsF,IAAUL,EAAOM,eACZzkF,MAGQ71B,EAAK,IAAIrK,GAAOsF,GAASvJ,GACzBuO,EAAK,IAAItK,IAAQsF,GAASvJ,GAC1B6oH,EAAQnmG,KAAK8lG,QAAQrkF,EAAM71B,EAAIq6G,EAAQ,EAAG,GAAMp/G,EAAQvJ,GACxD8oH,EAAQpmG,KAAK8lG,QAAQrkF,EAAM51B,EAAIo6G,EAAQ,EAAG,GAAMp/G,EAAQvJ,GAE5CyoH,EAAW,IAAIxoE,UAC5CwoE,EAASzsG,MAAQmoB,EACjBskF,EAASv8E,aAAa9lC,KAAK+rB,GAE3Bs2F,EAASx8E,aAAa7lC,KAAKkI,GAC3Bm6G,EAASvsG,MAAQ2sG,OACZnlF,QAAQ4M,YAAYm4E,GAEzBA,EAASx8E,aAAa7lC,KAAKmI,GAC3Bk6G,EAASvsG,MAAQ4sG,OACZplF,QAAQ4M,YAAYm4E,GAElBtkF,+BAGGmrD,2CACCA,6CAIJ,IAAIg5B,SA3Ea5yC,IACH4yC,WAAU,MCDtBS,+DAOWv7B,EAAU,IAAIznD,GAClCynD,EAAQ1lE,SAAS9gB,IAAI,EAAK,QACpB+hG,EAAS5xC,EAAKzzB,QAAQgqD,WAAWF,GAErBxtF,EAAI,GACLmyB,EAAI,IAAIluB,GAAO,EAAKjE,GAEpBuoH,EAAOpxD,EAAKqxD,QAAQzf,EAAQ7kF,GAAa,EAAG,EAAKlkB,GAErCyoH,EAAW,IAAIxoE,UAC5CwoE,EAASzsG,MAAQ+sF,EACjB0f,EAASvsG,MAAQqsG,EACjBE,EAASx8E,aAAa1lC,UACtBkiH,EAASv8E,aAAa9lC,KAAK+rB,KACtBuR,QAAQ4M,YAAYm4E,iEAIzBj2F,EACAk2F,EACAC,EACAp/G,EACAvJ,OAEkB28B,EAAU,GACXxK,EAAI,IAAIluB,GAAO,EAAKjE,GAGpBiG,EAAIusB,EAAOyW,cAAc1E,QAAQ5e,QAAQ+iG,GAAa1gH,QAAQmqB,GAE3Dq7D,EAAU,IAAIznD,GAClCynD,EAAQ/9E,OACR+9E,EAAQ1lE,SAAS1hB,KAAKH,OACLk+B,EAAOzhB,KAAKghB,QAAQgqD,WAAWF,GAEvBjwE,EAAQ,IAAI6f,MACrC7f,EAAMggB,SAAS,IAAOv9B,EAAGA,GACzBmkC,EAAKkrD,cAAc9xE,EAAOof,GAEtBgsF,IAAUI,EAAeH,eACpBzkF,EAGT5mB,EAAMggB,SAASh0B,EAAQ,IAAOvJ,EAAG,IAAIiE,GAAO,GAAIjE,GAAI,GACpDmkC,EAAKkrD,cAAc9xE,EAAOof,OAETruB,EAAK,IAAIrK,GAAOsF,GAASvJ,GACzBuO,EAAK,IAAItK,IAAQsF,GAASvJ,GAC1B6oH,EAAQnmG,KAAK8lG,QAAQrkF,EAAM71B,EAAIq6G,EAAQ,EAAG,GAAMp/G,EAAQvJ,GACxD8oH,EAAQpmG,KAAK8lG,QAAQrkF,EAAM51B,EAAIo6G,EAAQ,EAAG,GAAMp/G,EAAQvJ,GAE5CyoH,EAAW,IAAIxoE,UAC5CwoE,EAASzsG,MAAQmoB,EACjBskF,EAASv8E,aAAa9lC,KAAK+rB,GAE3Bs2F,EAASx8E,aAAa7lC,KAAKkI,GAC3Bm6G,EAASvsG,MAAQ2sG,OACZnlF,QAAQ4M,YAAYm4E,GAEzBA,EAASx8E,aAAa7lC,KAAKmI,GAC3Bk6G,EAASvsG,MAAQ4sG,OACZplF,QAAQ4M,YAAYm4E,GAElBtkF,+BAGGmrD,2CACCA,6CAIJ,IAAIy5B,SA9EqBrzC,IACXqzC,WAAU,MCCtBC,+DAQD3iF,EAAK,IAAIN,GAETgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,OAEhBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAM,QAEf6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,KACT+kF,WAAahkF,EAAKkrD,cAAcD,WAItBnvF,EAAI,EAAGA,EAAI,IAAKA,EAAG,KAC5BomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,OAE3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,IACpB4G,EAAKkrD,cAAc9xE,EAAO,0EAId6nB,EAAoB8hB,+CACnB9hB,EAAS8hB,OAGlB7hB,EAAWD,EAAQE,cAEnBC,EAAWH,EAAQI,cAErBH,IAAa3iB,KAAKylG,YACpB/iF,EAAQ6jF,gBAAgB,GAGtB1jF,IAAa7iB,KAAKylG,YACpB/iF,EAAQ6jF,iBAAiB,gCAIjB35B,2CACCA,6CAIJ,IAAI05B,SArEmBtzC,ICGrBwzC,+DAULngB,EAAS,KAEL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItB4rG,EAAU,IAAIltF,GACpBktF,EAAQ1jH,SAAW,MAEbwuG,EAAM,IAAI72E,GAChB62E,EAAI12E,SAAS,GAAK,OAEZ6rF,EAAU,IAAIntF,GACpBmtF,EAAQ3jH,SAAW,MAEb4jH,EAAM,IAAItjF,GAChBsjF,EAAI55G,OACJ45G,EAAIvhG,SAAS9gB,IAAI,GAAM,OACjB6hH,EAAQ1xD,EAAKzzB,QAAQgqD,WAAW27B,GACtCR,EAAMx5B,cAAc85B,EAAS,OAEvBG,EAAM,IAAIvjF,GAChBujF,EAAI75G,OACJ65G,EAAIxhG,SAAS9gB,IAAI,GAAM,OACjB8hH,EAAQ3xD,EAAKzzB,QAAQgqD,WAAW47B,GACtCR,EAAMz5B,cAAc4kB,EAAK,OAEnBsV,EAAM,IAAIxjF,GAChBwjF,EAAI95G,OACJ85G,EAAIzhG,SAAS9gB,IAAI,GAAM,OACjBwiH,EAAQryD,EAAKzzB,QAAQgqD,WAAW67B,GACtCC,EAAMn6B,cAAc+5B,EAAS,OAEvBK,EAAM,IAAIxpE,GAChBwpE,EAAI97G,WAAWm7G,EAAOD,EAAOQ,EAAIvhG,cAC3BwrB,EAA0B6jB,EAAKzzB,QAAQ4M,YAAYm5E,GAEnDC,EAAM,IAAIzpE,GAChBypE,EAAI/7G,WAAWm7G,EAAOU,EAAOD,EAAIzhG,cAC3B0rB,EAA0B2jB,EAAKzzB,QAAQ4M,YAAYo5E,GAEnDC,EAAM,IAAI12E,GAChB02E,EAAI3tG,MAAQ6sG,EACZc,EAAIztG,MAAQstG,EACZG,EAAIr2E,OAASA,EACbq2E,EAAIn2E,OAASA,EACbm2E,EAAI58E,MAAQq8E,EAAQ3jH,SAAW0jH,EAAQ1jH,WAClCi+B,QAAQ4M,YAAYq5E,OAInBR,EAAU,IAAIltF,GACpBktF,EAAQ1jH,SAAW,MAEb2jH,EAAU,IAAIntF,GACpBmtF,EAAQ3jH,SAAW,MAEbwuG,EAAM,IAAI72E,GAChB62E,EAAI12E,SAAS,GAAK,OAEZ8rF,EAAM,IAAItjF,GAChBsjF,EAAI55G,OACJ45G,EAAIvhG,SAAS9gB,KAAK,EAAK,QACjB6hH,EAAQ1xD,EAAKzzB,QAAQgqD,WAAW27B,GACtCR,EAAMx5B,cAAc85B,EAAS,OAEvBM,EAAM,IAAIxpE,GAChBwpE,EAAIztG,MAAQ+sF,EACZ0gB,EAAIvtG,MAAQ2sG,EACZ9f,EAAO/8D,cAAcq9E,EAAIvhG,SAAU2hG,EAAIx9E,cACvC48E,EAAM78E,cAAcq9E,EAAIvhG,SAAU2hG,EAAIv9E,cACtCu9E,EAAIvvE,eAAiB2uE,EAAM7gG,WAAa+gF,EAAO/gF,aAC1CqrB,SAAW8jB,EAAKzzB,QAAQ4M,YAAYm5E,OAEnCH,EAAM,IAAIvjF,GAChBujF,EAAI75G,OACJ65G,EAAIxhG,SAAS9gB,IAAI,EAAK,QAChB8hH,EAAQ3xD,EAAKzzB,QAAQgqD,WAAW47B,GACtCR,EAAMz5B,cAAc+5B,EAAS,OAEvBM,EAAM,IAAIzpE,GAChBypE,EAAI/7G,WAAWo7F,EAAQ+f,EAAOQ,EAAIxhG,YAC7ByrB,SAAW4jB,EAAKzzB,QAAQ4M,YAAYo5E,OAEnCH,EAAM,IAAIxjF,GAChBwjF,EAAI95G,OACJ85G,EAAIzhG,SAAS9gB,IAAI,IAAK,QAChBwiH,EAAQryD,EAAKzzB,QAAQgqD,WAAW67B,GACtCC,EAAMn6B,cAAc4kB,EAAK,OAEnB2V,EAAM,IAAI7vE,GAChB6vE,EAAIj8G,WAAWo7F,EAAQygB,EAAOD,EAAIzhG,SAAU,IAAI7jB,GAAO,EAAK,IAC5D2lH,EAAItvE,kBAAoB,EACxBsvE,EAAIpvE,iBAAmB,EACvBovE,EAAI9uE,aAAc,IAEb+uE,SAAW1yD,EAAKzzB,QAAQ4M,YAAYs5E,OAEnCD,EAAM,IAAI12E,GAChB02E,EAAI3tG,MAAQ6sG,EACZc,EAAIztG,MAAQ4sG,EACZa,EAAIr2E,OAAS6jB,EAAK9jB,SAClBs2E,EAAIn2E,OAAS2jB,EAAK5jB,SAClBo2E,EAAI58E,MAAQq8E,EAAQ3jH,SAAW0jH,EAAQ1jH,WAClCqkH,SAAW3yD,EAAKzzB,QAAQ4M,YAAYq5E,OAEnCI,EAAM,IAAI92E,UAChB82E,EAAI/tG,MAAQ8sG,EACZiB,EAAI7tG,MAAQstG,EACZO,EAAIz2E,OAAS6jB,EAAK5jB,SAClBw2E,EAAIv2E,OAAS2jB,EAAK0yD,SAClBE,EAAIh9E,OAAS,EAAMq8E,EAAQ3jH,WACtBukH,SAAW7yD,EAAKzzB,QAAQ4M,YAAYy5E,8DAIjCz6B,2CACCA,6CAIJ,IAAI45B,SAxIYxzC,ICHdu0C,+DAKD5jF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,MAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,UAEP0G,EAAc,CAAC,EAAK,GAAK,GAAK,GAAK,IAAM,GAAK,GAE3CpjC,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,QAE3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAErC+oD,EAAG/rD,YAAcA,EAAYpjC,GAC7BkkC,EAAKkrD,cAAcD,qEAKbE,2CACCA,6CAIJ,IAAI26B,SAzCyBv0C,ICD3Bw0C,+DAMLnhB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,WAEP4yE,EAAK,IAAI1tD,GAEX2gC,EAAWumB,EACN9oG,EAAI,EAAGA,EAAIiqH,EAAWhG,UAAWjkH,EAAG,KACrComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,KAAgB,OAC3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAcD,OAEb59C,EAAS,IAAIvtC,GAAe,EAAMhE,EAAb,GAAgB,GAC3CsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAEzB/sB,EAAWr+C,MAKP5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,OAEP4yE,EAAK,IAAI1tD,GACf0tD,EAAGpjE,YAAc,EACjBojE,EAAGnjE,aAAe,WAEdo2C,EAAWumB,EACN9oG,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,QAC3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAcD,OAEb59C,EAAS,IAAIvtC,GAAe,EAAMhE,EAAb,GAAgB,IAC3CsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAEzB/sB,EAAWr+C,MAKP5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,WAEP4yE,EAAK,IAAI1tD,GAEX2gC,EAAWumB,EACN9oG,EAAI,EAAGA,EAAIiqH,EAAWhG,UAAWjkH,EAAG,KACrComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,IAAe,QAC1BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,MACrClC,EAAKkrD,cAAcD,GAEfnvF,EAAI,EAAG,KACHuxC,EAAS,IAAIvtC,GAAc,EAAMhE,EAAZ,EAAe,IAC1CsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAG3B/sB,EAAWr+C,MAKP5mB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,OAEP4yE,EAAK,IAAI1tD,GACf0tD,EAAGpjE,YAAc,EACjBojE,EAAGnjE,aAAe,WAEdo2C,EAAWumB,EACN9oG,EAAI,EAAGA,EAAIiqH,EAAWhG,UAAWjkH,EAAG,KACrComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAM,EAAM/G,EAAG,QACzBkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,MACrClC,EAAKkrD,cAAcD,GAEfnvF,EAAI,EAAG,KACHuxC,EAAS,IAAIvtC,GAAO,EAAM,EAAMhE,EAAG,IACzCsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAG3B/sB,EAAWr+C,MAIV,IAAIlkC,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBwC,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,SAExBsZ,EAAQ,IAAI6f,GAClB7f,EAAMvW,IAAIvE,OAEJ2sF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,MAEP0J,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,EAAe,IACnBk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,OAGhB,IAAInvF,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBsd,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,MAEP0J,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,EAAe,IACnBk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,qEAIXE,2CACCA,6CAIJ,IAAI46B,SA1KiBx0C,IACPw0C,WAAU,MCHtBC,+DAMD9jF,EAAK,IAAIN,GAETgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC11B,EAAK,IAAI1M,IAAQ,GAAM,GAC3B2M,EAAK,IAAI3M,IAAQ,GAAM,GACvBmmH,EAAK,IAAInmH,IAAQ,EAAK,GAElBomH,EAAK,IAAIpmH,GAAO,EAAK,GACzBqmH,EAAK,IAAIrmH,GAAO,EAAK,GACrBsmH,EAAK,IAAItmH,GAAO,EAAK,GACrBumH,EAAK,IAAIvmH,GAAO,GAAM,GAGlBsZ,EAAQ,IAAIwkB,GAElBxkB,EAAMvW,IAAI2J,EAAIC,GACd2M,EAAM9F,cAAe,EACrB8F,EAAM5F,UAAUvR,KAAKgkH,GACrBrhB,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAI4J,EAAIw5G,GACd7sG,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EACrB8F,EAAMlG,UAAUjR,KAAKuK,GACrB4M,EAAM5F,UAAUvR,KAAKikH,GACrBthB,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAIojH,EAAIC,GACd9sG,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EACrB8F,EAAMlG,UAAUjR,KAAKwK,GACrB2M,EAAM5F,UAAUvR,KAAKkkH,GACrBvhB,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAIqjH,EAAIC,GACd/sG,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EACrB8F,EAAMlG,UAAUjR,KAAKgkH,GACrB7sG,EAAM5F,UAAUvR,KAAKmkH,GACrBxhB,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAIsjH,EAAIC,GACdhtG,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EACrB8F,EAAMlG,UAAUjR,KAAKikH,GACrB9sG,EAAM5F,UAAUvR,KAAKokH,GACrBzhB,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAIujH,EAAIC,GACdjtG,EAAMpG,cAAe,EACrBoG,EAAMlG,UAAUjR,KAAKkkH,GACrBvhB,EAAO1Z,cAAc9xE,EAAO,OAKtB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAK,IACtBq/B,EAAGM,YAAa,MAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,GAEjB0+B,EAAKkrD,cAAc9xE,EAAO,OAKpB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,IACrBq/B,EAAGM,YAAa,MAEVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,UAClB7f,EAAMggB,SAAS,GAAK,IAEpB4G,EAAKkrD,cAAc9xE,EAAO,8DAIlB+xE,2CACCA,6CAIJ,IAAI66B,SApGez0C,ICIjB+0C,qEAGM,MAMTpkF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAG7CmrF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EAEXwrF,EAAO1Z,cAAcD,OAKb/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,KAChB0jH,aAAevzD,EAAKzzB,QAAQgqD,WAAWrnD,OAGtC9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,KACfmtF,aAAar7B,cAAc9xE,EAAO,OAMjC8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,EAAK,KACjBmhH,WAAahxD,EAAKzzB,QAAQgqD,WAAWrnD,OAGpC9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,GAAMkd,QAG/CiuE,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,IACRwrF,WAAW94B,cAAcD,OAGxB+1B,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAWwpD,EAAKuzD,aAAcvzD,EAAKgxD,WAAY,IAAIlkH,GAAO,EAAK,IACnEkhH,EAAI3kE,eAAiB,GACrB2kE,EAAInqE,aAAc,IACbtX,QAAQ4M,YAAY60E,OAGnBC,EAAM,IAAIrrE,GAChBqrE,EAAIz3G,WAAWo7F,EAAQ5xC,EAAKgxD,WAAY,IAAIlkH,GAAO,EAAK,GAAM,IAAIA,GAAO,EAAK,IAE9EmhH,EAAI1qE,cAAgB,IACpB0qE,EAAIpqE,aAAc,EAClBoqE,EAAI9qE,kBAAoB,GACxB8qE,EAAI5qE,iBAAmB,GACvB4qE,EAAItqE,aAAc,IAEbpX,QAAQ4M,YAAY80E,KAEpB57B,QAAU,MAMTnjD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OAEfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,SAGf6xD,EAAK,IAAIjsD,UACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,EAEbwH,EAAKkrD,cAAcD,kEAIP1mF,UACNA,OACD,SACEy/G,WAAWwC,qBAGb,SACExC,WAAWwC,qBAGb,SACExC,WAAWwC,gBACXxC,WAAWh5B,kBAAkB,IAAIlrF,IAAQye,KAAK8mE,QAAS,SACvD2+B,WAAWT,mBAAmB,iCAK7Bp4B,UAEN5sE,KAAKylG,WAAW5oG,UAA2C,KAEvDtZ,EAAIyc,KAAKylG,WAAW76G,eAAerH,EAEnCoB,EAAIqb,KAAKylG,WAAWh/E,qBAErBljC,EAAE3F,GAAK,IAAQ+G,EAAE/G,EAAI,GAAS2F,EAAE3F,EAAI,IAAQ+G,EAAE/G,EAAI,SAChD6nH,WAAWh5B,kBAAkB,IAAIlrF,IAAQoD,EAAE/G,EAAG+G,EAAE8B,4CAI9CmmF,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,qDACtCA,YAAchB,6CAIZ,IAAIo+B,SAzIgB/0C,ICFlBk1C,wEAG2B,iBACpB,MAMRvkF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAGxB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,MAChBy8B,OAAS0zB,EAAKzzB,QAAQgqD,WAAWrnD,OAEhC9oB,EAAQ,IAAI6f,UAClB7f,EAAMggB,SAAS,EAAK,EAAK,IAAIt5B,GAAO,EAAK,GAAM,KAC1C4mH,WAAa1zD,EAAK1zB,OAAO4rD,cAAc9xE,EAAO,mEAGrC7U,UACNA,OACD,OACqB,OAApBga,KAAKooG,WAAqB,KACtBvtG,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,EACjB8X,EAAMpO,IAAInI,IAAI,IAAM,QACf8jH,WAAapoG,KAAK+gB,OAAO4rD,cAAc9xE,EAAO,SAC9CkmB,OAAOwB,UAAS,aAIpB,IACqB,OAApBviB,KAAKooG,kBACFrnF,OAAOsnF,eAAeroG,KAAKooG,iBAC3BA,WAAa,UACbrnF,OAAOwB,UAAS,cAIpB,IACqB,OAApBviB,KAAKooG,kBACFE,UAAYtoG,KAAKsoG,cACjBF,WAAWG,UAAUvoG,KAAKsoG,yCAM3B17B,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,wDACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,8BAAwB3qE,KAAKsoG,SAAW,EAAI,SACtE39B,YAAchB,6CAIZ,IAAIu+B,SAlEmBl1C,ICYrBw1C,kCAiBLniB,kCAbQ,WACE,YACC,IAOVoiB,KAAO,IACPC,OAAS,KACT5hC,QAAU,OAIPnjD,EAAgB,IAAIN,GAC1BgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAqB,IAAIwkB,GAEzBqtD,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GAEd7lB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAcD,WAEfi8B,EAAe,CAAC,IAAM,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,KAAM,GAErE/qH,EAAI,GACNgrH,EAAK,EACDC,EAAK,EAEFtrH,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBurH,EAAaH,EAAGprH,GACtBsd,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAGgrH,GAAK,IAAIrnH,GAAO3D,EAAIirH,EAAIC,IAChDziB,EAAO1Z,cAAcD,GACrBk8B,EAAKE,EACLlrH,GAAKirH,MAGF,IAAItrH,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBurH,EAAaH,EAAGprH,GACtBsd,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAGgrH,GAAK,IAAIrnH,GAAO3D,EAAIirH,EAAIC,IAChDziB,EAAO1Z,cAAcD,GACrBk8B,EAAKE,EACLlrH,GAAKirH,EAGPhuG,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAI,GAAM,IACnDyoG,EAAO1Z,cAAcD,GAErB9uF,GAAK,GACLid,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAI,GAAM,IACnDyoG,EAAO1Z,cAAcD,GAErB9uF,GAAK,GACLid,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAI,GAAM,IACnDyoG,EAAO1Z,cAAcD,GAErB9uF,GAAK,GACLid,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAI,GAAM,IACnDyoG,EAAO1Z,cAAcD,GAErB9uF,GAAK,GACLid,EAAMvW,IAAI,IAAI/C,GAAO3D,EAAG,GAAM,IAAI2D,GAAO3D,EAAG,KAC5CyoG,EAAO1Z,cAAcD,OAKf/oD,EAAgB,IAAIN,GAC1BM,EAAGve,SAAS9gB,IAAI,IAAO,GACvBq/B,EAAG52B,WACG00B,EAAegzB,EAAKzzB,QAAQgqD,WAAWrnD,GAEvC4tE,EAAsB,IAAI72E,GAChC62E,EAAI12E,SAAS,GAAM,KACnB4G,EAAKkrD,cAAc4kB,EAAK,OAElB1E,EAAyB,IAAItvD,GACnCsvD,EAAG5hG,WAAWo7F,EAAQ5kE,EAAMA,EAAK8E,eACjCsmE,EAAGnvD,YAAe,EAAMj/B,GAAS,IACjCouF,EAAGjvD,WAAc,EAAMn/B,GAAS,IAChCouF,EAAGz0D,aAAc,IACZpX,QAAQ4M,YAAYi/D,GAEzBprE,EAAKsnF,oBAAoB,SAKnBnhG,EAAI,GACJ/M,EAAwB,IAAI6f,GAClC7f,EAAMggB,SAAS,EAAK,UAEd6xD,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,WAERmsE,EAAyB,IAAItvD,GAE/BuiC,EAAmBumB,EACd9oG,EAAI,EAAGA,EAAIqqB,IAAKrqB,EAAG,KACpBomC,EAAgB,IAAIN,GAC1BM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAQ,EAAM/G,GAAI,UAC5BkkC,EAAegzB,EAAKzzB,QAAQgqD,WAAWrnD,GAC7ClC,EAAKkrD,cAAcD,OAEb59C,EAAiB,IAAIvtC,GAAO,IAAQ,EAAMhE,GAAI,MACpDsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAEzB/sB,EAAWr+C,MAGPqN,EAAiB,IAAIvtC,GAAO,IAAQ,EAAMqmB,GAAI,MACpDilF,EAAG5hG,WAAW60E,EAAUumB,EAAQv3D,KAC3B9N,QAAQ4M,YAAYi/D,OAKnB0E,EAAsB,IAAI72E,GAChC62E,EAAI12E,SAAS,GAAK,QAGZ8I,EAAgB,IAAIN,GAC1BM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,IAAI,IAAO,IAChBmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAC1BgpD,cAAc4kB,EAAK,IAExB5tE,EAAGve,SAAS9gB,IAAI,IAAO,KAChBmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAC1BgpD,cAAc4kB,EAAK,IAExB5tE,EAAGve,SAAS9gB,IAAI,IAAO,KAChBmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAC1BgpD,cAAc4kB,EAAK,IAExB5tE,EAAGve,SAAS9gB,IAAI,IAAO,KAChBmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAC1BgpD,cAAc4kB,EAAK,IAExB5tE,EAAGve,SAAS9gB,IAAI,IAAO,KAChBmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAC1BgpD,cAAc4kB,EAAK,QAKlByX,EAA0B,IAAItuF,GAC9B36B,EAAqBwB,GAAOymB,UAAU,GAC5CjoB,EAAS,GAAGuE,KAAK,KAAM,IACvBvE,EAAS,GAAGuE,IAAI,KAAM,IACtBvE,EAAS,GAAGuE,IAAI,IAAK,GACrBvE,EAAS,GAAGuE,IAAI,EAAK,IACrBvE,EAAS,GAAGuE,KAAK,KAAM,IACvBvE,EAAS,GAAGuE,KAAK,IAAK,IACtB0kH,EAAQ1kH,IAAIvE,EAAU,OAEhBgb,EAAwB,IAAIwe,GAClCxe,EAAOhY,SAAW,OAEZ4gC,EAAgB,IAAIN,GAC1BM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,KAChB2kH,MAAQx0D,EAAKzzB,QAAQgqD,WAAWrnD,KAChCslF,MAAMt8B,cAAcq8B,EAAS,OAE5Bt8B,EAAmB,IAAIjsD,GAC7BisD,EAAG7xE,MAAQE,EACX2xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GAEdiD,EAAGve,SAAS9gB,KAAK,EAAK,OACjB4kH,SAAWz0D,EAAKzzB,QAAQgqD,WAAWrnD,KACnCulF,SAASv8B,cAAcD,GAE5B/oD,EAAGve,SAAS9gB,IAAI,EAAK,MAChB6kH,SAAW10D,EAAKzzB,QAAQgqD,WAAWrnD,KACnCwlF,SAASx8B,cAAcD,OAEtBmgB,EAAsB,IAAI/sD,GAC1B7kC,EAAe,IAAI1Z,GAAO,EAAK,UAErCsrG,EAAG5hG,WAAWwpD,EAAKw0D,MAAOx0D,EAAKy0D,SAAUz0D,EAAKy0D,SAAS3iF,cAAetrB,GACtE4xF,EAAG30D,WAAa,EAChB20D,EAAG/uD,eAAiB,GACpB+uD,EAAGv0D,aAAc,EACjBu0D,EAAGpjE,YAAcgrB,EAAKg0D,KACtB5b,EAAGnjE,aAAe+qB,EAAKi0D,SAClBU,UAAY30D,EAAKzzB,QAAQ4M,YAAYi/D,GAE1CA,EAAG5hG,WAAWwpD,EAAKw0D,MAAOx0D,EAAK00D,SAAU10D,EAAK00D,SAAS5iF,cAAetrB,GACtE4xF,EAAG30D,WAAa,EAChB20D,EAAG/uD,eAAiB,GACpB+uD,EAAGv0D,aAAc,EACjBu0D,EAAGpjE,YAAcgrB,EAAKg0D,KACtB5b,EAAGnjE,aAAe+qB,EAAKi0D,SAClBW,UAAY50D,EAAKzzB,QAAQ4M,YAAYi/D,kEAI9B7mG,UACNA,OACD,SACEojH,UAAUnc,cAAcjtF,KAAK8mE,mBAG/B,SACEsiC,UAAUnc,cAAc,aAG1B,SACEmc,UAAUnc,eAAejtF,KAAK8mE,mBAGhC,SACE2hC,KAAOzqH,EAAM,EAAKgiB,KAAKyoG,KAAO,QAC9BW,UAAUE,qBAAqBtpG,KAAKyoG,WACpCY,UAAUC,qBAAqBtpG,KAAKyoG,gBAGtC,SACEA,MAAQ,OACRW,UAAUE,qBAAqBtpG,KAAKyoG,WACpCY,UAAUC,qBAAqBtpG,KAAKyoG,oCAKnC77B,GACVxG,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,qEAEGA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,eAAiB3qE,KAAKyoG,KAAK35B,QAAQ,GAAK,wBAA0B9uE,KAAK0oG,OAAO55B,QAAQ,SAEnFnE,YAAchB,GAEnBxE,GAASp0B,SAASnzD,EAAIoiB,KAAKipG,MAAM1iF,cAAc3oC,0CACpCgvF,6CAIJ,IAAI47B,SApQUx1C,ICZZu2C,+DAMLljB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,QAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAM,IACvBq/B,EAAGnlB,MAAQ,GAAMC,GACjBklB,EAAGM,YAAa,MACVxC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAEpB6nG,EAAM,IAAIrrE,GAGVp8B,EAAO,IAAI1Z,GAAO,EAAK,UAC7B0Z,EAAK7X,YACLs/G,EAAIz3G,WAAWo7F,EAAQ5kE,EAAM,IAAIlgC,GAAO,EAAK,GAAM0Z,GAKnDynG,EAAIxqE,WAAa,GACjBwqE,EAAI1qE,cAAgB,IACpB0qE,EAAIpqE,aAAc,EAClBoqE,EAAI9qE,iBAAmB,EACvB8qE,EAAI5qE,iBAAmB,GACvB4qE,EAAItqE,aAAc,IAEb00D,QAAUr4C,EAAKzzB,QAAQ4M,YAAY80E,kEAI5B18G,UACNA,OACD,SACE8mG,QAAQ0c,aAAaxpG,KAAK8sF,QAAQ2c,4BAGpC,SACE3c,QAAQ8V,aAAa5iG,KAAK8sF,QAAQ+V,4BAGpC,SACE/V,QAAQG,eAAejtF,KAAK8sF,QAAQ4c,+CAKnC98B,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,gDACtCA,YAAchB,OACbhjD,EAAQ3mB,KAAK8sF,QAAQ6c,cAAc/8B,EAASxiD,IAClDg8C,GAAYqF,WAAW,EAAGzrE,KAAK2qE,mCAA6BhkD,EAAMmoD,QAAQ,UACrEnE,YAAchB,6CAIZ,IAAI4/B,SA5EgBv2C,ICGlB42C,+DAOLvjB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAG7CmrF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EAGXwrF,EAAO1Z,cAAcD,OAIf7xE,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OAEX4gC,EAAK,IAAIN,GACfM,EAAG52B,WAEG01G,EAAM,IAAIllE,GAEhB5Z,EAAGve,SAAS9gB,KAAK,GAAM,QACjBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc9xE,EAAO,OAEpB3Y,EAAI,IACVu/B,EAAKujF,mBAAmB9iH,GACxBu/B,EAAKgrD,kBAAkB,IAAIlrF,IAAQ,EAAMW,EAAG,IAE5CugH,EAAIx3G,WAAWo7F,EAAQ5kE,EAAM,IAAIlgC,IAAQ,GAAM,KAC/CkhH,EAAIvqE,WAAa,EAAMz5B,GACvBgkG,EAAI3kE,eAAiB,IACrB2kE,EAAInqE,aAAc,EAClBmqE,EAAI/kE,YAAc,IAAOj/B,GACzBgkG,EAAI7kE,WAAa,GAAMn/B,GACvBgkG,EAAIrqE,aAAc,EAClBqqE,EAAIz5E,kBAAmB,IAElB8jE,QAAUr4C,EAAKzzB,QAAQ4M,YAAY60E,OAKlCoH,EAAe,IAAItwF,GACzBswF,EAAa9mH,SAAW,MAElB+mH,EAAY,IAAIzmF,GACtBymF,EAAU/8G,OACV+8G,EAAU1kG,SAAS9gB,IAAI,EAAK,QAGtBooF,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,EACbyyD,EAAGxqD,OAAO3B,SAAW,EACrBmsD,EAAG7xE,MAAQgvG,IAENE,OAASt1D,EAAKzzB,QAAQgqD,WAAW8+B,KACjCC,OAAOp9B,cAAcD,OAGpBs9B,EAAgB,IAAItvF,GAC1BsvF,EAAcnvF,SAAS,GAAM,GAAK,IAAIt5B,IAAQ,GAAM,GAAM,OAEpD0oH,EAAa,IAAI5mF,GACvB4mF,EAAW7kG,SAAS9gB,IAAI,GAAM,IAC9B2lH,EAAWl9G,OACXk9G,EAAWpmF,QAAS,MAEdqmF,EAAez1D,EAAKzzB,QAAQgqD,WAAWi/B,GAC7CC,EAAav9B,cAAcq9B,EAAe,OAEpCvH,EAAM,IAAIllE,GAChBklE,EAAIx3G,WAAWo7F,EAAQ6jB,EAAc,IAAI3oH,GAAO,GAAM,KACtDkhH,EAAI/kE,YAAc,IAAOj/B,GACzBgkG,EAAI7kE,WAAa,EAAMn/B,GACvBgkG,EAAIrqE,aAAc,IACbpX,QAAQ4M,YAAY60E,OAKnB33B,EAAU,IAAIznD,GACpBynD,EAAQ/9E,WAEF00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWF,GAG/Bq/B,EAAY,IAAIzvF,GAEhBqgF,EAAQx5G,GAAOymB,UAAU,GAC/B+yF,EAAM,GAAGz2G,IAAI,MAAO,OACpBy2G,EAAM,GAAGz2G,IAAI,MAAO,OACpBy2G,EAAM,GAAGz2G,IAAI,MAAO,OACpB6lH,EAAU7lH,IAAIy2G,EAAO,OAGfqP,EAAiB,IAAI3pF,UAC3B2pF,EAAevvG,MAAQsvG,EACvBC,EAAenwF,QAAU,EAEzBwH,EAAKkrD,cAAcy9B,kEAIPpkH,UACNA,OACD,SACE8mG,QAAQ0c,aAAaxpG,KAAK8sF,QAAQ2c,4BAGpC,SACE3c,QAAQ8V,aAAa5iG,KAAK8sF,QAAQ+V,gDAKjCj2B,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,oCACtCA,YAAchB,6CAYZ,IAAIigC,SA/Ie52C,ICHjBq3C,+DAMH5jH,EAAI,GACJ26E,EAAI,GACJ9jF,EAAI,EACJS,EAAI,EAENsoG,EAAS,KAEL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,IAEpB,IAAItE,IACZ/6B,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAI5CwZ,EAAS,IAAIwe,GACnBxe,EAAOhY,SAAW,EAElBgY,EAAOtO,IAAInI,KAAK,GAAMmC,EAAI1I,EAAIqjF,GAC9BilB,EAAO1Z,cAAc5xE,EAAQ,GAE7BA,EAAOtO,IAAInI,IAAI,GAAMmC,EAAI1I,EAAIqjF,GAC7BilB,EAAO1Z,cAAc5xE,EAAQ,OAIvBF,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAASv9B,EAAGS,OAEZ4lC,EAAK,IAAIN,GACfM,EAAG52B,OAGH42B,EAAGve,SAAS9gB,KAAK,GAAMmC,OACjB0/G,EAAQ1xD,EAAKzzB,QAAQgqD,WAAWrnD,GACtCwiF,EAAMx5B,cAAc9xE,EAAO,GAE3B8oB,EAAGve,SAAS9gB,IAAI,GAAMmC,OAChB2/G,EAAQ3xD,EAAKzzB,QAAQgqD,WAAWrnD,GACtCyiF,EAAMz5B,cAAc9xE,EAAO,OAErByvG,EAAY,IAAI7uE,GAChBrS,EAAU,IAAI7nC,IAAQ,GAAMkF,EAAI1I,GAChCsrC,EAAU,IAAI9nC,GAAO,GAAMkF,EAAI1I,GAC/BwsH,EAAgB,IAAIhpH,IAAQ,GAAMkF,EAAI1I,EAAIqjF,GAC1CopC,EAAgB,IAAIjpH,GAAO,GAAMkF,EAAI1I,EAAIqjF,UAC/CkpC,EAAUr/G,WAAWk7G,EAAOC,EAAOmE,EAAeC,EAAephF,EAASC,EAAS,OAE9EsH,SAAW8jB,EAAKzzB,QAAQ4M,YAAY08E,8DAIjC19B,2CACCA,OACLviD,EAAQrqB,KAAK2wB,SAAS85E,WACtBrpC,EAAIphE,KAAK2wB,SAAS+5E,oBAAsBrgF,EAAQrqB,KAAK2wB,SAASg6E,oBACpEvkC,GAAYqF,WAAW,EAAGzrE,KAAK2qE,0BAAoBtgD,EAAMykD,QAAQ,sBAAa1N,EAAE0N,QAAQ,UACnFnE,YAAchB,6CAIZ,IAAI0gC,SAnEcr3C,ICiBhB43C,wFAGO,IAAIrxF,iBACD,IAAI53B,aACR,sEAEIiZ,MACfoF,KAAKxf,UAAYoqH,EAAmBlH,kBAC/B,MAGHjiF,EAAO7mB,EAAQkoC,iBAGLt7C,EAFFoT,EAAQE,WAIpB,EACAkF,KAAK6jG,SACL,EACApiF,EAAK72B,eACLoV,KAAKgxC,oBAIA65D,YAAYjwG,KACfoF,KAAKxf,UAGF,sCAGUoa,OACXX,EAAQ,IAAIqM,GAAQ,IAAM,IAAM,IAChC9J,EAAK5B,EAAQkoC,UAAUl4C,sBAErBgQ,EAAQiC,sBAIJ9B,EAAwBH,EAAQE,WAEhCE,EAASrZ,GAAYC,MAAM4a,EAAIzB,EAAOtO,IAAK,IAAIlL,IAC/CwC,EAASgX,EAAOhY,SAEtBqjF,GAAYzqE,WAAWX,EAAQjX,EAAQkW,wBAOjC8B,EAAuBnB,EAAQE,WAC/BlN,EAAcmO,EAAKvb,QACnBT,EAAW,GAERxC,EAAI,EAAGA,EAAIqQ,IAAerQ,EACjCwC,EAASxC,GAAKoE,GAAYC,MAAM4a,EAAIT,EAAK/b,WAAWzC,GAAI,IAAIgE,IAG9D6kF,GAAY7oE,YAAYxd,EAAU6N,EAAaqM,WA5DjBwqC,IACfmmE,cAAa,MAqEzBE,yEAGU,aACH,IAAI3pG,MAAM2pG,EAAW9G,0BACnB7mH,EAAY,GAAG,kBAAM,IAAIu9B,iBAC3B,IAAInB,OAOZoK,EAAK,IAAIN,GACTgjE,EAAS94D,EAAKvM,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItB9a,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BA,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BmC,EAAI,EACJnE,EAAImE,GAAK,EAAM4U,GAAO,IACtB/K,EAAI+K,GAAO,GAAO/Y,EAElBgC,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG,GAClChM,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,GAClCgC,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,EAAIgO,GACtChM,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG7J,GAClCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG7J,GACnCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,EAAIgO,GACvChM,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,GACnCgC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG,KAE9B63G,WAAW,GAAGt/G,IAAIvE,EAAU,KAI5B6jH,WAAW,GAAG/oF,SAAS,GAAK,MAI5BgpF,SAAS9gH,SAAW,OAGtB,IAAIxF,EAAI,EAAGA,EAAIutH,EAAW9G,cAAezmH,IACvC2vC,SAAS3vC,GAAK,6EAILgS,GACwB,OAApCyQ,KAAKktB,SAASltB,KAAK+jG,oBAChB/iF,QAAQwrD,YAAYxsE,KAAKktB,SAASltB,KAAK+jG,mBACvC72E,SAASltB,KAAK+jG,aAAe,UAG9BpgF,EAAK,IAAIN,GACfM,EAAG52B,WAEGnP,EAAIqB,GAAe,EAAK,MAC9B0kC,EAAGve,SAAS9gB,IAAI1G,EAAG,IACnB+lC,EAAGnlB,MAAQvf,GAAewf,GAAOA,IAEnB,IAAVlP,IACFo0B,EAAGH,eAAiB,UAGjB0J,SAASltB,KAAK+jG,aAAe/jG,KAAKghB,QAAQgqD,WAAWrnD,GAEtDp0B,EAAQ,EAAG,KACPm9E,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQmF,KAAK4jG,WAAWr0G,GAC3Bm9E,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,QACTwM,SAASltB,KAAK+jG,aAAap3B,cAAcD,OACzC,KACCA,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQmF,KAAK6jG,SAChBn3B,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,QAETwM,SAASltB,KAAK+jG,aAAap3B,cAAcD,QAG3Cq3B,aAAe/jG,KAAK+jG,YAAc,GAAK+G,EAAW9G,sDAIlD,IAAIzmH,EAAI,EAAGA,EAAIutH,EAAW9G,cAAezmH,KACnB,OAArByiB,KAAKktB,SAAS3vC,eACXyjC,QAAQwrD,YAAYxsE,KAAKktB,SAAS3vC,cAClC2vC,SAAS3vC,GAAK,uCAMTyI,UACNA,OACD,QACA,QACA,QACA,QACA,SACEglF,WAAWhlF,EAAI+kH,WAAW,GAAK,IAAIA,WAAW,cAGhD,QACE,IAAIxtH,EAAI,EAAGA,EAAIutH,EAAW9G,YAAazmH,GAAK,KAC3CyiB,KAAKktB,SAAS3vC,GAAI,KACd8mC,EAASrkB,KAAKktB,SAAS3vC,GAAGqf,gBAC3BswB,SAAS3vC,GAAGytH,WAAW3mF,aAK7B,SACEmoD,4CAKCI,2CACCA,OAELv+D,EAAW,IAAIu8F,GACrBv8F,EAASw1F,SAAS9gH,SAAW,EAC7BsrB,EAASw1F,SAASp3G,IAAInI,IAAI,EAAK,KAC/B+pB,EAAS2iC,YAAY7rC,kBAEf/H,EAAO,IAAI6P,GACjBoB,EAASw1F,SAAS/iF,YAAY1jB,EAAMiR,EAAS2iC,YAAa,QAErDhwB,QAAQm5B,UAAU9rC,EAAUjR,OAE3BnD,EAAQ,IAAIqM,GAAQ,GAAK,GAAK,IACpC8/D,GAAYzqE,WAAW0S,EAASw1F,SAASp3G,IAAK4hB,EAASw1F,SAAS9gH,SAAUkX,GAE1EmsE,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,gCACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,8CACtCA,YAAchB,GACnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,oCACtCA,YAAchB,6CAIZ,IAAImhC,SArKiB93C,IACP83C,eAAc,QCxF1BG,6DAMJ/9E,SAAW,IAAI/rB,MAAM,KACrBisB,SAAW,IAAIjsB,MAAM,OAEtBklF,EAAS,KAEL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,QAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,KAAK,EAAK,OAChB4mH,EAASz2D,EAAKvnB,SAAS,GAAKunB,EAAKzzB,QAAQgqD,WAAWrnD,GAC1DunF,EAAMv+B,cAAc9xE,EAAO,GAE3B8oB,EAAGve,SAAS9gB,IAAI,EAAK,OACf6hH,EAAS1xD,EAAKvnB,SAAS,GAAKunB,EAAKzzB,QAAQgqD,WAAWrnD,GAC1DwiF,EAAMx5B,cAAc9xE,EAAO,GAE3B8oB,EAAGve,SAAS9gB,IAAI,EAAK,QACf8hH,EAAS3xD,EAAKvnB,SAAS,GAAKunB,EAAKzzB,QAAQgqD,WAAWrnD,GAC1DyiF,EAAMz5B,cAAc9xE,EAAO,GAE3B8oB,EAAGve,SAAS9gB,KAAK,EAAK,QAChBwiH,EAASryD,EAAKvnB,SAAS,GAAKunB,EAAKzzB,QAAQgqD,WAAWrnD,GAC1DmjF,EAAMn6B,cAAc9xE,EAAO,OAGvB1E,EAAIC,EAAIvV,EADNgsG,EAAK,IAAI5jE,UAGf4jE,EAAGpjE,YAAc,EACjBojE,EAAGnjE,aAAe,EAElBmjE,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQ0xG,EACXre,EAAGtjE,aAAajlC,KAAK,GAAM,GAC3BuoG,EAAGrjE,aAAallC,KAAK,IAAM,IAC3B6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQ2sG,EACXtZ,EAAGtjE,aAAajlC,IAAI,GAAM,GAC1BuoG,EAAGrjE,aAAallC,IAAI,IAAM,IAC1B6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQ4sG,EACXvZ,EAAGtjE,aAAajlC,IAAI,GAAM,IAC1BuoG,EAAGrjE,aAAallC,IAAI,GAAK,IACzB6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ+sF,EACXwG,EAAGrzF,MAAQstG,EACXja,EAAGtjE,aAAajlC,KAAK,GAAM,IAC3BuoG,EAAGrjE,aAAallC,KAAK,GAAK,IAC1B6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ4xG,EACXre,EAAGrzF,MAAQ2sG,EACXtZ,EAAGtjE,aAAajlC,IAAI,GAAK,GACzBuoG,EAAGrjE,aAAallC,KAAK,GAAK,GAC1B6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ6sG,EACXtZ,EAAGrzF,MAAQ4sG,EACXvZ,EAAGtjE,aAAajlC,IAAI,EAAK,IACzBuoG,EAAGrjE,aAAallC,IAAI,GAAM,IAC1B6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQ8sG,EACXvZ,EAAGrzF,MAAQstG,EACXja,EAAGtjE,aAAajlC,KAAK,GAAK,GAC1BuoG,EAAGrjE,aAAallC,IAAI,GAAK,GACzB6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAGvzF,MAAQwtG,EACXja,EAAGrzF,MAAQ0xG,EACXre,EAAGtjE,aAAajlC,IAAI,GAAM,IAC1BuoG,EAAGrjE,aAAallC,IAAI,EAAK,IACzB6R,EAAK02F,EAAGvzF,MAAMouB,cAAcmlE,EAAGtjE,aAAc,IAAIhoC,IACjD6U,EAAKy2F,EAAGrzF,MAAMkuB,cAAcmlE,EAAGrjE,aAAc,IAAIjoC,IACjDV,EAAIU,GAAOU,MAAMmU,EAAID,EAAI,IAAI5U,IAC7BsrG,EAAGzvG,OAASyD,EAAEmE,WACTooC,SAAS,GAAKqnB,EAAKzzB,QAAQ4M,YAAYi/D,wEAI1BxzF,OACf,IAAI9b,EAAI,EAAGA,EAAI,IAAKA,KACnByiB,KAAKotB,SAAS7vC,KAAO8b,EAAO,MACzB+zB,SAAS7vC,GAAK,6CAMTyI,UACNA,OACD,QACE,IAAIzI,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBkkC,EAAOzhB,KAAKktB,SAAS3vC,MACvBkkC,EAAM,MACHT,QAAQwrD,YAAY/qD,QACpByL,SAAS3vC,GAAK,sBAMpB,QACE,IAAIA,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpB8b,EAAQ2G,KAAKotB,SAAS7vC,MACxB8b,EAAO,MACJ2nB,QAAQ05C,aAAarhE,QACrB+zB,SAAS7vC,GAAK,2CAQjBqvF,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,iDACtCA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,2DAEGA,YAAchB,6CAIZ,IAAIshC,SAlLUj4C,ICCZm4C,uEACQ,IAAIvsE,YACa,SAM9BynD,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAG3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAKtBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAGd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,GACdgsD,EAAGxqD,OAAO5B,aAAe,EACzBosD,EAAGxqD,OAAO3B,SAAW,UAGfssE,EAAK,IAAItvD,GACfsvD,EAAG7jE,kBAAmB,MAGhBphB,EAAI,GAEJnhB,EAAI,KACL2kH,UAAU7hF,aAAajlC,IAAI,EAAKmC,WAGjCq5E,EAAWumB,EACI9oG,EAAI,EAAGA,EAAIqqB,IAAKrqB,EAAG,KAE9BomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,GAAM,EAAM/G,EAAGkJ,GAC3BlJ,IAAMqqB,EAAI,IACZ/M,EAAMggB,SAAS,IAAK,KACpB6xD,EAAGzyD,QAAU,IACbyyD,EAAGxqD,OAAO5B,aAAe,EACzBqD,EAAGve,SAAS9gB,IAAI,EAAM/G,EAAGkJ,GACzBk9B,EAAGH,eAAiB,QAIhB/B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAErClC,EAAKkrD,cAAcD,OAGb59C,EAAS,IAAIvtC,GAAOhE,EAAGkJ,GAC7BomG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAEzB/sB,EAAWr+C,IAGR2pF,UAAU5hF,aAAa3lC,cAGtBwnH,EAAc,aACfD,UAAUrsE,UAAYn3B,EAAI,EAAMyjG,IAChCD,UAAU5xG,MAAQsmE,IAIlBsrC,UAAU9xG,MAAQ+sF,IAClBilB,OAAS72D,EAAKzzB,QAAQ4M,YAAY6mB,EAAK22D,0EAIhCplH,UACNA,OACD,IACCga,KAAKsrG,aACFtqF,QAAQ05C,aAAa16D,KAAKsrG,aAC1BA,OAAS,WAETA,OAAStrG,KAAKghB,QAAQ4M,YAAY5tB,KAAKorG,yCAMxCx+B,2CACCA,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,4CACtCA,YAAchB,GACf3pE,KAAKsrG,OACPllC,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,WAE3CvE,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,iBAExCA,YAAchB,6CAIZ,IAAIwhC,SA/GgBn4C,ICOlBu4C,uEAIO,MAOZllB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAG3B9tB,EAAKtU,GAAOymB,UAAU,GAC5BnS,EAAG,GAAGvR,IAAI,GAAM,GAChBuR,EAAG,GAAGvR,IAAI,EAAK,GACfuR,EAAG,GAAGvR,IAAI,EAAK,IACfuR,EAAG,GAAGvR,KAAK,EAAK,IAChBuR,EAAG,GAAGvR,KAAK,EAAK,OAGVknH,EAAO,IAAI7rF,GACjB6rF,EAAKhf,WAAW32F,EAAI,OAEd62E,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQ2wG,EACX9+B,EAAGzyD,QAAU,EACbosE,EAAO1Z,cAAcD,OAMfv2E,EAAK,IAAI5U,IAAQ,EAAK,GAC1B6U,EAAK,IAAI7U,GAAO,EAAK,GAGjBoiC,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS1hB,KAAKyS,OAEXs1G,EAAch3D,EAAKzzB,QAAQgqD,WAAWrnD,GAE5CA,EAAGve,SAAS1hB,KAAK0S,OAEXs1G,EAAej3D,EAAKzzB,QAAQgqD,WAAWrnD,GAGvC4tE,EAAM,IAAI72E,GAChB62E,EAAI12E,SAAS,KAAM,QAGb6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQ02F,EACX7kB,EAAGzyD,QAAU,EAEbwxF,EAAY9+B,cAAcD,GAC1Bg/B,EAAa/+B,cAAcD,OAGrBmgB,EAAK,IAAItvD,GACfsvD,EAAGvzF,MAAQ+sF,EACXwG,EAAGrjE,aAAa3lC,UAChBgpG,EAAGv0D,aAAc,EACjBu0D,EAAG/uD,eAAiB,IACpB+uD,EAAGz0D,aAAc,EAEjBy0D,EAAG30D,WAAa,EAChB20D,EAAGtjE,aAAa7lC,KAAKyS,GACrB02F,EAAGrzF,MAAQiyG,EACX5e,EAAGnvD,YAAe,GAAOj/B,GAAS,IAClCouF,EAAGjvD,WAAc,EAAMn/B,GAAS,MAC3BktG,YAAcl3D,EAAKzzB,QAAQ4M,YAAYi/D,GAE5CA,EAAG30D,WAAa,EAChB20D,EAAGtjE,aAAa7lC,KAAK0S,GACrBy2F,EAAGrzF,MAAQkyG,EACX7e,EAAGnvD,YAAe,EAAMj/B,GAAS,IACjCouF,EAAGjvD,WAAc,GAAOn/B,GAAS,MAC5BmtG,aAAen3D,EAAKzzB,QAAQ4M,YAAYi/D,OAMvClpE,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,IACrBq/B,EAAG52B,OACH42B,EAAGE,QAAS,IAEPkmF,OAASt1D,EAAKzzB,QAAQgqD,WAAWrnD,OAGhC9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OAGX2pF,EAAK,IAAIjsD,UACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,IACR8vF,OAAOp9B,cAAcD,KAGvBm/B,UAAW,iEAGF7lH,UACNA,OACD,SACE6lH,UAAW,sCAKJ7lH,UACRA,OACD,SACE6lH,UAAW,gCAKVj/B,GACN5sE,KAAK6rG,eACFF,YAAY1e,cAAc,SAC1B2e,aAAa3e,eAAe,WAE5B0e,YAAY1e,eAAe,SAC3B2e,aAAa3e,cAAc,6CAGvBrgB,GAEXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,0CACtCA,YAAchB,6CAIZ,IAAI4hC,SAhJcv4C,ICNhB84C,iEAGE,MAOHnoF,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,OAEfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAG/BxzB,EAAO,IAAIkvB,GAEjBlvB,EAAK7L,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IAClDkgC,EAAKkrD,cAAcx8E,EAAM,OAGnB0K,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,GAAO,GAAK,GAAM,GAC/CkgC,EAAKkrD,cAAc9xE,EAAO,OAKpB8oB,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OAGfitG,EAAM,IAAI72E,UAChB62E,EAAI12E,SAAS,EAAK,MAEbkG,OAAS0zB,EAAKzzB,QAAQgqD,WAAWrnD,KACjC5C,OAAO4rD,cAAc4kB,EAAK,GAE/BA,EAAI12E,SAAS,IAAM,OAGdu4B,IAAM,UACXzvB,EAAGve,SAAS9gB,IAAImwD,EAAKrB,IAAK,IAC1BzvB,EAAGE,QAAS,IAEP0+E,SAAW9tD,EAAKzzB,QAAQgqD,WAAWrnD,KACnC4+E,SAAS51B,cAAc4kB,EAAK,OAE5BgR,SAAS91B,kBAAkB,IAAIlrF,GAAO,GAAM,yEAK9Cw/B,OAAOuF,gBAAgB,IAAI/kC,GAAO,EAAK,GAAM,QAC7Cw/B,OAAO0rD,kBAAkBjrE,SACzBuf,OAAOikF,mBAAmB,QAE1B5xD,IAAMn0D,GAAe,EAAK,QAC1BsjH,SAASj8E,gBAAgB,IAAI/kC,GAAOye,KAAKozC,IAAK,IAAO,QACrDmvD,SAAS91B,kBAAkB,IAAIlrF,GAAO,GAAM,UAC5CghH,SAASyC,mBAAmB,GAEjC1lH,GAAYsI,QACZ6B,GAAY7B,qCAGFglF,2CACCA,GAEPttF,GAAYC,MAAQ,IAEtB6mF,GAAYqF,WACV,EACAzrE,KAAK2qE,iCACUrrF,GAAYC,MAAMuvF,QAAQ,iCACvCxvF,GAAY6C,MAAQ7C,GAAYC,OAChCuvF,QAAQ,gCAAuBxvF,GAAY+C,SAASysF,QAAQ,UAE3DnE,YAAchB,IAGjBlgF,GAAYlK,MAAQ,IAEtB6mF,GAAYqF,WACV,EACAzrE,KAAK2qE,iCACUlhF,GAAYlK,oCACzBkK,GAAYtH,MAAQsH,GAAYlK,OAChCuvF,QAAQ,gCAAuBrlF,GAAYuC,oBAE1C2+E,YAAchB,GAGnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,2CACoBlhF,GAAYqC,UAAYrC,GAAYlK,OAAOuvF,QAClE,qCACyBrlF,GAAYuC,oBAEpC2+E,YAAchB,IAGjB3pE,KAAK+tE,YAAc,IAAO,QACvBk3B,mDAKA,IAAI6G,SA/GiB94C,ICHnB+4C,+DAQDpoF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAGlBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,GAG5BA,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,KACpD8kG,EAAO1Z,cAAc9xE,EAAO,GAG5BA,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,GAAO,GAAM,KAClD8kG,EAAO1Z,cAAc9xE,EAAO,GAG5BA,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,IAAO,IAAIA,GAAO,GAAM,KACpD8kG,EAAO1Z,cAAc9xE,EAAO,OAGxB9W,EAAS,GACT8W,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI5I,UACVgX,EAAM9X,SAAWgB,MAEX2oF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,OAET,IAAIv6B,EAAI,EAAGA,EAAI4lH,EAAS3J,gBAAiBj8G,MACvC,IAAI5I,EAAI,EAAGA,EAAIwuH,EAAS5J,aAAc5kH,EAAG,KACtComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAa,IAAM6B,EAAI,EAAM,IAAO5I,GAAKwG,EAApC,IAA6C,EAAMxG,EAAI,GAAOwG,GAClE0wD,EAAKzzB,QAAQgqD,WAAWrnD,GAEhCgpD,cAAcD,YAIlB1rD,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAK,6EAIlCwC,EAAS,EACT8W,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI5I,UACVgX,EAAM9X,SAAWgB,MAEX2oF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,MAERn9B,EAAI,IAAIhC,GAAOxC,IAAY,EAAMA,KACjC4kC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAKH,GAEJyc,KAAKghB,QAAQgqD,WAAWrnD,GAEhCgpD,cAAcD,oCAGL1mF,UACNA,OACD,SACEgmH,6CAKCp/B,OAEL,IAAI7uF,EAAIiiB,KAAKghB,QAAQirF,cAAeluH,EAAGA,EAAIA,EAAEwe,WAC5Cxe,EAAE8e,WAIF9e,EAAE+e,UAKiB,MAArBkD,KAAK+tE,mBACFA,aAAe,2CAOXnB,GAYXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,sCACtCA,YAAchB,6CAIZ,IAAIoiC,SAxHe/4C,IACL+4C,iBAAgB,EAChBA,cAAa,MCVzBG,+DAODvoF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBvd,EAAI,GACJud,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAASv9B,EAAGA,WAEZM,EAAI,IAAI2D,IAAQ,EAAK,KACrBkF,EAAI,IAAIlF,GAAO,EAAK,GACpBggH,EAAS,IAAIhgH,GAAO,MAAQ,MAC5Bw2F,EAAS,IAAIx2F,GAAO,MAAO,GAExBhE,EAAI,EAAGA,EAAI2uH,EAAQ1K,UAAWjkH,EAAG,CACxCkJ,EAAE/C,KAAK9F,OAEF,IAAIuI,EAAI5I,EAAG4I,EAAI+lH,EAAQ1K,UAAWr7G,EAAG,KAClCw9B,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAK+C,GACJguD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,GAE1BpU,EAAEwc,QAAQ80E,GAGZn6F,EAAEqlB,QAAQs+F,qEAKJ30B,2CACCA,6CAUJ,IAAIs/B,SAtDcl5C,IACJk5C,WAAU,OCgBtBC,6EACO,IAAI5qH,gBAIH,iBACG,IAKf6qH,4EAGUrgH,EAAWsgH,OACpBl2G,EAAK,IAAI5U,GAAO,IAAMwK,GAAI,KAC1BqK,EAAK,IAAI7U,GAAO,IAAMwK,GAAI,KAC1BsK,EAAK,IAAI9U,GAAO,IAAMwK,GAAI,KAC1BugH,EAAK,IAAI/qH,GAAO,IAAMwK,EAAG,IACzBwgH,EAAK,IAAIhrH,GAAO,EAAMwK,EAAG,KACzBygH,EAAK,IAAIjrH,GAAO,IAAMwK,EAAG,KAEzB0gH,EAAM,IAAIhsF,GACVisF,EAAM,IAAIjsF,GAChBgsF,EAAIvqF,OAAO1B,YAAc,EACzBksF,EAAIxqF,OAAO1B,YAAc,EACzBisF,EAAIxyF,QAAU,EACdyyF,EAAIzyF,QAAU,MAERxrB,EAAQ,IAAIisB,GACZ9rB,EAAQ,IAAI8rB,MAEd3uB,EAAI,EAAK,KACLhM,EAAW,GAEjBA,EAAS,GAAKoW,EACdpW,EAAS,GAAKqW,EACdrW,EAAS,GAAKsW,EACd5H,EAAMnK,IAAIvE,GAEVA,EAAS,GAAKyhB,GACdzhB,EAAS,GAAKwB,GAAOU,MAAMsqH,EAAID,EAAI,IAAI/qH,IACvCxB,EAAS,GAAKwB,GAAOU,MAAMuqH,EAAIF,EAAI,IAAI/qH,IACvCqN,EAAMtK,IAAIvE,OACL,KACCA,EAAW,GAEjBA,EAAS,GAAKoW,EACdpW,EAAS,GAAKsW,EACdtW,EAAS,GAAKqW,EACd3H,EAAMnK,IAAIvE,GAEVA,EAAS,GAAKyhB,GACdzhB,EAAS,GAAKwB,GAAOU,MAAMuqH,EAAIF,EAAI,IAAI/qH,IACvCxB,EAAS,GAAKwB,GAAOU,MAAMsqH,EAAID,EAAI,IAAI/qH,IACvCqN,EAAMtK,IAAIvE,GAGZ0sH,EAAI5xG,MAAQpM,EACZi+G,EAAI7xG,MAAQjM,MAEN+3G,EAAM,IAAItjF,GACVujF,EAAM,IAAIvjF,GAChBsjF,EAAI55G,OACJ65G,EAAI75G,OACJ45G,EAAIvhG,SAAS1hB,KAAKsc,KAAK2sG,UACvB/F,EAAIxhG,SAAS1hB,KAAKnC,GAAOskB,MAAMymG,EAAItsG,KAAK2sG,SAAU,IAAIprH,KAEtDolH,EAAInjF,eAAiB,GACrBojF,EAAIpjF,eAAiB,OAEf2iF,EAAQnmG,KAAKghB,QAAQgqD,WAAW27B,GAChCP,EAAQpmG,KAAKghB,QAAQgqD,WAAW47B,GAEtCT,EAAMx5B,cAAc8/B,GACpBrG,EAAMz5B,cAAc+/B,OAEdp/E,EAAM,IAAIrE,GAKhBqE,EAAI5D,aAAe,GACnB4D,EAAI7D,YAAc,GAElB6D,EAAIriC,WACFk7G,EACAC,EACA7kH,GAAOskB,MAAMzP,EAAI4J,KAAK2sG,SAAU,IAAIprH,IACpCA,GAAOskB,MAAM0mG,EAAIvsG,KAAK2sG,SAAU,IAAIprH,UAEjCy/B,QAAQ4M,YAAYN,GAEzBA,EAAIriC,WACFk7G,EACAC,EACA7kH,GAAOskB,MAAMxP,EAAI2J,KAAK2sG,SAAU,IAAIprH,IACpCA,GAAOskB,MAAMymG,EAAItsG,KAAK2sG,SAAU,IAAIprH,UAEjCy/B,QAAQ4M,YAAYN,GAEzBA,EAAIriC,WACFk7G,EACAnmG,KAAK4sG,QACLrrH,GAAOskB,MAAMxP,EAAI2J,KAAK2sG,SAAU,IAAIprH,IACpCA,GAAOskB,MAAMwmG,EAAarsG,KAAK2sG,SAAU,IAAIprH,UAE1Cy/B,QAAQ4M,YAAYN,GAEzBA,EAAIriC,WACFm7G,EACApmG,KAAK4sG,QACLrrH,GAAOskB,MAAM2mG,EAAIxsG,KAAK2sG,SAAU,IAAIprH,IACpCA,GAAOskB,MAAMwmG,EAAarsG,KAAK2sG,SAAU,IAAIprH,UAE1Cy/B,QAAQ4M,YAAYN,OAEnBm1E,EAAM,IAAIllE,GAEhBklE,EAAIx3G,WAAWm7G,EAAOpmG,KAAK6sG,UAAWtrH,GAAOskB,MAAMymG,EAAItsG,KAAK2sG,SAAU,IAAIprH,UACrEy/B,QAAQ4M,YAAY60E,4CAIpBkK,SAASroH,IAAI,EAAK,QAClB2zC,aAAe,OACf60E,WAAY,MACX/jH,EAAQ,IAAIxH,GAAO,EAAK,IAItBoiC,EAAK,IAAIN,GACTgjE,EAASrmF,KAAKghB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,KACpD8kG,EAAO1Z,cAAc9xE,EAAO,GAE5BA,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,GAAO,GAAM,KAClD8kG,EAAO1Z,cAAc9xE,EAAO,OAIzB,IAAItd,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBsd,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,QAEX4gC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,IAEpByiB,KAAKghB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAKpBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAK,OAEd+pF,EAAK,IAAInkF,GACfmkF,EAAG3qF,QAAU,EACb2qF,EAAG/pG,MAAQA,EACX+pG,EAAG1iF,OAAO1B,YAAc,MAClBmD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAKqF,GAAOka,QAAQjD,KAAK2sG,eAChCE,UAAY7sG,KAAKghB,QAAQgqD,WAAWrnD,QACpCkpF,UAAUlgC,cAAci4B,OAIvB/pG,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,QAEX6hH,EAAK,IAAInkF,GACfmkF,EAAG3qF,QAAU,EACb2qF,EAAG/pG,MAAQA,EACX+pG,EAAG1iF,OAAO1B,YAAc,MAClBmD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAKqF,GAAOka,QAAQjD,KAAK2sG,eAChCC,QAAU5sG,KAAKghB,QAAQgqD,WAAWrnD,QAClCipF,QAAQjgC,cAAci4B,OAIrB/X,EAAK,IAAItvD,GACfsvD,EAAG5hG,WAAW+U,KAAK4sG,QAAS5sG,KAAK6sG,UAAWtrH,GAAOskB,MAAM9c,EAAOiX,KAAK2sG,SAAU,IAAIprH,KACnFsrG,EAAG7jE,kBAAmB,EACtB6jE,EAAG30D,WAAal4B,KAAKi4B,aACrB40D,EAAG/uD,eAAiB,IACpB+uD,EAAGv0D,YAAct4B,KAAK8sG,eACjBC,aAAe/sG,KAAKghB,QAAQ4M,YAAYi/D,OAGzCwf,EAAc9qH,GAAOskB,MAAM9c,EAAO,IAAIxH,GAAO,GAAM,IAAM,IAAIA,SAE9DyrH,WAAW,EAAKX,QAChBW,UAAU,EAAKX,QAEfO,QAAQtmF,gBAAgBtmB,KAAK4sG,QAAQrmF,cAAgB,IAAQ9nB,GAAS,UACtEuuG,WAAW,EAAKX,QAChBW,UAAU,EAAKX,QAEfO,QAAQtmF,gBAAgBtmB,KAAK4sG,QAAQrmF,eAAiB,IAAQ9nB,GAAS,UACvEuuG,WAAW,EAAKX,QAChBW,UAAU,EAAKX,oCAGNrmH,UACNA,OACD,SACE+mH,aAAa9f,eAAejtF,KAAKi4B,wBAGnC,SACE80E,aAAa9f,cAAc,aAG7B,SACE8f,aAAa9f,cAAcjtF,KAAKi4B,wBAGlC,SACE80E,aAAanK,aAAa5iG,KAAK+sG,aAAalK,gDAK3Cj2B,GACVxG,GAAYqF,WACV,EACAzrE,KAAK2qE,WACL,+DAEGA,YAAchB,2CAERiD,6CAIJ,IAAIu/B,SArPiBn5C,ICCnBi6C,yFAC0B,eACpB,IAAI1rH,cACH,IAAIA,uEAEpBqZ,EACA9W,EACAZ,EACA8pB,eAEKkgG,UAAYtyG,OACZ2oG,QAAQ7/G,KAAKI,QACb0zB,SAAS9zB,KAAKR,GACZ8pB,SAb6B03B,IAiB3ByoE,yEAGU,YAIJ,IAKVpJ,YAAc,IACd72E,SAAW,IAAI/rB,MAAMgsG,EAAWnJ,eAChCJ,WAAa,IAAIziG,MAAM,OACvB,IAAI5jB,EAAI,EAAGA,EAAI,IAAKA,IAClBqmH,WAAWrmH,GAAK,IAAIm9B,KAEtBmpF,SAAW,IAAItqF,KAEf0qF,QAAU,UAIPtgF,EAAK,IAAIN,GACTgjE,EAAS94D,EAAKvM,QAAQgqD,WAAWrnD,GAEnChqB,GAAM,GACNivG,EAAK,EAAMpoG,GAAO7G,EAAK,GAAQ8E,IAC1BlhB,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBqc,EAAKD,EAAK,GACVmvG,EAAK,EAAMtoG,GAAO5G,EAAK,GAAQ6E,IAE/B5D,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAOoY,EAAIivG,GAAK,IAAIrnH,GAAOqY,EAAIkvG,IAC7CziB,EAAO1Z,cAAc9xE,EAAO,GAE5BlB,EAAKC,EACLgvG,EAAKE,MAKD/oH,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BA,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACzBqiH,WAAW,GAAGt/G,IAAIvE,EAAU,OAI3BmC,EAAI,EACJnE,EAAImE,GAAK,EAAM4U,GAAO,IACtB/K,EAAI+K,GAAO,GAAO/Y,EAElBgC,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG,GAClChM,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,GAClCgC,EAAS,GAAK,IAAIwB,GAAO,GAAMW,EAAGnE,EAAIgO,GACtChM,EAAS,GAAK,IAAIwB,GAAO,GAAMwK,EAAG7J,GAClCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG7J,GACnCnC,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,EAAIgO,GACvChM,EAAS,GAAK,IAAIwB,IAAQ,GAAMW,EAAGnE,GACnCgC,EAAS,GAAK,IAAIwB,IAAQ,GAAMwK,EAAG,KAE9B63G,WAAW,GAAGt/G,IAAIvE,EAAU,KAI5B6jH,WAAW,GAAG/oF,SAAS,GAAK,MAI5BgpF,SAAS9gH,SAAW,OAGtB,IAAIxF,EAAI,EAAGA,EAAI4vH,EAAWnJ,cAAezmH,IACvC2vC,SAAS3vC,GAAK,6EAILgS,OACV40G,EAAWnkG,KAAKktB,SAASltB,KAAK+jG,aACnB,OAAbI,SACGnjF,QAAQwrD,YAAY23B,QACpBj3E,SAASltB,KAAK+jG,aAAe,UAG9BpgF,EAAK,IAAIN,GAETzlC,EAAIqB,GAAe,GAAM,IACzBwH,EAAIxH,EAAc,GAAM,IAC9B0kC,EAAGve,SAAS9gB,IAAI1G,EAAG6I,GACnBk9B,EAAGnlB,MAAQvf,GAAewf,GAAOA,IACjCklB,EAAG52B,OAEW,IAAVwC,IACFo0B,EAAGH,eAAiB,SAGhB4gF,EAAYpkG,KAAKktB,SAASltB,KAAK+jG,aAAe/jG,KAAKghB,QAAQgqD,WAAWrnD,MAExEp0B,EAAQ,EAAG,KACPm9E,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQmF,KAAK4jG,WAAWr0G,GAC3Bm9E,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,GACbmqF,EAASz3B,cAAcD,OAClB,KACCA,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQmF,KAAK6jG,SAChBn3B,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,GAEbmqF,EAASz3B,cAAcD,QAGpBq3B,aAAe/jG,KAAK+jG,YAAc,GAAKoJ,EAAWnJ,sDAIlD,IAAIzmH,EAAI,EAAGA,EAAI4vH,EAAWnJ,cAAezmH,EAAG,KACzCkkC,EAAOzhB,KAAKktB,SAAS3vC,MACd,OAATkkC,cACGT,QAAQwrD,YAAY/qD,aACpByL,SAAS3vC,GAAK,wCAMTyI,UACNA,OACD,QACA,QACA,QACA,QACA,SACEglF,WAAWhlF,EAAI+kH,WAAW,GAAK,IAAIA,WAAW,cAGhD,SACEv+B,4CAKCI,OACJ23B,GAAc33B,EAASC,OAASD,EAASE,mDACpCF,GACXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,sDACtCA,YAAchB,OAEbvI,EAAI,GACJhiB,EAAS,IAAI79D,GAAO,EAAK,IACzBV,EAAI,IAAIU,GAAO6/E,EAAI5gE,GAAMR,KAAKikG,UAAW7iC,EAAIzjF,EAAM2iB,GAAMN,KAAKikG,WAC9D5kD,EAAS99D,GAAOskB,MAAMu5C,EAAQv+D,EAAG,IAAIU,IAErC8sB,EAAW,IAAI4+F,WAChBjsF,QAAQ3M,QAAQhG,EAAU+wC,EAAQC,GAEnChxC,EAAS6+F,UAAW,CACtB9mC,GAAY1rE,UAAU2T,EAASk1F,QAAS,EAAK,IAAIj9F,GAAQ,GAAK,GAAK,KACnE8/D,GAAY/rE,YAAY+kD,EAAQ/wC,EAASk1F,QAAS,IAAIj9F,GAAQ,GAAK,GAAK,SAClEk+F,EAAOjjH,GAAOskB,MAClBwI,EAASk1F,QACThiH,GAAO87B,MAAM,GAAKhP,EAASmJ,SAAUj2B,GAAOE,MAC5C,IAAIF,IAEN6kF,GAAY/rE,YAAYgU,EAASk1F,QAASiB,EAAM,IAAIl+F,GAAQ,GAAK,GAAK,UAEtE8/D,GAAY/rE,YAAY+kD,EAAQC,EAAQ,IAAI/4C,GAAQ,GAAK,GAAK,KAG5Di+F,SACGN,SAAY,IAAOxlG,GAAS,+CAK5B,IAAI0uG,SA5LiBn6C,IACPm6C,eAAc,QC3B1BC,+EACS,IAAI1yF,gBACJ,IAAIA,kBACF,IAAI/4B,kBACJ,IAAIA,iBACL,IAAIJ,cACP,IAMT8rH,WAAWxyF,SAAS,GAAK,MACzByyF,aAAa9yD,iBAAiB,IAAIj5D,GAAO,EAAK,GAAM,KAIpDo2B,WAAWkD,SAAS,GAAK,MACzB0yF,YAAYjpH,IAAI,UAAW,aAC3BkpH,SAAW,YACXC,aAAajzD,iBAAiB/F,EAAK84D,YAAa94D,EAAK+4D,yEAI9CxnH,UACNA,OACD,SACEunH,YAAY3vH,GAAK,aAGnB,SACE2vH,YAAY3vH,GAAK,aAGnB,SACE2vH,YAAY9mH,GAAK,aAGnB,SACE8mH,YAAY9mH,GAAK,aAGnB,SACE+mH,UAAY,GAAM/uG,aAGpB,SACE+uG,UAAY,GAAM/uG,QAItBgvG,aAAajzD,iBAAiBx6C,KAAKutG,YAAavtG,KAAKwtG,uCAGhD5gC,OAEJvgF,EAAW,IAAIuf,GACrBva,EACEhF,EACA2T,KAAKqtG,WACLrtG,KAAKstG,aACLttG,KAAK2X,WACL3X,KAAKytG,kBAGD9rE,EAAgB,IAAI91B,GAC1B81B,EAAc12C,WACZoB,EACA2T,KAAKstG,aACLttG,KAAKqtG,WAAWtqH,SAChBid,KAAKytG,aACLztG,KAAK2X,WAAW50B,UAGlBqjF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,mCAA6Bt+E,EAAStG,kBAChE4kF,YAAchB,WAGX1vE,EAAQ,IAAIqM,GAAQ,GAAK,GAAK,IAC9B3hB,EAAI,GACDpH,EAAI,EAAGA,EAAIyiB,KAAKqtG,WAAW7sH,UAAWjD,EAC7CoH,EAAEpH,GAAKoE,GAAYC,MAAMoe,KAAKstG,aAActtG,KAAKqtG,WAAWrtH,WAAWzC,GAAI,IAAIgE,IAEjF6kF,GAAY7oE,YAAY5Y,EAAGqb,KAAKqtG,WAAW7sH,QAASyZ,OAE/C,IAAI1c,EAAI,EAAGA,EAAIyiB,KAAK2X,WAAWn3B,UAAWjD,EAC7CoH,EAAEpH,GAAKoE,GAAYC,MAAMoe,KAAKytG,aAAcztG,KAAK2X,WAAW33B,WAAWzC,GAAI,IAAIgE,IAEjF6kF,GAAY7oE,YAAY5Y,EAAGqb,KAAK2X,WAAWn3B,QAASyZ,OAGjD,IAAI1c,EAAI,EAAGA,EAAI8O,EAAStG,aAAcxI,EACzC6oF,GAAY1rE,UAAUinC,EAAc17C,OAAO1I,GAAI,EAAK,IAAI+oB,GAAQ,GAAK,GAAK,+CAKrE,IAAI8mG,SAjGoBp6C,ICCtB06C,+DAQLrnB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,WAERmsE,EAAK,IAAItvD,GAEXuiC,EAAWumB,EACN9oG,EAAI,EAAGA,EAAImwH,EAAOlM,UAAWjkH,EAAG,KACjComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,KAAgB,OAC3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAcD,OAEb59C,EAAS,IAAIvtC,GAAe,EAAMhE,EAAb,GAAgB,GAC3CsvG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAErBtvG,IAAMmwH,EAAOlM,SAAW,MACrBmM,SAAWlsF,GAElBq+C,EAAWr+C,MAGPqN,EAAS,IAAIvtC,GAAe,EAAMmsH,EAAOlM,QAApB,GAA6B,GACxD3U,EAAG5hG,WAAW60E,EAAUumB,EAAQv3D,KAC3B9N,QAAQ4M,YAAYi/D,OAGtB,IAAItvG,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBwC,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,GAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,SAExBsZ,EAAQ,IAAI6f,GAClB7f,EAAMvW,IAAIvE,OAEJ2sF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,MAEP0J,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,EAAe,IACnBk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,OAGhB,IAAInvF,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBsd,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,OAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,MAEP0J,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,EAAe,IACnBk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,qEAIXE,2CACCA,6CAIJ,IAAI8gC,SA9Fa16C,IACH06C,WAAU,OCCtBE,wEAIkB,IAAIrsH,uBACN,aACA,IAAIm5B,cACJ,IAAIA,cAGd,aACA,MAQPiJ,EAAK,IAAIN,GAETgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAGjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAMtB8oB,EAAK,IAAIN,UACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,IACrBq/B,EAAGnlB,MAAQ,IAAOC,KACbovG,QAAUp5D,EAAKzzB,QAAQgqD,WAAWrnD,KAElCmqF,SAAW,IAAIpzF,KACfozF,SAASjzF,SAAS,GAAK,GAAK,IAAIt5B,IAAQ,GAAK,GAAM,KACnDwsH,SAAWt5D,EAAKo5D,QAAQlhC,cAAcl4B,EAAKq5D,SAAU,KAErDE,SAAW,IAAItzF,KACfszF,SAASnzF,SAAS,GAAK,GAAK,IAAIt5B,GAAO,GAAK,GAAM,KAClD0sH,SAAWx5D,EAAKo5D,QAAQlhC,cAAcl4B,EAAKu5D,SAAU,mEAI7CtrF,EAAoBoE,OAC/B9mB,KAAKkuG,iBAOHlmH,EAAQ06B,EAAQ+lB,cAAc1iD,WAGhCgqC,EAAa,EACRxyC,EAAI,EAAGA,EAAIyK,IAASzK,EAC3BwyC,EAAa/xC,EAAM+xC,EAAYjJ,EAAQwoB,eAAe/xD,IAGpDwyC,EAAa,UAEVo+E,SAAU,wCAOXhI,EAAQnmG,KAAK+tG,SAASjrE,UAEtB9nC,EAASmrG,EAAM1oG,iBAEjBuC,KAAKiuG,WACP9H,EAAMkC,eAAeroG,KAAKiuG,eACrBA,SAAW,UAIZtqF,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAKyiH,EAAM5/E,eACvB5C,EAAGnlB,MAAQ2nG,EAAM7gG,eAGX8gG,EAAQpmG,KAAKghB,QAAQgqD,WAAWrnD,QACjCsqF,SAAW7H,EAAMz5B,cAAc3sE,KAAKguG,SAAU,OAK7CI,EAAUjI,EAAM1oG,iBAEhB4wG,EAAUjI,EAAM3oG,iBAGhB6wG,EAAY/sH,GAAO0lC,YACvBjnB,KAAKqqE,WACLrqE,KAAK2kB,kBACLpjC,GAAOU,MAAMmsH,EAASpzG,EAAQzZ,GAAOE,MACrC,IAAIF,IAGAgtH,EAAYhtH,GAAO0lC,YACvBjnB,KAAKqqE,WACLrqE,KAAK2kB,kBACLpjC,GAAOU,MAAMosH,EAASrzG,EAAQzZ,GAAOE,MACrC,IAAIF,IAGN4kH,EAAMnB,mBAAmBhlG,KAAK2kB,mBAC9BwhF,EAAM15B,kBAAkB6hC,GAExBlI,EAAMpB,mBAAmBhlG,KAAK2kB,mBAC9ByhF,EAAM35B,kBAAkB8hC,gCAGd3hC,GACN5sE,KAAKmuG,eACFK,aACAN,SAAU,OACVC,SAAU,GAIZnuG,KAAKkuG,eACH7jC,WAAW3mF,KAAKsc,KAAK6tG,QAAQpnF,0BAC7B9B,kBAAoB3kB,KAAK6tG,QAAQluC,8DAG7BiN,6CAIJ,IAAIghC,SA1IgB56C,IACN46C,WAAU,MCLtBa,+DAMLpoB,EAAS,KAGL1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,UAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,OAERmsE,EAAK,IAAItvD,GACfsvD,EAAG7jE,kBAAmB,UAEhBviC,EAAI,GACNq5E,EAAWumB,EACN9oG,EAAI,EAAGA,EAAIkxH,EAAMjN,UAAWjkH,EAAG,KAChComC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,GAAM/G,EAAGkJ,OACnBg7B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAcD,OAEb59C,EAAS,IAAIvtC,GAAOhE,EAAGkJ,GAC7BomG,EAAG5hG,WAAW60E,EAAUr+C,EAAMqN,KACzB9N,QAAQ4M,YAAYi/D,GAEzB/sB,EAAWr+C,oEAKLmrD,2CACCA,6CAIJ,IAAI6hC,SApDYz7C,IACFy7C,WAAU,OCAtBC,+DAgBD7zG,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAE7CqjH,EAAK,IAAInkF,GACfmkF,EAAG/pG,MAAQA,EACX+pG,EAAGlkF,SAAW,OAERiD,EAAK,IAAIN,GACAoxB,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAci4B,OAIjB7kH,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,EAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OACxBotH,EAAU,IAAIj0F,GACpBi0F,EAAQrqH,IAAIvE,EAAU,OAEhB6uH,EAAmB,IAAInuF,GAC7BmuF,EAAiB/zG,MAAQ8zG,EACzBC,EAAiB30F,QAAU,EAE3B20F,EAAiB1sF,OAAO1B,WAAakuF,EAAmBG,aACxDD,EAAiB1sF,OAAO5B,aAAeouF,EAAmBI,mBAC1DF,EAAiB1sF,OAAO3B,SAAWmuF,EAAmBK,mBAEhDC,EAAkB,IAAI3rF,GAC5B2rF,EAAgBjiH,OAChBiiH,EAAgB5pG,SAAS9gB,KAAK,EAAK,GAErBmwD,EAAKzzB,QAAQgqD,WAAWgkC,GAChCriC,cAAciiC,GAGpB7uH,EAAS,GAAG2W,QAAQ,GACpB3W,EAAS,GAAG2W,QAAQ,GACpB3W,EAAS,GAAG2W,QAAQ,GACpBi4G,EAAQrqH,IAAIvE,EAAU,GACtB6uH,EAAiB1sF,OAAO1B,WAAakuF,EAAmBO,aACxDD,EAAgB5pG,SAAS9gB,KAAK,EAAK,GACnC0qH,EAAgBjrF,eAAgB,MAE1BqiF,EAAQ3xD,EAAKzzB,QAAQgqD,WAAWgkC,GACtC5I,EAAMz5B,cAAciiC,OAGZjrF,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,EAAK,QAChBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/BpgC,EAAI,IAAIm3B,GACdn3B,EAAEs3B,SAAS,GAAK,GAChB4G,EAAKkrD,cAAcppF,EAAG,OAEhBspG,EAAK,IAAIx1D,GACfw1D,EAAGvzF,MAAQ8sG,EACXvZ,EAAGrzF,MAAQioB,EACXorE,EAAGz0D,aAAc,EACjBy0D,EAAGtjE,aAAajlC,IAAI,EAAK,GACzBuoG,EAAGrjE,aAAa3lC,UAChBgpG,EAAGt1D,WAAWjzC,IAAI,EAAK,GACvBuoG,EAAGj1D,kBAAoB,EACvBi1D,EAAG/0D,iBAAmB,IAEjB9W,QAAQ4M,YAAYi/D,GAI3B8hB,EAAQ9zF,SAAS,EAAK,QAChBq0F,EAAc,IAAIzuF,GACxByuF,EAAYr0G,MAAQ8zG,EACpBO,EAAYj1F,QAAU,EACtBi1F,EAAYvuF,YAAc,GAE1BuuF,EAAYhtF,OAAO1B,WAAakuF,EAAmBG,aACnDK,EAAYhtF,OAAO5B,aAAeouF,EAAmBS,cACrDD,EAAYhtF,OAAO3B,SAAWmuF,EAAmBU,cAE3CC,EAAa,IAAIhsF,GACvBgsF,EAAWtiH,OACXsiH,EAAWjqG,SAAS9gB,IAAI,EAAK,GAEfmwD,EAAKzzB,QAAQgqD,WAAWqkC,GAChC1iC,cAAcuiC,GAGpBP,EAAQ9zF,SAAS,EAAK,GACtBq0F,EAAYhtF,OAAO1B,WAAakuF,EAAmBO,aACnDI,EAAWjqG,SAAS9gB,IAAI,EAAK,GAEfmwD,EAAKzzB,QAAQgqD,WAAWqkC,GAChC1iC,cAAcuiC,OAGdn0G,EAAS,IAAIwe,GACnBxe,EAAOhY,SAAW,MAEZusH,EAAiB,IAAI7uF,GAC3B6uF,EAAez0G,MAAQE,EACvBu0G,EAAer1F,QAAU,EAEzBq1F,EAAeptF,OAAO1B,WAAakuF,EAAmBG,aACtDS,EAAeptF,OAAO5B,aAAeouF,EAAmBa,iBACxDD,EAAeptF,OAAO3B,SAAWmuF,EAAmBc,iBAE9CC,EAAgB,IAAIpsF,UAC1BosF,EAAc1iH,OACd0iH,EAAcrqG,SAAS9gB,IAAI,EAAK,GAElBmwD,EAAKzzB,QAAQgqD,WAAWykC,GAChC9iC,cAAc2iC,GAGpBv0G,EAAOhY,UAAY,EACnBusH,EAAeptF,OAAO1B,WAAakuF,EAAmBO,aACtDQ,EAAcrqG,SAAS9gB,IAAI,EAAK,GAElBmwD,EAAKzzB,QAAQgqD,WAAWykC,GAChC9iC,cAAc2iC,8DAGV1iC,2CACCA,6CAIJ,IAAI8hC,SAjJyB17C,IACf07C,gBAAe,EACfA,iBAAgB,EAChBA,qBAAoB,EACpBA,sBAAqB,EACrBA,iBAAgB,EAChBA,oBAAmB,EACnBA,kBAAiB,MACjBA,aAAY,MAASA,GAAmBI,mBACxCJ,gBAAe,MChCxC,IAAI3kC,GAAO,GACP2lC,GAAa3lC,GAAKsJ,KAGlBs8B,GAAqBr1B,IAAM,WAC7BvQ,GAAKsJ,UAAKn2F,MAGR0yH,GAAgBt1B,IAAM,WACxBvQ,GAAKsJ,KAAK,SAGRsgB,GAAgBC,GAAoB,QAMxCtO,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,OAJrB4tB,KAAuBC,KAAkBjc,IAIF,CAClDtgB,KAAM,SAAcw8B,GAClB,YAAqB3yH,IAAd2yH,EACHH,GAAW90B,KAAK8I,GAAS1jF,OACzB0vG,GAAW90B,KAAK8I,GAAS1jF,MAAOk/E,GAAU2wB,WCCrCC,+DAMDj1G,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAE7CqjH,EAAK,IAAInkF,GACfmkF,EAAG/pG,MAAQA,MAEL8oB,EAAK,IAAIN,GACAoxB,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAci4B,OAGjBmL,GAAO,EACXC,EAAM,EACFC,EAAM,EACVC,EAAM,GAGFnwH,EAAW,IAAIohB,MAAM,GAC3BphB,EAAS,GAAK,IAAIwB,IAAQ,EAAK,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAK,OAExBotH,EAAU,IAAIj0F,GACpBi0F,EAAQrqH,IAAIvE,EAAU,OAEhB6uH,EAAmB,IAAInuF,GAC7BmuF,EAAiB/zG,MAAQ8zG,EACzBC,EAAiB30F,QAAU,MAErB+0F,EAAkB,IAAI3rF,GAC5B2rF,EAAgBjiH,OAChBiiH,EAAgB5pG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAE3Dz7D,EAAKzzB,QAAQgqD,WAAWgkC,GAChCriC,cAAciiC,GAGpB7uH,EAAS,GAAG2W,QAAQ,GACpB3W,EAAS,GAAG2W,QAAQ,GACpB3W,EAAS,GAAG2W,QAAQ,GACpBi4G,EAAQrqH,IAAIvE,EAAU,GAEtBivH,EAAgB5pG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAE3Dz7D,EAAKzzB,QAAQgqD,WAAWgkC,GAChCriC,cAAciiC,GAGpBD,EAAQ9zF,SAAS,EAAK,QAEhBq0F,EAAc,IAAIzuF,GACxByuF,EAAYr0G,MAAQ8zG,EACpBO,EAAYj1F,QAAU,MAEhBo1F,EAAa,IAAIhsF,GACvBgsF,EAAWtiH,OACXsiH,EAAWjqG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAEtDz7D,EAAKzzB,QAAQgqD,WAAWqkC,GAChC1iC,cAAcuiC,GAGpBP,EAAQ9zF,SAAS,EAAK,GACtBw0F,EAAWjqG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAEtDz7D,EAAKzzB,QAAQgqD,WAAWqkC,GAChC1iC,cAAcuiC,OAGdn0G,EAAS,IAAIwe,GACnBxe,EAAOhY,SAAW,MAEZusH,EAAiB,IAAI7uF,GAC3B6uF,EAAez0G,MAAQE,EACvBu0G,EAAer1F,QAAU,MAEnBw1F,EAAgB,IAAIpsF,UAC1BosF,EAAc1iH,OACd0iH,EAAcrqG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAEzDz7D,EAAKzzB,QAAQgqD,WAAWykC,GAChC9iC,cAAc2iC,GAGpBv0G,EAAOhY,UAAY,EACnB0sH,EAAcrqG,SAAS9gB,IAAIrF,EAAc8wH,EAAKC,GAAM/wH,EAAcgxH,EAAKC,IAEzDz7D,EAAKzzB,QAAQgqD,WAAWykC,GAChC9iC,cAAc2iC,8DAGV1iC,2CACCA,WAKLujC,EAAY,EACZC,EAAO,IAAIjvG,MAAMgvG,GACnBE,EAAY,EAIP9yH,EAAI,EAAGA,EAAIyiB,KAAKqrE,eAAgB9tF,EAAG,KACpCuG,EAAQkc,KAAKsrE,SAAS/tF,GAEtB4oH,EAAQriH,EAAM6+B,SAASmgB,UACvBsjE,EAAQtiH,EAAM++B,SAASigB,UACvBwtE,EAAQnK,EAAM/3E,UACdmiF,EAAQnK,EAAMh4E,aAEhBkiF,EAAQ,GAAOC,EAAQ,IAEvBH,EAAKC,KADHE,EAAQD,EACUnK,EAEAC,EAGlBiK,IAAcF,SAOtBC,EAAK/8B,MAAK,SAAC/1F,EAAGS,UACLT,EAAIS,aAITR,EAAI,EACDA,EAAI8yH,GAAW,SACdtyH,EAAIqyH,EAAK7yH,KACRA,EAAI8yH,GAAaD,EAAK7yH,KAAOQ,KAChCR,EAGAQ,IAAMiiB,KAAK0qE,aACR1pD,QAAQwrD,YAAYzuF,8CAMtB,IAAI+xH,SAtJ0B98C,ICE5Bw9C,+DAKD7sF,EAAK,IAAIN,GACT5B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,IAAQ,GAAM,IAEnDkgC,EAAKkrD,cAAc9xE,EAAO,OAIpB4rG,EAAU,IAAIltF,GACpBktF,EAAQ1jH,SAAW,GACnB0jH,EAAQh6G,IAAInI,KAAK,GAAK,QAEhBoiH,EAAU,IAAIntF,GACpBmtF,EAAQ3jH,SAAW,GACnB2jH,EAAQj6G,IAAInI,IAAI,GAAK,QAEhB,IAAI/G,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBK,EAAIqB,GAAe,GAAK,IACxB0kC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI1G,EAAI,EAAK,KAAO,IAAML,GACtComC,EAAGnlB,MAAQvf,GAAewf,GAAOA,QAC3BgjB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc85B,EAAS,GAC5BhlF,EAAKkrD,cAAc+5B,EAAS,OAKxB+J,EAAW,IAAI/1F,GACrB+1F,EAAS51F,SAAS,IAAM,QAElB61F,EAAW,IAAIh2F,GACrBg2F,EAAS71F,SAAS,IAAM,GAAK,IAAIt5B,GAAO,GAAM,IAAM,GAAMkd,QAErD,IAAIlhB,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBK,EAAIqB,GAAe,GAAK,IACxB0kC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI1G,EAAI,EAAK,KAAO,IAAML,GACtComC,EAAGnlB,MAAQvf,GAAewf,GAAOA,QAC3BgjB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAc8jC,EAAU,GAC7BhvF,EAAKkrD,cAAc+jC,EAAU,OAKzBhiH,EAAM,IAAI/M,GAChB+M,EAAIpN,EAAE8hB,SAAS,MAAS3E,IACxB/P,EAAInL,EAAEG,KAAKtC,GAAM+N,MAAMT,EAAIpN,EAAG,IAAIC,GAAO,EAAK,GAAM,IAAIA,SAElDxB,EAAW,GAEX4wH,EAAY,IAAIj2F,GACtB36B,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,IAAQ,EAAK,GAAM,IAAIA,IAChExB,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,GAAO,EAAK,GAAM,IAAIA,IAC/DxB,EAAS,GAAK4B,GAAYC,MAAM8M,EAAK,IAAInN,GAAO,EAAK,IAAM,IAAIA,IAC/DovH,EAAUrsH,IAAIvE,EAAU,OAElB8O,EAAM,IAAIlN,GAChBkN,EAAIvN,EAAE8hB,UAAU,MAAS3E,IACzB5P,EAAItL,EAAEG,KAAKtC,GAAM+N,MAAMN,EAAIvN,EAAG,IAAIC,IAAQ,EAAK,GAAM,IAAIA,SAEnDqvH,EAAY,IAAIl2F,GACtB36B,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,IAAQ,EAAK,GAAM,IAAIA,IAChExB,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,GAAO,EAAK,GAAM,IAAIA,IAC/DxB,EAAS,GAAK4B,GAAYC,MAAMiN,EAAK,IAAItN,GAAO,EAAK,IAAM,IAAIA,IAC/DqvH,EAAUtsH,IAAIvE,EAAU,OAEnB,IAAIxC,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBK,EAAIqB,GAAe,GAAK,IACxB0kC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI1G,EAAG,KAAO,IAAML,GAChComC,EAAGnlB,MAAQ,MACLijB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GACrClC,EAAKkrD,cAAcgkC,EAAW,GAC9BlvF,EAAKkrD,cAAcikC,EAAW,OAK1Bh9B,EAAS,IAAIl5D,GACnBk5D,EAAO/4D,SAAS,IAAK,SAEfjyB,EAAO,IAAI8xB,GACjB9xB,EAAKiyB,SAAS,IAAM,IAAK,IAAIt5B,IAAQ,KAAM,MAAO,QAE5C0H,EAAQ,IAAIyxB,GAClBzxB,EAAM4xB,SAAS,IAAM,IAAK,IAAIt5B,GAAO,KAAM,OAAQ,QAE7CoiC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,UACrClC,EAAKkrD,cAAciH,EAAQ,GAC3BnyD,EAAKkrD,cAAc/jF,EAAM,GACzB64B,EAAKkrD,cAAc1jF,EAAO,8DAIlB2jF,2CACCA,6CAIJ,IAAI4jC,SAlHqBx9C,ICDvB69C,gFACU,IAAItvH,cACP,iBACI,IAAII,kBACJ,IAAIA,gBACN,IAAI+4B,gBACJ,IAAIA,KAMf4yF,aAAanoG,gBACbmoG,aAAa/pH,EAAEe,IAAI,GAAM,MACzB+oH,WAAWxyF,SAAS,GAAM,MAI1B0yF,YAAYjpH,IAAI,UAAW,aAC3BkpH,UAAY,WACZC,aAAajzD,iBAAiB/F,EAAK84D,YAAa94D,EAAK+4D,YAErD71F,WAAWkD,SAAS,EAAK,mEAIlB70B,UACNA,OACD,SACEunH,YAAY3vH,GAAK,aAGnB,SACE2vH,YAAY3vH,GAAK,aAGnB,SACE2vH,YAAY9mH,GAAK,aAGnB,SACE8mH,YAAY9mH,GAAK,aAGnB,SACE+mH,UAAY,GAAM/uG,aAGpB,SACE+uG,UAAY,GAAM/uG,QAItBgvG,aAAajzD,iBAAiBx6C,KAAKutG,YAAavtG,KAAKwtG,uCAGhD5gC,2CACCA,OAELvtF,EAAQ,IAAIkpB,GAClBlpB,EAAMG,OAAOqI,SAASmY,KAAKqtG,WAAY,GACvChuH,EAAMI,OAAOoI,SAASmY,KAAK2X,WAAY,GACvCt4B,EAAMK,WAAWgE,KAAKsc,KAAKstG,cAC3BjuH,EAAMM,WAAW+D,KAAKsc,KAAKytG,cAC3BpuH,EAAMwD,UAAW,MACXzD,EAAQ,IAAIipB,GAClBjpB,EAAM4I,MAAQ,MACR7I,EAAS,IAAIqpB,GACnBtpB,EAAWC,EAAQC,EAAOC,GAE1B+mF,GAAYqF,WAAW,EAAGzrE,KAAK2qE,gCAA0BxrF,EAAOsD,SAASqsF,QAAQ,UAC5EnE,YAAchB,GAEnBvD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,kCAA4BxrF,EAAOwD,kBAC7DgoF,YAAchB,WAGX1vE,EAAQ,IAAIqM,GAAQ,GAAK,GAAK,IAC9B3hB,EAAI,GACDpH,EAAI,EAAGA,EAAIyiB,KAAKqtG,WAAW7sH,UAAWjD,EAC7CoH,EAAEpH,GAAKoE,GAAYC,MAAMoe,KAAKstG,aAActtG,KAAKqtG,WAAWrtH,WAAWzC,GAAI,IAAIgE,IAEjF6kF,GAAY7oE,YAAY5Y,EAAGqb,KAAKqtG,WAAW7sH,QAASyZ,OAE/C,IAAI1c,EAAI,EAAGA,EAAIyiB,KAAK2X,WAAWn3B,UAAWjD,EAC7CoH,EAAEpH,GAAKoE,GAAYC,MAAMoe,KAAKytG,aAAcztG,KAAK2X,WAAW33B,WAAWzC,GAAI,IAAIgE,IAEjF6kF,GAAY7oE,YAAY5Y,EAAGqb,KAAK2X,WAAWn3B,QAASyZ,OAGhDN,EAAKxa,EAAOoD,OACZqX,EAAKza,EAAOqD,OAEZ2O,EAAK,IAAImV,GAAQ,EAAK,EAAK,GACjC8/D,GAAY1rE,UAAUf,EAAI,EAAKxI,OAEzBqR,EAAK,IAAI8D,GAAQ,EAAK,EAAK,GACjC8/D,GAAY1rE,UAAUd,EAAI,EAAK4I,6CAIxB,IAAIquG,SArGmB79C,ICCrB89C,+DAIL5nF,EAAK,KAEDruB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QAE7CoiC,EAAK,IAAIN,IACf6F,EAAKurB,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,OAIlBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,SAEd8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,IAAK,IACPmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,OAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,OAET,IAAInjC,EAAI,EAAGA,EAAI,KAAMA,EAAG,KACrBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAW,EAAM/G,EAAZ,EAAe,OACnBk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,OAKf7xE,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,IAAMrZ,GAAa,QAEjCmiB,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,GACNmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAG1BsuB,EAAK,KAEDtuB,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,SAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,IACtB6kC,EAAKsrB,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,OAGtBk2G,EAAK,KAEDl2G,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,UAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAK,GACtBq/B,EAAGnlB,OAAS,KAEZuyG,EAAKt8D,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,QAGpBgyF,EAAK,IAAItvD,GACTzO,EAAS,IAAIvtC,GAEnButC,EAAOxqC,KAAK,EAAK,GACjBuoG,EAAG5hG,WAAWi+B,EAAI6nF,EAAIjiF,GACtB+9D,EAAG7jE,kBAAmB,IACjBhI,QAAQ4M,YAAYi/D,OAErBmkB,EAAK,KAEDn2G,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,SAEf8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAM,KACvB0sH,EAAKv8D,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,IAG1Bi0B,EAAOxqC,KAAK,EAAK,IACjBuoG,EAAG5hG,WAAWk+B,EAAI6nF,EAAIliF,KACjB9N,QAAQ4M,YAAYi/D,OAErBokB,EAAK,KAEDttF,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAK,GACrB2sH,EAAKx8D,EAAKzzB,QAAQgqD,WAAWrnD,OAEvB9oB,EAAQ,IAAI6f,GACZgyD,EAAK,IAAIjsD,GAEfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,GACbyyD,EAAGhsD,SAAW,GAEd7lB,EAAMggB,SAAS,EAAK,GAAK,IAAIt5B,GAAO,GAAM,IAAM,GAChD0vH,EAAGtkC,cAAcD,GAEjB7xE,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,IAAQ,GAAK,GAAM,GAChD0vH,EAAGtkC,cAAcD,GAEjB7xE,EAAMggB,SAAS,GAAK,EAAK,IAAIt5B,GAAO,GAAK,GAAM,GAC/C0vH,EAAGtkC,cAAcD,GAGnB59C,EAAOxqC,IAAI,EAAK,GAChBuoG,EAAG5hG,WAAWi+B,EAAI+nF,EAAIniF,KACjB9N,QAAQ4M,YAAYi/D,OAErBqkB,EAAK,KAEDr2G,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,EAAK,QAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAK,MACrB4sH,EAAKz8D,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,IAG1Bi0B,EAAOxqC,IAAI,IAAK,GAChBuoG,EAAG5hG,WAAWgmH,EAAIC,EAAIpiF,KACjB9N,QAAQ4M,YAAYi/D,OAErBskB,EAAK,KAEDt2G,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,OAEd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAK,IAErB6sH,EAAK18D,EAAKzzB,QAAQgqD,WAAWrnD,IAC1BgpD,cAAc9xE,EAAO,QAGpByyB,EAAM,IAAIrE,GAChBqE,EAAIh0B,MAAQy3G,EACZzjF,EAAI9zB,MAAQ23G,EACZ7jF,EAAI/D,aAAajlC,IAAI,EAAK,GAC1BgpC,EAAI9D,aAAallC,IAAI,GAAM,OACrBzD,EAAIU,GAAOU,MACfqrC,EAAI9zB,MAAMkuB,cAAc4F,EAAI9D,aAAc,IAAIjoC,IAC9C+rC,EAAIh0B,MAAMouB,cAAc4F,EAAI/D,aAAc,IAAIhoC,IAC9C,IAAIA,IAEN+rC,EAAIlwC,OAASyD,EAAEmE,WACVg8B,QAAQ4M,YAAYN,OAGjBvpC,EAAS,GAET8W,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAWgB,MAEZ,IAAIxG,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,IAAM,EAAMP,EAASxG,EAAG,KAC3Bk3D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,sEAKpB+xE,2CACCA,6CAIJ,IAAIkkC,SAhMc99C,ICChBo+C,2EAGY,kBACA,WAEP,IAAIhjG,iBACC,IAAInB,oBACD,IAAIJ,qBACH,IAAIE,gBACqB,gBACP5vB,EACzCi0H,EAAgBC,cAChB,kBAAM,IAAIC,oBAES,iBACA,IAKdC,cAAgB,KAChBC,cAAgB,OAIhB,IAAIj0H,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EAAG,KAC/Ck0H,EAAQh9D,EAAKi9D,SAASn0H,KACvBo0H,cAAcF,EAAMr0G,MACzBq0G,EAAMG,QAAUn9D,EAAKxhC,OAAOC,YAAYu+F,EAAMr0G,KAAMq0G,KAGjD1jC,YAAc,MAEbt+D,EAAIglC,EAAK88D,uBACVM,YAAYrrH,WAAWlC,KAAK,GAAM,EAAMmrB,KACxCoiG,YAAYtrH,WAAWjC,IAAI,EAAK,EAAMmrB,KAEtCqiG,eAAe37G,GAAG7R,KAAK,EAAK,EAAMmrB,KAClCqiG,eAAe17G,GAAG9R,IAAI,GAAM,EAAMmrB,KAGlCqiG,eAAehlG,YAAc,IAE7BilG,aAAc,6DAGTnlC,8CACCA,QAENhlF,QAEDoY,KAAK+xG,oBACDC,EAAch0H,EAAM,EAAGozH,EAAgBC,cAAgB,GAEpD9zH,EAAI,EAAGA,EAAIy0H,IAAez0H,OAC5B00H,cAIJ99F,aACAE,cAEA,IAAI92B,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EAAG,KAC/Ck0H,EAAQzxG,KAAK0xG,SAASn0H,MACN,OAAlBk0H,EAAMG,aAIJxkH,EAAI,IAAIkZ,GAAQ,GAAK,GAAK,IAC5BmrG,IAAUzxG,KAAKkyG,YAAcT,EAAMU,QACrC/kH,EAAE+M,OAAO,GAAK,GAAK,IACVs3G,IAAUzxG,KAAKkyG,WACxB9kH,EAAE+M,OAAO,GAAK,GAAK,IACVs3G,EAAMU,SACf/kH,EAAE+M,OAAO,GAAK,GAAK,IAErBisE,GAAYgsC,SAASX,EAAMr0G,KAAMhQ,QAG7BA,EAAI,IAAIkZ,GAAQ,GAAK,GAAK,IAChC8/D,GAAYgsC,SAASpyG,KAAK6xG,YAAazkH,GAEvCg5E,GAAY/rE,YAAY2F,KAAK8xG,eAAe37G,GAAI6J,KAAK8xG,eAAe17G,GAAIhJ,OAElE+D,EAAK,IAAImV,GAAQ,GAAK,GAAK,IAC3B9D,EAAK,IAAI8D,GAAQ,GAAK,GAAK,OACjC8/D,GAAY1rE,UAAUsF,KAAK8xG,eAAe37G,GAAI,EAAKhF,GACnDi1E,GAAY1rE,UAAUsF,KAAK8xG,eAAe17G,GAAI,EAAKoM,GAE/CxC,KAAKkyG,WAAY,KACbG,EAAK,IAAI/rG,GAAQ,GAAK,GAAK,IAE3B/iB,EAAIhC,GAAOskB,MACf7F,KAAK8xG,eAAe37G,GACpB5U,GAAO87B,MACLrd,KAAKkyG,WAAWllG,SAChBzrB,GAAOU,MAAM+d,KAAK8xG,eAAe17G,GAAI4J,KAAK8xG,eAAe37G,GAAI,IAAI5U,IACjE,IAAIA,IAEN,IAAIA,IAEN6kF,GAAY1rE,UAAUnX,EAAG,EAAK8uH,OAIxBtiG,EAAS/P,KAAKiT,OAAOqB,YAC3B8xD,GAAYqF,WAAW,EAAGzrE,KAAK2qE,2CAAqC56D,SAC/D46D,YAAchB,KAGnB3pE,KAAK+tE,6CAGO/nF,UACNA,OACD,SACE+rH,aAAe/xG,KAAK+xG,sBAGtB,SACE7+F,wBAGF,SACEG,yBAGF,SACEC,mDAKUlW,OACblb,EAAI,IAAIX,GACdW,EAAEoC,IAAI,EAAM0b,KAAKwxG,cAAe,EAAMxxG,KAAKwxG,eAG3Cp0G,EAAK5W,WAAW5I,EAAIqB,GAAe+gB,KAAKuxG,cAAevxG,KAAKuxG,eAC5Dn0G,EAAK5W,WAAWC,EAAIxH,EAAc,EAAK,EAAM+gB,KAAKuxG,eAClDn0G,EAAK7W,WAAW7C,KAAK0Z,EAAK5W,YAC1B4W,EAAK7W,WAAW0c,QAAQ/gB,oCAGVkb,OACRvc,EAAI,IAAIU,GACdV,EAAEjD,EAAIqB,GAAe,GAAK,IAC1B4B,EAAE4F,EAAIxH,GAAe,GAAK,IAG1Bme,EAAK5W,WAAWyc,QAAQpiB,GACxBuc,EAAK7W,WAAW0c,QAAQpiB,OAGlBoQ,EAAK1P,GAAO87B,MAChB,GACA97B,GAAOskB,MAAMzI,EAAK5W,WAAY4W,EAAK7W,WAAYhF,GAAOE,MACtD,IAAIF,IAEA0wF,EAAM,IAAI1wF,IAAQye,KAAKuxG,cAAe,GACtCr/B,EAAM,IAAI3wF,GAAOye,KAAKuxG,cAAe,EAAMvxG,KAAKuxG,eAChDnkH,EAAI7L,GAAO+wH,OAAOrhH,EAAIghF,EAAKC,EAAK,IAAI3wF,IAE1C6b,EAAK5W,WAAWyc,QAAQ1hB,GAAOU,MAAMmL,EAAG6D,EAAI,IAAI1P,KAChD6b,EAAK7W,WAAW0c,QAAQ1hB,GAAOU,MAAMmL,EAAG6D,EAAI,IAAI1P,+CAI3C,IAAIhE,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EAAG,KAC/C4I,EAAI,EAAIlH,EAAc,EAAGmyH,EAAgBC,cACzCI,EAAQzxG,KAAK0xG,SAASvrH,MACN,OAAlBsrH,EAAMG,oBACHD,cAAcF,EAAMr0G,WACzBq0G,EAAMG,QAAU5xG,KAAKiT,OAAOC,YAAYu+F,EAAMr0G,KAAMq0G,gDAOnD,IAAIl0H,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EAAG,KAC/C4I,EAAI,EAAIlH,EAAc,EAAGmyH,EAAgBC,cACzCI,EAAQzxG,KAAK0xG,SAASvrH,MACN,OAAlBsrH,EAAMG,oBACH3+F,OAAOI,aAAao+F,EAAMG,cAC/BH,EAAMG,QAAU,+CAOf,IAAIr0H,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EAAG,KAC/C4I,EAAI,EAAIlH,EAAc,EAAGmyH,EAAgBC,cACzCI,EAAQzxG,KAAK0xG,SAASvrH,MACN,OAAlBsrH,EAAMG,aAIJW,EAAQ,IAAItlG,GAClBslG,EAAM7uH,KAAK+tH,EAAMr0G,WACZo1G,SAASf,EAAMr0G,UACdoT,EAAejvB,GAAOU,MAAMwvH,EAAMr0G,KAAKoS,YAAa+iG,EAAM/iG,YAAa,IAAIjuB,qBAC5E0xB,OAAOK,UAAUm+F,EAAMG,QAASH,EAAMr0G,KAAMoT,0CAM9C0hG,WAAa,SACb,IAAI30H,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,OAC7Cm0H,SAASn0H,GAAGyvB,SAAW,OACvB0kG,SAASn0H,GAAG40H,SAAU,0CAKd,EAAIlzH,EAAc,EAAG,UAG7B,OACEi0B,yBAGF,OACEG,kCAIAC,6DAKJL,OAAOkB,MAAMnU,KAAK6xG,aAAa,SAACD,OAC7BH,EAAQG,EAAQ3hG,gBACtBwhG,EAAMU,QAAU7rH,EAAkBinC,EAAKskF,YAAaJ,EAAMr0G,OACnD,SAGJ,IAAI7f,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,EACjB,OAA7ByiB,KAAK0xG,SAASn0H,GAAGq0H,SAKrBtrH,EAAkB0Z,KAAK6xG,YAAa7xG,KAAK0xG,SAASn0H,GAAG6f,wDAMlD80G,WAAa,SAEZ7yH,EAAQ,IAAIwtB,GAClBxtB,EAAMqE,KAAKsc,KAAK8xG,qBAGX7+F,OAAOoB,QACVh1B,GACA,SAACA,EAAuBuyH,OAChBH,EAA+BG,EAAQ3hG,SAEvC9wB,EAAS,IAAI4tB,UACP0kG,EAAMr0G,KAAKiX,QAAQl1B,EAAQE,IAGrC4nE,EAAKwrD,gBAAkBtzH,EACvB8nE,EAAKirD,WAAaT,EAClBxqD,EAAKirD,WAAWllG,SAAW7tB,EAAO6tB,SAC3B7tB,EAAO6tB,UAGT3tB,EAAMytB,uBAMX4lG,EAAc,IAAI3lG,GACfxvB,EAAI,EAAGA,EAAI6zH,EAAgBC,eAAgB9zH,KACjB,OAA7ByiB,KAAK0xG,SAASn0H,GAAGq0H,aAIfzyH,EAAS,IAAI4tB,GACP/M,KAAK0xG,SAASn0H,GAAG6f,KAAKiX,QAAQl1B,EAAQE,KAEnC2gB,KAAK0xG,SAASn0H,GAC3Bm1H,EAAYhvH,KAAKvE,GACjBE,EAAMytB,YAAc3tB,EAAO6tB,qDAUxB,IAAIokG,SA7SsBp+C,IACZo+C,gBAAe,QAgT3BE,GAAb,iCACgB,IAAIrkG,iBACA,gBACD,eAC0C,MCtThD0lG,6DAUJzlF,SAAW,IAAI/rB,MAAMwxG,EAAWnR,WAChCoR,WAAa,IAAIzxG,MAAMwxG,EAAWnR,aAClC,IAAIjkH,EAAI,EAAGA,EAAIo1H,EAAWnR,UAAWjkH,IACnCq1H,WAAWr1H,GAAK,IAAI4jB,MAAM,OAG3BwiB,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAG/B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAYtBA,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,EACjB8X,EAAMpO,IAAInI,IAAI,EAAK,QAEbooF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGrqD,UAAW,IACTimF,SAAWjiB,EAAO1Z,cAAcD,OAI/B7xE,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,MAEZ,IAAIxF,EAAI,EAAGA,EAAIo1H,EAAWnR,UAAWjkH,EAExComC,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,IACjComC,EAAG1T,SAAWwkC,EAAKm+D,WAAWr1H,KAEzBq1H,WAAWr1H,GAAG,IAAK,IACnB2vC,SAAS3vC,GAAKk3D,EAAKzzB,QAAQgqD,WAAWrnD,KAEtCuJ,SAAS3vC,GAAGovF,cAAc9xE,EAAO,6EAKxB6nB,OACZC,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,iBAErBH,IAAa3iB,KAAKsoG,SAAU,KACxBr4F,EAAW4S,EAASigB,UAAUpc,cAChCzW,IACeA,EACR,IAAK,MAId4S,IAAa7iB,KAAKsoG,SAAU,KACxBr4F,EAAW0S,EAASmgB,UAAUpc,cAChCzW,IACeA,EACR,IAAK,uCAKFyS,OACVC,EAAWD,EAAQE,cACnBC,EAAWH,EAAQI,iBAErBH,IAAa3iB,KAAKsoG,SAAU,KACxBr4F,EAAW4S,EAASigB,UAAUpc,cAChCzW,IACeA,EACR,IAAK,MAId4S,IAAa7iB,KAAKsoG,SAAU,KACxBr4F,EAAW0S,EAASmgB,UAAUpc,cAChCzW,IACeA,EACR,IAAK,iCAKR28D,2CACCA,OAIN,IAAIrvF,EAAI,EAAGA,EAAIo1H,EAAWnR,UAAWjkH,KACnCyiB,KAAK4yG,WAAWr1H,GAAG,QAIlBkkC,EAAOzhB,KAAKktB,SAAS3vC,GACrB8oG,EAASrmF,KAAKsoG,SAASxlE,UAEvB/nC,EAASiF,KAAKsoG,SAASxtG,WACvBE,EAASqrF,EAAO3+D,cAAc3sB,EAAOtO,IAAK,IAAIlL,IAE9C6jB,EAAWqc,EAAK8E,cAEhB1lC,EAAIU,GAAOU,MAAM+Y,EAAQoK,EAAU,IAAI7jB,SACzCV,EAAEG,gBAAkBC,KAIxBJ,EAAEuC,gBACI4uB,EAAIzwB,GAAO87B,MAAM,IAAOx8B,EAAG,IAAIU,IACrCkgC,EAAKyvB,WAAWl/B,EAAG5M,+CAKd,IAAIutG,SAtIiB3/C,IACP2/C,WAAU,MCLtBE,+DAKDlvF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAM,SAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,IACtBq/B,EAAGnlB,OAAS,IAEGi2C,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,OAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,KAAM,IAEPmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAM,SAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,EAAK,IACrBq/B,EAAGnlB,MAAQ,IAEIi2C,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAM,OAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,KAAM,IAERmwD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAM,SAEf8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,KAAK,EAAK,GACtBq/B,EAAGnlB,OAAS,IAEGi2C,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,OAItBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,GAAK,QAEd6xD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,WAEPyG,EAAW,CAAC,IAAM,GAAK,IAAM,GAAK,GAE/BnjC,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAY,EAAM/G,EAAb,GAAgB,QAC3BkkC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAErC+oD,EAAGhsD,SAAWA,EAASnjC,GACvBkkC,EAAKkrD,cAAcD,qEAKbE,2CACCA,6CAIJ,IAAIimC,SAlGsB7/C,ICAxBptB,6DAIJ5kB,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAK,QAIhCsZ,EAAQ,IAAI0e,GAClB1e,EAAMpO,IAAI5I,UACVgX,EAAM9X,SAAW,WAEX+vH,GAAQ,EACR9X,EAAO,EACP+X,EAAO,EACP9X,EAAO,EAEJ19G,EAAI,EAAGA,EAAI,MAAOA,EAAG,KACtBomC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAIrF,EAAc6zH,EAAM9X,GAAO/7G,EAAc8zH,EAAM9X,IAClDxmD,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAc9xE,EAAO,SAKtBA,EAAQ,IAAI6f,GAClB7f,EAAMggB,SAAS,IAAK,SACd8I,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAM,GACvBq/B,EAAGE,QAAS,MACNpC,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,UACrClC,EAAKkrD,cAAc9xE,EAAO,GAC1B4mB,EAAKgrD,kBAAkB,IAAIlrF,GAAO,IAAO,+DAIjCqrF,2CACCA,6CAIJ,IAAIhnC,SA5CcotB,ICLhBggD,gDAQH3sB,mBAAcrlE,QAAQgqD,aAEtBioC,EAAgB,EAehBC,EAAc,EAEdC,EAAkB,GAGlBC,EAAiB,GAAiB30G,GAAS,IAC3C40G,EAAgBD,EAXA,GAWiC30G,GAAS,MAG3D60G,iBAAmBL,MAElBlY,EAAkB,GAGxBA,EAAM58F,KAAK,IAAI5c,IAAQ0xH,EAAe,IACtClY,EAAM58F,KAAK,IAAI5c,GAAO,EAAK,IAG3Bw5G,EAAM58F,KACJ,IAAI5c,GACFw5G,EAAMA,EAAM39G,OAAS,GAAGQ,EAAIs1H,EAAcx0H,KAAK+hB,IAAI2yG,GACnDrY,EAAMA,EAAM39G,OAAS,GAAGqJ,EAAIysH,EAAcx0H,KAAK6hB,IAAI6yG,KAIvDrY,EAAM58F,KACJ,IAAI5c,GACFw5G,EAAMA,EAAM39G,OAAS,GAAGQ,EAAIs1H,EAAcx0H,KAAK+hB,IAAI4yG,GACnDtY,EAAMA,EAAM39G,OAAS,GAAGqJ,EAAIysH,EAAcx0H,KAAK6hB,IAAI8yG,SAK/Cx4G,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAIy2G,EAAM,GAAIA,EAAM,IAC1BlgG,EAAM9F,cAAe,EACrB8F,EAAM5F,UAAUvR,KAAKq3G,EAAM,QAErBruB,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAWyyF,EAEd9sB,EAAO1Z,cAAcD,OAIf7xE,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAIy2G,EAAM,GAAIA,EAAM,IAC1BlgG,EAAMpG,cAAe,EACrBoG,EAAM9F,cAAe,EACrB8F,EAAMlG,UAAUjR,KAAKq3G,EAAM,IAC3BlgG,EAAM5F,UAAUvR,KAAKq3G,EAAM,QAErBruB,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAWyyF,EAEd9sB,EAAO1Z,cAAcD,OAIf7xE,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAIy2G,EAAM,GAAIA,EAAM,IAC1BlgG,EAAMpG,cAAe,EACrBoG,EAAMlG,UAAUjR,KAAKq3G,EAAM,QAErBruB,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAWyyF,EAEd9sB,EAAO1Z,cAAcD,OAIf6mC,GAAwB,EAExBC,EAAY,EACZC,EAAa,IACbC,EAAY,EAKZC,EAAe,GAEfC,EAAc,EACdC,EAAiB,IAEjBlwF,EAAK,IAAIN,GACfM,EAAG52B,WAEC+mH,EAAYL,EAAa,EAAIE,EAC7BJ,IACFO,GAAaH,EAAe,GAE9BhwF,EAAGve,SAAS9gB,KAAKmwD,EAAK6+D,iBAAmB,EAAGQ,OAEtCC,EAAQt/D,EAAKzzB,QAAQgqD,WAAWrnD,GAEhClC,EAAO,IAAI/G,GACjB+G,EAAK5G,SAAS24F,EAAY,EAAGC,EAAa,OAEpCO,EAAM,IAAIt5F,GACVqgF,EAAkB,GACxBA,EAAM58F,KAAK,IAAI5c,IAAQmyH,EAAY,EAAIC,GAAeF,EAAa,IACnE1Y,EAAM58F,KAAK,IAAI5c,IAAQmyH,EAAY,GAAID,EAAa,EAAIE,IACxD5Y,EAAM58F,KAAK,IAAI5c,GAAOmyH,EAAY,GAAID,EAAa,EAAIE,IACvD5Y,EAAM58F,KAAK,IAAI5c,GAAOmyH,EAAY,EAAIC,GAAeF,EAAa,IAClEO,EAAI1vH,IAAIy2G,OAEFkZ,EAAiB,IAAI16F,GAC3B06F,EAAexnH,IAAInI,KAAKovH,EAAY,GAAMD,EAAa,EAAIE,GAAgB,EAAM,IACjFM,EAAelxH,SAAW4wH,EAAe,MAEnCO,EAAkB,IAAI36F,GAC5B26F,EAAgBznH,IAAInI,IAAIovH,EAAY,GAAID,EAAa,EAAIE,GAAgB,EAAM,IAC/EO,EAAgBnxH,SAAW4wH,EAAe,MAEpCjnC,EAAK,IAAIjsD,UACfisD,EAAG7xE,MAAQ4mB,EACXirD,EAAGzyD,QAAU,EACb85F,EAAMpnC,cAAcD,GAEpBA,EAAGhsD,SAAWkzF,EACdlnC,EAAG/rD,YAAckzF,EAEjBnnC,EAAG7xE,MAAQm5G,EACXD,EAAMpnC,cAAcD,GAEhB6mC,IACF7mC,EAAG7xE,MAAQo5G,EACXF,EAAMpnC,cAAcD,GAEpBA,EAAG7xE,MAAQq5G,EACXH,EAAMpnC,cAAcD,IAGtBqnC,EAAMtnC,kBAAkB,IAAIlrF,GAAO,GAAK,MAEnC4yH,QAAUJ,EAGjB5uC,GAASp0B,SAASzsD,IAAImwD,EAAK6+D,iBAAmB,EAAK,GACnDnuC,GAASp0B,SAASzsD,IAAImwD,EAAK6+D,iBAAmB,EAAK,GACnDnuC,GAAS9B,OAAS,KACb+wC,gBAAiB,iEAGRpuH,UACNA,OACD,SACEouH,gBAAkBp0G,KAAKo0G,eACxBp0G,KAAKo0G,gBACPjvC,GAASp0B,SAASzsD,IAAI0b,KAAKszG,iBAAmB,EAAK,iCAM/C1mC,GACVxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,wCACtCA,YAAchB,GAEd3pE,KAAKo0G,gBACRjvC,GAASp0B,SAASrtD,KAAKsc,KAAKm0G,QAAQ5tF,uDAE3BqmD,6CAIJ,IAAIomC,SAtMYhgD,ICFdqhD,oEACK,IAAIp0C,aACH,UAMTr4D,EAAI,GAEJ7nB,EAAWwB,GAAOymB,UAAUJ,GAE5B04D,EAAS7iF,EAAkBmqB,GAExBrqB,EAAI,EAAGA,EAAIqqB,IAAKrqB,EACvBwC,EAASxC,GAAG+G,IAAI,EAAK,GAAO,IAAO/G,GACnC+iF,EAAO/iF,GAAK,EAEd+iF,EAAO,GAAK,EACZA,EAAO,GAAK,MAGNrjF,EAAM,IAAI+iF,UAChB/iF,EAAI8C,SAAWA,EACf9C,EAAI+K,MAAQ4f,EACZ3qB,EAAIka,QAAQ7S,IAAI,GAAM,IACtBrH,EAAIqjF,OAASA,EACbrjF,EAAIu/D,QAAU,GACdv/D,EAAI6jF,GAAK,EACT7jF,EAAI+jF,GAAK,KAEJsqC,OAAOrgH,WAAWhO,KAElBgnH,QAAU,IACVqH,OAAOloG,SAASqxC,EAAKwvD,wEAGZj+G,UACNA,OACD,SACEi+G,QAAUjmH,GAAOygB,GAAOuB,KAAKikG,QAAU,IAAOxlG,SAC9C6sG,OAAOloG,SAASpD,KAAKikG,mBAGvB,SACEA,QAAUnmH,EAAM2gB,GAAOuB,KAAKikG,QAAU,IAAOxlG,SAC7C6sG,OAAOloG,SAASpD,KAAKikG,uCAKpBr3B,OACN1gD,EAAK0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAC7CwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,QAGFo/E,OAAOhuC,KAAKpxC,EAAI,2CAEV0gD,QAEN0+B,OAAO1tG,KAAKwoE,IAEjBA,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,2CACtCA,YAAchB,GACnBvD,GAAYqF,WACV,EACAzrE,KAAK2qE,qCAC8B,IAAf3qE,KAAKikG,QAAmBxlG,IAAOqwE,QAAQ,qBAExDnE,YAAchB,6CAIZ,IAAI0qC,SA1EWrhD,ICYbshD,kCAILjuB,+BAEI1iE,EAAK,IAAIN,GACfgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,OAE3B9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,QASjD4kH,EAPIz5B,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EAEXwrF,EAAO1Z,cAAcD,OAMf/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,GACrB6hH,EAAQ1xD,EAAKzzB,QAAQgqD,WAAWrnD,OAE1B9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,MAUfqjH,EARI15B,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,EACbksF,EAAMx5B,cAAcD,OAMd/oD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,GACrB8hH,EAAQ3xD,EAAKzzB,QAAQgqD,WAAWrnD,OAE1B9oB,EAAQ,IAAI0e,GAClB1e,EAAM9X,SAAW,MAEX2pF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,EACbmsF,EAAMz5B,cAAcD,OAIdy4B,EAAM,IAAI3vE,UAChB2vE,EAAIl6G,WAAWk7G,EAAOC,GACtBjB,EAAIj2E,SAAW,IACfi2E,EAAI/1E,UAAY,MACX09D,QAAUr4C,EAAKzzB,QAAQ4M,YAAYu3E,8DAOhCv4B,2CACCA,6CAIJ,IAAI0nC,SAvEkBthD,ICJpBuhD,gDAIHluB,mBAAcrlE,QAAQgqD,WAAW,IAAI3nD,IAGnCxoB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,KACpD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,GAAO,GAAM,KAClD8kG,EAAO1Z,cAAc9xE,EAAO,WAItB25G,EAAM,IAAIznF,GAEV63C,EAAK,EACLC,EAAK,GACL4vC,EAAK,EACLC,EAAK,EACLC,EAAU,GACVC,EAAa,GACVr3H,EAAI,EAAGA,EAAIo3H,IAAWp3H,EAAG,KAC1BihB,EAAa,EAAJjhB,EAAUmB,KAAKggB,GAAMi2G,EAC9BhxF,EAAK,IAAIN,GAEfM,EAAGI,eAAgB,MAEbnmC,EAAIgnF,EAAK6vC,EAAK/1H,KAAK+hB,IAAIjC,GACvB/X,EAAIo+E,EAAK6vC,EAAKh2H,KAAK6hB,IAAI/B,GAC7BmlB,EAAGve,SAAS9gB,IAAI1G,EAAG6I,GACnBk9B,EAAG52B,WACG00B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQ,IAAI0e,GAAcq7F,GAC7BloC,EAAGzyD,QAAU,EACbwH,EAAKkrD,cAAcD,GAEnB8nC,EAAI32C,QAAQp8C,UAGd+yF,EAAI/qF,YAAc,GAClB+qF,EAAI9qF,aAAe,IACd1I,QAAQ4M,YAAY4mF,8DAIjB5nC,2CACCA,6CAIJ,IAAI2nC,SAxDevhD,ICAjB6hD,+DAKDlxF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC5jC,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,GAAM,GAChCxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,IAC/BxB,EAAS,GAAK,IAAIwB,IAAQ,GAAM,QAC1BsZ,EAAQ,IAAI8kB,GAClB9kB,EAAM2xF,WAAWzsG,GACjBsmG,EAAO1Z,cAAc9xE,EAAO,KAIzBmmB,QAAQ0sD,sBAAqB,OAE5BhB,EAAK,IAAIjsD,GAEfisD,EAAGzyD,QAAU,EACbyyD,EAAG/rD,YAAc,QAITgD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGE,QAAS,EACZF,EAAGve,SAAS9gB,IAAI,GAAM,OAChBm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/BmxF,EAAY,IAAIp6F,GACtBo6F,EAAUj6F,SAAS,IAAK,KACxB6xD,EAAG7xE,MAAQi6G,EACXrzF,EAAKkrD,cAAcD,OAEbqoC,EAAU,IAAIr6F,GACpBq6F,EAAQl6F,SAAS,IAAM,IAAK,IAAIt5B,IAAQ,KAAM,MAAO,IACrDmrF,EAAG7xE,MAAQk6G,EACXtzF,EAAKkrD,cAAcD,OAEbsoC,EAAW,IAAIt6F,GACrBs6F,EAASn6F,SAAS,IAAM,IAAK,IAAIt5B,GAAO,KAAM,OAAQ,IACtDmrF,EAAG7xE,MAAQm6G,EACXvzF,EAAKkrD,cAAcD,OAIhB,IAAInvF,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpB03H,EAAK,IAAI17F,GAA8B,EAAhB76B,KAAKM,SAAiB,IACnD0tF,EAAG7xE,MAAQo6G,EACXvoC,EAAGhsD,SAAW,GACdgsD,EAAGzyD,QAAU,EACbyyD,EAAG/rD,YAAc,QACXgD,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGE,QAAS,EACZF,EAAGve,SAAS9gB,IAAoB,GAAhB5F,KAAKM,SAAkB,GAAsB,GAAhBN,KAAKM,SAAkB,GACvDy1D,EAAKzzB,QAAQgqD,WAAWrnD,GAChCgpD,cAAcD,qEAIXE,2CACCA,6CAIJ,IAAIioC,SAvEc7hD,ICEhBkiD,+DAKDvxF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC5jC,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,GAAM,GAChCxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,IAC/BxB,EAAS,GAAK,IAAIwB,IAAQ,GAAM,QAC1BsZ,EAAQ,IAAI8kB,GAClB9kB,EAAM2xF,WAAWzsG,GACjBsmG,EAAO1Z,cAAc9xE,EAAO,WAGxB8oB,EAAK,IAAIN,GACTqpD,EAAK,IAAIjsD,GACTosE,EAAK,IAAItvD,GAGNhgD,EAAI,EAAGA,EAAI,IAAKA,EAAG,KACpB07G,EAAiC,EAAhBv6G,KAAKM,SAAZ,GAA6B,GAAOzB,EAC9C27G,EAAS,GAAuB,EAAhBx6G,KAAKM,SAI3B2kC,EAAG52B,OAGH2/E,EAAG7xE,MAAQ,IAAI0e,GAAc,MAC7BmzD,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GACjBgD,EAAGve,SAAS9gB,IAAI20G,EAAQC,OAClBsL,EAAO/vD,EAAKzzB,QAAQgqD,WAAWrnD,GACrC6gF,EAAK73B,cAAcD,GAGnB83B,EAAKrzD,mBACH,IAAI5vD,GAAuB,IAAhB7C,KAAKM,SAAoB,IAAuB,IAAhBN,KAAKM,SAAoB,KACpEwlH,EAAK/mG,sBAKD5C,EAAQ,IAAI6f,GAClBgyD,EAAG7xE,MAAQA,EACXA,EAAMggB,SAAS,IAAK,GACpB6xD,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GACjBgD,EAAGve,SAAS9gB,IAAI20G,EAAQC,EAAS,SAC3Bic,EAAS1gE,EAAKzzB,QAAQgqD,WAAWrnD,GACvCwxF,EAAOxoC,cAAcD,GAErB7xE,EAAMggB,SAAS,IAAK,GACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAQC,EAAS,SAC3Bkc,EAAS3gE,EAAKzzB,QAAQgqD,WAAWrnD,GACvCyxF,EAAOzoC,cAAcD,GAErB7xE,EAAMggB,SAAS,IAAK,GACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAQC,EAAS,SAC3Bmc,EAAS5gE,EAAKzzB,QAAQgqD,WAAWrnD,GACvC0xF,EAAO1oC,cAAcD,GAGrBA,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GAEjB9lB,EAAMggB,SAAS,IAAK,KACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,EAAKC,EAAS,OACjCoc,EAAY7gE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1C2xF,EAAU3oC,cAAcD,GAExB7xE,EAAMggB,SAAS,IAAK,KACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,EAAKC,EAAS,OACjCqc,EAAY9gE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1C4xF,EAAU5oC,cAAcD,GAGxBA,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GAEjB9lB,EAAMggB,SAAS,IAAK,IACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,IAAKC,EAAS,OACjCsc,EAAY/gE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1C6xF,EAAU7oC,cAAcD,GAExB7xE,EAAMggB,SAAS,IAAK,IACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,IAAKC,EAAS,OACjCuc,EAAYhhE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1C8xF,EAAU9oC,cAAcD,GAGxBA,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GAEjB9lB,EAAMggB,SAAS,IAAM,KACrB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,GAAKC,EAAS,SACjCwc,EAAYjhE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1C+xF,EAAU/oC,cAAcD,GAExB7xE,EAAMggB,SAAS,IAAM,KACrB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,GAAKC,EAAS,SACjCyc,EAAYlhE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1CgyF,EAAUhpC,cAAcD,GAGxBA,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GAEjB9lB,EAAMggB,SAAS,GAAK,GACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,GAAKC,EAAS,QACjC0c,EAAYnhE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1CiyF,EAAUjpC,cAAcD,GAExB7xE,EAAMggB,SAAS,GAAK,GACpB8I,EAAGve,SAAS9gB,IAAI20G,EAAS,GAAKC,EAAS,QACjC2c,EAAYphE,EAAKzzB,QAAQgqD,WAAWrnD,GAC1CkyF,EAAUlpC,cAAcD,GAGxBmgB,EAAGz0D,aAAc,EAGjBy0D,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWkqH,EAAQ3Q,EAAM,IAAIjjH,GAAO03G,EAAQC,EAAS,QACnDl4E,QAAQ4M,YAAYi/D,GAIzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,KAC3BiuG,EAAG5hG,WAAWkqH,EAAQG,EAAW,IAAI/zH,GAAO03G,EAAS,IAAKC,EAAS,MAC9Dl4E,QAAQ4M,YAAYi/D,GAEzBA,EAAGnvD,WAAa9+C,GAAY,KAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWkqH,EAAQI,EAAW,IAAIh0H,GAAO03G,EAAS,IAAKC,EAAS,MAC9Dl4E,QAAQ4M,YAAYi/D,GAIzBA,EAAGnvD,WAAa9+C,GAAY,KAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWqqH,EAAWE,EAAW,IAAIj0H,GAAO03G,EAAS,IAAKC,EAAS,MACjEl4E,QAAQ4M,YAAYi/D,GAEzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,KAC3BiuG,EAAG5hG,WAAWsqH,EAAWE,EAAW,IAAIl0H,GAAO03G,EAAS,IAAKC,EAAS,MACjEl4E,QAAQ4M,YAAYi/D,GAGzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWkqH,EAAQC,EAAQ,IAAI7zH,GAAO03G,EAAQC,EAAS,QACrDl4E,QAAQ4M,YAAYi/D,GAEzBA,EAAG5hG,WAAWmqH,EAAQC,EAAQ,IAAI9zH,GAAO03G,EAAQC,EAAS,MACrDl4E,QAAQ4M,YAAYi/D,GAIzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWoqH,EAAQK,EAAW,IAAIn0H,GAAO03G,EAAS,GAAKC,EAAS,QAC9Dl4E,QAAQ4M,YAAYi/D,GAEzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAWoqH,EAAQM,EAAW,IAAIp0H,GAAO03G,EAAS,GAAKC,EAAS,QAC9Dl4E,QAAQ4M,YAAYi/D,GAIzBA,EAAGnvD,WAAa9+C,GAAY,IAC5BiuG,EAAGjvD,WAAah/C,EAAW,KAC3BiuG,EAAG5hG,WAAWyqH,EAAWE,EAAW,IAAIr0H,GAAO03G,EAAS,GAAKC,EAAS,SACjEl4E,QAAQ4M,YAAYi/D,GAEzBA,EAAGnvD,WAAa9+C,GAAY,KAC5BiuG,EAAGjvD,WAAah/C,EAAW,IAC3BiuG,EAAG5hG,WAAW0qH,EAAWE,EAAW,IAAIt0H,GAAO03G,EAAS,GAAKC,EAAS,SACjEl4E,QAAQ4M,YAAYi/D,GAI3BlpE,EAAG52B,WACG8N,EAAQ,IAAI6f,GAClBgyD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,OAGZ,IAAIx6B,EAAI,EAAGA,GAAK,KAAMA,EACzB0U,EAAMggB,SAAS,EAAM10B,EAAG,GACxBw9B,EAAGve,SAAS9gB,IAAI,EAAM6B,EAAI,GAAM,GAAO,EAAMA,KACxC66B,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,OAIvC,IAAIzgD,EAAI,EAAGA,GAAK,KAAMA,EACzBpxB,EAAMggB,SAAS,EAAMoR,EAAG,GACxBtI,EAAGve,SAAS9gB,IAAI,GAAO,EAAM2nC,EAAG,GAAO,EAAMA,KACxCjL,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,UAG5C7xE,EAAMggB,SAAS,EAAK,GACpB8I,EAAGve,SAAS9gB,IAAI,EAAK,KAChB08B,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,8DAGhCE,2CACCA,6CAIJ,IAAIsoC,SAnOkBliD,ICFpB8iD,+DAKDnyF,EAAK,IAAIN,GACTgjE,EAAS5xC,EAAKzzB,QAAQgqD,WAAWrnD,GAEjC5jC,EAAW,GACjBA,EAAS,GAAK,IAAIwB,IAAQ,GAAM,GAChCxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,GAC/BxB,EAAS,GAAK,IAAIwB,GAAO,GAAM,IAC/BxB,EAAS,GAAK,IAAIwB,IAAQ,GAAM,QAC1BsZ,EAAQ,IAAI8kB,GAClB9kB,EAAM2xF,WAAWzsG,GACjBsmG,EAAO1Z,cAAc9xE,EAAO,OAIxB8oB,EAAK,IAAIN,GACTqpD,EAAK,IAAIjsD,GACfkD,EAAG52B,WAEG4hH,EAAU,IAAIj0F,GACpBgyD,EAAG7xE,MAAQ8zG,EACXjiC,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GACjBguF,EAAQ9zF,SAAS,EAAK,OAEjB,IAAIt9B,EAAI,EAAGA,EAAI,KAAMA,EACxBomC,EAAGve,SAAS9gB,IAAI,EAAsB,GAAhB5F,KAAKM,SAAiB,GAAK,GAAW,IAAJzB,KACnDyjC,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,OAEvC,IAAInvF,EAAI,EAAGA,EAAI,KAAMA,EACxBomC,EAAGve,SAAS9gB,IAAI,GAAuB,GAAhB5F,KAAKM,SAAiB,GAAK,GAAW,IAAJzB,KACpDyjC,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,OAEvC,IAAInvF,EAAI,EAAGA,EAAI,KAAMA,EACxBomC,EAAGve,SAAS9gB,IAAI,GAAuB,GAAhB5F,KAAKM,SAAiB,GAAK,GAAW,IAAJzB,KACpDyjC,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,GAG5C/oD,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,OACfyxH,EAAM,CAAC,IAAIx0H,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,YAC/EotH,EAAQrqH,IAAIyxH,EAAKA,EAAI34H,QACrBsvF,EAAGzyD,QAAU,IACR+G,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,GAG1C/oD,EAAG52B,OACH42B,EAAGve,SAAS9gB,KAAK,GAAM,IACvBooF,EAAG7xE,MAAQ,IAAI0e,GAAc,GAC7BmzD,EAAGzyD,QAAU,EACbyyD,EAAG/rD,YAAc,GACjB+rD,EAAGhsD,SAAW,KACTM,QAAQgqD,WAAWrnD,GAAIgpD,cAAcD,8DAGhCE,2CACCA,6CAIJ,IAAIkpC,SAjEgB9iD,IClBlBgjD,+DAIHC,EAAQ,EACRC,EAAS,GAETC,EAAa,SAACj6G,EAAgBpT,EAAastH,OACzCj9F,EAAO,EAEPwK,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS1hB,KAAKoF,OACX24B,EAAOvlB,EAAM8uE,WAAWrnD,GAExB9oB,EAAQ,IAAI6f,GACd07F,EACFv7G,EAAMggB,SAAS,GAAMq7F,EAAQ,GAAMD,GAEnCp7G,EAAMggB,SAAS,GAAMo7F,EAAO,GAAMC,OAG9BxpC,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGzyD,QAAUd,GAAQ88F,EAAQC,GAC7BxpC,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,EACjBc,EAAKkrD,cAAcD,IAGfxwE,EAAQu4C,EAAKzzB,QAOb2C,EAAK,IAAIN,GACT5B,EAAOvlB,EAAM8uE,WAAWrnD,GACxB9oB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,KAAM,KAAM,IAAIA,GAAO,KAAM,UAC7CmrF,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQA,EACX6xE,EAAGhsD,SAAW,EACdgsD,EAAG/rD,YAAc,EACjBc,EAAKkrD,cAAcD,WAGbluF,EAAI,GACDjB,EAAI,EAAGA,EAAIiB,EAAGjB,QAChB,IAAI4I,EAAI,EAAGA,EAAI3H,EAAIjB,EAAG4I,IAAK,KACxBU,EAAS,IAAItF,GACS,KAAzB4E,EAAkB,IAAb3H,EAAI,EAAIjB,IAAkB24H,GAC/B34H,EAAI,KAAQ24H,EAAS,EAAID,GAASA,EAAQ,KAE7CE,EAAWj6G,EAAOrV,GAAQ,GAC1BsvH,EACEj6G,EACA3a,GAAOskB,MAAMhf,EAAQ,IAAItF,GAAO,GAAI20H,EAASD,GAAS,GAAI,IAAI10H,KAC9D,GAGQ,IAAN4E,GACFgwH,EACEj6G,EACA3a,GAAOskB,MAAMhf,EAAQ,IAAItF,GAAO,IAAO00H,EAAQC,GAASA,EAASD,GAAQ,IAAI10H,KAC7E,GAIA4E,IAAM3H,EAAIjB,EAAI,EAChB44H,EACEj6G,EACA3a,GAAOskB,MAAMhf,EAAQ,IAAItF,GAAgB,IAAT20H,GAAgBA,EAAS,EAAID,GAAS,GAAI,IAAI10H,KAC9E,GAGF40H,EACEj6G,EACA3a,GAAOskB,MAAMhf,EAAQ,IAAItF,GAAO,IAAO20H,EAASD,GAAQC,EAASD,GAAQ,IAAI10H,KAC7E,4FAQD,6CAIA,IAAIy0H,SA5FoBhjD,ICRtBqjD,qCAeAC,EAAW14H,EAAW6I,EAAW8vH,OAClC3R,EAAK,IAAIlqF,GACfkqF,EAAG/pF,SAAS,GAAM27F,EAAc,GAAMC,OAChC/pC,EAAK,IAAIjsD,GACfisD,EAAG7xE,MAAQ+pG,EACXl4B,EAAGzyD,QAAUy8F,MACP/yF,EAAK,IAAIN,GACfM,EAAG52B,OACH2/E,EAAGhsD,SAAWi2F,EACdjqC,EAAG/rD,YAAc,IACjBgD,EAAGve,SAAS9gB,IAAI1G,EAAG6I,GACnBk9B,EAAGnlB,MAAQ+3G,EAAa73H,KAAKggB,GAAK,EAAM,EACzBxC,EAAM8uE,WAAWrnD,GACzBgpD,cAAcD,sCAfnBgqC,EATEF,EAAe,GACfG,EAAkB,GAClBF,EAAgB,EAChBG,EAAa,GAwBbz/G,EAAU,IAAI5V,GAAO,GAAI,IAEzB2a,EAAQu4C,EAAKzzB,QACnB9kB,EAAMwqF,WAAWvvF,OAITytG,EAAK,IAAIlqF,GACfkqF,EAAG/pF,SAAS,GAAI,QAEV8I,EAAK,IAAIN,GACfM,EAAGve,SAAS9gB,IAAI,GAAI,IACP4X,EAAM8uE,WAAWrnD,GACzBgpD,cAAci4B,EAAI,GAIvB8R,EAAgB,OAEV9R,EAAK,IAAIlqF,GACfkqF,EAAG/pF,SAAS,GAAK,QACX6xD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,OACP0J,EAAK,IAAIN,GACfM,EAAG52B,OACH2/E,EAAG7xE,MAAQ+pG,EACXl4B,EAAGhsD,SAAW,EACdgsD,EAAG/rD,YAAc,IACjBgD,EAAGE,QAAS,EACZF,EAAGve,SAAS9gB,IAAI,GAAM,OAClBvG,EAAIme,EAAM8uE,WAAWrnD,GACzB5lC,EAAE4uF,cAAcD,GAChB3uF,EAAE0uF,kBAAkB,IAAIlrF,IAAQ,IAAO,KACvCxD,EAAEinH,mBAAmB,KAErBt4B,EAAGzyD,QAAU,GACb0J,EAAGve,SAAS9gB,KAAK,GAAM,KACvBvG,EAAIme,EAAM8uE,WAAWrnD,IACnBgpD,cAAcD,GAChB3uF,EAAE0uF,kBAAkB,IAAIlrF,GAAO,IAAO,KACtCxD,EAAEinH,oBAAoB,aAIlB6R,EAEKt5H,EAAI,EAAGA,EAAIq5H,IAAcr5H,EAEhC+4H,EADAO,EAAY,IAAJt5H,EAAUk5H,EAAiB,IAAMA,EAAgBG,EAAc,EACrDH,EAAgB,GAAK,GACvCH,EAAWO,EAAOJ,EAAgBD,EAAe,GAAK,GAExDK,EAAqB,IAAbD,EAAmBH,EAAiB,IAAMA,EAAgBG,EAAc,MAG3E,IAAIzwH,EAAI,EAAGA,EAAIywH,IAAczwH,EAAG,CAC/BA,EAAI,IACNuwH,GAAiB,YAIbI,EAAwB,GAAhBL,EAA2D,KAApCA,EAAgB,EAAID,GAAuBrwH,EAEvE5I,EAAI,EAAGA,EAAIq5H,EAAazwH,IAAK5I,EACpCs5H,EAAY,IAAJt5H,EAAUk5H,EAAiB,IAAMA,GAAiBG,EAAazwH,GAAM,EAC7EuwH,GAAiB,IACP,IAANn5H,GACF+4H,EACEO,EAAQ,KAAOJ,EAAgB,GAAMD,EACrCM,EAAQN,GACR,GAGAj5H,IAAMq5H,EAAazwH,EAAI,GACzBmwH,EACEO,EAAQ,KAAOJ,EAAgB,GAAMD,EACrCM,EAAQN,GACR,GAIJE,GAAiB,IACjBJ,EAAWO,EAAOC,GAAO,GACzBR,EAAWO,EAAOC,EAAQ,IAAON,EAAeC,IAAgB,GAChEH,EAAWO,EAAOC,EAAQ,IAAON,EAAeC,IAAgB,qFAO/D,IAAIJ,SAzHkBrjD,ICF7B+jD,GAAW32B,GAAwC2D,QAInD4P,GAAgBC,GAAoB,WACpCxO,GAAiBC,GAAwB,cAI1BsO,IAAkBvO,GAEjC,GAAGrB,QAFgD,SAAiBP,GACtE,OAAOuzB,GAAS/2G,KAAMwjF,EAAYlE,UAAUliG,OAAS,EAAIkiG,UAAU,QAAKpiG,ICL1EooG,GAAE,CAAEl7F,OAAQ,QAASm7F,OAAO,EAAMxD,OAAQ,GAAGgC,SAAWA,IAAW,CACjEA,QAASA,KCLX,OAAiB,CACfizB,YAAa,EACbC,oBAAqB,EACrBC,aAAc,EACdC,eAAgB,EAChBC,YAAa,EACbC,cAAe,EACfC,aAAc,EACdC,qBAAsB,EACtBC,SAAU,EACVC,kBAAmB,EACnBC,eAAgB,EAChBC,gBAAiB,EACjBC,kBAAmB,EACnBC,UAAW,EACXC,cAAe,EACfC,aAAc,EACdC,SAAU,EACVC,iBAAkB,EAClBC,OAAQ,EACRC,YAAa,EACbC,cAAe,EACfC,cAAe,EACfC,eAAgB,EAChBC,aAAc,EACdC,cAAe,EACfC,iBAAkB,EAClBC,iBAAkB,EAClBC,eAAgB,EAChBC,iBAAkB,EAClBC,cAAe,EACfC,UAAW,GC5Bb,IAAK,IAAIC,MAAmBC,GAAc,CACxC,IAAIC,GAAa/+B,GAAO6+B,IACpBG,GAAsBD,IAAcA,GAAWh6B,UAEnD,GAAIi6B,IAAuBA,GAAoBn1B,UAAYA,GAAS,IAClElH,GAA4Bq8B,GAAqB,UAAWn1B,IAC5D,MAAO1J,IACP6+B,GAAoBn1B,QAAUA,IC+BlC,IAAMo1B,GAAW,oBAGXC,GAAW,EACXC,GAAY,EACZC,GAAS,EACTC,GAAW,EAKXC,GAAe,EACfC,GAAkB,EAKXC,yBAGC3sH,kBACLqN,OAASrN,qDAIPiT,KAAK5F,gBAOHu/G,yDAEHH,gCAFsBE,IASnBE,0BAGCC,EAAYC,yCAChBL,KACDM,iBAAmBF,IACnBG,YAAcF,gCANYJ,IAUtBO,yBASC/9G,gCAR4B,0BAEb,yBACA,0BACC,uBACH,2BACI,MAGrB4uE,EAAU,IAAIznD,GACpBynD,EAAQ/9E,YACHg0B,OAAS7kB,EAAM8uE,WAAWF,OAEzBovC,EAAe,IAAIx/F,GACzBw/F,EAAar/F,SAAS,GAAK,MACX7a,KAAK+gB,OAAO4rD,cAAcutC,EAAc,GAChDruB,YAAY,IAAI8tB,SAEnB54F,OAAO8qE,YAAY7rF,2DAIxBm6G,EACAC,EACAC,EACAC,QAEKC,kBAAoBJ,OACpBK,mBAAqBJ,OACrBK,gBAAkBJ,OAClBK,oBAAsBJ,wCAGRK,QACdC,cAAcz8G,KAAKw8G,QACnBE,0DAGiBF,QACjBC,cAAc5mB,OAAOh0F,KAAK46G,cAAclmG,QAAQimG,SAChDE,qEAI6B,IAA9B76G,KAAK46G,cAAcx9H,YAChB09H,kBAAoB,QAGpBA,kBAAoB,OACpBF,cAAc72B,SAAQ,SAAC42B,GACtBA,EAAGZ,iBAAmBxsF,EAAKutF,oBAC7BvtF,EAAKutF,kBAAoBH,EAAGZ,uEAO5BgB,EAAqB/6G,KAAK+gB,OAAOua,eAAe,IAAI/5C,GAAO,EAAG,GAAI,IAAIA,WACrEw5H,EAAmBrkH,QACxBnV,GAAO4D,MAAM41H,EAAoB/6G,KAAK+gB,OAAO0F,uEAKzCu0F,EAAuBh7G,KAAK+gB,OAAOua,eAAe,IAAI/5C,GAAO,EAAG,GAAI,IAAIA,WACvEy5H,EAAqBtkH,QAC1BnV,GAAO4D,MAAM61H,EAAsBh7G,KAAK+gB,OAAO0F,mEAM3CK,EAAU9mB,KAAKi7G,qBAAqBvkH,SAAS,EAAMsJ,KAAK+gB,OAAOqN,WACjEtH,EAAQ9hC,SAAWgb,KAAK06G,qBAC1B5zF,EAAQpwB,QAAQsJ,KAAK06G,oBAAsB5zF,EAAQ9hC,eAEhD+7B,OAAOowB,mBACVrqB,EAAQpwB,QAAQsJ,KAAK86G,mBACrB96G,KAAK+gB,OAAOtjB,uBAITsjB,OAAOgoF,oBACe,GAAzB/oG,KAAK86G,kBAA0B96G,KAAK+gB,OAAO+sC,cAAgB9tD,KAAK+gB,OAAO4+C,0BAInEq7C,EAAuBh7G,KAAKk7G,qBAE5BC,GAAsB,EADAH,EAAqB53H,iBAE5C29B,OAAOmwB,WACV8pE,EAAqBtkH,QAAQsJ,KAAK86G,kBAAoBK,GACtDn7G,KAAK+gB,OAAOtjB,sDAIG29G,OAEbC,EAAe,SACXD,GAAgB9B,GAASC,UAC1BD,GACH+B,EAAer7G,KAAKu6G,6BAEjBhB,GACH8B,EAAer7G,KAAKw6G,4CAOlBQ,EAAuBh7G,KAAK+gB,OAAOua,eAAe,IAAI/5C,GAAO,EAAG,GAAI,IAAIA,IACxE+5H,EAAe/5H,GAAO4D,MAAM6a,KAAKk7G,qBAAsBF,GAGzDr0F,EAAQ,KACR00F,EAAeC,EACjB30F,EAAQ3mB,KAAKy6G,oBACR,CAAA,KAAIY,EAAeC,UACxB30F,GAAS3mB,KAAKy6G,qBAIX15F,OAAOmwB,WACV8pE,EAAqBtkH,QAAQsJ,KAAK86G,kBAAoBn0F,GACtD3mB,KAAK+gB,OAAOtjB,qDAIE29G,OACZG,EAAgB,SACZH,GAAgBhC,GAAWC,UAC5BD,GACHmC,EAAgB,cAEblC,GACHkC,GAAiB,QAKhBx6F,OAAO2+C,YAAY67C,YAIfC,yBAMCt/G,kBACLu/G,QAAU,OAGT3wC,EAAU,IAAIznD,GACpBynD,EAAQ/9E,YACHg0B,OAAS7kB,EAAM8uE,WAAWF,QAC1B/pD,OAAO26F,kBAAkB,OAExB37H,EAAW,GACjBA,EAAS,GAAK,IAAIwB,GAAO,IAAK,GAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAG,KAC5BxB,EAAS,GAAK,IAAIwB,GAAO,IAAK,KAC9BxB,EAAS,GAAK,IAAIwB,GAAO,EAAG,IAC5BxB,EAAS,GAAK,IAAIwB,IAAQ,EAAG,IAC7BxB,EAAS,GAAK,IAAIwB,IAAQ,IAAK,KAC/BxB,EAAS,GAAK,IAAIwB,IAAQ,EAAG,KAC7BxB,EAAS,GAAK,IAAIwB,IAAQ,IAAK,OACzB24H,EAAe,IAAIx/F,GACzBw/F,EAAa51H,IAAIvE,EAAU,QACtBghC,OAAO4rD,cAAcutC,EAAc,QAGlCnU,EAAW,IAAIxoE,GACrBwoE,EAASzsG,MAAQ0G,KAAK+gB,OACtBglF,EAAS3tE,aAAc,EACvB2tE,EAASroE,WAAa,EACtBqoE,EAASnoE,WAAa,EACtBmoE,EAASv8E,aAAa3lC,cAEhBs2H,EAAkB,IAClBC,GAAoB,GACpBuB,EAAwB,IACxBC,EAAyB,IACzBC,EAA4B,IAC5BC,EAA6B,IAG/BC,EAAO,IAAI9B,GAAO/9G,GACtB6/G,EAAKC,mBACH7B,EACAC,EACAuB,EACAE,GAEF9V,EAASvsG,MAAQuiH,EAAKh7F,OACtBglF,EAASx8E,aAAajlC,KAAK,EAAG,KAC9B4X,EAAM0xB,YAAYm4E,QACb0V,QAAQt9G,KAAK49G,IAGlBA,EAAO,IAAI9B,GAAO/9G,IACb8/G,mBACH7B,EACAC,EACAuB,EACAE,GAEF9V,EAASvsG,MAAQuiH,EAAKh7F,OACtBglF,EAASx8E,aAAajlC,IAAI,EAAG,KAC7B4X,EAAM0xB,YAAYm4E,QACb0V,QAAQt9G,KAAK49G,IAGlBA,EAAO,IAAI9B,GAAO/9G,IACb8/G,mBACH7B,EACAC,EACAwB,EACAE,GAEF/V,EAASvsG,MAAQuiH,EAAKh7F,OACtBglF,EAASx8E,aAAajlC,KAAK,EAAG,UACzB23H,QAAU//G,EAAM0xB,YAAYm4E,QAC5B0V,QAAQt9G,KAAK49G,IAGlBA,EAAO,IAAI9B,GAAO/9G,IACb8/G,mBACH7B,EACAC,EACAwB,EACAE,GAEF/V,EAASvsG,MAAQuiH,EAAKh7F,OACtBglF,EAASx8E,aAAajlC,IAAI,EAAG,UACxB43H,QAAUhgH,EAAM0xB,YAAYm4E,QAC5B0V,QAAQt9G,KAAK49G,4CAGNX,QACPK,QAAQ13B,SAAQ,SAACg4B,GACpBA,EAAKI,yBAEFV,QAAQ13B,SAAQ,SAACg4B,GACpBA,EAAKK,YAAYhB,UAIbiB,EAAY,GAAKlD,GAEjBmD,EADkB,IAAMnD,GACY,GACtCoD,EAAe,SACXnB,GAAgBhC,GAAWC,UAC5BD,GACHmD,EAAeF,aAEZhD,GACHkD,GAAgBF,MAKdG,EAAWx8G,KAAKi8G,QAAQQ,gBAC1BC,EAAcH,EAAeC,EAE3BG,EAAWH,GADjBE,EAAcv+H,EAAQu+H,GAAcJ,EAAiBA,SAEhDL,QAAQW,UAAUD,EAAUA,QAC5BT,QAAQU,UAAUD,EAAUA,YAmBxBE,6DASJ77F,QAAQ0lE,WAAW,IAAInlG,GAAO,EAAK,MACnCy/B,QAAQ4pD,uBAAuB3jB,EAAK/E,2BAIjC4oB,EAAU,IAAIznD,KACf0nD,aAAe9jB,EAAKjmC,QAAQgqD,WAAWF,OAEtCovC,EAAe,IAAIx/F,GACnBoiG,EAAa,IAAIr8F,GACvBq8F,EAAWjiH,MAAQq/G,EACnB4C,EAAWz6F,UAAW,EAEtB63F,EAAar/F,SAAS,EAAG,EAAG,IAAIt5B,IAAQ,GAAI,IAAK,GAAK43H,QAClD4D,EAAoB91D,EAAK8jB,aAAa4B,cAAcmwC,UACxDC,EAAkBlxB,YAAY,IAAI+tB,GAAc,IAAK,IAErDM,EAAar/F,SAAS,EAAG,EAAG,IAAIt5B,GAAO,EAAG,KAAM,GAAK43H,KACrD4D,EAAoB91D,EAAK8jB,aAAa4B,cAAcmwC,IAClCjxB,YAAY,IAAI+tB,GAAc,IAAK,MAMlD3Q,MAAQ,IAAIuS,GAAMv0D,EAAKjmC,WAEvBg8F,eAAiB,iEAGRh3H,UACNA,OACD,SACEg3H,gBAAkB5D,aAEpB,SACE4D,gBAAkB3D,aAEpB,SACE2D,gBAAkB1D,aAEpB,SACE0D,gBAAkBzD,6DAGRvzH,uCAIHA,UACRA,OACD,SACEg3H,iBAAmB5D,aAErB,SACE4D,iBAAmB3D,aAErB,SACE2D,iBAAmB1D,aAErB,SACE0D,iBAAmBzD,+DAGPvzH,yCAqBH08B,GAClBm6F,EAAWI,cAAcv6F,GAAS,sCAGlBA,GAChBm6F,EAAWI,cAAcv6F,GAAS,gCAiBxBkqD,QAKLq8B,MAAMj3B,OAAOhyE,KAAKg9G,wDAEZpwC,GAGXxG,GAAYqF,WAAW,EAAGzrE,KAAK2qE,WAAY,yCACtCA,YAAchB,2CAlDOjnD,EAAoBw6F,OACxC5/H,EAAIolC,EAAQE,cACZ7kC,EAAI2kC,EAAQI,cACZq6F,EAAO7/H,EAAEopC,cACT02F,EAAOr/H,EAAE2oC,cAEVy2F,GAASC,IAIVD,EAAKE,YAAc7D,IAAgB4D,EAAKC,YAAc5D,GACxDoD,EAAWS,mBAAmBhgI,EAAGS,EAAGm/H,GAC3BC,EAAKE,YAAc5D,IAAmB2D,EAAKC,YAAc7D,IAClEqD,EAAWS,mBAAmBv/H,EAAGT,EAAG4/H,+CAatCK,EACAR,EACAG,OAEMnB,EAAOwB,EAAYz6E,UAAUpc,cAC7B82F,EAAQT,EAAkBr2F,cAC5Bw2F,EACFnB,EAAK0B,cAAcD,GAEnBzB,EAAK2B,iBAAiBF,2CAsBjB,IAAIX,SAtIiB7pD,IvM/VnB2qD,4EAGa,4BACQ,WAChB,oBACiC,IAAIC,wBACD,IAAIA,KASjD58F,QAAQ0lE,WAAW,CAAE9oG,EAAG,EAAG6I,GAAI,OAE/Bo3H,gBAAgBC,MAAQ,MACxBD,gBAAgBE,MAAQ,IACxBF,gBAAgBG,MAAQ,MAExBC,mBAAmBH,MAAQ,KAC3BG,mBAAmBF,MAAQ,IAC3BE,mBAAmBD,MAAQ,QAE1Br6F,EAAgB,IAAIN,GACpBqpD,EAAmB,IAAIjsD,GAQ7BkD,EAAG52B,OACH42B,EAAGve,SAASxnB,EAAI,EAChB+lC,EAAGve,SAAS3e,EAAI,EAAI,GAAMk3H,EAAOO,kBAC5BC,aAAe1pE,EAAKzzB,QAAQgqD,WAAWrnD,OACtCy6F,EAAgC,IAAI1jG,GAC1C0jG,EAAcvjG,SAAS,GAAK,GAAM8iG,EAAOO,iBACzCxxC,EAAG7xE,MAAQujH,EACX1xC,EAAGzyD,QAAU,GAAK,EAAI0jG,EAAOO,mBAExBC,aAAaxxC,cAAcD,GAQhC/oD,EAAG52B,OACH42B,EAAGve,SAASxnB,EAAI,EAChB+lC,EAAGve,SAAS3e,EAAI,IACX43H,UAAY5pE,EAAKzzB,QAAQgqD,WAAWrnD,OACnC26F,EAA4B,IAAI/kG,GACtC+kG,EAAWv7H,SAAW,GACtB2pF,EAAG7xE,MAAQyjH,EACX5xC,EAAGzyD,QAAU,GAAe,GAAVv7B,KAAKggB,GAAW,IAElCguE,EAAGhsD,SAAW,KACT29F,UAAU1xC,cAAcD,OAYvBmgB,EAAK,IAAItvD,GACfsvD,EAAG5hG,WAAWwpD,EAAK4pE,UAAW5pE,EAAK0pE,aAAc,CAAEvgI,EAAG,EAAG6I,EAAG,IAC5DomG,EAAGtjE,aAAajlC,IAAI,EAAG,GACvBuoG,EAAGrjE,aAAallC,IAAI,GAAI,GAAMq5H,EAAOO,iBACrCrxB,EAAG7jE,kBAAmB,EACtB6jE,EAAGv0D,aAAc,EACjBu0D,EAAG/uD,eAAiB,KACfygF,WAAa9pE,EAAKzzB,QAAQ4M,YAAYi/D,GAS3ClpE,EAAG52B,OACH42B,EAAGve,SAASxnB,EAAI,EAChB+lC,EAAGve,SAAS3e,EAAI,IACX+3H,WAAa/pE,EAAKzzB,QAAQgqD,WAAWrnD,OACpC86F,EAA2B,IAAIp/F,UACrCo/F,EAAYn6H,IAAI,CAAE1G,GAAI,IAAK6I,EAAG,GAAK,CAAE7I,EAAG,IAAK6I,EAAG,IAChDimF,EAAG7xE,MAAQ4jH,EACX/xC,EAAGhsD,SAAW,KACT89F,WAAW7xC,cAAcD,8DAGpBE,OACN1gD,EAAa0gD,EAASxiD,GAAK,EAAM,EAAMwiD,EAASxiD,GAAK,EAErDwiD,EAASC,QAAUD,EAASE,aAC9B5gD,EAAK,2CAGI0gD,QAEN8xC,wBAA0BxyF,EAC3BlsB,KAAK0+G,wBAA0B,SAC5BA,uBAAyB,OACzBC,eAAyC,KAAxB3+G,KAAK2+G,gBAAyB,GAAK,QAGvDC,EAAc,EAGZv4G,EAAQ,QAETw4G,QAAU,EAAIx4G,GAASrG,KAAK6+G,OAASx4G,EAAQrG,KAAKm+G,aAAa53F,cAAc3oC,OAC7EqgI,mBAAmBa,aAAe9+G,KAAK2+G,eAAiB3+G,KAAK6+G,YAE7DZ,mBAAmBlmH,KAAKm0B,OACzB6yF,EAAyB/+G,KAAKi+G,mBAAmB9+H,OAErD4/H,EAAiB5gI,EAAQ4gI,GAAiB,GAAI,IAI9CH,EAAczgI,EAFdygI,EAAcG,EAAiB/+G,KAAKghB,QAAQsqC,aAAa7kE,EAEtB7H,GAAY,IAAKA,EAAW,SAI3DogI,EAAuBh/G,KAAKm+G,aAAa74G,WAC7C05G,EAAezgH,GAAeygH,QACzBnB,gBAAgBiB,aAAeF,EAAcI,OAE7CnB,gBAAgB9lH,KAAKm0B,OACtB+yF,EAAsBj/G,KAAK69G,gBAAgB1+H,OAE3CT,KAAKwnG,IAAI+4B,GAAe,MAC1BA,EAAc,OAIVC,EAAgCD,GAAe,EAAIvgI,KAAKggB,GAAK,SAE9D6/G,WAAWtxB,cAAciyB,6CAIvB,IAAIvB,SAzJa3qD,IACZ2qD,mBAAkB,OwM1B9BwB,GxM0LEvB,gDACW,aACA,aACA,oBACO,qBACC,gBACL,cACF,yCAEJ1xF,QACLkzF,SAAWlzF,GAAMlsB,KAAKo/G,SAAWp/G,KAAK8+G,kBACrCO,EAAsB,EAAInzF,GAAOlsB,KAAK8+G,aAAe9+G,KAAKs/G,oBAC3DngI,OACH6gB,KAAK89G,MAAQ99G,KAAK8+G,aAAe9+G,KAAK+9G,MAAQ/9G,KAAKo/G,SAAWp/G,KAAKg+G,MAAQqB,OACxEC,cAAgBt/G,KAAK8+G,sByM9I9BhhH,GAAa,YAAa,aAAcuiG,GAAUh7D,QAClDvnC,GAAa,YAAa,iBAAkBijG,GAAa17D,QACzDvnC,GAAa,WAAY,sBAAuBqjG,GAAmB97D,QACnEvnC,GAAa,YAAa,QAASwjG,GAAMj8D,QACzCvnC,GAAa,SAAU,iBAAkBgkG,GAAaz8D,QACtDvnC,GAAa,SAAU,qBAAsBikG,GAAgB18D,QAC7DvnC,GAAa,WAAY,QAASokG,GAAc78D,QAChDvnC,GAAa,WAAY,iBAAkB0kG,GAAiBn9D,QAC5DvnC,GAAa,WAAY,iBAAkB6kG,GAAYt9D,QACvDvnC,GAAa,WAAY,UAAWilG,GAAY19D,QAChDvnC,GAAa,WAAY,cAAeklG,GAAW39D,QACnDvnC,GAAa,YAAa,UAAWqlG,GAAQ99D,QAC7CvnC,GAAa,YAAa,WAAYuW,GAAQgxB,QAC9CvnC,GAAa,WAAY,aAAc4mG,GAAUr/D,QACjDvnC,GAAa,SAAU,cAAeozC,GAAW7L,QACjDvnC,GAAa,aAAc,kBAAmBinG,GAAe1/D,QAC7DvnC,GAAa,WAAY,cAAeonG,GAAW7/D,QACnDvnC,GAAa,WAAY,qBAAsBynG,GAAiBlgE,QAChEvnC,GAAa,SAAU,oBAAqB8nG,GAAOvgE,QACnDvnC,GAAa,SAAU,kBAAmBuoG,GAAehhE,QACzDvnC,GAAa,WAAY,gBAAiBwoG,GAAajhE,QACvDvnC,GAAa,SAAU,QAAS0oG,GAAMnhE,QACtCvnC,GAAa,SAAU,cAAeypG,GAAmBliE,QACzDvnC,GAAa,SAAU,aAAc0pG,GAAWniE,QAChDvnC,GAAa,WAAY,YAAa2pG,GAASpiE,QAC/CvnC,GAAa,WAAY,aAAciqG,GAAU1iE,QACjDvnC,GAAa,WAAY,gBAAiBoqG,GAAa7iE,QACvDvnC,GAAa,WAAY,MAAO0qG,GAAInjE,QACpCvnC,GAAa,SAAU,YAAayrG,GAAUlkE,QAC9CvnC,GAAa,SAAU,WAAY8rG,GAASvkE,QAC5CvnC,GAAa,SAAU,SAAUusG,GAAQhlE,QACzCvnC,GAAa,WAAY,iBAAkBgtG,GAAWzlE,QACtDvnC,GAAa,WAAY,MAAOmtG,GAAI5lE,QACpCvnC,GAAa,SAAU,YAAaqtG,GAAU9lE,QAC9CvnC,GAAa,WAAY,UAAWytG,GAAQlmE,QAC5CvnC,GAAa,aAAc,cAAeguG,GAAWzmE,QACrDvnC,GAAa,SAAU,WAAYiuG,GAAS1mE,QAC5CvnC,GAAa,WAAY,UAAWouG,GAAQ7mE,QAC5CvnC,GAAa,WAAY,uBAAwBquG,GAAW9mE,QAC5DvnC,GAAa,WAAY,cAAeqvG,GAAW9nE,QACnDvnC,GAAa,WAAY,oBAAqBsvG,GAAc/nE,QAC5DvnC,GAAa,SAAU,SAAU4vG,GAAOroE,QACxCvnC,GAAa,WAAY,YAAa8vG,GAAUvoE,QAChDvnC,GAAa,SAAU,QAAS2wG,GAAMppE,QACtCvnC,GAAa,WAAY,sBAAuB4wG,GAAmBrpE,QACnEvnC,GAAa,WAAY,uBAAwBgyG,GAAoBzqE,QACrEvnC,GAAa,WAAY,kBAAmB0yG,GAAenrE,QAC3DvnC,GAAa,WAAY,gBAAiB+yG,GAAaxrE,QACvDvnC,GAAa,WAAY,UAAWgzG,GAAQzrE,QAC5CvnC,GAAa,YAAa,eAAgBszG,GAAgB/rE,QAC1DvnC,GAAa,YAAa,UAAW60G,GAAWttE,QAChDvnC,GAAa,SAAU,WAAY+0G,GAAgBxtE,QACnDvnC,GAAa,YAAa,WAAY8nC,GAAQP,QAC9CvnC,GAAa,OAAQ,QAASk1G,GAAM3tE,QACpCvnC,GAAa,OAAQ,UAAWu2G,GAAKhvE,QACrCvnC,GAAa,SAAU,yBAA0Bw2G,GAAYjvE,QAC7DvnC,GAAa,WAAY,YAAay2G,GAASlvE,QAC/CvnC,GAAa,aAAc,uBAAwB+2G,GAAQxvE,QAC3DvnC,GAAa,WAAY,WAAYo3G,GAAY7vE,QACjDvnC,GAAa,WAAY,gBAAiBg4G,GAAUzwE,QACpDvnC,GAAa,WAAY,iBAAkBk4G,GAAc3wE,QACzDvnC,GAAa,WAAY,eAAgBu4G,GAAYhxE,QACrDvnC,GAAa,WAAY,cAAe++G,GAAWx3E,QACnDvnC,GAAa,WAAY,SAAU6/G,GAAOt4E,QC7HxCvnC,GAAa,cAAe,0ECkCrBovB,SAAW,OAEVqyF,EAAK,IAAI3gD,KACV4gD,aAAeD,EAEpBA,EAAGr8H,OAAOoB,IAAI,EAAK,GACnBi7H,EAAG14H,OAAS,GACZ04H,EAAGtlG,QAAU,EACbslG,EAAG9/C,WAAa,EAChB8/C,EAAG3/C,YAAc,MAEXymB,EAAS5xC,EAAKzzB,QAAQgqD,WAAW,IAAI3nD,IAGnCxoB,EAAQ,IAAIwkB,GAClBxkB,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,GAAO,GAAM,IACnD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,IAAQ,GAAM,GAAM,IAAIA,IAAQ,GAAM,KACpD8kG,EAAO1Z,cAAc9xE,EAAO,GAC5BA,EAAMvW,IAAI,IAAI/C,GAAO,GAAM,GAAM,IAAIA,GAAO,GAAM,KAClD8kG,EAAO1Z,cAAc9xE,EAAO,OAKvB,IAAItd,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,IAAoB,GAAhB5F,KAAKM,SAAkB,GAAsB,GAAhBN,KAAKM,SAAkB,GACpE2kC,EAAGnlB,MAAQ9f,KAAKM,SAAWN,KAAKggB,OAC1B+iB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,EAEbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,OACXguF,EAAU,IAAIj0F,GACpBgyD,EAAG7xE,MAAQ8zG,EACXA,EAAQ9zF,SAAyB,GAAhBn8B,KAAKM,SAAiB,EAAqB,GAAhBN,KAAKM,SAAiB,GAClEyiC,EAAKkrD,cAAcD,KAEdx/C,SAAS/uB,KAAKsjB,OAKhB,IAAIlkC,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpBomC,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,IAAoB,GAAhB5F,KAAKM,SAAkB,GAAsB,GAAhBN,KAAKM,SAAkB,GACpE2kC,EAAGnlB,MAAQ9f,KAAKM,SAAWN,KAAKggB,OAC1B+iB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,EAEbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,GACjB+rD,EAAG7xE,MAAQ,IAAI0e,GAA8B,GAAhB76B,KAAKM,SAAiB,GACnDyiC,EAAKkrD,cAAcD,KAEdx/C,SAAS/uB,KAAKsjB,OAKhB,IAAIlkC,EAAI,EAAGA,EAAI,GAAIA,IAAK,KACrBomC,EAAK,IAAIN,GACfM,EAAG52B,OAEH42B,EAAGve,SAAS9gB,IAAoB,GAAhB5F,KAAKM,SAAkB,GAAsB,GAAhBN,KAAKM,SAAkB,GACpE2kC,EAAGnlB,MAAQ9f,KAAKM,SAAWN,KAAKggB,OAC1B+iB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,EACbyyD,EAAGhsD,SAAW,GACdgsD,EAAG/rD,YAAc,OACXguF,EAAU,IAAIj0F,MACpBgyD,EAAG7xE,MAAQ8zG,EACPjwH,KAAKM,SAAW,IAClB2vH,EAAQrqH,IAAI,CACV,IAAI/C,IAAQ,EAAsB,EAAhB7C,KAAKM,SAAgB,EAAsB,EAAhBN,KAAKM,UAClD,IAAIuC,IAAQ,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,UACnD,IAAIuC,GAAO,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,UAClD,IAAIuC,GAAO,EAAsB,EAAhB7C,KAAKM,SAAgB,EAAsB,EAAhBN,KAAKM,iBAE9C,GAAIN,KAAKM,SAAW,GAAK,KACxBqJ,EAAQ,GACdA,EAAM,GAAK,IAAI9G,GAAO,EAAK,EAAsB,EAAhB7C,KAAKM,UACtCqJ,EAAM,GAAK,IAAI9G,IAAQ,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,UAC9DqJ,EAAM,GAAK,IAAI9G,GAAO,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,UAC7DqJ,EAAM,GAAK,IAAI9G,GAAO8G,EAAM,GAAGzK,EAAIyK,EAAM,GAAGzK,EAAGyK,EAAM,GAAG5B,EAAI4B,EAAM,GAAG5B,GACrE4B,EAAM,GAAGqO,QAAQhY,KAAKM,SAAW,EAAI,IACrCqJ,EAAM,GAAK,IAAI9G,GAAO8G,EAAM,GAAGzK,EAAIyK,EAAM,GAAGzK,EAAGyK,EAAM,GAAG5B,EAAI4B,EAAM,GAAG5B,GACrE4B,EAAM,GAAGqO,QAAQhY,KAAKM,SAAW,EAAI,IACrC2vH,EAAQrqH,IAAI+D,QAEZsmH,EAAQrqH,IAAI,CACV,IAAI/C,GAAO,EAAK,EAAsB,EAAhB7C,KAAKM,UAC3B,IAAIuC,IAAQ,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,UACnD,IAAIuC,GAAO,GAAsB,EAAhB7C,KAAKM,UAAiB,EAAsB,EAAhBN,KAAKM,YAGtDyiC,EAAKkrD,cAAcD,KAEdx/C,SAAS/uB,KAAKsjB,OAMfkC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,IACrBq/B,EAAGnlB,MAAQ,MACLijB,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,MACP00F,EAAU,IAAIj0F,GACpBgyD,EAAG7xE,MAAQ8zG,EACXA,EAAQ9zF,SAAS,EAAK,GACtB4G,EAAKkrD,cAAcD,KAEdx/C,SAAS/uB,KAAKsjB,OAIbkC,EAAK,IAAIN,GACfM,EAAG52B,OACH42B,EAAGve,SAAS9gB,IAAI,EAAK,QACfm9B,EAAOgzB,EAAKzzB,QAAQgqD,WAAWrnD,GAE/B+oD,EAAK,IAAIjsD,GACfisD,EAAGzyD,QAAU,MACPlf,EAAS,IAAIwe,GAAc,IACjCmzD,EAAG7xE,MAAQE,EACXA,EAAOtO,IAAInI,IAAI,EAAK,GACpBm9B,EAAKkrD,cAAcD,GACnB3xE,EAAOtO,IAAInI,KAAK,EAAK,GACrBm9B,EAAKkrD,cAAcD,GACnB3xE,EAAOtO,IAAInI,IAAI,EAAK,GACpBm9B,EAAKkrD,cAAcD,GACnB3xE,EAAOtO,IAAInI,IAAI,GAAM,GACrBm9B,EAAKkrD,cAAcD,GAEnBA,EAAGzyD,QAAU,MACP00F,EAAU,IAAIj0F,GACpBgyD,EAAG7xE,MAAQ8zG,EACXA,EAAQ9zF,SAAS,EAAK,IACtB4G,EAAKkrD,cAAcD,GACnBiiC,EAAQ9zF,SAAS,GAAK,GACtB4G,EAAKkrD,cAAcD,KAEdx/C,SAAS/uB,KAAKsjB,OAShB,IAAIg+F,EAAS,EAAGA,EAAShrE,EAAKvnB,SAAS9vC,SAAUqiI,IAC/CD,aAAa3hD,QAAQppB,EAAKvnB,SAASuyF,aAMrCz+F,QAAQ0+F,cAAcjrE,EAAK+qE,yEAGtB5yC,2CACCA,6CAIJ,IAAI+yC,SA7LmB3sD,ID3B0B3tB,QFK5D,IAAMhoD,GAAO,SAAU4O,GACrBkzH,GAAM,IAAIluC,GAAKhlF,EAAMiS,IACrBozE,OAAOsuC,sBAAsBpU,KAEzBA,GAAO,SAAPA,EAAiBv/G,GACrBqlF,OAAOsuC,sBAAsBpU,GAC7B2T,GAAIU,eAAe5zH,IAErBqlF,OAAOsuC,sBAAsBviI"}